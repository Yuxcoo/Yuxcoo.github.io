[{"title":"LeetCode每日一题2025-05-05","url":"/post/domino-and-tromino-tiling.html","content":"\n# [790. 多米诺和托米诺平铺](https://leetcode.cn/problems/domino-and-tromino-tiling/) M\n\n有两种形状的瓷砖：一种是 `2 x 1` 的多米诺形，另一种是形如 \"L\" 的托米诺形。两种形状都可以旋转。\n\n![lc-domino](https://s2.loli.net/2025/05/05/cmuQhnRz8l93qeI.jpg)\n\n给定整数 n ，返回可以平铺 `2 x n` 的面板的方法的数量。**返回对** `10⁹ + 7` **取模** 的值。\n\n平铺指的是每个正方形都必须有瓷砖覆盖。两个平铺不同，当且仅当面板上有四个方向上的相邻单元中的两个，使得恰好有一个平铺有一个瓷砖占据两个正方形。\n\n \n\n**示例 1:**\n\n![lc-domino1.jpg](https://s2.loli.net/2025/05/05/6VWZEnAtXxsgQcG.jpg)\n\n```\n输入: n = 3\n输出: 5\n解释: 五种不同的方法如上所示。\n```\n\n**示例 2:**\n\n```\n输入: n = 1\n输出: 1\n```\n\n \n\n**提示：**\n\n- `1 <= n <= 1000`\n\n\n\n## 问题分析\n\n我们要用两种瓷砖去完全铺满一个 $2 \\times n$ 的长条面板：\n\n1. **多米诺骨牌**（Domino）：尺寸 $2 \\times 1$，可横放也可竖放。\n2. **托米诺骨牌**（Tromino）的“L” 形：由三个小正方形组成一个“L”，可以旋转成 4 种方向。\n\n求：对于给定的 $n$，共有多少种不同的铺法？由于数量可能非常大，最后对 $10^9+7$ 取模。\n\n## 算法思路\n\n- $n=1$\n   只要竖放一个 $2\\times1$ 的多米诺，方法数 = 1。\n\n- $n=2$\n   面板是 $2\\times2$，可以：\n  1. 两个竖放的多米诺。\n  2. 两个横放的多米诺。\n      方法数 = 2。\n\n- $n=3$\n   面板是 $2\\times3$，枚举可得方法数 = 5。\n\n\n\n令：\n\n- $dp[i]$ = 铺满 $2\\times i$ 面板的方法数。\n\n我们尝试根据最后一列（第 $i$ 列）怎么“收尾”来分类。\n\n### 情况 A：最后竖着放一个多米诺\n\n- 那么前 $i-1$ 列要完整铺好：共有 $dp[i-1]$ 种。\n\n### 情况 B：最后两列都用横着的多米诺\n\n- 第 $i-1$ 和第 $i$ 列各放一块横多米诺：前 $i-2$ 列完整铺好 ⇒ $dp[i-2]$ 种。\n\n### 情况 C：托米诺 “L” 形\n\n托米诺 “L” 会占用两列并且在第 $i$ 列上留出一个“半空”位置，所以它的影响要比前两种复杂。为此，我们引入辅助状态：\n\n- $f[i]$ = “前 $i$ 列铺到了半步”（即第 $i$ 列多出一个格子没被覆盖，呈现“⊔”或“⊓”形状）的方法数。\n\n那么，可以得到两条递推：\n\n1. $dp[i]$ **的推导**\n\n   - A 情况贡献：$dp[i-1]$\n\n   - B 情况贡献：$dp[i-2]$\n\n   - C 情况：要用一个托米诺把从“半空”状态补齐过来。\n\n     - 如果前一步是“半空”$f[i-1]$（在第 $i-1$ 列空出一个格），那么可以放 2 种方向的托米诺把第 $i$ 列补满 ⇒ 贡献 $2\\,f[i-1]$。\n        所以：\n       $$\n       dp[i]=dp[i−1]+dp[i−2]+2f[i−1].\n       $$\n\n2. $f[i]$ **的推导**\n    要在第 $i$ 列形成“半空”状态，有两种方式：\n\n   - 在完整的前 $i-2$ 列（$dp[i-2]$ 种）末尾放一个托米诺，刚好留出一个半空。\n   - 在前一个也是半空 $f[i-1]$ 的基础上，放一个横多米诺扩展空位。\n      所以：\n\n   $$\n   f[i] = dp[i-2] + f[i-1].\n   $$\n\n我们可以把 $f$ 的式子代入 $dp$ 的式子，并做推导（略去具体代数），最终会得到一个只含 $dp$ 的简洁三项式：\n$$\ndp[i] = 2\\,dp[i-1] + dp[i-3].\n$$\n初始化：$dp[0]=1,dp[1]=1,dp[2]=2.$ ，对于 $i<0$ 的 $dp[i]$ 视为 0（方便推导）。\n\n这样，我们就只要维护前三个 $dp$ 值，就能一步步往后推。\n\n## 时间复杂度\n\n**时间复杂度**：每个 $i$ 只做常数次运算，总共 $O(n)$。\n\n**空间复杂度**：只用到常数个变量，$O(1)$。\n\n## 代码实现\n\n```python\nclass Solution:\n    def numTilings(self, n: int) -> int:\n        MOD = 10**9 + 7\n        # 边界\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        # 初始化 dp[0], dp[1], dp[2]\n        dp_i_3, dp_i_2, dp_i_1 = 1, 1, 2  # 分别对应 dp[0], dp[1], dp[2]\n        \n        # 从 i=3 推到 n\n        for i in range(3, n+1):\n            dp_i = (2 * dp_i_1 + dp_i_3) % MOD\n            # 滚动窗口\n            dp_i_3, dp_i_2, dp_i_1 = dp_i_2, dp_i_1, dp_i\n        \n        # 最终 dp[n] 存在 dp_i_1 中\n        return dp_i_1\n\n```\n\n每轮计算出 `dp_i = 2*dp[i-1] + dp[i-3]`，然后向前滚动一格。","tags":["Algorithm","组合数学","中等","动态规划","状态压缩"],"categories":["算法"]},{"title":"LeetCode每日一题2025-05-04","url":"/post/number-of-equivalent-domino-pairs.html","content":"\n# [1128. 等价多米诺骨牌对的数量](https://leetcode.cn/problems/number-of-equivalent-domino-pairs/) E\n\n给你一组多米诺骨牌 `dominoes` 。\n\n形式上，`dominoes[i] = [a, b]` 与 `dominoes[j] = [c, d]` **等价** 当且仅当 (`a == c` 且 `b == d`) 或者 (`a == d` 且 `b == c`) 。即一张骨牌可以通过旋转 `0` 度或 `180` 度得到另一张多米诺骨牌。\n\n在 `0 <= i < j < dominoes.length` 的前提下，找出满足 `dominoes[i]` 和 `dominoes[j]` 等价的骨牌对 `(i, j)` 的数量。\n\n \n\n**示例 1：**\n\n```\n输入：dominoes = [[1,2],[2,1],[3,4],[5,6]]\n输出：1\n```\n\n**示例 2：**\n\n```\n输入：dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]]\n输出：3\n```\n\n \n\n**提示：**\n\n- `1 <= dominoes.length <= 4 * 10⁴`\n- `dominoes[i].length == 2`\n- `1 <= dominoes[i][j] <= 9`\n\n\n\n## 问题分析\n\n- 给你一个多米诺骨牌列表 `dominoes`，每个骨牌是一个长度为 2 的数组 `[a, b]`。\n- 如果两张骨牌旋转后能完全一致，就称它们等价。\n- 例如 `[1,2]` 与 `[2,1]` 等价。我们要统计所有满足等价关系的骨牌对 `(i, j)` $(i < j)$ 的总数。\n\n## 算法思路\n\n1. **规范化（标准化）表示**\n   - 每张骨牌 `[a, b]`，将它变成有序对 `(min(a,b), max(a,b))`。\n   - 这样无论原来是 `[1,2]` 还是 `[2,1]`，都统一映射为为 `(1,2)`。\n\n2. **哈希表计数**\n   - 用一个字典（或 Python 的 `Counter`）记录每种“规范化后”的骨牌出现了多少次。\n   - 键（key）就是那个二元组，值（value）就是出现次数。\n\n3. **组合数学计算对数**\n\n   - 如果某种骨牌规范后出现了 $k$ 次，那么这 $k$ 张骨牌两两之间都能组成等价对，共有组合数\n     $$\n     \\binom{k}{2} \\;=\\;\\frac{k\\times (k-1)}{2}\n     $$\n\n   - 把所有不同骨牌规范的组合数累加，就是答案。\n\n## 时间复杂度\n\n- **时间复杂度**：遍历一次骨牌列表 $O(n)$，再遍历一次哈希表（最坏也是 $O(n)$），总体 $O(n)$。\n- **空间复杂度**：哈希表存储规范后骨牌的计数，最坏情况键值对有 $O(n)$ 个。\n\n## 代码分解\n\n1. 初始化计数字典\n\n   ```python\n   from collections import Counter\n   count = Counter()\n   ```\n\n2. 标准化并计数\n\n   ```python\n   for a, b in dominoes:\n       key = (a, b) if a <= b else (b, a) # 保证顺序\n       count[key] += 1\n   ```\n\n3. 组合数学求配对数\n\n   ```\n   for k in count.values():\n       if k > 1:\n           result += k*(k-1)//2\n   ```\n\n   $\\binom{k}{2}$ 的计算公式直接用整数运算实现\n\n## 代码实现\n\n```python\nclass Solution:\n    def numEquivDominoPairs(self, dominoes: list[list[int]]) -> int:\n        # 1. 用 Counter 创建一个空的哈希表\n        count = Counter()\n        \n        # 2. 遍历每一张骨牌\n        for a, b in dominoes:\n            # 2.1 规范化：用元组(key)表示，保证先小后大\n            if a <= b:\n                key = (a, b)\n            else:\n                key = (b, a)\n            # 2.2 对该 key 的出现次数 +1\n            count[key] += 1\n        \n        # 3. 统计所有规范对的组合数之和\n        result = 0\n        # 3.1 对哈希表中每一种规范对\n        for k in count.values():\n            # 只有 k>=2 时才会有配对\n            if k > 1:\n                # 组合数 C(k,2) = k*(k-1)//2\n                result += k * (k - 1) // 2\n        \n        # 4. 返回结果\n        return result\n\n```\n以 `[[1,2], [2,1], [3,4], [5,6]]` 为例：\n\n| 原始骨牌 | 规范化后 | 累计到哈希表中   |\n| -------- | -------- | ---------------- |\n| [1,2]    | (1,2)    | count[(1,2)] = 1 |\n| [2,1]    | (1,2)    | count[(1,2)] = 2 |\n| [3,4]    | (3,4)    | count[(3,4)] = 1 |\n| [5,6]    | (5,6)    | count[(5,6)] = 1 |\n\n最终哈希表 `count` 为：\n\n```pseudocode\n{\n  (1,2): 2,\n  (3,4): 1,\n  (5,6): 1\n}\n```\n\n接下来计算组合数：\n\n- 对 `(1,2)`，出现次数 $k=2$，组合数 $\\binom{2}{2} = 1$\n- `(3,4)` 与 `(5,6)` 都只出现过 1 次，不会贡献配对（因为 $\\binom{1}{2}=0$ ）\n\n所以总对数 = 1。","tags":["Algorithm","简单","组合数学","哈希表"],"categories":["算法"]},{"title":"LeetCode每日一题2025-05-03","url":"/post/minimum-domino-rotations-for-equal-row.html","content":"\n# [1007. 行相等的最少多米诺旋转](https://leetcode.cn/problems/minimum-domino-rotations-for-equal-row/) M\n\n在一排多米诺骨牌中，`tops[i]` 和 `bottoms[i]` 分别代表第 `i` 个多米诺骨牌的上半部分和下半部分。（一个多米诺是两个从 1 到 6 的数字同列平铺形成的 —— 该平铺的每一半上都有一个数字。）\n\n我们可以旋转第 `i` 张多米诺，使得 `tops[i]` 和 `bottoms[i]` 的值交换。\n\n返回能使 `tops` 中所有值或者 `bottoms` 中所有值都相同的最小旋转次数。\n\n如果无法做到，返回 `-1`.\n\n \n\n**示例 1：**\n\n![示例](https://s2.loli.net/2025/05/03/LcKUAD3wXMYTgsi.png)\n\n> 输入：tops = [2,1,2,4,2,2], bottoms = [5,2,6,2,3,2]\n> 输出：2\n> 解释： \n> 图一表示：在我们旋转之前， tops 和 bottoms 给出的多米诺牌。 \n> 如果我们旋转第二个和第四个多米诺骨牌，我们可以使上面一行中的每个值都等于 2，如图所示。 \n\n**示例 2：**\n\n> 输入：tops = [3,5,1,2,3], bottoms = [3,6,3,3,4]\n> 输出：-1\n> 解释： 在这种情况下，不可能旋转多米诺牌使一行的值相等。\n\n \n\n**提示：**\n\n- `2 <= tops.length <= 2 * 10⁴`\n- `bottoms.length == tops.length`\n- `1 <= tops[i], bottoms[i] <= 6`\n\n\n\n## 问题分析\n\n给定两条长度相同的数组 `tops` 和 `bottoms`，表示一排多米诺骨牌的上下数字。你可以对任意一张牌做“旋转”操作（即上下数字交换位置）。目标是让 **整条“上行”** 或 **整条“下行”** 的数字都相同，求所需的最少旋转次数；如果做不到，则返回 -1。\n\n## 算法思路\n\n假设最终我们要把上行全部变成某个数字 `x`。那么对于第 1 张牌，它转前在上行是 `tops[0]`，转后可能是拿下面的 `bottoms[0]` 过来。\n\n- 如果最终目标行全是 `x`，第 1 张牌要么原本上面就是 `x`（即 `tops[0] == x`），要么通过旋转后上面成为 `bottoms[0] == x`。\n- 因此，唯一可能的候选 `x` 就是 `{ tops[0], bottoms[0] }` 两个值之一。\n- 其它任何值作为目标，都不可能同时兼顾第 1 张牌。\n\n## 时间复杂度\n\n**时间复杂度**：$O(n)$，其中 $n$ 是多米诺数量。至多对两个候选各做一次「线性遍历」。\n\n**空间复杂度**：$O(1)$，只用了常数级额外变量（两个计数器和一个候选集合）。\n\n## 代码分解\n\n1. **确定候选目标值**\n    只可能让最终整行相同的值是第一张牌上或下的数字，记为 `x1 = tops[0]`、`x2 = bottoms[0]`。\n\n2. **对每个候选值 x，遍历整排牌**\n   - 用两个计数器 `rot_top` 和 `rot_bot` 分别记录：\n     - `rot_top`：若想让 **上行tops** 全部变为 `x`，需要旋转的次数；\n     - `rot_bot`：若想让 **下行bottoms** 全部变为 `x`，需要旋转的次数。\n   - 遍历索引 `i`，对每一张牌：\n     - 若 `tops[i]≠x` 且 `bottoms[i]≠x`，说明这张牌无论如何（原地或旋转）都无法在上行或下行出现 `x`，立即返回不可行（记为无穷大，最后结果取最小会被过滤）。\n     - 否则：\n       - **想让上行变成 x**：如果 `tops[i]≠x`，则必须旋转这一张，令 `rot_top++`。\n       - **想让下行变成 x**：如果 `bottoms[i]≠x`，则必须旋转这一张，令 `rot_bot++`。\n\n3. **取两条方案中的最小值**\n   - 对候选 `x1`、`x2` 分别计算后（要么把上行全换成 `x`，需要 `rot_top` 次旋转；\n     要么把下行全换成 `x`，需要 `rot_bot` 次旋转），\n   - 答案为其中较小的旋转次数；\n   - 若都是无穷大，则返回 `-1`。\n4. **小结**\n   1. 从 `{ tops[0], bottoms[0] }` 中拿到至多两个候选 `x`。\n   2. 对每个候选值调用上面“检查并计数”逻辑，得到一个旋转次数（或“无解”标记）。\n   3. 在这两个结果中取最小，若都是“无解”，则返回 -1，否则返回该最小值。\n\n## 代码实现\n\n```python\nfrom typing import List\n\nclass Solution:\n    def minDominoRotations(self, tops: List[int], bottoms: List[int]) -> int:\n        # 内部函数：给定目标 x，返回让上行或下行全为 x 的最少旋转次数\n        # 如果无解，则返回 float('inf')\n        def check(x: int) -> int:\n            rot_top = 0   # 让 tops 全为 x，需要的旋转次数\n            rot_bot = 0   # 让 bottoms 全为 x，需要的旋转次数\n\n            for t, b in zip(tops, bottoms):\n                # 如果这张牌两面都不是 x，就不可能通过任何旋转获得 x\n                if t != x and b != x:\n                    return float('inf')  # 无解\n\n                # 若上面不是 x，则必须旋转一次\n                if t != x:\n                    rot_top += 1\n                # 若下面不是 x，则必须旋转一次\n                if b != x:\n                    rot_bot += 1\n\n            # 返回两种方案的较小旋转次数\n            return min(rot_top, rot_bot)\n\n        # 仅需检查前第一张牌的两个面\n        candidates = {tops[0], bottoms[0]}\n        ans = float('inf')\n\n        # 分别试每个候选值\n        for x in candidates:\n            ans = min(ans, check(x))\n\n        # 若仍是无穷，说明两个候选都无解\n        return -1 if ans == float('inf') else ans\n\n```\n\n以 `tops = [2,1,2,4,2,2]`，`bottoms = [5,2,6,2,3,2]` 为例：\n\n- 候选集合：`{ 2, 5 }`\n\n试 `x = 2`\n\n| i    | tops[i] | bottoms[i] | tops[i]==2? | bottoms[i]==2? | rot_top 增量 | rot_bot 增量 |\n| ---- | ------- | ---------- | ----------- | -------------- | ------------ | ------------ |\n| 0    | 2       | 5          | 是          | 否             | 0            | 1            |\n| 1    | 1       | 2          | 否          | 是             | 1            | 0            |\n| 2    | 2       | 6          | 是          | 否             | 0            | 1            |\n| 3    | 4       | 2          | 否          | 是             | 1            | 0            |\n| 4    | 2       | 3          | 是          | 否             | 0            | 1            |\n| 5    | 2       | 2          | 是          | 是             | 0            | 0            |\n|      |         |            |             | **合计**       | **2**        | **3**        |\n\n试 `x = 5`\n\n检查到 `tops[1]=1` 且 `bottoms[1]=2` 都不是 5，立即判定无解（记作 ∞）。\n\n最终在 `{2, ∞}` 中取最小，就是 2。","tags":["Algorithm","枚举与剪枝","中等","贪心"],"categories":["算法"]},{"title":"LeetCode每日一题2025-05-02","url":"/post/push-dominoes.html","content":"\n# [838. 推多米诺](https://leetcode.cn/problems/push-dominoes/) M\n\n`n` 张多米诺骨牌排成一行，将每张多米诺骨牌垂直竖立。在开始时，同时把一些多米诺骨牌向左或向右推。\n\n每过一秒，倒向左边的多米诺骨牌会推动其左侧相邻的多米诺骨牌。同样地，倒向右边的多米诺骨牌也会推动竖立在其右侧的相邻多米诺骨牌。\n\n如果一张垂直竖立的多米诺骨牌的两侧同时有多米诺骨牌倒下时，由于受力平衡， 该骨牌仍然保持不变。\n\n就这个问题而言，我们会认为一张正在倒下的多米诺骨牌不会对其它正在倒下或已经倒下的多米诺骨牌施加额外的力。\n\n给你一个字符串 `dominoes` 表示这一行多米诺骨牌的初始状态，其中：\n\n- `dominoes[i] = 'L'`，表示第 `i` 张多米诺骨牌被推向左侧，\n- `dominoes[i] = 'R'`，表示第 `i` 张多米诺骨牌被推向右侧，\n- `dominoes[i] = '.'`，表示没有推动第 `i` 张多米诺骨牌。\n\n返回表示最终状态的字符串。\n\n \n\n**示例 1：**\n\n> 输入：dominoes = \"RR.L\"\n> 输出：\"RR.L\"\n> 解释：第一张多米诺骨牌没有给第二张施加额外的力。\n\n**示例 2：**\n\n![示例 2](https://s2.loli.net/2025/05/02/1rHAOVNqpifQEnD.png)\n\n> 输入：dominoes = \".L.R...LR..L..\"\n> 输出：\"LL.RR.LLRRLL..\"\n\n \n\n**提示：**\n\n- `n == dominoes.length`\n- 1 `<= n <=` $10^5$\n- `dominoes[i]` 为 `'L'`、`'R'` 或 `'.'`\n\n## 问题分析\n\n有n张多米诺骨牌排成一行。\n\n- 当推动一些骨牌向左或向右后，每秒倒向左边的骨牌会推倒其左侧相邻骨牌，\n- 倒向右边的骨牌会推倒其右侧相邻骨牌。\n- 如果竖立骨牌的左右两侧同时有骨牌倒下，则它保持竖立。\n\n求最后的骨牌倒向状态。\n\n## 算法思路\n\n### 1. 加入哨兵（Sentinel）\n\n- 我们在原串 `dominoes` 的最左端加入一个虚拟的 `'L'`，下标记为 `0`；\n- 在最右端加入一个虚拟的 `'R'`，下标记为 `n+1`。\n- 原字符串字符对应到新数组 `s` 的位置是 `1` 到 `n`。\n\n这样做的好处是：无论最左或最右一侧最初如何受力，都能统一用同一套逻辑处理，无需额外分支。\n\n> 原：   .  L  .  R  . . .  L  R  . .  L  . .\n> 索引： 1  2  3  4  5 6 7  8  9 10 11 12 13 14\n> s：   [L] .  L  .  R  . . .  L  R  . .  L  . . [R]\n> 索引：  0   1  2  3  4  5 6 7  8  9 10 11 12 13 14 15\n\n- `prev` 和 `prevChar` 初始为 `0`、`'L'`，对应哨兵左侧。\n- 我们的目标是，每当遇到一个非点字符（`'L'` 或 `'R'`）时，就处理上一次非点到当前之间的区间。\n\n### 2. 区间类型与对应填充策略\n\n设当前指针 `i`（范围 `1…n+1`）指向一个非点字符 `currChar = s[i]`，上一次非点在 `prev`、字符为 `prevChar`。区间 `(prev, i)`（不含端点）即是待处理段。共有三种情况：\n\n| prevChar | currChar | 说明                                                         | 区间填充方式                                                 |\n| -------- | -------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| L        | R        | 左侧向左，右侧向右——中间没人受力                             | 保持全部 `.` 不变                                            |\n| L        | L        | 两侧都向左——向左的力传导                                     | 整段填充为 `L`                                               |\n| R        | R        | 两侧都向右——向右的力传导                                     | 整段填充为 `R`                                               |\n| R        | L        | 左右相向——中间骨牌两端受力，向中央倒；中间正中如果恰好在平衡点，则不倒 | 从两端向中间：左半段填 `R`，右半段填 `L`；如果区间长度为奇数，中点保留 `.` |\n\n特别地，`R...L` 的中点保持直立是因为左右对等力量平衡。\n\n## 时间复杂度\n\n$O(n)$ ：一次从 `1` 扫描到 `n+1`，区间内填充合计仅做每个位置不超过一次写操作\n\n空间复杂度：$O(n)$，使用大小为 `n+2` 的辅助字符数组。\n\n## 代码分解\n\n1. **线性扫描 + 两个指针**\n    我们在字符串两端分别加上虚拟的多米诺骨牌，以简化边界处理：\n   - 在最左端加一个假想的 `L`（下标 `-1`），\n   - 在最右端加一个假想的 `R`（下标 `n`）。\n\n2. **记录上一次非点状态的位置和方向**\n   - 用 `prev` 存储上一个非点（`'L'` 或 `'R'`）的下标，\n   - 用 `prevChar` 存储对应的字符。\n\n3. **遍历**\n   - 当遇到下一个非点字符 `currChar`（下标 `i`）时，考察区间 `(prev, i)`：\n     - 如果 `prevChar == currChar`，则这一段内所有骨牌都倒向同一方向；\n     - 如果 `prevChar=='R'` 且 `currChar=='L'`，则中间部分向两端倒：左半段倒 `R`，右半段倒 `L`；\n     - 如果 `prevChar=='L'` 且 `currChar=='R'`，中间保持直立不动。\n     - 更新 `prev = i, prevChar = currChar`，继续扫描。\n\n## 代码实现\n\n```python\nclass Solution:\n    def pushDominoes(self, dominoes: str) -> str:\n        n = len(dominoes)\n        # 在头尾各加一个哨兵，简化边界\n        s = ['L'] + list(dominoes) + ['R']\n        prev = 0\n        prevChar = 'L'\n        \n        for i in range(1, n + 2):\n            currChar = s[i]\n            if currChar == '.':\n                continue\n            \n            # 区间 (prev, i)\n            if prevChar == currChar:\n                # 同向全填充\n                for k in range(prev + 1, i):\n                    s[k] = currChar\n            elif prevChar == 'R' and currChar == 'L':\n                # 两侧相向，中间向两端\n                left, right = prev + 1, i - 1\n                while left < right:\n                    s[left] = 'R'\n                    s[right] = 'L'\n                    left += 1\n                    right -= 1\n                # 如果 left == right，保持 '.'（平衡力）\n            # 如果是 L...R，保持不变\n            \n            prev = i\n            prevChar = currChar\n        \n        # 拼回原始长度\n        return ''.join(s[1:-1])\n\n```\n\n以 `\".L.R...LR..L..\"` 为例（原长 14），在数组 `s` 上的区间索引是 `1…14`，我们实际扫描到 `i=15` 才遇到最后的 `'R'` 哨兵。\n\n| 索引 i      | s[i] 内容 | 操作及说明                                                   | 更新后 prev 值 | 更新后 prevChar |\n| ----------- | --------- | ------------------------------------------------------------ | -------------- | --------------- |\n| 初始化      | \\-        | `s = ['L', '.', 'L', '.', 'R', '.', '.', '.', 'L', 'R', '.', '.', 'L', '.', '.', 'R']`，`prev = 0`，`prevChar = 'L'` | 0              | L               |\n| i=1         | .         | 跳过                                                         | 0              | L               |\n| i=2         | L         | 区间 `(0, 2)`，只有下标 1，`prevChar = 'L'`，`currChar = 'L'`，属于 `L...L` → 将 `s[1]` 填为 `L` | 2              | L               |\n| i=3         | .         | 跳过                                                         | 2              | L               |\n| i=4         | R         | 区间 `(2,4)`，下标 3，`prevChar = 'L'`，`currChar = 'R'`，属于 `L...R` → 保持 `s[3]='.'` | 4              | R               |\n| i=5 - i=8   | 全为 .    | 跳过                                                         | 4              | R               |\n| i=9         | L         | 区间 `(4,9)`，下标 5,6,7,8，`prevChar = 'R'`，`currChar = 'L'`，属于 `R...L`，长度 4，左右对称 → `s[5] = R`，`s[8] = L`；`s[6] = R`，`s[7] = L` | 9              | L               |\n| i=10        | R         | 区间 `(9,10)`，只有 `s[9.5?]` 无点 → 跳过。更新 `prev = 10`，`prevChar = 'R'` | 10             | R               |\n| i=11 - i=12 | .         | 跳过                                                         | 10             | R               |\n| i=13        | L         | 区间 `(10,13)`，下标 11,12，`R...L`，长度 2 → `s[11] = R`，`s[12] = L` | 13             | L               |\n| i=14        | .         | 跳过                                                         | 13             | L               |\n| i=15        | R         | 区间 `(13,15)`，下标 14，`L...R` → 保持 `'.'`                | 15             | R               |\n\n最终去掉两端哨兵，拼回结果就是 `\"LL.RR.LLRRLL..\"`","tags":["Algorithm","字符串处理","中等","贪心","双指针"],"categories":["算法"]},{"title":"LeetCode每日一题2025-05-01","url":"/post/maximum-number-of-tasks-you-can-assign.html","content":"\n# [2071. 你可以安排的最多任务数目](https://leetcode.cn/problems/maximum-number-of-tasks-you-can-assign/) H\n\n给你 `n` 个任务和 `m` 个工人。每个任务需要一定的力量值才能完成，需要的力量值保存在下标从 **0** 开始的整数数组 `tasks` 中，第 `i` 个任务需要 `tasks[i]` 的力量才能完成。每个工人的力量值保存在下标从 **0** 开始的整数数组 `workers` 中，第 `j` 个工人的力量值为 `workers[j]` 。每个工人只能完成 **一个** 任务，且力量值需要 **大于等于** 该任务的力量要求值（即 `workers[j] >= tasks[i]` ）。\n\n除此以外，你还有 `pills` 个神奇药丸，可以给 **一个工人的力量值** 增加 `strength` 。你可以决定给哪些工人使用药丸，但每个工人 **最多** 只能使用 **一片** 药丸。\n\n给你下标从 **0** 开始的整数数组`tasks` 和 `workers` 以及两个整数 `pills` 和 `strength` ，请你返回 **最多** 有多少个任务可以被完成。\n\n \n\n**示例 1：**\n\n> 输入：tasks = [3,2,1], workers = [0,3,3], pills = 1, strength = 1\n> 输出：3\n> 解释：\n> 我们可以按照如下方案安排药丸：\n>\n> - 给 0 号工人药丸。\n> - 0 号工人完成任务 2（0 + 1 >= 1）\n> - 1 号工人完成任务 1（3 >= 2）\n> - 2 号工人完成任务 0（3 >= 3）\n\n**示例 2：**\n\n> 输入：tasks = [5,4], workers = [0,0,0], pills = 1, strength = 5\n> 输出：1\n> 解释：\n> 我们可以按照如下方案安排药丸：\n>\n> - 给 0 号工人药丸。\n> - 0 号工人完成任务 0（0 + 5 >= 5）\n\n**示例 3：**\n\n> 输入：tasks = [10,15,30], workers = [0,10,10,10,10], pills = 3, strength = 10\n> 输出：2\n> 解释：\n> 我们可以按照如下方案安排药丸：\n>\n> - 给 0 号和 1 号工人药丸。\n> - 0 号工人完成任务 0（0 + 10 >= 10）\n> - 1 号工人完成任务 1（10 + 10 >= 15）\n\n**示例 4：**\n\n> 输入：tasks = [5,9,8,5,9], workers = [1,6,4,2,6], pills = 1, strength = 5\n> 输出：3\n> 解释：\n> 我们可以按照如下方案安排药丸：\n>\n> - 给 2 号工人药丸。\n> - 1 号工人完成任务 0（6 >= 5）\n> - 2 号工人完成任务 2（4 + 5 >= 8）\n> - 4 号工人完成任务 3（6 >= 5）\n\n \n\n**提示：**\n\n- `n == tasks.length`\n- `m == workers.length`\n- 1 `<= n, m <=` $5 * 10^4$\n- `0 <= pills <= m`\n- 0 `<= tasks[i], workers[j], strength <=` $10^9$\n\n## 问题分析\n\n- **任务**：有 $n$ 个任务，任务力量需求数组为 `tasks`；有 $m$ 名工人，力量数组为 `workers`。\n\n- **药丸**：你有 `pills` 颗药，每颗可以让一个工人的力量增加 `strength`，且每个工人最多只能吃一颗。\n\n- **目标**：在最优分配下，最多能完成多少个任务。\n\n## 算法思路\n\n1. **排序**\n   - 将 `tasks` 从小到大排序，编号后更容易按难度取子区间；\n   - 将 `workers` 从小到大排序，方便挑最强和二分查找。\n2. **二分答案** $k$\n   - 答案 $k$ 最多不会超过 $\\min(n, m)$。\n   - 我们在区间 $[0, \\min(n,m)]$ 上二分查找最大的可行 $k$。\n3. **可行性验证 `can_do(k)`**\n   - **取子集**：对尝试完成的前 $k$ 个最小任务 `tasks[0..k-1]`，对应后 $k$ 个最强工人 `workers[m-k..m-1]`。\n   - **维护有序容器**：把这 $k$ 名工人放入一个支持「删最大」「按需求二分查找最小满足」操作的有序结构（如 Python `bisect`+`list` 或者 `sortedcontainers.SortedList`）。\n   - **从 hardest 到 easiest**：为了节省药丸，我们先处理需求最高的任务。对每个任务 $t$：\n     - 如果容器中**最大力量** $\\ge t$，直接分配该工人（弹出最大），不消耗药丸。\n     - 否则，需要用药：找容器中**最小的**工人 $w$ 满足 $w + strength \\ge t$（用二分查找找第一个 $\\ge t - strength$），若找不到或药丸已用完，则失败；否则分配、药丸减一。\n   - 如果所有 $k$ 个任务都能分配完，`can_do(k)=True`，如果在分配过程中药丸数超过 `pills`，或找不到可用工人，则 `can_do(k)` 返回 False。\n\n## 时间复杂度\n\n1. **时间复杂度**\n\n   - 排序：$O(n\\log n + m\\log m)$\n\n   - 二分：$O(\\log \\min(n,m))$ 次可行性验证\n\n   - 每次验证：最多 $k$ 次删除/查找，每次 $O(\\log k)$，所以 $O(k\\log k)$\n\n   - **总计**：\n     $$\n     O\\bigl((n+m)\\log(n+m)\\;+\\;\\log\\min(n,m)\\times\\min(n,m)\\log m\\bigr).\n     $$\n\n2. **空间复杂度** : 排序原地排序外，额外使用 `O(m)` 存储可用工人列表。\n\n## 代码分解\n\n先解决最难的任务，这样能保证弱工人和药丸优先用于最“吃力”的配对，若连最难的都配不上，`k` 肯定不可行。\n\n使用 `sortedcontainers.SortedList`，支持 `sl.pop(-1)`、`sl.bisect_left()`、`sl.pop(idx)` 都是 $O(\\log k)$\n\n用「上取整」的 mid 方案：\n\n```python\nlo, hi = 0, min(n, m)\nwhile lo < hi:\n    mid = (lo + hi + 1) // 2\n    if can_do(mid):\n        lo = mid\n    else:\n        hi = mid - 1\nreturn lo\n\n```\n\n## 代码实现\n\n```python\nfrom sortedcontainers import SortedList\nfrom bisect import bisect_left\n\nclass Solution:\n    def maxTaskAssign(self, tasks, workers, pills, strength):\n        tasks.sort()\n        workers.sort()\n\n        def can_do(k):\n            # 取最强 k 工人，放入可排序列表\n            avail = SortedList(workers[-k:])\n            pills_left = pills\n            # 从最难任务到最简单\n            for t in reversed(tasks[:k]):\n                # 如果最强工人够力\n                if avail and avail[-1] >= t:\n                    avail.pop(-1)\n                else:\n                    # 用药分配\n                    if pills_left == 0:\n                        return False\n                    # 找最弱且加药后能胜任的工人,需要 w >= t - strength\n                    need = t - strength\n                    idx = avail.bisect_left(need)\n                    if idx == len(avail):\n                        return False\n                    # 分配并消耗\n                    avail.pop(idx)\n                    pills_left -= 1\n            return True\n        # 二分最大 k\n        lo, hi = 0, min(len(tasks), len(workers))\n        while lo < hi:\n            mid = (lo + hi + 1) // 2\n            if can_do(mid):\n                lo = mid\n            else:\n                hi = mid - 1\n        return lo\n\n```\n\n以`tasks = [3,2,1],` `workers = [0,3,3]`, `pills = 1, strength = 1`为例：\n\n| 二分过程         | 任务子集 | 工人子集 | 药丸使用情况 | 分配过程                                                     | 结果判断                                  |\n| ---------------- | -------- | -------- | ------------ | ------------------------------------------------------------ | ----------------------------------------- |\n| 初始状态(排序后) | \\[1,2,3] | \\[0,3,3] | 1            | -                                                            | -                                         |\n| 尝试 mid=2       | \\[1,2]   | \\[0,3,3] | 1            | 1. 较大任务 2 分配给最大工人 3 ≥ 2 → 不用药，弹出 3。<br>2. 任务 1 分配给最大工人 3 ≥ 1 → 不用药，弹出 3。 | 成功 → `can_do(2)=True`，二分上界提升到 2 |\n| 尝试 mid=3       | \\[1,2,3] | \\[0,3,3] | 1            | 1. 任务 3 分配给最大工人 3 ≥ 3 → 不用药，弹出 3，剩 `[0,3]`。<br>2. 任务 2 分配给最大工人 3 ≥ 2 → 不用药，弹出 3，剩 `[0]`。<br>3. 任务 1 分配给唯一工人 0 < 1 → 需要用药，查找最小 $w\\ge 1-1=0$，找到 0，用药后分配成功。 | 成功 → `can_do(3)=True`，最终答案 3       |","tags":["Algorithm","困难","贪心","二分查找","排序","有序集合"],"categories":["算法"]},{"title":"LeetCode每日一题2025-04-30","url":"/post/find-numbers-with-even-number-of-digits.html","content":"\n\n\n# [1295. 统计位数为偶数的数字](https://leetcode.cn/problems/find-numbers-with-even-number-of-digits/) E\n\n给你一个整数数组 `nums`，请你返回其中包含 **偶数** 个数位的数字的个数。\n\n \n\n**示例 1：**\n\n> 输入：nums = [12,345,2,6,7896]\n> 输出：2\n> 解释：\n> 12 是 2 位数字（位数为偶数） \n> 345 是 3 位数字（位数为奇数）\n> 2 是 1 位数字（位数为奇数） \n> 6 是 1 位数字 位数为奇数） \n> 7896 是 4 位数字（位数为偶数）\n> 因此只有 12 和 7896 是位数为偶数的数字\n\n**示例 2：**\n\n> 输入：nums = [555,901,482,1771]\n> 输出：1 \n> 解释： \n> 只有 1771 是位数为偶数的数字。\n\n \n\n**提示：**\n\n- `1 <= nums.length <= 500`\n- 1 `<= nums[i] <=` $10^5$\n\n\n\n## 算法思路\n\n1. **遍历**：对输入数组 `nums` 中的每个数字 `num` 进行遍历（共 `n` 个）。\n2. **计数位数**：\n   - 方法 A（数学方式）：不断除以 10 直至 `num` 为 0，统计除法次数。\n   - 方法 B（字符串方式）：将 `num` 转为字符串 `s = str(num)`，直接用 `len(s)` 获取位数。\n3. **判断奇偶**：如果位数 `digit_count % 2 == 0`，则计数器加 1。\n4. **返回结果**：遍历结束后输出计数器的值。\n\n## 时间复杂度\n\n方法 A：对每个数做除法操作，平均每个数的位数为 `d`（$d = O(\\log_{10}(num))$），总体为 $O(n·d)$。\n\n方法 B：字符串转换和长度计算也约为 $O(n·d)$。 由于 `num[i] ≤` $10^5$，`d ≤ 6`，故可视为 **线性** $O(n)$。\n\n空间复杂度：$O(1)$（忽略输出和输入空间）。\n\n## 代码实现\n\n```python\nfrom typing import List\n\nclass Solution:\n    def findNumbers(self, nums: List[int]) -> int:\n        count = 0\n        for num in nums:\n            # 方法 B：字符串方式统计位数\n            if len(str(num)) % 2 == 0:\n                count += 1\n        return count\n\n```\n\n","tags":["Algorithm","暴力搜索","数位处理","简单"],"categories":["算法"]},{"title":"LeetCode每日一题2025-04-29","url":"/post/count-subarrays-where-max-element-appears-at-least-k-times.html","content":"\n# [2962. 统计最大元素出现至少 K 次的子数组](https://leetcode.cn/problems/count-subarrays-where-max-element-appears-at-least-k-times/) M\n\n给你一个整数数组 `nums` 和一个 **正整数** `k` 。\n\n请你统计有多少满足 「 `nums` 中的 **最大** 元素」至少出现 `k` 次的子数组，并返回满足这一条件的子数组的数目。\n\n子数组是数组中的一个连续元素序列。\n\n \n\n**示例 1：**\n\n> 输入：nums = [1,3,2,3,3], k = 2\n> 输出：6\n> 解释：包含元素 3 至少 2 次的子数组为：[1,3,2,3]、[1,3,2,3,3]、[3,2,3]、[3,2,3,3]、[2,3,3] 和 [3,3] 。\n\n**示例 2：**\n\n> 输入：nums = [1,4,2,1], k = 3\n> 输出：0\n> 解释：没有子数组包含元素 4 至少 3 次。\n\n \n\n**提示：**\n\n- 1 `<= nums.length <=` $10^5$\n- 1 `<= nums[i] <=` $10^6$\n- 1 `<= k <=` $10^5$\n\n\n\n## 问题分析\n\n给定一个长度为 `n` 的整数数组 `nums` 和正整数 `k`，我们需要统计满足“子数组中数组 `nums` 的**最大元素**至少出现 `k` 次”的所有**连续子数组**的个数。\n\n- **全局最大值**：数组中所有元素的最大值，记作 `M = max(nums)`。\n- **子数组**：数组中任意一段连续的元素序列。\n- **目标**：统计所有子数组中，元素 `M` 出现次数 ≥ `k` 的子数组个数。\n\n直接枚举所有子数组会有 $O(n^2)$ 个，无法在 `n ≤` $10^5$ 的规模下通过。因此，需要一个 $O(n)$ 或 $O(n \\log n)$ 的方法。\n\n## 算法思路\n\n1. **全局最大值定位**：首先在数组 `nums` 中找到最大的元素 `M = max(nums)`。\n2. **子数组计数思路**：我们要统计所有包含元素 `M` 至少出现 `k` 次的连续子数组。\n3. **滑动窗口＋双指针**：统计“包含 M 出现次数 < k 的子数组数目”，记为 `cnt_less`。\n   - 用双指针 `left, right` 扩展窗口，维护窗口中 `M` 的出现次数 `count_M`。\n   - 每次将 `right` 向右移动，若 `nums[right] == M` 则 `count_M += 1`。\n   - 当 `count_M >= k` 时，窗口不再满足“<k”条件，需要移动 `left` 且在移动时相应地更新 `count_M`，直到 `count_M < k`。\n   - 对于每一个 `right`，当前满足 `< k` 的最长窗口长度是 `right - left + 1`，将其累加到 `cnt_less`。\n4. **总子数组数目**：$\\text {total}= \\frac{n(n+1)}2\\text.$\n5. **答案**：$\\text{answer} = \\text{total} - \\text{cnt\\_less}$，即所有子数组减去不满足条件的那些。\n\n## 时间复杂度\n\n**时间复杂度**：$O(n)$，`left` 和 `right` 指针各最多移动 $n$ 次。\n\n**空间复杂度**：$O(1)$，只使用常数级的额外变量。\n\n## 代码分解\n\n1. **找最大值** ：`M = max(nums)`\n\n2. **初始化**\n\n   ```python\n   n = len(nums)\n   left = 0\n   count_M = 0\n   cnt_less = 0\n   ```\n\n3. **滑动窗口循环**\n\n   ```python\n   for right in range(n):\n       if nums[right] == M:\n           count_M += 1\n       # 收缩左端，直到 count_M < k\n       while count_M >= k:\n           if nums[left] == M:\n               count_M -= 1\n           left += 1\n       # 累加以 right 结尾的不满足子数组数\n       cnt_less += (right - left + 1)\n   ```\n\n4. **计算并返回结果**\n\n   ```python\n   total = n * (n + 1) // 2\n   return total - cnt_less\n   ```\n\n## 代码实现\n\n```python\nclass Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        # 1. 找到全局最大值 M\n        M = max(nums)\n        # 2. 统计出现次数 < k 的子数组数（滑动窗口）\n        left = 0\n        count_M = 0   # 窗口中 M 的出现次数\n        cnt_less = 0  # 子数组中 M 出现次数 < k 的数量\n        # 3. 滑动窗口遍历所有可能的右端点\n        for right in range(n):\n            # 扩张窗口：若新加入元素是 M，则计数器 +1\n            if nums[right] == M:\n                count_M += 1\n            # 当窗口中 M 出现次数 >= k 时，收缩 left\n            while count_M >= k:\n                if nums[left] == M:\n                    count_M -= 1\n                left += 1\n            # 此时窗口 [left..right] 都是 < k，子数组数量 = 窗口长度\n            # 以 right 结尾的所有子数组的起点可以是 left, left+1, …, right\n            cnt_less += (right - left + 1)\n        # 4. 计算总子数组数并取差\n        total = n * (n + 1) // 2\n        return total - cnt_less\n\n```\n\n- 输入：`nums = [1,3,2,3,3]`, `k = 2`\n  - 全局最大值 `M = 3`\n  - 统计 `<2` 次的子数组数 `cnt_less = 15 - 6 = 9` （总子数组 15 个，满足条件 6 个）\n  - 返回 `15 - 9 = 6`，与题目示例一致。\n\n- 输入：`nums = [1,4,2,1]`, `k = 3`\n  - `M = 4`，在任何子数组中最多出现 1 次，均 <3\n  - `cnt_less = total = 10`，所以返回 `10 - 10 = 0`。","tags":["Algorithm","滑动窗口","中等","双指针","前缀和"],"categories":["算法"]},{"title":"LeetCode每日一题2025-04-28","url":"/post/count-subarrays-with-score-less-than-k.html","content":"\n# [2302. 统计得分小于 K 的子数组数目](https://leetcode.cn/problems/count-subarrays-with-score-less-than-k/) H\n\n一个数组的 **分数** 定义为数组之和 **乘以** 数组的长度。\n\n- 比方说，`[1, 2, 3, 4, 5]` 的分数为 `(1 + 2 + 3 + 4 + 5) * 5 = 75` 。\n\n给你一个正整数数组 `nums` 和一个整数 `k` ，请你返回 `nums` 中分数 **严格小于** `k` 的 **非空整数子数组数目**。\n\n**子数组** 是数组中的一个连续元素序列。\n\n \n\n**示例 1：**\n\n> 输入：nums = [2,1,4,3,5], k = 10\n> 输出：6\n> 解释：\n> 有 6 个子数组的分数小于 10 ：\n>\n> - [2] 分数为 2 * 1 = 2 。\n> - [1] 分数为 1 * 1 = 1 。\n> - [4] 分数为 4 * 1 = 4 。\n> - [3] 分数为 3 * 1 = 3 。 \n> - [5] 分数为 5 * 1 = 5 。\n> - [2,1] 分数为 (2 + 1) * 2 = 6 。\n> 注意，子数组 [1,4] 和 [4,3,5] 不符合要求，因为它们的分数分别为 10 和 36，但我们要求子数组的分数严格小于 10 。\n\n**示例 2：**\n\n> 输入：nums = [1,1,1], k = 5\n> 输出：5\n> 解释：\n> 除了 [1,1,1] 以外每个子数组分数都小于 5 。\n> [1,1,1] 分数为 (1 + 1 + 1) * 3 = 9 ，大于 5 。\n> 所以总共有 5 个子数组得分小于 5 。\n\n \n\n**提示：**\n\n- 1 `<= nums.length <=` $10^5$\n- 1 `<= nums[i] <=` $10^5$\n- 1 `<= k <=` $10^{15}$\n\n\n\n## 问题分析\n\n1. **分数 monotonic 性质**\n   对于正整数数组，子数组向右扩展会同时增加「和」与「长度」，因此分数\n   $$\n   \\text{score}(l, r) = \\left( \\sum_{i=l}^{r} \\text{nums}[i] \\right) \\times (r - l + 1)\n   $$\n   随着 $l$ 不变而 $r$ 增大时单调递增；同理，对于固定的右端点 $r$ ，若从左端点 $l$ 开始的子数组已满足 $\\left( \\sum_{i=l}^{r} \\text{nums}[i] \\right) \\times (r - l + 1)<k$，那么从任意 $l' > l$ 开始到 $r$ 的子数组也必然满足该不等式，当 $l$ 增大（窗口缩小）时，分数单调递减。\n\n2. **利用双指针维护合法区间**\n\n   - 用指针 `l`、`r` 表示当前窗口 $[l..r]$。\n   - 保证窗口内任何子数组（以任意左端点 $\\ge l$ 出发、以 $r$ 结尾）的分数都严格小于 $k$。\n   - 随着 `r` 从左向右遍历，将 `nums[r]` 加入当前窗口的累加和 `window_sum`。\n   - 若此时 `window_sum * (r-l+1) ≥ k`，则不断收缩左端 `l++`（并从 `window_sum` 中减去 `nums[l]`），直到重新满足 `< k`。\n\n3. **计数方式**\n    对于每个右端点 $r$，一旦窗口调到了最大合法大小 $[l..r]$，那么所有起点在 $l, l+1, \\dots, r$ 的子数组都合法，共有 $r - l + 1$ 个。\n\n## 算法思路\n\n1. 初始化：`l = 0, window_sum = 0, ans = 0`\n\n2. 遍历 `r` 从 `0` 到 `n-1`：\n\n   - `window_sum += nums[r]`\n\n   - 当 `window_sum * (r - l + 1) ≥ k` 时：\n\n     ```python\n     while l <= r and window_sum * (r - l + 1) >= k:\n         window_sum -= nums[l]\n         l += 1\n     ```\n\n   - 此时 `[l..r]` 中所有子数组都合法，其数量为 `r - l + 1`，加到 `ans`。.\n\n3. 遍历结束，返回 `ans`。\n\n## 时间复杂度\n\n**时间复杂度**：指针 `r` 从左向右遍历一遍：$O(n)$；`l` 最多也只会从 $0$ 移动到 $n-1$：$O(n)$；合计 $O(n)$。\n\n**空间复杂度**：只使用了若干常数变量，$O(1)$。\n\n## 代码分解\n\n```pseudocode\n初始化\n  l = 0            # 窗口左端\n  window_sum = 0   # 窗口 [l..r] 的元素和\n  ans = 0          # 累计答案\n\n遍历 r 从 0 到 n-1：\n  1. 将 nums[r] 加入窗口和\n     window_sum += nums[r]\n\n  2. 如果窗口分数 >= k，则移动 l 收缩：\n     while l ≤ r 且 window_sum * (r - l + 1) ≥ k:\n         window_sum -= nums[l]\n         l += 1\n     # 结束后，[l..r] 窗口恢复到「所有子数组分数 < k」状态\n\n  3. 以 r 为右端点的合法子数组有 (r - l + 1) 个，累加到 ans\n     ans += (r - l + 1)\n\n返回 ans\n\n```\n\n## 代码实现\n\n```python\nfrom typing import List\n\nclass Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        \"\"\"\n        返回 nums 中所有分数 < k 的非空子数组数量。\n        分数定义为 子数组之和 * 子数组长度。\n        \"\"\"\n        n = len(nums)\n        l = 0\n        window_sum = 0\n        ans = 0\n        \n        for r in range(n):\n            window_sum += nums[r]\n            # 收缩左端，直到窗口合法\n            while l <= r and window_sum * (r - l + 1) >= k:\n                window_sum -= nums[l]\n                l += 1\n            # 以 r 为右端点的所有子数组数\n            ans += (r - l + 1)\n        \n        return ans\n\n```\n\n以 `nums = [2,1,4,3,5]`, `k = 10` 为例：\n\n| 步骤 | r    | 加入 nums[r] | window_sum | l    | 检查 & 收缩                                                  | 合法子数组数 r−l+1r-l+1r−l+1 | 累计 ans |\n| ---- | ---- | ------------ | ---------- | ---- | ------------------------------------------------------------ | ---------------------------- | -------- |\n| 初始 | —    | —            | 0          | 0    | —                                                            | —                            | 0        |\n| 1    | 0    | +2 → 2       | 2          | 0    | $2*1<10$✓                                                    | 0–0：1 个                    | 1        |\n| 2    | 1    | +1 → 3       | 3          | 0    | $3*2<10$✓                                                    | 0–1：2 个                    | 3        |\n| 3    | 2    | +4 → 7       | 7          | 0    | $7*3=21\\ge 10\\times$ → 收缩 <br />– remove 2 → sum=5, l=1 <br />$5*2=10\\ge 10\\times$ → 收缩 <br />– remove 1 → sum=4, l=2 | 2–2：1 个                    | 4        |\n| 4    | 3    | +3 → 7       | 7          | 2    | $7*2=14\\ge 10\\times$ → 收缩 <br />– remove 4 → sum=3, l=3 <br />$3*1=3 < 10\\times$✓ | 3–3：1 个                    | 5        |\n| 5    | 4    | +5 → 8       | 8          | 3    | $8*2=16\\ge 10\\times$ → 收缩 <br />– remove 3 → sum=5, l=4 <br />$5*1=5 < 10$✓ | 4–4：1 个                    | 6        |","tags":["Algorithm","困难","滑动窗口","双指针","前缀和"],"categories":["算法"]},{"title":"LeetCode每日一题2025-04-27","url":"/post/count-subarrays-of-length-three-with-a-condition.html","content":"\n# [3392. 统计符合条件长度为 3 的子数组数目](https://leetcode.cn/problems/count-subarrays-of-length-three-with-a-condition/) E\n\n给你一个整数数组 `nums` ，请你返回长度为 3 的 子数组 的数量，满足第一个数和第三个数的和恰好为第二个数的一半。\n\n**子数组** 指的是一个数组中连续 **非空** 的元素序列。\n\n \n\n**示例 1：**\n\n> **输入：** nums = [1,2,1,4,1]\n>\n> **输出：** 1\n>\n> **解释：**\n>\n> 只有子数组 `[1,4,1]` 包含 3 个元素且第一个和第三个数字之和是中间数字的一半。number.\n\n**示例 2：**\n\n> **输入：** nums = [1,1,1]\n>\n> **输出： ** 0\n>\n> **解释：**\n>\n> `[1,1,1]` 是唯一长度为 3 的子数组，但第一个数和第三个数的和不是第二个数的一半。\n\n \n\n**提示：**\n\n- `3 <= nums.length <= 100`\n- `-100 <= nums[i] <= 100`\n\n## 问题分析\n\n**输入**：长度为 $n$ 的整数数组 `nums`，满足 $3 \\le n \\le 100$，元素取值 $[-100,100]$。\n\n**目标**：统计所有长度恰好为 3 的**连续子数组** $[a,b,c]$，使得\n$$\na+c=\\frac{b}{2}\\quad\\Longleftrightarrow\\quad2(a+c)=b.\n$$\n因为子数组长度固定且很小（仅 3），子数组个数仅 $n-2$，可线性枚举，每个子数组只涉及 3 个元素，检查条件恒为常数时间。\n\n## 算法思路\n\n1. **初始化**\n\n   - 计数器 `ans = 0`。\n\n2. **遍历“中间位置”**\n\n   - 令指针 $i$ 从 1 到 $n-2$（包含），那么第 $i$ 个元素就是子数组的中间元素 $b = \\text{nums}[i]$。\n\n   - 子数组的首尾分别是：\n     $$\n     a = \\text{nums}[i-1],\\quad c = \\text{nums}[i+1].\n     $$\n\n3. **判断并累加**\n\n   - 检查条件：\n     $$\n     2 \\times (a + c) == b.\n     $$\n\n   - 如果成立，`ans += 1`。\n\n4. **返回结果**\n\n   - 遍历结束后，`ans` 即为满足条件的子数组数量。\n\n## 时间复杂度\n\n**时间复杂度**：\n\n- 暴力枚举每个窗口需要 $O(n)$ 次检查，其中 $n = \\text{len}(nums)$，每次检查 $O(1)$，只需一次线性遍历，整体 $O(n)$。\n\n**空间复杂度**：\n\n- 仅使用常数级额外变量计数，$O(1)$。\n\n## 代码分解\n\n```pseudocode\nfunction countSubarrays(nums):\n    ans ← 0\n    for i from 1 to length(nums)-2:\n        a ← nums[i-1]\n        b ← nums[i]\n        c ← nums[i+1]\n        if 2*(a + c) == b:\n            ans ← ans + 1\n    return ans\n\n```\n\n- `range(1, len(nums)-1)`：因为窗口长度固定 3，首元素索引为 $i-1$，尾元素索引为 $i+1$，故 $i$ 取值区间为 $[1, n-2]$。\n\n- 每次循环只做一次加法、一次乘法、一次比较，都是 $O(1)$ 操作。\n\n## 代码实现\n\n```python\nfrom typing import List\n\nclass Solution:\n    def countSubarrays(self, nums: List[int]) -> int:\n        \"\"\"\n        统计所有长度=3 的连续子数组 [a, b, c] 满足 2*(a + c) == b。\n        时间复杂度：O(n)，空间复杂度：O(1)。\n        \"\"\"\n        ans = 0                     # 计数器，初始为 0\n        \n        # i 从 1 到 len(nums)-2，确保 i-1, i, i+1 都在数组内\n        for i in range(1, len(nums) - 1):\n            a = nums[i - 1]         # 子数组首元素\n            b = nums[i]             # 子数组中间元素\n            c = nums[i + 1]         # 子数组尾元素\n            \n            # 判断核心条件：2*(a + c) == b\n            if 2 * (a + c) == b:\n                ans += 1            # 条件满足时，计数器加 1\n        \n        return ans                  # 返回最终结果\n\n```\n\n","tags":["Algorithm","暴力搜索","简单","滑动窗口"],"categories":["算法"]},{"title":"LeetCode每日一题2025-04-26","url":"/post/count-subarrays-with-fixed-bounds.html","content":"\n# [2444. 统计定界子数组的数目](https://leetcode.cn/problems/count-subarrays-with-fixed-bounds/) H\n\n给你一个整数数组 `nums` 和两个整数 `minK` 以及 `maxK` 。\n\n`nums` 的定界子数组是满足下述条件的一个子数组：\n\n- 子数组中的 **最小值** 等于 `minK` 。\n- 子数组中的 **最大值** 等于 `maxK` 。\n\n返回定界子数组的数目。\n\n子数组是数组中的一个连续部分。\n\n \n\n**示例 1：**\n\n> 输入：nums = [1,3,5,2,7,5], minK = 1, maxK = 5\n> 输出：2\n> 解释：定界子数组是 [1,3,5] 和 [1,3,5,2] 。\n\n**示例 2：**\n\n> 输入：nums = [1,1,1,1], minK = 1, maxK = 1\n> 输出：10\n> 解释：nums 的每个子数组都是一个定界子数组。共有 10 个子数组。\n\n \n\n**提示：**\n\n- 2 `<= nums.length <=` $10^5$\n- 1 `<= nums[i], minK, maxK <=` $10^6$\n\n\n\n## 问题分析\n\n我们要统计所有「最小值＝`minK` 且 最大值＝`maxK`」的子数组个数。核心在于：\n\n1. **无效区间**：任何超出区间 $minK, maxK$ 的元素都会“破坏”子数组；我们记录它的最近位置 `last_invalid`，子数组一旦跨过此位置就一定包含不合格元素。\n\n2. **关键位置**：必须同时出现 `minK` 和 `maxK`，因此我们分别记录扫描到当前位置为止，最后一次出现 `minK` 的下标 `last_min`，以及最后一次出现 `maxK` 的下标 `last_max`。\n\n3. **结尾贡献**：对于每个位置 `i`，以它为结尾的所有合法子数组，起始位置 `j` 必须满足：\n\n   - `j > last_invalid`（子数组中不包含任何无效元素）\n   - 而且子数组要同时包含最近一次的 `minK` 和 `maxK`，也就是说 `j ≤ min(last_min, last_max)`。\n\n   因此，以 `i` 结尾的合法子数组数量是：\n\n   ```pseudocode\n   max(0, min(last_min, last_max) - last_invalid)\n   ```\n\n   累加到全局答案中即可。\n\n## 算法思路\n\n1. 定义三个指针/下标变量：\n   - `last_invalid`：上一个不满足 `minK ≤ nums[i] ≤ maxK` 的位置（初始化为 −1）。\n   - `last_min`：上一个等于 `minK` 的位置（初始化为 −1）。\n   - `last_max`：上一个等于 `maxK` 的位置（初始化为 −1）。\n2. 从左至右遍历数组，每到索引 `i`：\n   - 若 `nums[i] < minK` 或 `nums[i] > maxK`，则更新 `last_invalid = i`。\n   - 若 `nums[i] == minK`，则更新 `last_min = i`。\n   - 若 `nums[i] == maxK`，则更新 `last_max = i`。\n3. 以 `i` 结尾的所有合法子数组，起始点必须在 `(last_invalid, min(last_min, last_max)]` 之间，故可累加 `max(0, min(last_min, last_max) - last_invalid)` 到答案中。\n4. 最终累加得到所有定界子数组的数量。\n\n## 时间复杂度\n\n- 时间复杂度：$O(n)$，其中 $n$ 为数组长度\n- 空间复杂度：$O(1)$（仅使用常数额外变量）\n\n## 代码实现\n\n```python\nclass Solution:\n    def countSubarrays(self, nums: list[int], minK: int, maxK: int) -> int:\n        last_invalid = -1     # 最后一个不在 [minK, maxK] 范围内的索引\n        last_min = -1         # 最后一个出现 minK 的索引\n        last_max = -1         # 最后一个出现 maxK 的索引\n        count = 0             # 结果计数\n\n        for i, x in enumerate(nums):\n            # 1）如果 x 超出 [minK, maxK] 区间，则标记为无效\n            if x < minK or x > maxK:\n                last_invalid = i\n\n            # 2）记录最新出现 minK 和 maxK 的位置\n            if x == minK:\n                last_min = i\n            if x == maxK:\n                last_max = i\n\n            # 3）计算以 i 结尾的合法子数组个数\n            #    起始点 j 必须 > last_invalid，且 ≤ min(last_min, last_max)\n            valid_start = min(last_min, last_max)\n            if valid_start > last_invalid:\n                count += (valid_start - last_invalid)\n\n        return count\n\n```\n\n以 `nums = [1,3,5,2,7,5]`, `minK = 1`, `maxK = 5`为例：\n\n| i    | nums[i] | last_invalid | last_min | last_max | min(last_min, last_max) | 新增子数组 = max(0, min–last_invalid) | 累计 count |\n| ---- | ------- | ------------ | -------- | -------- | ----------------------- | ------------------------------------- | ---------- |\n| -1   | —       | -1           | -1       | -1       | —                       | —                                     | 0          |\n| 0    | 1       | -1           | 0        | -1       | -1                      | max(0, -1 − (-1)) = 0                 | 0          |\n| 1    | 3       | -1           | 0        | -1       | -1                      | max(0, -1 − (-1)) = 0                 | 0          |\n| 2    | 5       | -1           | 0        | 2        | 0                       | max(0, 0 − (-1)) = 1                  | 1          |\n| 3    | 2       | -1           | 0        | 2        | 0                       | max(0, 0 − (-1)) = 1                  | 2          |\n| 4    | 7 (>5)  | 4            | 0        | 2        | 0                       | max(0, 0 − 4) = 0                     | 2          |\n| 5    | 5       | 4            | 0        | 5        | 0                       | max(0, 0 − 4) = 0                     | 2          |\n\n- **i=2** 时，`nums[2]=5`，更新 `last_max=2`，此时 `min(last_min,last_max)=0`，新增子数组有 `1` 个，即 `[1,3,5]`。\n- **i=3** 时，`nums[3]=2`，没有更新 `last_min/last_max`，但依然可延伸前面那个“有效段”贡献 `1` 个，即 `[1,3,5,2]`。\n- **i=4** 时跳到 `7`（无效），`last_invalid=4`，后续以任何 `i≥4` 结尾的子数组都必须从 5 之后开始；此时在位置 5 上虽然又出现了 `maxK`，但最早的 `minK` 还是在 0，所以 `min(last_min,last_max)=0≤ last_invalid=4`，无有效子数组。\n\n最终总数为 **2**。\n\n**边界**\n\n1. **minK == maxK**\n   算法依然适用，此时要求子数组内所有元素都等于同一个值 `K`，也就统计所有连续等于 `K` 的子数组个数。\n2. **数组中无 minK 或 maxK**\n   某一关键位置永远为 −1，则 `min(last_min,last_max) = −1`，每次贡献都为 0，最终答案 0。\n3. **整型溢出**\n   累加次数最多是 $\\mathcal{O}(n^2/2)$ 级别（当所有子数组都合法时），对于 n≤ $10^5$，要用 64 位整型（Python 中 int 自动大整型）。\n\n","tags":["Algorithm","困难","滑动窗口","双指针"],"categories":["算法"]},{"title":"LeetCode每日一题2025-04-25","url":"/post/count-of-interesting-subarrays.html","content":"\n# [2845. 统计趣味子数组的数目](https://leetcode.cn/problems/count-of-interesting-subarrays/) M\n\n给你一个下标从 **0** 开始的整数数组 `nums` ，以及整数 `modulo` 和整数 `k` 。\n\n请你找出并统计数组中 **趣味子数组** 的数目。\n\n如果 **子数组** `nums[l..r]` 满足下述条件，则称其为 **趣味子数组** ：\n\n- 在范围 `[l, r]` 内，设 `cnt` 为满足 `nums[i] % modulo == k` 的索引 `i` 的数量。并且 `cnt % modulo == k` 。\n\n以整数形式表示并返回趣味子数组的数目。\n\n**注意：** 子数组是数组中的一个连续非空的元素序列。\n\n \n\n**示例 1：**\n\n> 输入：nums = [3,2,4], modulo = 2, k = 1\n> 输出：3\n> 解释：在这个示例中，趣味子数组分别是： \n> 子数组 nums[0..0] ，也就是 [3] 。 \n>\n> - 在范围 [0, 0] 内，只存在 1 个下标 i = 0 满足 nums[i] % modulo == k 。\n> - 因此 cnt = 1 ，且 cnt % modulo == k 。\n> 子数组 nums[0..1] ，也就是 [3,2] 。\n> - 在范围 [0, 1] 内，只存在 1 个下标 i = 0 满足 nums[i] % modulo == k 。\n> - 因此 cnt = 1 ，且 cnt % modulo == k 。\n> 子数组 nums[0..2] ，也就是 [3,2,4] 。\n> - 在范围 [0, 2] 内，只存在 1 个下标 i = 0 满足 nums[i] % modulo == k 。\n> - 因此 cnt = 1 ，且 cnt % modulo == k 。\n> 可以证明不存在其他趣味子数组。因此，答案为 3 。\n\n**示例 2：**\n\n> 输入：nums = [3,1,9,6], modulo = 3, k = 0\n> 输出：2\n> 解释：在这个示例中，趣味子数组分别是： \n> 子数组 nums[0..3] ，也就是 [3,1,9,6] 。\n>\n> - 在范围 [0, 3] 内，只存在 3 个下标 i = 0, 2, 3 满足 nums[i] % modulo == k 。\n> - 因此 cnt = 3 ，且 cnt % modulo == k 。\n> 子数组 nums[1..1] ，也就是 [1] 。\n> - 在范围 [1, 1] 内，不存在下标满足 nums[i] % modulo == k 。\n> - 因此 cnt = 0 ，且 cnt % modulo == k 。\n> 可以证明不存在其他趣味子数组，因此答案为 2 。\n\n \n\n**提示：**\n\n- 1 `<= nums.length <=` $10^5$\n- 1 `<= nums[i] <=` $10^9$\n- 1 `<= modulo <=` $10^9$\n- `0 <= k < modulo`\n\n\n\n## 问题分析\n\n我们要统计子数组中满足以下两个条件的子数组个数：\n\n- 在子数组范围内，满足 `nums[i] % modulo == k` 的元素个数记为 `cnt`\n- 且 `cnt % modulo == k`\n\n## 算法思路\n\n1. 为了更方便地计数，我们先把原数组 `nums` 转换成一个二值数组 `b`：\n\n   ```python\n   b[i] = 1 if nums[i] % modulo == k else 0\n   ```\n\n   此时，任意子数组 `[l..r]` 中满足条件的元素个数\n\n   就是 `b[l] + b[l+1] + … + b[r]`。\n\n2. 引入**前缀和** + **模运算**\n\n   定义前缀和数组 `P`，并对 `modulo` 取模，使得计算更简单：\n\n   ```pseudocode\n   P[0] = 0\n   P[i] = (b[0] + b[1] + … + b[i-1]) % modulo    （1 ≤ i ≤ n）\n   ```\n\n   - 注意：`P[i]` 表示前 `i` 个元素（即 `b[0..i-1]`）的和 mod `modulo`\n\n   那么子数组 `[l..r]` 的“有趣计数” `cnt = b[l] + … + b[r]`，可以写成：\n\n   ```pseudocode\n   cnt = (P[r+1] - P[l] + modulo) % modulo\n   ```\n\n   我们需要 `cnt % modulo == k`，即\n\n   ```pseudocode\n   (P[r+1] - P[l]) % modulo == k\n   ⇔ P[r+1] ≡ P[l] + k   (modulo)\n   ⇔ P[l] ≡ P[r+1] - k   (modulo)\n   ```\n\n3. 利用**哈希表**计数\n\n   由上面等式可知：在遍历到位置 `r`（即计算出 `P[r+1]`）时，我们只要知道有多少个 `l < r+1` 使得\n   $$\n   P[l] \\equiv (P[r+1] - k) \\bmod \\text{modulo}\n   $$\n   即可将这些子数组都计入答案。因此，我们用一个哈希表 `cntMap` 来维护“每种前缀和出现的次数”：\n\n   - **键**：某个值 `v` 表示前缀和 `P[*] = v`\n   - **值**：该前缀和出现了多少次\n\n## 时间复杂度\n\n**时间复杂度**：\n\n- 遍历一次数组，共 `n` 步\n- 每步中哈希表的查询与更新均摊 O(1) → 总体 O(n)\n\n**空间复杂度**：哈希表 `cntMap` 最多存储 `O(min(n, modulo))` 个不同的前缀和值 → 最坏 O(n)，通常远小于 n\n\n## 代码分解\n\n1. 初始化\n\n   ```python\n   cntMap = defaultdict(int)\n   cntMap[0] = 1\n   cur = 0    # 当前前缀和 P[i]（初始化为 P[0]）\n   ans = 0\n   ```\n\n   - `cntMap[0] = 1`：表示空前缀（即 `P[0]`）出现 1 次，便于统计以开头就满足条件的子数组\n\n2. 遍历数组\n\n   对于每个 `x = nums[i]`，更新：\n\n   ```python\n   if x % modulo == k:\n       cur = (cur + 1) % modulo\n   # 此时 cur = P[i+1]\n   ```\n\n3. 查询并累加\n\n   计算目标前缀和值：\n\n   ```python\n   target = (cur - k + modulo) % modulo\n   ans += cntMap[target]\n   ```\n\n   这一步相当于“找到所有 l，使得 P[l] == target”，将其数量直接加到答案中\n\n4. 更新哈希表\n\n   ```python\n   cntMap[cur] += 1\n   ```\n\n   将当前前缀和也记入哈希表，以便后续作为 `l` 被使用\n\n遍历结束后，`ans` 即为所有“趣味子数组”的总数\n\n## 代码实现\n\n```python\nfrom collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def countInterestingSubarrays(self, nums: List[int], modulo: int, k: int) -> int:\n        # b[i] = 1 if nums[i] % modulo == k else 0\n        # 前缀和计数映射\n        cntMap = defaultdict(int)\n        cntMap[0] = 1    # 初始：空前缀和为 0 出现过一次\n        \n        cur = 0          # 当前前缀和（modulo 取模后）\n        ans = 0\n        \n        for x in nums:\n            # 转换 b[i] 并更新前缀和\n            if x % modulo == k:\n                cur = (cur + 1) % modulo\n            \n            # 计算能与当前前缀和配对的目标值\n            target = (cur - k + modulo) % modulo\n            ans += cntMap[target]\n            \n            # 记录当前前缀和出现次数\n            cntMap[cur] += 1\n        \n        return ans\n\n```\n\n以 `nums = [3,2,4]，modulo = 2，k = 1` 为例：\n\n| i    | nums[i] | nums[i]%2==1? | b[i] | cur (P[i+1]) | target=(cur−k)%2 | cntMap before | 新增 ans | cntMap after |\n| ---- | ------- | ------------- | ---- | ------------ | ---------------- | ------------- | -------- | ------------ |\n| 初始 |         |               |      | cur = 0      |                  | {0:1}         | 0        | {0:1}        |\n| i=0  | 3       | 是            | 1    | (0+1)%2 = 1  | (1-1)%2 = 0      | {0:1}         | +1 → 1   | {0:1, 1:1}   |\n| i=1  | 2       | 否            | 0    | (1+0)%2 = 1  | (1-1)%2 = 0      | {0:1,1:1}     | +1 → 2   | {0:1, 1:2}   |\n| i=2  | 4       | 否            | 0    | (1+0)%2 = 1  | (1-1)%2 = 0      | {0:1,1:2}     | +1 → 3   | {0:1, 1:3}   |\n\n- **i=0**：`cur=1`，`target=0`，`cntMap[0]=1`，`ans=1`\n\n- **i=1**：`cur=1`，`target=0`，`cntMap[0]=1`，`ans=2`\n\n- **i=2**：`cur=1`，`target=0`，`cntMap[0]=1`，`ans=3`","tags":["Algorithm","数据结构","中等","哈希表","前缀和"],"categories":["算法"]},{"title":"LeetCode每日一题2025-04-24","url":"/post/count-complete-subarrays-in-an-array.html","content":"\n# [2799. 统计完全子数组的数目](https://leetcode.cn/problems/count-complete-subarrays-in-an-array/) M\n\n给你一个由 **正** 整数组成的数组 `nums` 。\n\n如果数组中的某个子数组满足下述条件，则称之为 **完全子数组** ：\n\n- 子数组中 **不同** 元素的数目等于整个数组不同元素的数目。\n\n返回数组中 **完全子数组** 的数目。\n\n**子数组** 是数组中的一个连续非空序列。\n\n \n\n**示例 1：**\n\n> **输入**：nums = [1,3,1,2,2]\n> **输出**：4\n> **解释**：完全子数组有：[1,3,1,2]、[1,3,1,2,2]、[3,1,2] 和 [3,1,2,2] 。\n\n**示例 2：**\n\n> **输入**：nums = [5,5,5,5]\n> **输出**：10\n> **解释**：数组仅由整数 5 组成，所以任意子数组都满足完全子数组的条件。子数组的总数为 10 。\n\n \n\n**提示：**\n\n- `1 <= nums.length <= 1000`\n- `1 <= nums[i] <= 2000`\n\n\n\n## 问题分析\n\n- 给定正整数数组 `nums`，长度为 `n`（$\\le 1000$）。\n\n- 记数组 `nums` 中 **不同** 元素的总数为 $K$。\n\n- 我们需要统计「子数组中不同元素数 **等于**$K$」的子数组个数。\n\n## 算法思路\n\n*暴力枚举*：枚举左端点 $i\\text{ }(0\\cdots n-1)$ ，再枚举右端点 $j\\text{ }(i\\cdots n-1)$，对每个子数组 `nums[i:j+1]` 用哈希或 `set` 统计不同元素数，再对比是否等于 $K$。\n\n时间复杂度：\n\n- 枚举子数组一共 $O(n^2)$\n- 每个子数组去重也要 $O(n)$\n- 合计 $O(n^3)$，在 $n=1000$ 时是不可行的（$10^9$ 级别的操作）。\n\n> 暴力+优化也可通过测试：采用双重循环遍历所有可能的子数组，并检查每个子数组是否符合条件，对于每一个起始索引 `i`，逐步扩展结束索引 `j`，使用集合记录当前子数组中的元素。一旦集合大小达到整个数组的不同元素数量，则计数加一；若超过该数量则提前终止内层循环，时间复杂度最坏为$O(n^2)$\n>\n> ```python\n> class Solution:\n>     def countCompleteSubarrays(self, nums: List[int]) -> int:\n>         total_unique = len(set(nums))\n>         if total_unique == 0:\n>             return 0\n>         \n>         K = total_unique\n>         result = 0\n>         n = len(nums)\n>         \n>         for i in range(n):\n>             current_set = set()\n>             for j in range(i, n):\n>                 current_set.add(nums[j])\n>                 if len(current_set) == K:\n>                     result += 1\n>                 elif len(current_set) > K:\n>                     break  # 一旦超出所需的唯一计数，就不需要检查其他元素\n>         return result\n> \n> ```\n\n\n\n**我们令函数**\n$$\nF(k) = \\text{“不同元素数} \\leq k \\text{”的子数组数量}.\n$$\n则恰好等于 $K$ 的子数组数目\n$$\n\\#\\{\\text{distinct} = K\\} = F(K) - F(K - 1).\n$$\n所有「不同数 $\\le K$」的子数组共 $F(K)$ 个，\n\n但其中也包括「不同数 $\\le K−1$」的 $F(K-1)$ 个，\n\n二者相减，即剩下「不同数恰好 = $K$」的部分。\n\n\n\n使用**滑动窗口 + 双指针**：\n\n1. **窗口定义**\n   - 左指针 `i`，右指针 `j`，初始都指向 0。\n   - 窗口 `nums[i…j]` 内维护哈希表 `count`，记录每个数字出现的次数。\n   - 变量 `distinct` 表示当前窗口内 **不同** 元素的个数。\n2. **右指针扩展**\n   - 遍历 `j` 从 0 到 $n-1$：\n     - 将 `nums[j]` 加入窗口：若原来 `count[nums[j]]==0`，则 `distinct += 1`；再 `count[nums[j]] += 1`。\n3. **左指针收缩**\n   - **当** `distinct > k` 时，需要不断移动左指针 `i`：\n     - 从窗口移出 `nums[i]`：`count[nums[i]] -= 1`；若 `count[nums[i]]` 变为 0，则 `distinct -= 1`；然后 `i += 1`\n   - 收缩后，窗口再次保证 `distinct ≤ k`。\n4. **计数子数组**\n   - 对于每一个新的 `j` 位置，**当前窗口** 所包含的所有合法子数组（以 `j` 为右端）数量就是窗口长度：`j - i + 1`。\n     - 因为任意左端点 $L$ 满足 $i \\le L \\le j$，子数组 `nums[L…j]` 都有 `distinct ≤ k`。\n5. **累加结果**\n   - 对每个 `j`，将 `j - i + 1` 累加到 `res`，最终 `res = F(k)`。\n\n以 `nums = [1,3,1,2,2]`，$k=2$ 为例，计算「不同数 $\\le 2$」的子数组数：\n\n| 步骤   | j    | 加入 nums[j]   | window                     | distinct     | i    | 新增子数组数 j−i+1 | 累计 res |\n| ------ | ---- | -------------- | -------------------------- | ------------ | ---- | ------------------ | -------- |\n| 初始化 | —    | —              | []                         | 0            | 0    | —                  | 0        |\n| 1      | 0    | 1              | [1]                        | 1            | 0    | 0−0+1 = 1          | 1        |\n| 2      | 1    | 3              | [1,3]                      | 2            | 0    | 1−0+1 = 2          | 3        |\n| 3      | 2    | 1              | [1,3,1]                    | 2            | 0    | 2−0+1 = 3          | 6        |\n| 4      | 3    | 2 → distinct=3 | [1,3,1,2] → 收缩 → [3,1,2] | 2 → 经过收缩 | 1    | 3−1+1 = 3          | 9        |\n| 5      | 4    | 2              | [3,1,2,2]                  | 3→收缩→2     | 2    | 4−2+1 = 3          | 12       |\n\n最终我们得到 `F(2) = 12`。\n类似地可以算出 `F(1)`，最后 `F(2) - F(1)` 就是「不同数恰好 $=2$」的子数组数。\n\n## 时间复杂度\n\n- **时间复杂度**：一次 `atMost` 为 $O(n)$，每个元素最多进出窗口各一次共两次，故 $O(n)$\n- **空间复杂度**：哈希表存储最多 $n$ 个键，故 $O(n)$\n\n## 代码分解\n\n1. 用「$\\le K$」和「$\\le K−1$」之差得到「$=K$」。\n\n2. 滑动窗口维护「不同元素数 $\\le k$」的区间，通过左右指针一遍扫描完成。\n\n3. 累加 `(j - i + 1)` 即可统计当前右端下所有合法子数组。\n\n## 代码实现\n\n```python\nclass Solution:\n    def countCompleteSubarrays(self, nums):\n        # 整体不同元素个数\n        K = len(set(nums))\n\n        # 计算「不同元素 ≤ k」的子数组数量\n        def atMost(k):\n            count = {}       # 哈希表：元素 -> 频次\n            res = 0\n            distinct = 0     # 当前窗口中不同元素数\n            left = 0         # 窗口左指针\n            for right, x in enumerate(nums):\n                # 右指针加入\n                if count.get(x, 0) == 0:\n                    distinct += 1\n                count[x] = count.get(x, 0) + 1\n\n                # 如果超过 k，左指针收缩\n                while distinct > k:\n                    y = nums[left]\n                    count[y] -= 1\n                    if count[y] == 0:\n                        distinct -= 1\n                    left += 1\n\n                # 以 right 为结尾的「不同元素 ≤ k」子数组有 (right - left + 1) 个\n                res += right - left + 1\n\n            return res\n\n        # 答案 = 至多 K 不同 − 至多 (K-1) 不同\n        return atMost(K) - atMost(K - 1)\n\n```\n\n","tags":["Algorithm","滑动窗口","中等","哈希表","双指针"],"categories":["算法"]},{"title":"LeetCode每日一题2025-04-23","url":"/post/count-largest-group.html","content":"\n# [1399. 统计最大组的数目](https://leetcode.cn/problems/count-largest-group/) E\n\n给你一个整数 `n` 。请你先求出从 `1` 到 `n` 的每个整数 10 进制表示下的数位和（每一位上的数字相加），然后把数位和相等的数字放到同一个组中。\n\n请你统计每个组中的数字数目，并返回数字数目并列最多的组有多少个。\n\n \n\n**示例 1：**\n\n> 输入：n = 13\n> 输出：4\n> 解释：总共有 9 个组，将 1 到 13 按数位求和后这些组分别是：\n> [1,10]，[2,11]，[3,12]，[4,13]，[5]，[6]，[7]，[8]，[9]。总共有 4 个组拥有的数字并列最多。\n\n**示例 2：**\n\n> 输入：n = 2\n> 输出：2\n> 解释：总共有 2 个大小为 1 的组 [1]，[2]。\n\n**示例 3：**\n\n> 输入：n = 15\n> 输出：6\n\n**示例 4：**\n\n> 输入：n = 24\n> 输出：5\n\n \n\n**提示：**\n\n- 1 `<= n <=` $10^4$\n\n\n\n## 问题分析\n\n给定一个整数 `n`，计算从1到`n`的每个数字的十进制位数和，并将具有相同位数和的数字分组。统计各组大小并找出最大值出现的次数。\n\n## 算法思路\n\n1. **计算每位数字的和**：遍历每个数字 `i`，将各位相加得到其和。\n2. **统计每种和的频率**：使用字典记录每个位数和对应有多少个数字。\n3. 找出最大组大小及对应的组数量：\n   - 找出所有组中的最大组大小。\n   - 统计有多少个不同的位数和的组达到该最大值。\n\n## 时间复杂度\n\n- **计算位数和**：对于每个数字 $i$，分解其各位需要 $O(\\log i)$ 的时间（由于每次除以10）。总时间为 $O(n \\times \\log n)$。\n- **统计与查找最大值**：遍历所有键值对的时间为 $O(k)$，其中 $k$ 是不同位数和的组的数量。在最坏情况下 $k$ 约为 `37`（例如数字 `9999` 的各位和是 `9+9+9+9 = 36`），因此这部分可以视为常量时间。\n\n总的时间复杂度：$O(n \\log n)$，对于 `n ≤` $10^4$ 是可接受的。\n\n- 使用字典存储不同位数和对应的计数值，空间复杂度为 $O(k)$。最坏情况下 $k \\approx O(\\log n)$（例如所有数字位数和都唯一），因此是**线性空间**。\n\n## 代码分解\n\n1. 初始化字典`groups`\n2. 从1遍历到n，计算 i 的数位和，在 `groups` 中将对应键的计数加 1\n3. 计算出最大频次 `max_size`\n4. 遍历 `groups`，统计有多少个键的值等于 `max_size` 并返回\n\n## 代码实现\n\n```python\nfrom collections import defaultdict\n\nclass Solution:\n    def countLargestGroup(self, n: int) -> int:\n        # 使用字典统计每个数位和出现的次数\n        groups = defaultdict(int)\n        \n        for i in range(1, n + 1):\n            # 计算当前数字i的十进制各位之和\n            digit_sum = sum(map(int, str(i)))\n            groups[digit_sum] += 1\n        \n        if not groups:\n            return 0\n        \n        # 找出最大的组大小\n        max_size = max(groups.values())\n        \n        # 统计有多少个组达到了这个最大值\n        return sum(1 for size in groups.values() if size == max_size)\n\n```\n\n","tags":["Algorithm","暴力搜索","数位处理","简单","枚举与剪枝"],"categories":["算法"]},{"title":"LeetCode每日一题2025-04-22","url":"/post/count-the-number-of-ideal-arrays.html","content":"\n# [2338. 统计理想数组的数目](https://leetcode.cn/problems/count-the-number-of-ideal-arrays/) H\n\n给你两个整数 `n` 和 `maxValue` ，用于描述一个 **理想数组** 。\n\n对于下标从 **0** 开始、长度为 `n` 的整数数组 `arr` ，如果满足以下条件，则认为该数组是一个 **理想数组** ：\n\n- 每个 `arr[i]` 都是从 `1` 到 `maxValue` 范围内的一个值，其中 `0 <= i < n` 。\n- 每个 `arr[i]` 都可以被 `arr[i - 1]` 整除，其中 `0 < i < n` 。\n\n返回长度为 `n` 的 **不同** 理想数组的数目。由于答案可能很大，返回对 $10^9 + 7$ 取余的结果。\n\n \n\n**示例 1：**\n\n> **输入**：n = 2, maxValue = 5\n> **输出**：10\n> **解释**：存在以下理想数组：\n>\n> - 以 1 开头的数组（5 个）：[1,1]、[1,2]、[1,3]、[1,4]、[1,5]\n> - 以 2 开头的数组（2 个）：[2,2]、[2,4]\n> - 以 3 开头的数组（1 个）：[3,3]\n> - 以 4 开头的数组（1 个）：[4,4]\n> - 以 5 开头的数组（1 个）：[5,5]\n> 共计 5 + 2 + 1 + 1 + 1 = 10 个不同理想数组。\n\n**示例 2：**\n\n> **输入**：n = 5, maxValue = 3\n> **输出**：11\n> **解释**：存在以下理想数组：\n>\n> - 以 1 开头的数组（9 个）：\n>    - 不含其他不同值（1 个）：[1,1,1,1,1] \n>    - 含一个不同值 2（4 个）：[1,1,1,1,2], [1,1,1,2,2], [1,1,2,2,2], [1,2,2,2,2]\n>    - 含一个不同值 3（4 个）：[1,1,1,1,3], [1,1,1,3,3], [1,1,3,3,3], [1,3,3,3,3]\n> - 以 2 开头的数组（1 个）：[2,2,2,2,2]\n> - 以 3 开头的数组（1 个）：[3,3,3,3,3]\n> 共计 9 + 1 + 1 = 11 个不同理想数组。\n\n \n\n**提示：**\n\n- 2 `<= n <=` $10^4$\n\n- 1 `<= maxValue <=` $10^4$\n\n  \n\n## 问题分析\n\n**注意到**：\n\n- 任意理想数组 ${a_i}$ 满足 $1\\le a_0\\mid a_1\\mid\\cdots\\mid a_{n-1}= y,\\text{ }a_i\\le \\text{maxValue}$ 。\n\n- 对于固定的末尾值 $y\\le\\mathrm{maxValue}$，从 1 变到 $y$ 的“除数链”可看作在每个质因数方向上“累积指数”的过程（把它的每个质因子 $p$、指数 $e_p$ 看成要在前 $n-1$ 个“空位”中放 $e_p$ 个“乘 $p$”操作）。\n\n- 若 $y=\\prod p_i^{e_i}$，则在长度为 $n$ 的链中，需要分配这 $e_i$ 次“乘以 $p_i$”操作到 $n-1$ 个相邻位置上，属于 **「Stars and Bars」** 模型（ **“星星与条纹”** ），每种质因子独立，所以总方案数是：\n  $$\n  \\#\\{\\text{链数}\\}=\\prod_i\\binom{(n-1)+e_i}{e_i}.\n  $$\n\n- 最后对所有 $y$ 累加，并对 $10^9+7$ 取模，因此，答案就是\n  $$\n  \\sum_{y=1}^\\mathrm{maxValue}\\left[\\prod_{p^e\\|y}\\binom{(n-1)+e}{e}\\right]\\mathrm{mod}(10^9+7).\n  $$\n\n`预处理` → `枚举 y=1…maxValue` → `分解 y 的质因子` → `用“comb”累乘` → `累加取模` → `返回`\n\n## 算法思路\n\n1. **预处理阶乘与逆元阶乘**，支持快速计算组合数 $\\binom{a}{b}$。\n2. 用 **线性／筛法**（`SPF` 最小质因子）对 $[1\\ldots\\mathrm{maxValue}]$ 做一次质因数分解，整体复杂度约 $O(\\mathrm{maxValue}\\log\\log \\mathrm{maxValue})$。\n3. 对每个 $y$ 枚举其质因数指数 $e_i$，累乘组合数即可。\n\n## 时间复杂度\n\n- 阶乘 & 逆元：$O(n + \\log \\mathrm{maxValue})$\n- `SPF` 筛：$O(\\max\\mathrm{Value}\\log\\log\\mathrm{maxValue})$\n- 主循环：每个 $y$ 仅分解一次，总体 $O(\\max\\mathrm{Value}\\log\\mathrm{maxValue})$\n- **总体**：$O(n+\\max\\mathrm{Value}\\log\\log\\mathrm{maxValue}+\\max\\mathrm{Value}\\log\\mathrm{maxValue})$ ，低于DP\n\n空间复杂度：$O(n+\\max\\mathrm{Value})$ ，主要用于阶乘数组与 SPF 数组。\n\n\n\n## 代码实现\n\n```python\nimport math\nclass Solution:\n    def idealArrays(self, n: int, maxValue: int) -> int:\n        MOD = 10**9 + 7\n\n        # —— 1. 预处理：阶乘 & 逆阶乘 —— \n        # 最大可能的指数增量 ≈ log2(maxValue)\n        maxE = int(math.log2(maxValue)) + 1\n        up = n - 1 + maxE\n        fact = [1] * (up + 1)\n        invfact = [1] * (up + 1)\n        for i in range(1, up + 1):\n            fact[i] = fact[i-1] * i % MOD\n        invfact[up] = pow(fact[up], MOD-2, MOD)\n        for i in range(up, 0, -1):\n            invfact[i-1] = invfact[i] * i % MOD\n\n        def comb(a: int, b: int) -> int:\n            if b < 0 or b > a: \n                return 0\n            return fact[a] * invfact[b] % MOD * invfact[a-b] % MOD\n\n        # —— 2. SPF 最小质因子筛 —— \n        spf = list(range(maxValue + 1))\n        for p in range(2, int(maxValue**0.5) + 1):\n            if spf[p] == p:\n                for j in range(p*p, maxValue + 1, p):\n                    if spf[j] == j:\n                        spf[j] = p\n\n        # —— 3. 主循环：对每个 y 分解、累乘组合数 —— \n        ans = 0\n        for y in range(1, maxValue + 1):\n            ways = 1\n            v = y\n            while v > 1:\n                p = spf[v]\n                e = 0\n                while v % p == 0:\n                    v //= p\n                    e += 1\n                # 在 n-1 个间隔里放置 e 次“乘 p”操作\n                ways = ways * comb((n-1) + e, e) % MOD\n            ans = (ans + ways) % MOD\n\n        return ans\n\n```\n\n另看到题解：\n\n```python\nclass Solution:\n    def idealArrays(self, n: int, maxValue: int) -> int:\n        MOD = 10**9 + 7\n\n        # —— 1. 预处理：组合数 Pascal 三角 —— \n        maxE = int(math.log2(maxValue)) + 1\n        up = n - 1 + maxE\n        C = [[0] * (maxE + 1) for _ in range(up + 1)]\n        for i in range(up + 1):\n            C[i][0] = 1\n            for j in range(1, min(i, maxE) + 1):\n                C[i][j] = (C[i-1][j] + C[i-1][j-1]) % MOD\n\n        # —— 2. 预处理：EXP 质因子指数列表 —— \n        EXP = [[] for _ in range(maxValue + 1)]\n        for y in range(2, maxValue + 1):\n            v = y\n            p = 2\n            while p * p <= v:\n                e = 0\n                while v % p == 0:\n                    v //= p\n                    e += 1\n                if e:\n                    EXP[y].append(e)\n                p += 1\n            if v > 1:\n                EXP[y].append(1)\n\n        # —— 3. 主循环：对每个 y 累乘组合数 —— \n        ans = 0\n        for y in range(1, maxValue + 1):\n            ways = 1\n            for e in EXP[y]:\n                ways = ways * C[n - 1 + e][e] % MOD\n            ans = (ans + ways) % MOD\n\n        return ans\n\n```\n\n1. **DP 转组合**：把「每一步都要保持可整除」的递推，转化为「质因子指数如何在 $n$ 个位置上非负分配」的组合计数；\n2. **枚举**：对每个可能的末尾值 $x$ 计算它的组合数贡献，再求和。\n\n- 对于固定的 $y$，它的每个质因子 $p$ 在 $a_0,\\dots,a_{n-1}$ 中的**指数序列**\n  $$\n  e_0=0(\\text{不一定为0})\\le e_1\\le\\cdots\\le e_{n−1}=E,\n  $$\n  且 $\\sum$ 个位置上的“增加量”恰好等于 $E$ （ $e_1 + e_2 + ... + e_k = E$ ）（即 $y$ 中该质因子的总指数）。\n\n- **“星星与条纹”**：前文已解释\n\n- 实现\n\n  - **预处理每个 $x≤\\text{maxValue}$ 的质因数指数列表**，`EXP[x]` 存放 $x$ 分解后，每个质因子的指数 $[e_1,e_2,\\dots]$。\n  - **预计算组合数 $\\binom{N}{k}$**：由于 $n\\le10^4$, 指数 $E_p$ 也最多 $\\log_2(10^4)\\approx14$，我们只需算到 $N=n+14-1$。\n    用帕斯卡三角，这样 `C[N][k]` 就是 $\\binom{N}{k}\\bmod(10^9+7)$。\n  - **枚举所有 $x=1…maxValue$**，累加它们作为数组末尾的方案数，注意 $x=1$ 时 `EXP[1]` 为空，`res=1`，对应 “全 1 数组” 这一类。\n\n- 复杂度：\n\n  - **质因数分解**：$\\sum_{x=1}^{M}\\sqrt{x}=O(M^{3/2})$，这里 $M=\\text{maxValue}\\le10^4$ 足够快。\n  - **组合数预处理**：$O\\bigl((n+\\max E)\\times \\max E\\bigr)\\approx O(n\\cdot\\log M)$。\n  - **枚举累加**：$O\\bigl(M\\times (\\text{平均质因子数})\\bigr)\\approx O(M\\log M)$。\n\n| 特性           | 第一个实现（阶乘 + 逆元 comb + SPF 筛分解）                  | 第二个实现（Pascal 组合表 + 试除分解）                       |\n| -------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| **组合数计算** | 预计算 `fact` 和 `invfact` 数组，用公式 <br/>$\\binom{a}{b} = \\frac{\\text{fact}[a]}{\\text{fact}[b] \\times \\text{fact}[a - b]} \\mod p$ 每次 $O(1)$ 快速计算 | 用帕斯卡三角预计算 $C[i][j] = \\binom{i}{j}$ <br>查询时直接 $O(1)$ 取表 |\n| **质因子分解** | 先用线性/埃氏思路构造 `SPF`（最小质因子）表 $spf[i]$ <br>分解时不断 $v //= spf[v]$，复杂度约 $O(\\log{v})$ | 每个 $x$ 用试除法 $\\sqrt{x}$ 搜索素因子，累计其指数          |\n| **预处理时间** | 构造 `fact`, `invfact`：$O(n + \\max E)$（再加一次快速幂取逆）  构造 `SPF`：$O(M \\log \\log M)$ | 构造 $C$ 表：$O\\bigl((n + \\max E) \\times \\max E\\bigr)$  <br>试除分解：$\\sum_{x=1}^M O(\\sqrt{x}) \\approx O(M^{3/2})$ |\n| **空间开销**   | 两个长度 $n + \\max E$ 的数组 + 一个长度 $M$ 的 `SPF` 数组    | $C$ 表大约 $(n + \\max E) \\times (\\max E)$ 个整数             |\n| **适用场景**   | 当  $\\max{Value}$ 更大（比如 $10^5$ 、$10^6$） 时，`SPF` 分解会更快、更稳，阶乘逆元计算组合数也更节省空间 | $n, \\max{Value} \\le 10^4$ 都较小，预先填表和试除都能在 `1–2s` 内完成 |\n| **代码复杂度** | 略微复杂一些，需要处理逆元和 `SPF` 数组                      | 直观易懂，组合表和试除都很朴素                               |\n\n`Qwen QWQ 32b`给出的解，思路大致相同\n(预处理最小质因数 → 质因数分解存储 → 阶乘与逆元预计算 → DP到组合数学 → 前缀和优化)：\n\n```python\nclass Solution:\n    def idealArrays(self, n: int, maxValue: int) -> int:\n        MOD = 10**9 + 7\n        t = n - 1\n        if t == 0:\n            return maxValue % MOD\n        \n        max_num = maxValue\n        \n        # 步骤 1：计算筛的 min_prime 数组.\n        min_prime = [0] * (max_num + 1)\n        for i in range(2, max_num + 1):\n            if min_prime[i] == 0:\n                min_prime[i] = i\n                for j in range(i*i, max_num+1, i):\n                    if min_prime[j] == 0:\n                        min_prime[j] = i\n        \n        # 预计算 factor_list[m]：从质数到指数的字典.\n        factor_list = [{} for _ in range(max_num + 1)]\n        \n        for m in range(2, max_num + 1):\n            num = m\n            factors = {}\n            while num > 1:\n                p = min_prime[num]\n                cnt = 0\n                while num % p == 0:\n                    cnt += 1\n                    num //= p\n                factors[p] = cnt\n            factor_list[m] = factors.copy() if factors else {}\n        \n        # 步骤 2：预计算 fact 和 inv_fact，最多 N=2e5.\n        N_fact = 2 * 10**5\n        fact = [1] * (N_fact + 1)\n        for i in range(1, N_fact + 1):\n            fact[i] = (fact[i-1] * i) % MOD\n        \n        inv_fact = [1]*(N_fact + 1)\n        inv_fact[N_fact] = pow(fact[N_fact], MOD -2, MOD)\n        for i in range(N_fact -1, -1, -1):\n            inv_fact[i] = (inv_fact[i+1] * (i+1)) % MOD\n        \n        # 步骤 3：计算 fm 数组.\n        fm = [0]*(max_num + 1)  # 从 0 到 maxValue 的索引.\n        \n        for m in range(1, max_num + 1):\n            if m == 1:\n                factors_dict = {}\n            else:\n                factors_dict = factor_list[m]\n            \n            product = 1\n            for p in factors_dict:\n                a_i = factors_dict[p]\n                n_val = a_i + t - 1\n                k_val = t - 1\n                \n                # 选择 k 和 (n_val -k) 之间的较小值，以减少计算量.\n                if k_val > (n_val - k_val):\n                    k_val = n_val - k_val\n                \n                # 计算 C(n_val, k_val)\n                c_n_k = fact[n_val] * inv_fact[k_val] % MOD\n                c_n_k = c_n_k * inv_fact[n_val - k_val] % MOD\n                product = (product * c_n_k) % MOD\n            \n            fm[m] = product\n        \n        # 计算前缀数组.\n        prefix = [0]*(max_num + 1)\n        for i in range(1, max_num+1):\n            prefix[i] = (prefix[i-1] + fm[i]) % MOD\n        \n        res = 0\n        for a_val in range(1, maxValue + 1):\n            m_max = maxValue // a_val\n            res += prefix[m_max]\n            res %= MOD\n        \n        return res\n\n```\n\n","tags":["Algorithm","枚举与剪枝","困难","组合数学","快速幂"],"categories":["算法"]},{"title":"LeetCode每日一题2025-04-21","url":"/post/count-the-hidden-sequences.html","content":"\n# [2145. 统计隐藏数组数目](https://leetcode.cn/problems/count-the-hidden-sequences/) M\n\n给你一个下标从 **0** 开始且长度为 `n` 的整数数组 `differences` ，它表示一个长度为 `n + 1` 的 **隐藏** 数组 **相邻** 元素之间的 **差值** 。更正式的表述为：我们将隐藏数组记作 `hidden` ，那么 `differences[i] = hidden[i + 1] - hidden[i]` 。\n\n同时给你两个整数 `lower` 和 `upper` ，它们表示隐藏数组中所有数字的值都在 **闭** 区间 `[lower, upper]` 之间。\n\n- 比方说，`differences = [1, -3, 4]` ，`lower = 1` ，`upper = 6` ，那么隐藏数组是一个长度为`4` 且所有值都在 `1` 和 `6` （包含两者）之间的数组。\n  - `[3, 4, 1, 5]` 和 `[4, 5, 2, 6]` 都是符合要求的隐藏数组。\n  - `[5, 6, 3, 7]` 不符合要求，因为它包含大于 `6` 的元素。\n  - `[1, 2, 3, 4]` 不符合要求，因为相邻元素的差值不符合给定数据。\n\n请你返回 **符合** 要求的隐藏数组的数目。如果没有符合要求的隐藏数组，请返回 `0` 。\n\n \n\n**示例 1：**\n\n> **输入**：differences = [1,-3,4], lower = 1, upper = 6\n> **输出**：2\n> **解释**：符合要求的隐藏数组为：\n>\n> - [3, 4, 1, 5]\n> - [4, 5, 2, 6]\n>\n> 所以返回 2 。\n\n**示例 2：**\n\n> **输入**：differences = [3,-4,5,1,-2], lower = -4, upper = 5\n> **输出**：4\n> **解释**：符合要求的隐藏数组为：\n>\n> - [-3, 0, -4, 1, 2, 0]\n> - [-2, 1, -3, 2, 3, 1]\n> - [-1, 2, -2, 3, 4, 2]\n> - [0, 3, -1, 4, 5, 3]\n>\n> 所以返回 4 。\n\n**示例 3：**\n\n> **输入**：differences = [4,-7,2], lower = 3, upper = 6\n> **输出**：0\n> **解释**：没有符合要求的隐藏数组，所以返回 0 。\n\n \n\n**提示：**\n\n- `n == differences.length`\n- 1 `<= n <=` $10^5$\n- $-10^5$ `<= differences[i] <=` $10^5$\n- $-10^5$ `<= lower <= upper <=` $10^5$\n\n\n\n## 问题分析\n\n1. **前缀和（Prefix Sums）**\n\n   定义\n   $$\n   P_0=0,\\quad P_i=\\sum_{k=0}^{i-1}\\text{differences}[k]\\quad(1\\leq i\\leq n).\n   $$\n   则隐藏数组第 $i$ 个元素有\n   $$\n   \\text{hidden}[i]=\\text{hidden}[0]+P_i.\n   $$\n\n2. **区间约束转化**\n\n   要保证所有元素都在 $[\\text{lower},\\;\\text{upper}]$ 之间，即对所有 $0\\le i\\le n$ 都有\n   $$\n   \\text{lower}\\le \\text{hidden}[0]+P_i \\le \\text{upper}.\n   $$\n   等价于\n   $$\n   \\max_{i}\\bigl(\\mathrm{hidden}[0] + P_{i}\\bigr) \\leq \\mathrm{upper} \\quad\\Longrightarrow\\quad \\mathrm{hidden}[0] \\leq \\mathrm{upper} - \\max_{i} P_{i},\n   $$\n\n   $$\n   \\min_{i}\\bigl(\\mathrm{hidden}[0] + P_{i}\\bigr) \\geq \\mathrm{lower} \\quad\\Longrightarrow\\quad \\mathrm{hidden}[0] \\geq \\mathrm{lower} - \\min_{i} P_{i}.\n   $$\n\n   $$\n   \\mathrm{hidden}[0]\\leq\\mathrm{upper}-\\max_iP_i,\\quad\\mathrm{hidden}[0]\\geq\\mathrm{lower}-\\min_iP_i.\n   $$\n\n3. **可行起始值个数**\n\n   记 $minP=\\min_iP_i,maxP=\\max_iP_i$ 。\n\n   那么\n   $$\n   \\mathrm{hidden}[0]∈[\\mathrm{lower}−\\min\\text{P},\\mathrm{upper}−\\max\\text{P}],\n   $$\n   区间长度（整数个数）为\n   $$\n   (\\mathrm{~upper}-maxP)-(\\mathrm{~lower}-minP)+1=(\\mathrm{upper}-\\mathrm{lower})-(maxP-minP)+1.\n   $$\n   若该值为负，则答案是0。\n\n   \n\n## 算法思路\n\n1. **遍历一次 differences**，用变量 `curr` 累加差分，实时维护 `minP = min(minP, curr)` 和 `maxP = max(maxP, curr)`。\n\n2. 根据上面推导，计算可行的 `hidden[0]` 的左端点 `L = lower - minP`，右端点 `R = upper - maxP`。\n\n3. 答案即为 `max(0, R - L + 1)`。\n\n## 时间复杂度\n\n- 算法的时间复杂度为$O(n)$，其中$n$是`differences`数组的长度。因为只需遍历一次差异数组即可计算所有必要的参数，没有嵌套循环，因此效率较高。\n\n- 仅使用常数级额外空间，故空间复杂度为$O(1)$。\n\n## 代码实现\n\n```python\n# 先求前缀极值再统一算区间\nclass Solution:\n    def numberOfArrays(self, differences: List[int], lower: int, upper: int) -> int:\n        # 初始化前缀和的最小值和最大值\n        minP = 0\n        maxP = 0\n        curr = 0\n        \n        # 遍历差分数组，更新前缀和区间\n        for d in differences:\n            curr += d\n            minP = min(minP, curr)\n            maxP = max(maxP, curr)\n        \n        # 计算起始值 hidden[0] 的可行区间 [L, R]\n        L = lower - minP\n        R = upper - maxP\n        \n        # 区间长度即为符合要求的数组个数\n        return max(0, R - L + 1)\n\n```\n\n也可直接把对每个位置的区间约束（本质相同）\n$$\n\\mathrm{lower}\\leq\\mathrm{hidden}[0]+P_i\\leq\\mathrm{upper}\n$$\n转化为对 `hidden[0]` 的上下界，并在遍历中不断收缩，最终得出相同可行区间 $[\\max\\{\\underline{L}\\},\\min\\{\\overline{R}\\}]$\n\n**维护上下界**\n\n- 令 `curr = P_i`，初始 `curr = 0`。\n- 看到新的`curr`就把 $\\mathrm{hidden}[0]\\geq\\mathrm{lower}-\\mathrm{curren}t_s$ 转化为下界 `L = lower - curr`并往上取最大，把 $\\mathrm{hidden}[0]\\leq\\mathrm{upper}-\\mathrm{curren}t_s$ 转化为上界 `R = upper - curr`并往下取最小。\n- 每步累加差分 `curr += d` 后\n\n若 `L > R` 则 0，否则 `R - L + 1`。\n\n```python\n# 遍历中直接收敛上下界\nfrom typing import List\n\nclass Solution:\n    def numberOfArrays(self, differences: List[int], lower: int, upper: int) -> int:\n        curr = 0\n        L = lower      # lower - 0\n        R = upper      # upper - 0\n        for d in differences:\n            curr += d\n            candL = lower - curr\n            if candL > L:\n                L = candL\n            candR = upper - curr\n            if candR < R:\n                R = candR\n        return max(0, R - L + 1)\n\n```\n\n","tags":["Algorithm","数据结构","组合数学","中等","前缀和"],"categories":["算法"]},{"title":"LeetCode每日一题2025-04-20","url":"/post/rabbits-in-forest.html","content":"\n# [781. 森林中的兔子](https://leetcode.cn/problems/rabbits-in-forest/) M\n\n森林中有未知数量的兔子。提问其中若干只兔子 **\"还有多少只兔子与你（指被提问的兔子）颜色相同?\"** ，将答案收集到一个整数数组 `answers` 中，其中 `answers[i]` 是第 `i` 只兔子的回答。\n\n给你数组 `answers` ，返回森林中兔子的最少数量。\n\n \n\n**示例 1：**\n\n> **输入**：answers = [1,1,2]\n> **输出**：5\n> **解释**：\n> 两只回答了 \"1\" 的兔子可能有相同的颜色，设为红色。 \n> 之后回答了 \"2\" 的兔子不会是红色，否则他们的回答会相互矛盾。\n> 设回答了 \"2\" 的兔子为蓝色。 \n> 此外，森林中还应有另外 2 只蓝色兔子的回答没有包含在数组中。 \n> 因此森林中兔子的最少数量是 5 只：3 只回答的和 2 只没有回答的。\n\n**示例 2：**\n\n> **输入**：answers = [10,10,10]\n> **输出**：11\n\n \n\n**提示：**\n\n- `1 <= answers.length <= 1000`\n- `0 <= answers[i] < 1000`\n\n\n\n## 问题分析\n\n我们需要根据兔子的回答 `answers` 数组计算森林中最少的兔子数量。每只回答为 `a` 的兔子表示其颜色族群中有 `a + 1` 只兔子（包括自己）。关键在于将相同答案的兔子尽可能分到同一族群，以最小化总数。\n\n## 算法思路\n\n1. 遍历 `answers` 数组，使用哈希表 `count` 统计每个回答值 `x` 出现的频次 `c`\n\n2. 对于每个不同的 `x`：\n\n   - 每组最多能容纳 `x+1` 只兔子；\n\n   - 如果有 `c` 只兔子都回答了 `x`，则需要的组数为：\n     $$\n     \\text{groups} = \\left\\lceil \\frac{c}{x+1} \\right\\rceil\n     $$\n\n   - 每个族群贡献 `x + 1` 只兔子，这些组中总兔子数为：\n     $$\n     \\text{groups} \\times (x+1)\n     $$\n\n3. 将所有不同回答值对应的最少兔子数累加，即可得到森林中兔子的最少数量。\n\n## 时间复杂度\n\n- 统计频率的时间复杂度：$O(n)$，其中数组长度 $n=answers.length$ ，因为仅需一次遍历统计，再对哈希表键值进行遍历。\n- 分组计算的时间复杂度：$O(m)$，其中 $m$ 是不同答案的个数 $(m ≤ n)$。因此总时间复杂度为 $O(n)$。\n- 空间复杂度：$O(m)$，其中 $m$ 是不同回答值的数量，最坏情况 $m = n$。\n\n## 代码分解\n\n1. **统计答案频率**：使用 `collections.Counter` 记录每个回答的出现次数。\n2. **分组计算**：\n   - 对于每个回答`x`和对应的计数`c`：\n     - 分组数目为 `(c + x) // (x + 1)`（使用整数运算 `(c + group_size - 1) // group_size` 来替代向上取整）。\n     - 总兔子数累加 `groups * (x + 1)`。\n\n## 代码实现\n\n```python\nfrom collections import Counter\nfrom typing import List\n\nclass Solution:\n    def numRabbits(self, answers: List[int]) -> int:\n        count = Counter(answers)\n        total = 0\n        for x, c in count.items():\n            # 每组容量为 x+1\n            group_size = x + 1\n            # 计算需要的最少族群数量（ceil(c / group_size)向上取整）\n            groups = (c + group_size - 1) // group_size\n            # 累加该回答值对应的最少兔子数\n            total += groups * group_size\n        return total\n\n```\n\n","tags":["Algorithm","组合数学","中等","哈希表","贪心"],"categories":["算法"]},{"title":"LeetCode每日一题2025-04-19","url":"/post/count-the-number-of-fair-pairs.html","content":"\n# [2563. 统计公平数对的数目](https://leetcode.cn/problems/count-the-number-of-fair-pairs/) M\n\n给你一个下标从 **0** 开始、长度为 `n` 的整数数组 `nums` ，和两个整数 `lower` 和 `upper` ，返回 **公平数对的数目** 。\n\n如果 `(i, j)` 数对满足以下情况，则认为它是一个 **公平数对** ：\n\n- `0 <= i < j < n`，且\n- `lower <= nums[i] + nums[j] <= upper`\n\n \n\n**示例 1：**\n\n> **输入**：nums = [0,1,7,4,4,5], lower = 3, upper = 6\n> **输出**：6\n> **解释**：共计 6 个公平数对：(0,3)、(0,4)、(0,5)、(1,3)、(1,4) 和 (1,5) 。\n\n**示例 2：**\n\n> **输入**：nums = [1,7,9,2,5], lower = 11, upper = 11\n> **输出**：1\n> **解释**：只有单个公平数对：(2,3) 。\n\n \n\n**提示：**\n\n- 1 `<= nums.length <=` $10^5$\n- `nums.length == n`\n- $-10^9$ `<= nums[i] <=` $10^9$\n- $-10^9$ `<= lower <= upper <=` $10^9$\n\n\n\n## 问题分析\n\n问题本质上是寻找满足特定条件的数对 $(i, j)$，其中 $i$ 和 $j$ 是数组的索引，且它们的和在给定的范围 `[lower, upper]` 内。这是一个典型的双指针或者排序后使用二分查找的问题，通过排序将问题转化为在有序数组中快速定位满足和的区间的边界。\n\n## 算法思路\n\n1. **排序数组**：将输入的`nums`数组进行升序排列，便于后续操作。\n\n2. 方法一（**双指针**滑动窗口）\n\n   **可以将问题化简为两个「≤ 某值」的问题**\n\n   定义函数\n   $$\n   f(k)=\\#\\{0\\leq i<j<n\\mid nums[i]+nums[j]\\leq k\\}.\n   $$\n   那么题目要的答案就是\n   $$\n   f(upper)−f(lower−1).\n   $$\n   对于每个左端点 `i`（`0 ≤ i < n-1`），我们维护两个指针 `l` 与 `r`：\n\n   - 左指针 `l` 从头开始（0），右指针 `r` 从尾开始（n−1）；\n\n   - 如果 `nums[l] + nums[r] ≤ k`，那么对于固定的 `l`，所有 `(l, l+1),…,(l, r)` 都满足，因为排序保证 `nums[l] + nums[j] ≤ nums[l] + nums[r]`；可以一次性加上 `r−l` 个对，把 `l` 右移：`l += 1`。\n\n     否则（和太大）就让 `r` 左移：`r -= 1`。\n\n   - 直到 `l >= r`，整个过程需 $O(n)$ 级的指针移动，配合排序总复杂度 $O(n \\log n)$。\n\n3. 方法二（**二分查找**）\n    **遍历每个元素作为固定点**：对于每一个元素`nums[i]`（其中`i < j`），直接对排序后的数组在区间 `(i+1, n-1]` 上执行两次二分查找：\n\n   计算目标和的上下界：`lower - nums[i]` 和 `upper - nums[i]`，即要求`nums[j]`必须落在这个范围内。\n\n   **二分查找边界**：在有序数组中利用二分查找快速定位满足条件的`j`的位置区间：\n\n   枚举每个 `i`，目标是找满足\n   $$\n   lower≤nums[i]+nums[j]≤upper,j>i\n   $$\n   等价于\n   $$\n   lower−nums[i]≤nums[j]≤upper−nums[i].\n   $$\n   \n\n   - `left`：在排序数组的区间 `(i+1, n)` 上，第一个大于等于目标下界`lower - nums[i]`的元素位置\n     `lo = lower - nums[i]`，查 `bisect_left(nums, lo, i+1)`；\n   - `right`：第一个大于目标上界`upper - nums[i]`的元素位置\n     `hi = upper - nums[i]`，查 `bisect_right(nums, hi, i+1) - 1`；\n\n   **统计有效数目**：计算符合条件的索引区间长度，并累加到总数中\n\n   -  二分查找各 $O(\\log n)$，共 $O(n \\log n)$。\n\n## 时间复杂度\n\n- 排序数组的时间为 $O(n \\log n)$，其中 $n$ 是 `nums.length`\n- 双指针扫描需 $O(n)$\n- 遍历每个元素并进行两次二分查找的操作时间为 $O(n \\log n)$\n- 两种方法**总时间复杂度**都为：$O(n \\log n)$\n- **空间复杂度**：$O(n)$（排序需要复制或原地排序），$O(1)$（忽略排序所需栈或语言内部额外空间）\n\n## 代码实现\n\n**双指针法**：\n\n```python\nclass Solution:\n    def countFairPairs(self, nums: list[int], lower: int, upper: int) -> int:\n        # 排序\n        nums.sort()\n        # 结果 = ≤upper 的对数 - ≤(lower-1) 的对数\n        return self._count_leq(nums, upper) - self._count_leq(nums, lower - 1)\n\n    def _count_leq(self, nums: list[int], k: int) -> int:\n        \"\"\"\n        返回 排序后数组中 和 <= k 的数对数量 f(k)。\n        \"\"\"\n        l, r = 0, len(nums) - 1\n        cnt = 0\n        while l < r:\n            if nums[l] + nums[r] <= k:\n                # 对于当前 l，(l, l+1)...(l, r) 都是合法对\n                cnt += (r - l)\n                l += 1\n            else:\n                # 和太大，缩小右侧\n                r -= 1\n        return cnt\n```\n\n**二分法**：\n\n```python\nclass Solution:\n    def countFairPairs(self, nums: List[int], lower: int, upper: int) -> int:\n        nums.sort()\n        n = len(nums)\n        count = 0\n        for i in range(n - 1):\n            lo = lower - nums[i]\n            hi = upper - nums[i]\n            left = bisect_left(nums, lo, i + 1, n)\n            right = bisect_right(nums, hi, i + 1, n) - 1\n            if left < n and left <= right:\n                count += (right - left + 1)  # 符合条件的元素数目\n        return count\n```\n\n","tags":["Algorithm","枚举与剪枝","数据结构","逆序对计数","滑动窗口","中等","双指针","二分查找","排序"],"categories":["算法"]},{"title":"LeetCode每日一题2025-04-18","url":"/post/count-number-of-bad-pairs.html","content":"\n# [2364. 统计坏数对的数目](https://leetcode.cn/problems/count-number-of-bad-pairs/) M\n\n给你一个下标从 **0** 开始的整数数组 `nums` 。如果 `i < j` 且 `j - i != nums[j] - nums[i]` ，那么我们称 `(i, j)` 是一个 **坏数对** 。\n\n请你返回 `nums` 中 **坏数对** 的总数目。\n\n \n\n**示例 1：**\n\n> **输入**：nums = [4,1,3,3]\n> **输出**：5\n> **解释**：数对 (0, 1) 是坏数对，因为 1 - 0 != 1 - 4 。\n> 数对 (0, 2) 是坏数对，因为 2 - 0 != 3 - 4, 2 != -1 。\n> 数对 (0, 3) 是坏数对，因为 3 - 0 != 3 - 4, 3 != -1 。\n> 数对 (1, 2) 是坏数对，因为 2 - 1 != 3 - 1, 1 != 2 。\n> 数对 (2, 3) 是坏数对，因为 3 - 2 != 3 - 3, 1 != 0 。\n> 总共有 5 个坏数对，所以我们返回 5 。\n\n**示例 2：**\n\n> **输入**：nums = [1,2,3,4,5]\n> **输出**：0\n> **解释**：没有坏数对。\n\n \n\n**提示：**\n\n- 1 <= `nums.length` <= $10^5$\n- 1 <= `nums[i]` <= $10^9$\n\n\n\n## 问题分析\n\n1.**化简判定条件**\n\n我们通过数学变换将条件转化为统计差值相等的数对数量，最终用总数减去好的数对得到答案：\n\n对于一对索引 $i<j$，当且仅当\n$$\nj - i = \\text{nums}[j] - \\text{nums}[i]\n$$\n时，这对 $(i,j)$ 不是坏数对；等价于\n$$\n\\text{nums}[j] - j = \\text{nums}[i] - i.\n$$\n将所有元素映射为“调整值” $A_k = \\text{nums}[k] - k$，计算所有元素与索引的差值，统计相同差值出现次数，则“好数对”数目就是所有相同 $A$ 值之间的组合对数。\n\n2.**总对数与好对数**\n\n数组长度为 $n$ 时，总对数为 $\\tfrac{n(n-1)}2$。\n\n对于每个不同的调整值 $v$，若出现次数为 $c_v$，则它内部的好对数为 $\\tfrac{c_v(c_v-1)}2$。\n\n坏数对数 = 总对数 – $\\displaystyle\\sum_v \\tfrac{c_v(c_v-1)}2$。\n\n## 算法思路\n\n1. 遍历一次数组，使用哈希表统计每个 $A_k=\\text{nums}[k]-k$ 出现的频次。\n2. 计算总对数 $\\tfrac{n(n-1)}2$。\n3. 对哈希表中每个频次 $c$，累加 $\\tfrac{c(c-1)}2$ 得到“好对数”。\n4. 用总对数减去好对数，得到坏数对数。\n\n## 时间复杂度\n\n时间复杂度：$O(n)$，只需一次遍历加上对哈希表的小量遍历。\n\n空间复杂度：$O(n)$，哈希表最坏存储 $n$ 个不同键。\n\n## 代码实现\n\n```python\nclass Solution:\n    def countBadPairs(self, nums: list[int]) -> int:\n        from collections import Counter\n        \n        n = len(nums)\n        # 1. 统计调整值频次\n        freq = Counter(nums[i] - i for i in range(n))\n        \n        # 2. 总对数\n        total_pairs = n * (n - 1) // 2\n        \n        # 3. 累加所有“好对数”\n        good_pairs = sum(c * (c - 1) // 2 for c in freq.values())\n        \n        # 4. 坏数对 = 总对数 - 好对数\n        return total_pairs - good_pairs\n\n```\n\n","tags":["Algorithm","数据结构","组合数学","中等","哈希表"],"categories":["算法"]},{"title":"LeetCode每日一题2025-04-17","url":"/post/count-equal-and-divisible-pairs.html","content":"\n# [2176. 统计数组中相等且可以被整除的数对](https://leetcode.cn/problems/count-equal-and-divisible-pairs-in-an-array/) E\n\n给你一个下标从 **0** 开始长度为 `n` 的整数数组 `nums` 和一个整数 `k` ，请你返回满足 `0 <= i < j < n` ，`nums[i] == nums[j]` 且 `(i * j)` 能被 `k` 整除的数对 `(i, j)` 的 **数目** 。\n\n \n\n**示例 1：**\n\n> 输入：nums = [3,1,2,2,2,1,3], k = 2\n> 输出：4\n> **解释**：\n> 总共有 4 对数符合所有要求：\n>\n> - nums[0] == nums[6] 且 0 * 6 == 0 ，能被 2 整除。\n> - nums[2] == nums[3] 且 2 * 3 == 6 ，能被 2 整除。\n> - nums[2] == nums[4] 且 2 * 4 == 8 ，能被 2 整除。\n> - nums[3] == nums[4] 且 3 * 4 == 12 ，能被 2 整除。\n\n**示例 2：**\n\n> 输入：nums = [1,2,3,4], k = 1\n> 输出：0\n> 解释：由于数组中没有重复数值，所以没有数对 (i,j) 符合所有要求。\n\n \n\n**提示：**\n\n- `1 <= nums.length <= 100`\n- `1 <= nums[i], k <= 100`\n\n\n\n## 问题分析\n\n统计所有满足\n\n1. **索引约束**：`0 ≤ i < j < n`\n2. **数值相等**：`nums[i] == nums[j]`\n3. **整除性**：`(i * j) % k == 0`\n\n的数对数量。\n\n## 算法思路\n\n对数组`nums`中相同数值的下标进行分组（哈希表分组），然后在各组内部枚举下标对并检查乘积能否被 k 整除。\n\n对于每个数值对应的索引列表：\n\n- 若长度小于2，则跳过（无有效对）。\n- 否则，遍历所有可能的数对`(i, j)`（i < j），检查`i * j % k == 0`是否成立，若成立则计数加1。\n\n## 时间复杂度\n\n- **预处理时间**：$O(n)$，遍历数组一次存储索引。\n- 最坏情况下所有元素都相同(每个元素形成一组)，枚举组内所有 $\\binom{n}{2}$ 对，复杂度 $O(n^2)$。由于n的最大为100，总计算量约为5000次，在可行范围内。\n- **空间复杂度**：$O(n)$，用于存储分组字典。\n\n## 代码实现\n\n```python\nfrom collections import defaultdict\nfrom typing import List\n\nclass Solution:\n    def countPairs(self, nums: List[int], k: int) -> int:\n        \"\"\"\n        返回满足 nums[i] == nums[j] 且 (i * j) 能被 k 整除的 (i, j) 对数。\n        \"\"\"\n        num_indices = defaultdict(list)\n        for idx, num in enumerate(nums):\n            num_indices[num].append(idx)\n        \n        count = 0\n        for indices_list in num_indices.values():\n            n = len(indices_list)\n            if n < 2:\n                continue\n            # 遍历所有i<j的组合\n            for i in range(n):\n                for j in range(i + 1, n):\n                    a = indices_list[i]\n                    b = indices_list[j]\n                    product = a * b\n                    if product % k == 0:\n                        count += 1\n        return count\n\n```\n\n用单次遍历 `+` 边加边算的方式可以稍微降低常数，只遍历一遍 `nums`，每遇到一个新下标就与之前同值下标配对判定，复杂度仍为$O(n^2)$，但常数略优\n\n```python\nclass Solution:\n    def countPairs(self, nums: List[int], k: int) -> int:\n        index_map = defaultdict(list)\n        ans = 0\n        for i, v in enumerate(nums):\n            for j in index_map[v]:\n                if (i * j) % k == 0:\n                    ans += 1\n            index_map[v].append(i)\n        return ans\n\n```\n\n","tags":["Algorithm","暴力搜索","简单","枚举与剪枝","数据结构","哈希表"],"categories":["算法"]},{"title":"LeetCode每日一题2025-04-16","url":"/post/countGoodsubarrays.html","content":"\n# [2537. 统计好子数组的数目](https://leetcode.cn/problems/count-the-number-of-good-subarrays/) M\n\n给你一个整数数组 `nums` 和一个整数 `k` ，请你返回 `nums` 中 **好** 子数组的数目。\n\n一个子数组 `arr` 如果有 **至少** `k` 对下标 `(i, j)` 满足 `i < j` 且 `arr[i] == arr[j]` ，那么称它是一个 **好** 子数组。\n\n**子数组** 是原数组中一段连续 **非空** 的元素序列。\n\n \n\n**示例 1：**\n\n> **输入**：nums = [1,1,1,1,1], k = 10\n> **输出**：1\n> **解释**：唯一的好子数组是这个数组本身。\n\n**示例 2：**\n\n> **输入**：nums = [3,1,4,3,2,2,4], k = 2\n> **输出**：4\n> **解释**：总共有 4 个不同的好子数组：\n>\n> - [3,1,4,3,2,2] 有 2 对。\n> - [3,1,4,3,2,2,4] 有 3 对。\n> - [1,4,3,2,2,4] 有 2 对。\n> - [4,3,2,2,4] 有 2 对。\n\n \n\n**提示：**\n\n- 1 <= `nums.length` <= $10^5$\n- 1 <= `nums[i], k` <= $10^9$\n\n\n\n## 问题分析\n\n给定一个整数数组 `nums` 和一个整数 `k`，要求返回数组中好子数组的数目。题目中“好子数组”的定义为：子数组中存在至少 `k` 对下标 `(i, j)` 满足 `i < j` 且 `arr[i] == arr[j]`，也就是我们需要找出数组中所有满足至少有 `k` 对下标 `(i, j)`（其中 `i < j` 且元素相同）的子数组的数量。\n\n## 算法思路\n\n1. 当一个元素 `x` 在窗口中出现了 `c` 次时，它贡献的配对数量为组合数 $C(c,2)=\\frac{c(c−1)} 2$，但动态调整更高效的方式是通过增量/减量来维护总数。\n2. 使用双指针（滑动窗口）技术来遍历所有连续子数组。\n3. 维护一个窗口 `[l, r]`，以及窗口中每个数字出现的频数 `freq`。\n4. 同时在每一步更新窗口内的成对数字数量 `count`。当我们向窗口中添加新元素 `x` 时，窗口中原先 `x` 出现的次数为 `freq[x]`，那么新增的对数为 `freq[x]`（每个已有的 `x` 和新加入的 `x` 都可以构成一对）。因此更新 `count += freq[x]`，然后 `freq[x]` 加 1。\n5. 对于每个左边界 `l`，利用右指针 `r` 尽可能扩展窗口，直到 `count >= k`。设当窗口达到条件时，当前的 `r` 满足条件，则对于定左边界 `l`，所有右边界 `r'` 属于 `[r, n-1]` 的窗口均满足条件，因此可以直接将 `n - r` 加入答案。\n6. 随后移动左边界 `l`，同时更新 `count`。在移除窗口最左边元素时，假设其值为 `x`，此时删除该元素会导致窗口中 `x` 的出现次数减少，进而需要减少的对数为 `freq[x] - 1`（因为该 `x` 和其它 `x` 形成的对数就少了）。\n\n## 时间复杂度\n\n每个元素最多被右指针和左指针访问（加入和移除窗口）各一次，因此双指针方法整体时间复杂度为 $O(n)$，其中 n 是数组的长度。\n\n## 代码分解\n\n**窗口扩展：**\n 对于每个窗口左边界 `l`，通过右指针 `r`向右扩展窗口，直到窗口内满足 `count >= k`。在扩展过程中使用频次统计更新 `count`。\n\n**直接计数：**\n 一旦找到最小的右边界 `r` 使得 `[l, r]` 满足条件，则所有 `[l, r]`, `[l, r+1]`, ..., `[l, n-1]` 的子数组也均满足条件，因此可以直接加上 `n - r`。\n\n**滑动窗口收缩：**\n 移动左边界 `l`时，需要将 `nums[l]` 从窗口中移除，同时调整 `freq` 和 `count`。移除时由于原先 `x` 出现次数为 `freq[x]`，其对对数贡献为 `freq[x] - 1`（移除后剩余的配对数为 `freq[x] - 1`，因此减少 `freq[x] - 1`）。\n\n## 代码实现\n\n```python\nfrom collections import defaultdict\n\nclass Solution:\n    def countGood(self, nums, k: int) -> int:\n        n = len(nums)\n        # 字典存储每个数字的频次\n        freq = {}\n        count = 0  # 当前窗口中满足条件的对数数量\n        res = 0    # 结果计数\n        r = 0\n        \n        # 遍历左边界\n        for l in range(n):\n            # 不断扩展右边界，使窗口对数数量至少为 k\n            while r < n and count < k:\n                x = nums[r]\n                # 在添加前，x已有 freq.get(x, 0) 次，新增的对数即为这个频次\n                count += freq.get(x, 0)\n                freq[x] = freq.get(x, 0) + 1\n                r += 1\n            \n            # 如果当前窗口 [l, r-1] 的配对数量至少为 k，则右边所有扩展窗口都满足条件\n            if count >= k:\n                res += (n - r + 1)\n            \n            # 在将 l 右移前需要移除 nums[l] 对 count 的贡献\n            x = nums[l]\n            freq[x] -= 1\n            # 当移除一个 x 时，其对配对数的贡献为移除前该 x 与其它相同元素之间的对数数目，即 freq[x]（因为移除后，剩余的 x 数量为 freq[x]）\n            count -= freq[x]\n            \n        return res\n```\n\n","tags":["Algorithm","数据结构","组合数学","滑动窗口","中等"],"categories":["算法"]},{"title":"LeetCode每日一题2025-04-15","url":"/post/goodTriplets.html","content":"\n# [2179. 统计数组中好三元组数目](https://leetcode.cn/problems/count-good-triplets-in-an-array/) H\n\n给你两个下标从 **0** 开始且长度为 `n` 的整数数组 `nums1` 和 `nums2` ，两者都是 `[0, 1, ..., n - 1]` 的 **排列** 。\n\n**好三元组** 指的是 `3` 个 **互不相同** 的值，且它们在数组 `nums1` 和 `nums2` 中出现顺序保持一致。换句话说，如果我们将 pos$1_v$ 记为值 `v` 在 `nums1` 中出现的位置，pos$2_v$ 为值 `v` 在 `nums2` 中的位置，那么一个好三元组定义为 `0 <= x, y, z <= n - 1` ，且 pos$1_x$ < pos$1_y$ < pos$1_z$ 和 pos$2_x$ < pos$2_y$ < pos$2_z$ 都成立的 `(x, y, z)` 。\n\n请你返回好三元组的 **总数目** 。\n\n \n\n**示例 1：**\n\n> 输入：nums1 = [2,0,1,3], nums2 = [0,1,2,3]\n> 输出：1\n> 解释：\n> 总共有 4 个三元组 (x,y,z) 满足 pos$1_x$ < pos$1_y$ < pos$1_z$ ，分别是 (2,0,1) ，(2,0,3) ，(2,1,3) 和 (0,1,3) 。\n> 这些三元组中，只有 (0,1,3) 满足 pos$2_x$ < pos$2_y$ < pos$2_z$ 。所以只有 1 个好三元组。\n\n**示例 2：**\n\n> 输入：nums1 = [4,0,1,3,2], nums2 = [4,1,0,2,3]\n> 输出：4\n> 解释：总共有 4 个好三元组 (4,0,3) ，(4,0,2) ，(4,1,3) 和 (4,1,2) 。\n\n \n\n**提示：**\n\n- `n == nums1.length == nums2.length`\n- 3 <= n <= $10^5$\n- `0 <= nums1[i], nums2[i] <= n - 1`\n- `nums1` 和 `nums2` 是 `[0, 1, ..., n - 1]` 的排列。\n\n## 问题分析\n\n题目给定两个长度为*n*且下标从0开始的整数数组`nums1`和`nums2`，这两个数组都是`[0,1,...,n−1]`的排列。定义了好三元组为3个<u>互不相同</u>的值，且它们在数组`nums1`和`nums2`中出现**顺序**保持**一致**，\n即若`pos1v`为值v在`nums1`中出现的位置，`pos2v`为值v在`nums2`中出现的位置，\n好三元组需满足`0 <= x, y, z <= n−1`，且`pos1x < pos1y < pos1z`和`pos2x < pos2y < pos2z`都成立的`(x,y,z)` ，要求返回好三元组的总数目。\n\n## 算法思路\n\n由于两个数组都是 0 到 n - 1 的排列，考虑以下转换：\n\n1. **构造新数组**\n    我们先建立一个数组 `p`，其中\n   $$\n   p[i]=\\text{pos2}[\\text{nums1}[i]]\n   $$\n   这里的 $\\text{pos2}[v]$ 表示值 $v$ 在 `nums2` 中的位置。\n   由于 `nums1` 本身已经按其在原数组中的顺序排序，因此原题中要求 “pos1$x$ < pos1$y$ < pos1$z$” 已自动满足。问题就转化为：在数组 `p` 中计数满足\n   $$\n   p[i]<p[j]<p[k]\n   $$\n   且满足 $i<j<k$ 的三元组。\n\n2. **双遍扫描计数**\n    对于数组中的每个中间元素 $p[j]$，设：\n\n   - $L_j$：在 $j$ 之前（即 $i<j$）满足 $p[i] < p[j]$ 的数量；\n   - $R_j$：在 $j$ 之后（即 $k>j$）满足 $p[k] > p[j]$ 的数量；\n\n   则以 $p[j]$ 为中间元素的有效三元组数量为 $L_j \\times R_j$。整个三元组数量为所有 $j$ 上的累加和。\n\n3. **树状数组（Fenwick Tree）的作用**\n    由于 $n$ 可能达到 $10^5$ 级别，直接遍历统计 $L_j$​ 和 $R_j$​ 是 $O(n^2)$ 的效率。借助树状数组，我们可以在 $O(\\log n)$ 内查询某个前缀的值，从而：\n\n   - 正向遍历计算每个位置 $j$ 的 $L_j$；\n   - 逆向遍历计算每个位置 $j$ 的 $R_j$。\n\n## 时间复杂度\n\n- **构造映射与数组转换**：$O(n)$\n\n- **正序与逆序遍历树状数组操作**：使用两个树状数组分别进行两次扫描(每个元素需要正向逆向各一次)，每个查询和更新均为 $O(\\log n$，共计 $O(n \\log n)$\n\n- **总体时间复杂度**：$O(n \\log n)$\n- **空间复杂度**：$O(n)$, 用于存储两个计数数组及树状数组的结构\n\n## 代码分解\n\n**FenwickTree 类**\n 负责单点更新和区间查询，从而在 $O(\\log n)$ 时间内计算前缀和。\n\n**构造映射与数组转换**\n 将 `nums2` 中每个数值映射到对应的位置，构造数组 `p` 后，数组 `p` 就是按照 `nums1` 顺序排列的 `nums2` 中的下标，即 `p[i]` 是 nums1 的第 i 个元素在 nums2 中的位置。\n\n**左侧计数（L[j]）**\n 使用树状数组，从左到右扫描数组 `p`，对于每个位置 `j`，查询 `p[j]` 之前比它小的数字个数，并更新树状数组，通过遍历 `p` 数组并动态查询当前值之前的前缀和实现。\n\n**右侧计数（R[j]）**\n 使用另一个树状数组，从右到左扫描数组 `p`，对于每个位置 `j`，查询已经处理的右侧元素中比 `p[j]` 大的数量，通过总已处理元素数减去小于等于 `p[j]` 的数目得到。\n\n**三元组数量累加**\n 对每个中间位置 `j`，三元组数量为 $L[j] \\times R[j]$，对所有可能的中间位置累加即为最终答案。\n\n## 代码实现\n\n```python\nclass FenwickTree:\n    def __init__(self, size: int):\n        self.size = size\n        self.tree = [0] * (size + 1)\n    \n    def update(self, index: int, delta: int):\n        # index 从 0 开始转换到 1-based\n        index += 1\n        while index <= self.size:\n            self.tree[index] += delta\n            index += index & -index\n\n    def query(self, index: int) -> int:\n        # 查询前缀和 [0, index]，index 为 0-based\n        index += 1\n        res = 0\n        while index:\n            res += self.tree[index]\n            index -= index & -index\n        return res\n\nclass Solution:\n    @staticmethod\n    def goodTriplets(nums1: list, nums2: list) -> int:\n        n = len(nums1)\n        \n        # 建立 nums2 中值 -> 位置 的映射\n        pos2 = [0] * n\n        for idx, num in enumerate(nums2):\n            pos2[num] = idx\n        \n        # 构造数组 p，其中 p[i] = pos2[nums1[i]]\n        p = [pos2[num] for num in nums1]\n        \n        # 第一步：正序遍历，计算每个 j 左侧比 p[j] 小的数量 L[j]\n        left_count = [0] * n\n        fenwick_left = FenwickTree(n)\n        for j in range(n):\n            # p[j] 前有多少数比它小\n            left_count[j] = fenwick_left.query(p[j] - 1)\n            fenwick_left.update(p[j], 1)\n        \n        # 第二步：逆序遍历，计算每个 j 右侧比 p[j] 大的数量 R[j]\n        right_count = [0] * n\n        fenwick_right = FenwickTree(n)\n        for j in range(n - 1, -1, -1):\n            # 右侧比 p[j] 大的数量 = 当前已处理的个数中 p 值大于 p[j] 的数量\n            # 先查询 p[j] 的前缀和，已加入的元素总数为 (n-1 - j)\n            right_count[j] = fenwick_right.query(n - 1) - fenwick_right.query(p[j])\n            fenwick_right.update(p[j], 1)\n        \n        # 三元组数量：对每个 j 中间元素，累加 L[j] * R[j]\n        result = 0\n        for j in range(n):\n            result += left_count[j] * right_count[j]\n        return result\n```\n\n","tags":["Algorithm","困难","树状数组","数据结构","组合数学","逆序对计数"],"categories":["算法"]},{"title":"Tableau分析与可视化看板","url":"/post/Tableau.html","content":"\n# Tableau数据连接与可视化分析\n\n本文主要介绍 Tableau 的基础连接与使用，包括数据可视化的原理以及常用的图表制作，针对不同分析使用的图表类型，BI看板的搭建等内容。\n\n## 目录\n\n1. [数据连接](#数据连接)\n2. [数据可视化原理](#数据可视化原理)\n3. [基础图表制作](#基础图表制作)\n4. [数据可视化原则](#数据可视化原则)\n5. [BI仪表盘搭建](#bi仪表盘搭建)\n\n------\n\n[社区大佬可视化方案参考学习](https://public.tableau.com/zh-cn/gallery/?tab=viz-of-the-day&type=viz-of-the-day)\n\n**Tableau能做什么？**\n\n- 数据赋能\n\n  *让业务一线也可以轻松使用最新数据*\n\n  - 分析师可以直接将数据看板发布到线上\n\n  - 自动更新看板\n\n  - 自由下载数据\n\n  - 线上修改图表\n\n  - 邮箱发送数据\n\n  - 设置数据预警\n\n- 数据探索\n\n  *通过统计分析和数据可视化，从数据发现问题，用数据验证假设*\n\n  - 支持亿级数据的连接和处理\n\n  - 自由地对字段进行各种计算\n\n  - 拖拽就可以轻松制作图表\n\n  - 数据可以随意聚合下钻\n\n  - 图表类型可以灵活转换\n\n  - 内置算法智能建模\n\n------\n\n## 1. 数据连接\n\n### 1.1 连接类型\n\n#### 1.1.1 本地文件\n\n| 文件类型         | 连接方式         |\n| ---------------- | ---------------- |\n| CSV              | 文本连接         |\n| Excel (xls/xlsx) | Excel文件连接    |\n| JSON             | 直接连接JSON文件 |\n\n![Tableau 1](https://s2.loli.net/2025/04/14/uqs9Rby5v7HIKz1.png)\n\n![Tableau 连接](https://s2.loli.net/2025/04/14/utRx2ONTqLSlIa5.png)\n\n#### 1.1.2数据库\n\n1. **驱动配置**  \n   下载对应数据库驱动后，配置地址、端口、认证等参数\n2. **数据连接**  \n   数据库连接方法与SQL相似\n\n![Tableau支持的数据库](https://s2.loli.net/2025/04/14/HZVSOk8EFhKqnJC.png)\n\n### 1.2 连接方式\n\n1. **智能连接**（默认）\n   - 自动识别字段类型，只需选择连接字段\n   - ✅支持字段计算和编辑\n   - ✅支持排序、重命名、拆分等操作\n2. **字段计算**：连接字段可通过函数进行计算和编辑（动态）\n\n```\n# 示例函数计算字段\n  DATE_TRUNC('day', \"下单日期\") AS 订单日维度\n```\n\n1. **表格连接**：表格之间的连接原理同SQL\n2. **连接原理**\n   - 多表连接机制同SQL\n   - ✅支持多条件组合连接\n\n![Tableau表连接](https://s2.loli.net/2025/04/14/B7sdH3OvqjoG9zl.png)\n\n**操作示例**：\n\n1. 连接 `shop` 表 → 拖拽 `cpc` 表，设置连接条件：\n   - 门店ID = 门店ID\n   - 日期 = 日期\n2. 连接 `orders` 表→ 拖拽 `shop`表，设置连接条件：\n   - 门店ID = 门店ID\n   - 日期 = 下单日期\n\n![Tableau多表连接](https://s2.loli.net/2025/04/14/ZxR3CoeU6bWiYcD.png)\n\n### 1.3 提取方式\n\n| 方式     | 特点                                                         | 适用场景          |\n| -------- | ------------------------------------------------------------ | ----------------- |\n| 实时查询 | 每次操作触发数据库查询（查询语言VizQL）                      | 小数据量/频繁更新 |\n| 数据提取 | 1.提取连接数据，保存为`.hyper`文件，支持增量刷新<br />2.`.twbx` 文件会将 `.hyper` 数据打包<br />3.修改数据源后需重新提取数据，实时连接则无此限制<br />4.一般大型数据推荐提取，除非频繁修改连接字段 | 大数据量/离线分析 |\n\n![Tableau数据提取选项](https://s2.loli.net/2025/04/14/SGBk1gjnxI37AOy.png)\n\n**注意事项**：\n\n- 上传Tableau Server必须使用数据提取\n\n- 提取数据后可进行预筛选，仅保留需要的数据用于视图操作\n\n- ❌预筛选建议在连接阶段设置，而非视图层过滤\n\n  ![Tableau数据筛选器](https://s2.loli.net/2025/04/14/TIyzC5XuEMjNJnW.png)\n\n- 提取选项支持增量刷新策略（基于字段/函数）\n\n  ```python\n  # 示例：每日仅更新新增行\n  EXTRACT_INCREMENTAL ON \"last_updated_date\" > DATEADD('day', -1, CURRENT_DATE())\n  ```\n\n- `.twb`文件不包含数据仅保存连接与视图信息，`.twbx`打包数据，可打包共享<u>（Tableau Server发布**必须使用**`.twbx`）</u>\n\n- ⚠️百万级数据建议使用增量刷新\n\n### 1.4 数据处理\n\n- 查看、排序、重命名、拆分等操作\n\n  ![Tableau描述与拆分](https://s2.loli.net/2025/04/14/GYRPgVtKEU7IZo6.png)\n\n  ![Tableau筛选显示行与排序查看日期](https://s2.loli.net/2025/04/14/p1O3gDjbYtK6MQs.png)\n\n- 图表界面也可完成大部分数据操作，包括预测，趋势线，描述性统计分析指标等\n\n------\n\n## 2. 数据可视化原理\n\n### 2.1 核心概念\n\n1. **为什么要可视化**\n\n- 图表能让人更快理解最大/最小值等信息\n- 人类具备视觉优势，图比字更易识别\n- 文字源自象形，图形表达更直观\n\n![Tableau视觉元素感知排序](https://s2.loli.net/2025/04/14/lem8E7B5LJxt6vW.png)\n\n![Tableau可视化辞典](https://s2.loli.net/2025/04/14/1vA2egZYFDdiGBu.jpg)\n\n2. **度量与维度**\n   - **度量（Measures）**：数值型变量 → 图形面积/长度/颜色深浅 → 数轴\n   - **维度（Dimensions）**：类别型变量 → 图形颜色/位置/分类 → 标签\n\n| 类型     | 特征描述                       | 典型示例          |\n| -------- | ------------------------------ | ----------------- |\n| **度量** | 数值型可计算变量               | GMV总和, 订单数量 |\n| **维度** | 非数值分类变量（如城市、性别） | 用户ID, 源渠道    |\n\n> Tableau 自动识别变量类型，类型可互相转换\n\n![Tableau度量与维度](https://s2.loli.net/2025/04/14/XvD7u1aYMWbSeCR.png)\n\n### 2.2 Tableau 可视化基础操作\n\n1. **拖拽操作**\n\n   - 行/列：决定图表坐标轴\n\n   - 标记卡：控制图形颜色、大小、标签等\n\n     ![Tableau标记卡与筛选器](https://s2.loli.net/2025/04/14/6o2ph1j7CJqMfyY.png)\n\n   - 筛选器：设定可视条件\n\n     ![对应的筛选器](https://s2.loli.net/2025/04/14/OgKIaeTutl5LkAY.png)\n\n2. **五大可视化原理**\n\n   1. *度量默认聚合运算（SUM/AVG）*\n\n      - 拖动“消耗”到行 → 自动生成柱状图（求和）\n\n      - Tableau 会自动聚合度量（默认总和）\n\n        ![Tableau条形图](https://s2.loli.net/2025/04/14/7LIuidNJFCaPhxm.png)\n\n   2. *图形标记自由切换*\n\n      - 标记卡中可选择不同图形（柱状图、饼图、折线图等）\n\n      - 一个度量只有一个值无法形成折线（需多个点）\n\n      - 拖拽度量至行/列形成**图表**，拖拽至标签区域形成**表格**\n\n        ![Tableau表格](https://s2.loli.net/2025/04/14/fsq3QRO4lHFnDbr.png)\n\n        ![Tableau表格2](https://s2.loli.net/2025/04/14/jIdGCVpLw7kREHl.png)\n\n        ![等同于变换成离散放在行](https://s2.loli.net/2025/04/14/m5npR8wQuqLHeJg.png)\n\n   3. *维度增加信息密度（多层级对比）*\n\n      - 拖入维度字段 → 将一个点拆解为多个 → 可连成线\n\n      - 维度可拖至：颜色、标签、详细信息、行、列，会增强信息密度\n\n      - 示例：将日期字段转换为字符串 → 拖至列 → 形成折线图\n\n        ![Tableau折线图](https://s2.loli.net/2025/04/14/OS84L5eEyHXs2bk.png)\n\n      - 拖日期 → 标签、拖消耗 → 大小、选“文本” → 形成词云图、选“圆形” → 形成气泡图\n\n        ![Tableau词云](https://s2.loli.net/2025/04/14/HcgiSUYWdKXoLIb.png)\n\n        ![Tableau气泡图](https://s2.loli.net/2025/04/14/6ehfDbNLFyJwiS4.png)\n\n   4. *图表类型决定坐标轴形态（有轴图表 vs 无轴图表（极坐标图表））*\n\n      - 有轴：折线图、柱状图（需数轴）\n\n      - 无轴：饼图、树地图、词云、气泡图（极坐标）\n\n      - 示例饼图制作：将 GMV 拖到大小，门店拖到颜色 → 树地图(树地图是升级版的饼图，按照顺序展示大小，还能增加颜色等维度)；\n        更改标记类型为饼图 → 映射角度与面积\n\n        ![Tableau树地图](https://s2.loli.net/2025/04/14/bVwOT7f6KrSDakI.png)\n\n        ![Tableau饼图](https://s2.loli.net/2025/04/14/K76QD1mVy8XJFrM.png)\n\n   5. *连续变量生成**坐标轴**，离散变量生成**标签***\n\n      - 连续度量 → 数轴（逻辑连续参考系）\n      - 离散维度 → 标签（顺序可调的参考系）\n\n      | 类型                 | 作用               |\n      | -------------------- | ------------------ |\n      | **离散变量（维度）** | 形成标签，构成表格 |\n      | **连续变量（度量）** | 形成数轴，构成图形 |\n\n      - 示例：拖维度构建表格（如日期、门店、品牌）\n        将度量字段设置为离散 → 变为维度\n        拖度量至列或行 → 生成图形（数轴）\n\n### 2.3 视觉映射类型\n\n[可视化辞典Github仓库](https://github.com/Financial-Times/chart-doctor/tree/main/visual-vocabulary)与[Web](https://ft-interactive.github.io/visual-vocabulary/)\n\n| 视觉元素    | 适用场景                                         | 示例               | 适用图表         |\n| ----------- | ------------------------------------------------ | ------------------ | ---------------- |\n| 位置        | x/y 轴呈现度量，分布趋势分析                     | 人均收入与寿命关系 | 散点图           |\n| 长度        | 长度反映数值对比                                 | 地区销售额对比     | 柱状图/条形      |\n| 角度        | 用于表示部分与整体的占比关系                     | 性别比例分析       | 饼图/玫瑰图/环形 |\n| 颜色        | 分类/数值密度，饱和度/色调表现维度分类或度量高低 | 地理区域分布       | 热力图           |\n| 面积 & 体积 | 多维度占比，面积/体积与度量成正比                | 通过大小表示数值   | 树地图           |\n| 方向        | 展示度量随维度（如时间）变化趋势                 | 四季电力消耗趋势   | 折线图           |\n\n> 形状可用于标记不同组别（维度），如散点图标记点形状\n\n------\n\n## 3. 基础图表制作\n\n### 3.1 对比分析\n\n| 图表类型    | 制作要点                   | 适用场景       |\n| ----------- | -------------------------- | -------------- |\n| 柱状图      | 维度→列，度量→行           | ≤5个分类对比   |\n| 条形图      | 维度→行，度量→列           | ≥5个分类对比   |\n| 热力图      | 文本表+颜色映射，使用合计% | 多维度交叉对比 |\n| 气泡图/词云 | 度量→大小，维度→颜色/标签  | 百级分类对比   |\n\n- 创建分层结构可以在拖动标签时将整个结构组都拖动，并根据需要点击+或-在工作表内展示数据的量\n\n  ![Tableau分层结构](https://s2.loli.net/2025/04/14/Kij1uzPnY9MAxGI.png)\n\n- 筛选器选项可以自定义筛选器单项或多项的样式\n\n  ![Tableau筛选器选项](https://s2.loli.net/2025/04/14/S8eE2IK6TRPYtL9.png)\n\n- 热力图设置标记为方形，适用于多【维度】下多变量的同时对比，并且需要同时查看对比效果和数值，如各组/商品类别之间的销售额、利润同时对比\n\n  ![Tableau热力图](https://s2.loli.net/2025/04/14/vo5HaqX7ZLcduis.png)\n\n### 3.2 变化/趋势分析\n\n| 图表类型 | 制作要点                                                     | 适用场景   |\n| -------- | ------------------------------------------------------------ | ---------- |\n| 折线图   | 时间→列（连续），度量→行<br />季节性调整需手动添加移动平均线 | 趋势分析   |\n| 面积图   | 折线图→区域填充                                              | 累计值分析 |\n\n- 给折线图添加趋势线可以增加内容的丰富程度，并提升专业性，还可以增加预测（实际应用中一般都是高维数据，R²低误差高，参考性不大）\n\n  ![Tableau折线图趋势线与预测](https://s2.loli.net/2025/04/14/7xWyXzjFalT8CKf.png)\n\n- 将画折线图时的标记从线改为区域，即可形成面积图。适用于有内部累计关系的值，并会随时间变化，不强调趋势，强调绝对值\n\n  ![Tableau面积图](https://s2.loli.net/2025/04/14/hzpao1I7xlK8sT3.png)\n\n### 3.3 构成/占比分析\n\n| 图表类型 | 制作要点                  | 适用场景           |\n| -------- | ------------------------- | ------------------ |\n| 饼图     | 维度→颜色，度量→角度      | ≤3分类占比         |\n| 树地图   | 维度→颜色/标签，度量→大小 | 多层级（维度）占比 |\n| 堆积图   | 维度→颜色，主维度→轴      | 多维度累计占比     |\n\n- 饼图需要设置合计百分比显示占比（百分比差异类似同比环比计算）\n\n  ![饼图合计百分比](https://s2.loli.net/2025/04/14/sTZo8P57fcyzpQC.png)\n\n  ![饼图设置格式控制百分比小数位数](https://s2.loli.net/2025/04/14/WXgMzQJ7BasPwf9.png)\n\n- 堆积图适用于相同【度量】下，比较一个【维度】下另一个【维度】的占比。堆积图显示合计百分比需要在快速表计算后再编辑表计算并选择计算依据为\"表(向下)\"，否则会显示占整体数据的百分比，再按住`CTRL`将该计算字段拖动至'行'，即可看到占整体的比例（<u>只能看到占比，忽略绝对值大小</u>）\n\n  ![Tableau堆积图设置](https://s2.loli.net/2025/04/14/UiXBGmpI82Wu4tS.png)\n\n- 因此一般需要同时查看值的大小和占比，在标记区域选择未使用快速计算的字段（没有Δ），然后将其中的标签移除并更换为原始字段\n\n  ![Tableau堆积图设置2](https://s2.loli.net/2025/04/14/k1FhdRaJlbfy5m7.png)\n\n### 3.4 分布分析\n\n| 图表类型 | 制作要点                          | 适用场景     |\n| -------- | --------------------------------- | ------------ |\n| 散点图   | X/Y轴→度量，维度→颜色             | 相关性分析   |\n| 直方图   | 度量→自动分箱                     | 单变量分布   |\n| 地图     | 地理角色→详细信息，度量→大小/颜色 | 空间分布分析 |\n\n- 散点图：将Cpc总费用拖入列，GMV拖入行，然后将字符串形式的日期放入**标记**的**详细信息**，门店名称放入颜色，即可看到各个店铺的投放效果（斜率越大投放效果越好）\n\n  ![Tableau散点图](https://s2.loli.net/2025/04/14/ANPaJw2VteGyBFC.png)\n\n- 还可以对散点图进行聚类，，具有相同分布特征的变量会被分为一类，可选自动或手动设置聚类(Cluster)数 (K-means聚类算法，基于欧式距离计算)\n\n  ![Tableau散点图聚类](https://s2.loli.net/2025/04/14/CE8Fm2PGui5nXjZ.png)\n\n- 直方图与数据桶：在数据型字段右键 → 创建 → 数据桶。数据桶本质是根据设定的数据桶大小作为间隔(箱宽度)，将离散的点分类并计数。用于查看单一度量下的数据分布\n\n- 常见分布；2/8法则；马太效应；40-20-10（如果你想让你的APP保持增长势头，那么你的新用户次日留存率，7天留存率和30天留存率应该分别维持在40%、20%和10%左右）\n\n  ![Tableau数据桶](https://s2.loli.net/2025/04/14/uYtLPdMyCVJvnSo.png)\n\n- 地图：对于数据中的城市，需要将字段的属性设置为地理角色中的某个值，然后双击即可在工作表中显示地图。\n\n  ![Tableau地图设置](https://s2.loli.net/2025/04/14/WJxS56yvGtHrwfM.png)\n\n  对于经纬度坐标，则需要将地理角色设置为经纬度，然后分别双击，即可在工作表显示地图\n\n  ![Tableau经纬度](https://s2.loli.net/2025/04/14/aHeLUIpo3xshvW1.png)\n\n  - 由于多数情况下数据会经过脱敏处理，原来可表示唯一值的订单id等字段会有重复值出现，因此需要创建主键来自行计算出一个唯一值。左键点击创建计算字段，拖拽选择合适的字段进行计算，表达式需要确保计算的字段**格式相同**，因此对于数值型变量可以使用`STR()`函数将其转换为字符串进行计算\n\n    ![Tableau创建主键](https://s2.loli.net/2025/04/14/4HgrBnEuwDMKSVL.png)\n\n  - 使用计算出的\"主键\"作为详细信息，距离作为颜色，用户实付作为大小，即可在地图上画出大小、颜色均进行区分的散点地图\n\n    ![Tableau配送距离与实付图](https://s2.loli.net/2025/04/14/lUe2pcYZbjtR8aw.png)\n\n> 例：南丁格尔玫瑰图实现步骤（用色块圆饼展示战地死亡率，促进英国军方改善医疗条件）：\n>\n> - 将角度字段设置为度量值\n> - 在标记卡选择\"极坐标系\"\n> - 添加颜色区分分类变量（如月份）\n>\n\n------\n\n## 4. 数据可视化原则\n\n1. **用户导向**\n\n   - 区分观众层级（执行/管理/决策）\n\n     ![Tableau用户区分](https://s2.loli.net/2025/04/14/rNBQHb58A2vaeOY.png)\n2. **信息层级**\n\n   - 主指标放大，辅助指标弱化\n3. **视觉真实**\n   - 坐标轴从0开始\n   - 避免3D变形\n4. **认知适配**\n\n   - 使用行业通用图表类型(地理位置用地图、随时间变化用折线图等)\n5. **设计规范**\n   - 颜色≤8种，简化设计，突出重点，少即是多\n   - 图表需在 5 秒内传达核心信息\n6. **辅助说明**\n\n   - 添加标题/图例/数据标签/结论等(右键数据添加注释)\n\n多到[Tableau社区](https://public.tableau.com/zh-cn/gallery/?tab=viz-of-the-day&type=viz-of-the-day)去学习好的方案\n\n![Tableau好的可视化方案](https://s2.loli.net/2025/04/14/1psaqdOuXGTUvQi.png)\n\n------\n\n## 5. BI仪表盘搭建\n\n### 5.1 设计流程\n\n1. **明确主题**\n\n   - 受众是谁？关注点是什么？\n   - 例：每日营收监控 → GMV/转化率/订单分布\n\n2. **数据准备/拆解指标**\n\n   - 营收数据：GMV、商家实收、用户实付、总订单数、cpc总费用、各平台数据对比\n\n   - 流量数据：曝光人数、进店人数、下单人数、进店转化率、下单转化率、新客数、老客数、复购率\n   - 关键指标：GMV、流量数据*（每日营收）*进店率、复购率*（用户行为）*\n   - 辅助指标：CPC费用、无效订单*（投放效果）*\n\n   **先**设计好要使用的元素，**后**进行可视化的调整，与Excel相同，下面是某店铺外卖的营收数据设计\n\n   1. 首先需要将筛选器设置为联动(使用相关数据源的所有项)，实现图表间的数据统一\n\n   ![Tableau联动筛选](https://s2.loli.net/2025/04/14/YOaodfxpQVDiTUu.png)\n\n   2. 需要一个经营状况总览，拖动字段直至出现智能显示即可在数据的左右加入新的列，也可直接拖入度量值中，若出现其它图形，可以先尝试更改字段类型为离散\n\n      ![Tableau智能显示](https://s2.loli.net/2025/04/15/RNksrp6zx5H72KM.png)\n\n      ![Tableau经营状况总览](https://s2.loli.net/2025/04/15/SwcgoXtidHDuL4Q.png)\n\n   3. 新建工作表，用同样的方式制作详情表，'行'中字段根据需要添加\n\n      ![Tableau经营数据详情](https://s2.loli.net/2025/04/15/ygUSfQEaPqb3vDn.png)\n\n   4. 每日营收数据，需要多条曲线时，添加多个度量值将字段直接拖到纵轴上\n\n      ![Tableau每日营收数据](https://s2.loli.net/2025/04/15/q46A21Qe3uJlSHI.png)\n\n   5. 并非所有有用的字段都会在业务数据中直接提供，因此有时需要添加计算字段\n\n      ![Tableau进店率与成交率计算](https://s2.loli.net/2025/04/15/ZeG8hdrgTKsO1bN.png)\n\n      ![Tableau右键设置默认数字格式-百分比，减少重复修改](https://s2.loli.net/2025/04/15/F7egSsflDbX8kqU.png)\n\n   6. 多曲线的单位差异会导致在同一张图中显示时，某一或多条曲线因值过小而导致可视化效果差，不具备参考意义，这时可以设置双轴\n\n      ![Tableau双轴](https://s2.loli.net/2025/04/15/CWFNEY452txsc6M.png)\n\n   7. 多曲线共同影响的字段可以作为背景展示，通过调整颜色、大小、不透明度等方式隐式的显示在曲线后（可选面积图或条形图）\n\n      ![Tableau条形图调整大小和不透明度](https://s2.loli.net/2025/04/15/TdaPi8yKuHDICro.png)\n\n      ![Tableau每日流量数据](https://s2.loli.net/2025/04/15/GN5jhylqC8HtJVY.png)\n\n   8. 根据数据ORDER90，我们自定义90天内未下单的用户为新客，用于展示新老客对比\n\n      ![Tableau新老客字段计算](https://s2.loli.net/2025/04/15/EXTPzol5a2kqjcS.png)\n\n   9. Tableau没有内置的环形图，需要自己手动设置实现近似效果\n      环形图：双击行 → 输入0 → 右键双轴 → 将其中一个的视觉元素全部移除 → 颜色改为白色 → 调整两个饼图的大小 → 环形图 → 取消零值线和取消显示标题（调整完成后使用`CTRL`+`←`或`→`可以调整环形图**整体的大小**，此功能不局限于饼图）需要多个环形图时，为保证一致性，可以使用拷贝工作表，然后更改字段\n\n      ![Tableau环形图](https://s2.loli.net/2025/04/15/kS2eOKbqUj1Lft3.png)\n\n   10. 有时业务数据的标签并不是想要展示的值，可以通过右键设置别名来更改为想要的值\n\n       ![Tableau别名设置](https://s2.loli.net/2025/04/15/5mnF4t6sj8pqk19.png)\n\n       ![Tableau门店占比](https://s2.loli.net/2025/04/15/pC6cy8YeEDROmZB.png)\n\n   11. 纵轴设置为GMV，横轴设置cpc总费用，可以看到各门店的投放情况，斜率越高效果越好\n\n       ![Tableau投放情况](https://s2.loli.net/2025/04/15/JyuZz1q4TMBY7Vx.png)\n\n   12. 面积图可以展示订单分布时间段（根据需要将下单日期格式设置为小时）与整体订单趋势\n\n       ![Tableau面积图订单分布](https://s2.loli.net/2025/04/15/Ei4tPymVJUpak3A.png)\n\n   13. 分组设置：在想要分组的位置按住shift单击，并点击分组，即可选中以上的全部数据分为一组，同时可以给组进行命名，可以使用if函数实现相同效果\n\n       ![Tableau创建距离分组](https://s2.loli.net/2025/04/15/pm9qoesgyxXjuRh.png)\n\n       ![Tableau配送分布](https://s2.loli.net/2025/04/15/x9vqF6nz8sca54U.png)\n\n3. **布局设计**\n\n   1. F型视线布局：关键指标置于左上区域\n   2. 动态筛选器统一放置顶部中央\n   3. 数据钻取深度不超过三级\n\n   ```\n   [仪表盘布局示例]\n   | 经营总览 | 趋势分析 |\n   |----------|----------|\n   | 占比分析 | 分布地图 |\n   ```\n\n   经营总览->数据详情->趋势分析->占比分析->分布分析\n\n   - 总览：文本突出显示\n   - 趋势：多轴折线图\n   - 分布：热力图 / 地图\n\n   仪表盘大小可以选择通用桌面1366 * 768，然后手动调整高度，从左边的工作表区域拖动需要的表到仪表盘，手动调整位置和大小\n\n   ![Tableau仪表盘对象选择](https://s2.loli.net/2025/04/15/Pj7GMtrUJZcvei9.png)\n\n   ![Tableau仪表盘工作表区](https://s2.loli.net/2025/04/15/E9Iy3VbQgMZTcvW.png)\n\n4. **交互优化**\n\n   - **逻辑顺序**：从上到下 / 从主到次\n   - **交互设计**：主题明确 + 交互友好，纵/横布局，强制设置所有图表共享联动筛选器\n   - **图表联动**（通过筛选器）\n   - **动态参数**（通过筛选器）\n   - **细节优化**：统一字体、配色（参考[Tableau 社区](https://public.tableau.com/zh-cn/gallery/)）\n   - **图表选择**：4 大金刚（<u>散点图、柱状图、饼图、折线图</u>），大多数数据可视化都可用这四种组合完成，人感知最强的可视化字典（位置、长度、角度/方向、面积/颜色）\n\n   ![Tableau仪表盘设置筛选器浮动，便于摆放](https://s2.loli.net/2025/04/15/rogRAGQyfXmNquD.png)\n\n   ![Tableau仪表盘工作表点击用作筛选器实现联动](https://s2.loli.net/2025/04/15/I5nXPq9wDflSKjM.png)\n\n### 5.2 开发规范\n\n1. **配色方案**\n   - 主色≤3种，辅色≤2种，推荐组合：`#2A5E8F（深蓝）+ #FF6B35（橙红）+ #4ECDC4（青绿）`\n   - 使用企业VI色系\n   - 参考：[Color Hunt](https://colorhunt.co/)\n2. **字体规范**\n   - 中文：微软雅黑\n   - 英文：Arial\n   - 文字标注使用12pt的微软雅黑字体\n3. **性能优化**\n   - 数据提取预处理\n   - 隐藏非必要细节\n\n**细节优化过程**\n\n1. 设置边框提升专业性\n\n   ![Tableau仪表盘设置边框](https://s2.loli.net/2025/04/15/MWAi8TDgqYuxOpz.png)\n\n2. 去掉一些数据表的行列分隔边线，提升美观度\n\n   ![Tableau仪表盘去掉原边框](https://s2.loli.net/2025/04/15/N7SmH1payYG8lTo.png)\n\n3. 更改地图背景，使其简洁，提升视觉效果，修改冲蚀更改背景透明度\n\n   ![Tableau仪表盘地图设置](https://s2.loli.net/2025/04/15/tU1OgzDdNVvE7Gi.png)\n\n4. 最后优化各工作表在仪表盘的标题、数据信息的格式，设置字体微软雅黑，颜色风格统一，如需更改标题的背景颜色，可以在布局中修改\n\n   ![Tableau仪表盘字体颜色](https://s2.loli.net/2025/04/15/AwbqvzVujasYUNd.png)\n\n   ![Tableau仪表盘数据分行颜色](https://s2.loli.net/2025/04/15/4Hgx3pqwR61TOLV.png)\n\n5. 优化各工作表的色调，使风格统一\n\n   ![Tableau仪表盘地图点颜色](https://s2.loli.net/2025/04/15/yKrtqT5gQimuFeJ.png)\n\n[Tableau社区案例参考](https://public.tableau.com/zh-cn/gallery)\n\n**最终效果：**\n\n![BI看板](https://s2.loli.net/2025/04/14/Dl3rBSGtINyE7nh.png)\n\n[参考文档](https://yrzu9y4st8.feishu.cn/mindnotes/bmncnQCbk8yr68s4eBikgB06Awd)","tags":["数据操作","可视化","看板与报表"],"categories":["数据分析"]},{"title":"LeetCode每日一题2025-04-14","url":"/post/countGoodTriplets.html","content":"\n# [1534. 统计好三元组](https://leetcode.cn/problems/count-good-triplets/) E\n\n给你一个整数数组 `arr` ，以及 `a`、`b` 、`c` 三个整数。请你统计其中好三元组的数量。\n\n如果三元组 `(arr[i], arr[j], arr[k])` 满足下列全部条件，则认为它是一个 **好三元组** 。\n\n- `0 <= i < j < k < arr.length`\n- `|arr[i] - arr[j]| <= a`\n- `|arr[j] - arr[k]| <= b`\n- `|arr[i] - arr[k]| <= c`\n\n其中 `|x|` 表示 `x` 的绝对值。\n\n返回 **好三元组的数量** 。\n\n \n\n**示例 1：**\n\n> **输入：** arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3\n> **输出：** 4\n> **解释：** 一共有 4 个好三元组：[(3,0,1), (3,0,1), (3,1,1), (0,1,1)] 。\n\n**示例 2：**\n\n> **输入：** arr = [1,1,2,2,3], a = 0, b = 0, c = 1\n> **输出：** 0\n> **解释：** 不存在满足所有条件的三元组。\n\n \n\n**提示：**\n\n- `3 <= arr.length <= 100`\n- `0 <= arr[i] <= 1000`\n- `0 <= a, b, c <= 1000`\n\n## **问题分析**\n\n 给定数组 arr，以及三个整数 a、b、c，需要统计满足以下三个条件的三元组 (arr[i], arr[j], arr[k]) 的数量（其中 0 <= i < j < k < len(arr)）：\n\n- `|arr[i] - arr[j]| <= a`\n- `|arr[j] - arr[k]| <= b`\n- `|arr[i] - arr[k]| <= c`\n\n## **算法思路**\n\n- **暴力枚举**：直接使用三重循环枚举所有可能的三元组，然后检查是否满足条件。\n- **提前剪枝**：在第二层循环中，若`abs(arr[i] - arr[j]) > a`则直接跳过第三层循环（k），减少无效计算。\n\n## 时间复杂度\n\n- 对于数组长度 n，每个三元组枚举的时间复杂度为 O(n³)。由于题目约束 3 <= n <= 100，当 n = 100 时，最多循环大约 161700 次，在可接受的范围内。\n\n- 除了输入数组与常数级变量外，未使用额外数据结构，因此空间复杂度为 O(1)。\n\n## 代码实现\n\n```python\nfrom typing import List\n\nclass Solution:\n    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:\n        count = 0\n        n = len(arr)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if abs(arr[i] - arr[j]) > a:\n                    continue  # 提前剪枝，不满足a条件则跳过后续k的判断\n                for k in range(j + 1, n):\n                    # 同时检查b和c的条件\n                    if (abs(arr[j] - arr[k]) <= b) and (abs(arr[i] - arr[k]) <= c):\n                        count += 1\n        return count\n\n```\n\n","tags":["Algorithm","暴力搜索","简单","枚举与剪枝"],"categories":["算法"]},{"title":"LeetCode每日一题2025-04-13","url":"/post/countGoodNumbers.html","content":"\n# [1922. 统计好数字的数目](https://leetcode.cn/problems/count-good-numbers/) M\n\n我们称一个数字字符串是 **好数字** 当它满足（下标从 **0** 开始）**偶数** 下标处的数字为 **偶数** 且 **奇数** 下标处的数字为 **质数** （`2`，`3`，`5` 或 `7`）。\n\n- 比方说，`\"2582\"` 是好数字，因为偶数下标处的数字（`2` 和 `8`）是偶数且奇数下标处的数字（`5` 和 `2`）为质数。但 `\"3245\"` **不是** 好数字，因为 `3` 在偶数下标处但不是偶数。\n\n给你一个整数 `n` ，请你返回长度为 `n` 且为好数字的数字字符串 **总数** 。由于答案可能会很大，请你将它对 `109 + 7` **取余后返回** 。\n\n一个 **数字字符串** 是每一位都由 `0` 到 `9` 组成的字符串，且可能包含前导 0 。\n\n\n\n**示例 1：**\n\n> 输入：n = 1\n> 输出：5\n> 解释：长度为 1 的好数字包括 \"0\"，\"2\"，\"4\"，\"6\"，\"8\" 。\n\n**示例 2：**\n\n> 输入：n = 4\n> 输出：400\n\n**示例 3：**\n\n> 输入：n = 50\n> 输出：564908303\n\n \n\n**提示：**\n\n- 1 <= n <= $10^{15}$\n\n## **分析题意：**\n\n- 数字字符串为好数字需满足：偶数下标（0、2、4…）处的数字为偶数（0、2、4、6、8），共有 5 个选择；奇数下标（1、3、5…）处的数字为质数（只允许 2、3、5、7），共有 4 个选择。\n- 偶数位的数量 `k` 为 `(n + 1) // 2`, 奇数位的数量为 `n - k`\n- 对于长度为 $n$ 的数字字符串，偶数下标的数量为 $⌈n/2⌉ = \\frac{n+1}{2}$ 向下取整, 因此总共有 $5^k$ 种可能，奇数下标的数量为 $⌊n/2⌋$（由于数组下标从 0 开始），因此总共有 $4^{(n-k)}$ 种可能。\n\n\n\n## **构造方案：**\n\n 因此，好数字的总数量可表示为：\n$$\n\\text{ans} = 5^{ k } \\times 4^{ n-k } \\mod (10^9+7)\n$$\n给定 $n$ 可能高达 $10^{15}$，直接计算大数幂需要使用快速幂算法（快速指数求幂），Python 内置的 `pow` 函数可以直接接受第三个参数来进行模运算并实现快速幂。\n\n## **时间复杂度：**\n\n- 使用快速幂算法对大指数进行求幂取模，保证运算效率且不溢出。利用指数二进制分解实现指数运算，快速幂算法的时间复杂度为 $O(\\log n)$，即使 $n$ 高达 $10^{15}$ 也可以在极短时间内求出结果。\n\n- 使用乘法原理，将两个独立的选择相乘，即可得到所有可能性的乘积。\n\n## 代码实现：\n\n```python\nclass Solution:\n    def countGoodNumbers(self, n: int) -> int:\n        MOD = 10**9 + 7\n        # 计算偶数下标的数量：\n        k = (n + 1) // 2\n        part5 = pow(5, k, MOD)    # 偶数下标：0, 2, 4, ...，利用内置的 pow 函数进行快速幂取模计算\n        part4 = pow(4, n - k, MOD)# 奇数下标：1, 3, 5, ...\n        return (part5 * part4) % MOD\n```\n\n","tags":["Algorithm","组合数学","中等","快速幂","乘法"],"categories":["算法"]},{"title":"LeetCode每日一题2025-04-12","url":"/post/countGoodIntegers.html","content":"\n# [3272. 统计好整数的数目](https://leetcode.cn/problems/find-the-count-of-good-integers/) H\n\n给你两个 **正** 整数 `n` 和 `k` 。\n\n如果一个整数 `x` 满足以下条件，那么它被称为 **k** **回文** 整数 。\n\n- `x` 是一个 回文整数 。\n- `x` 能被 `k` 整除。\n\n如果一个整数的数位重新排列后能得到一个 **k 回文整数** ，那么我们称这个整数为 **好** 整数。比方说，`k = 2` ，那么 2020 可以重新排列得到 2002 ，2002 是一个 k 回文串，所以 2020 是一个好整数。而 1010 无法重新排列数位得到一个 k 回文整数。\n\n请你返回 `n` 个数位的整数中，有多少个 **好** 整数。\n\n**注意** ，任何整数在重新排列数位之前或者之后 **都不能** 有前导 0 。比方说 1010 不能重排列得到 101 。\n\n \n\n**示例 1：**\n\n> **输入：** n = 3, k = 5\n>\n> **输出：** 27\n>\n> **解释：**\n>\n> 部分好整数如下：\n>\n> - 551 ，因为它可以重排列得到 515 。\n> - 525 ，因为它已经是一个 k 回文整数。\n\n**示例 2：**\n\n> **输入：** n = 1, k = 4\n>\n> **输出：** 2\n>\n> **解释：**\n>\n> 两个好整数分别是 4 和 8 。\n\n**示例 3：**\n\n> **输入：** n = 5, k = 6\n>\n> **输出：** 2468\n\n \n\n**提示：**\n\n- `1 <= n <= 10`\n- `1 <= k <= 9`\n\n## 分析思路\n\n我们可以把问题拆分为两个部分：\n\n1. **判断数位集合是否有回文排列**\n    一个数的数位可以重新排列成回文数当且仅当：\n   - 当 n 为偶数：所有数字出现次数均为偶数。\n   - 当 n 为奇数：最多只有一个数字出现次数为奇数，其余为偶数。\n2. **存在回文排列且该排列满足被 k 整除**\n   - 由于我们要求构造的回文排列不能有前导 0，所以构造时需要保证最左位数字不为 0。\n   - 对于一个给定的符合“回文排列”条件的数位集合，若存在一种排列构成的回文数能被 k 整除，则我们将此多重集认为是合格的。\n   - 注意：一个 n 位整数只要其数位集合满足条件（存在至少一种排列构成合格的 k 回文数），那么所有拥有相同数位多重集的 n 位整数都是好整数。\n\n### 构造方案\n\n由于 n 的范围最多为 10，因此直接枚举所有 n 位**回文数**来检查被 k 整除的条件是可行的。根据 n 的奇偶性，我们可以分为两种情况：\n\n- **n 为偶数**：\n   设 m = n/2，回文数为：\n\n  ```\n  half + reverse(half)\n  ```\n\n  枚举长度为 m 的数字串，其中第一个字符（对应整体最高位）不为 0。\n\n- **n 为奇数**：\n   设 m = n//2，则回文数为：\n\n  ```\n  half + mid + reverse(half)\n  ```\n\n  其中 half 枚举同上（第一个字符非 0），mid 为 0～9 均可。\n\n对于每个构造出来的回文数，如果它满足能被 k 整除的条件，则提取其“数字多重集”（即各个数字出现的次数），并存入一个集合中，确保对于同一多重集只记录一次。\n\n### 计数方法\n\n对于一个记录下来的数字多重集（长度为 n），所有的排列数为\n$$\n\\text{total} = \\frac{n!}{\\prod_{d=0}^{9} (\\text{count}[d]!)}\n$$\n但由于存在前导 0 的问题，对于包含 0 的情况，我们需要剔除那些首位为 0 的排列。\n\n- 若多重集中 0 出现次数为 c0 > 0，则固定首位为 0后，剩余排列数为\n\n$$\n\\text{invalid} = \\frac{(n-1)!}{(c_0-1)! \\prod_{d=1}^{9} (\\text{count}[d]!)}\n$$\n\n- 故该多重集对应的合法 n 位数字数为\n  $$\n  \\text{valid} = \\text{total} - \\text{invalid} \\quad \\left( \\text{当}\\ c_0 > 0 \\right)\n  $$\n  或者当 c0=0，则 valid = total。\n\n对所有满足条件的多重集，将其合法排列数累加即为答案。\n\n### 算法时间复杂度分析\n\n- **枚举回文数**\n\n  - 对于 n 为偶数：需要枚举 $10^{\\frac{n}{2}-1} * 9$ 个数，最多约$O(10^\\frac{n}{2})$；\n  - 对于 n 为奇数：乘上 10 种中间数字情况，依然是 $O(10^\\frac{n}2)$。\n\n  由于 n ≤ 10，最坏情形枚举数量不会超过 $10^5$，计算量是可接受的。\n\n- **多重集计数**\n   对于每个多重集，计算排列数的时间复杂度为 O(10)（数字个数恒定），因此总体时间复杂度主要取决于回文数枚举部分，为 $O(10^\\frac{n}2)$。\n\n### 总结\n\n1. 枚举所有符合 n 位、无前导 0 的回文数；\n2. 检查该回文数能否被 k 整除；\n3. 对满足条件的回文数，提取其数字多重集，并保证每个多重集只计入一次；\n4. 对每个多重集，计算所有排列中首位不为 0 的排列数，并累加结果。\n\n### 代码实现：\n\n```python\nfrom math import factorial\n\nclass Solution:\n    def countGoodIntegers(self, n: int, k: int) -> int:\n        \"\"\"\n        统计 n 位整数中好整数的数量。\n        好整数定义为：其数位重新排列后可以得到一个回文且能被 k 整除，\n        且排列后不能有前导 0。\n        \"\"\"\n        # 对 n==1 情况单独处理\n        if n == 1:\n            count = 0\n            for d in range(1, 10):\n                if d % k == 0:\n                    count += 1\n            return count\n        \n        good_multisets = set()  # 存储符合条件的多重集（以元组形式存储 0~9 的数字出现次数）\n        \n        if n % 2 == 0:\n            # n 为偶数，回文数由半边构造\n            half_len = n // 2\n            start = 10 ** (half_len - 1)\n            end = 10 ** half_len\n            for num in range(start, end):\n                half_str = str(num)\n                pal_str = half_str + half_str[::-1]  # 构造回文数\n                # 已经保证 half_str 的首位不为 '0'\n                pal_num = int(pal_str)\n                if pal_num % k == 0:\n                    counts = [0] * 10\n                    for ch in pal_str:\n                        counts[int(ch)] += 1\n                    good_multisets.add(tuple(counts))\n        else:\n            # n 为奇数，多一位中间数字\n            half_len = n // 2\n            # 当 n>=3 时，half_len>=1，此时可以按原逻辑构造\n            start = 10 ** (half_len - 1)\n            end = 10 ** half_len\n            for num in range(start, end):\n                half_str = str(num)\n                for mid in range(10):\n                    pal_str = half_str + str(mid) + half_str[::-1]\n                    # half_str 保证首位不为 '0'\n                    pal_num = int(pal_str)\n                    if pal_num % k == 0:\n                        counts = [0] * 10\n                        for ch in pal_str:\n                            counts[int(ch)] += 1\n                        good_multisets.add(tuple(counts))\n        \n        # 预计算阶乘\n        fact = [1] * (n + 1)\n        for i in range(1, n + 1):\n            fact[i] = fact[i - 1] * i\n        \n        total_good = 0\n        # 对每个符合条件的数字多重集，计算满足无前导0限制的排列数\n        for counts in good_multisets:\n            # 计算该多重集所有排列数： n! / (c0! * c1! * ... * c9!)\n            total_perm = fact[n]\n            for c in counts:\n                total_perm //= fact[c]\n            \n            # 如果该多重集中包含0，需要排除首位为0的排列\n            if counts[0] > 0:\n                # 固定首位为0，剩余的排列数为 (n-1)! / ((c0-1)! * (c1)! ... (c9)!)\n                prod_nonzero = 1\n                for d in range(1, 10):\n                    prod_nonzero *= fact[counts[d]]\n                invalid = fact[n - 1] // (fact[counts[0] - 1] * prod_nonzero)\n                valid_perm = total_perm - invalid\n            else:\n                valid_perm = total_perm\n            \n            total_good += valid_perm\n        \n        return total_good\n```\n\n> 注意：需要对 n==1 的情况进行单独处理。由于一位数的重排列只能为其本身，所以对于一位数，只需要统计 1 到 9 中能被 k 整除的数字即可。\n\n1. **对 n==1 的处理**\n    直接遍历 1～9 的单个数字，检查每个数字是否能被 k 整除，若能则计数。\n\n2. **回文数生成**\n\n- 当 n 为偶数时，构造回文数格式为 `half + reverse(half)`。\n\n- 当 n 为奇数时，遍历中间数字 `mid`，构造回文数格式为 `half + mid + reverse(half)`。\n\n  >  注：此处保证 `half` 的首位非 0。\n\n3. **多重集记录与排列数计算**\n\n- 将符合条件的回文数的数字多重集（各个数字出现的次数）存入集合避免重复计入。\n- 利用阶乘及组合公式计算总排列数，再剔除那些首位为 0 的排列（当数字 0 存在时）。\n\n","tags":["Algorithm","枚举与剪枝","排列组合","回文数构造","困难"],"categories":["算法"]},{"title":"Excel函数使用与周报开发","url":"/post/excelfunc.html","content":"\n# Excel 知识笔记\n\n本文主要介绍 Excel 中的一些高级知识和常用函数，重点涵盖数据透视表、常用函数（SUM、SUMIF、SUMIFS、SUBTOTAL、IF、VLOOKUP、XLOOKUP、INDEX、MATCH）以及周报开发的相关内容。\n\n------\n\n## 1. 📊 数据透视表（Pivot Table）\n\n### 1.1. 数据透视表简介\n\n数据透视表是 Excel 中用于***快速汇总、分析和展示***大量数据的工具。它能够根据用户的需求动态调整数据的展示形式，例如按类别汇总、计算总和或平均值等。\n\n### 1.2. 创建数据透视表\n\n1. 选择数据区域（确保数据有表头）。\n\n2. 进入“插入”选项卡，点击“数据透视表”按钮。\n\n3. 在弹出的对话框中，选择新建工作表或现有工作表。\n\n   ![excel_pivot](https://s2.loli.net/2025/04/11/Gh6kwbrclpPS82o.png)\n\n4. 在数据透视表字段窗格中拖拽字段至行、列、数值和筛选区域。\n\n   ![excel_pivot2](https://s2.loli.net/2025/04/11/ZHY3WJm5oLaj74A.png)\n\n   > 将文本型拖拽至行，数值型拖拽至值，可以实现sum+group by的效果\n\n5. 双击字段可以对其进行重命名\n\n   ![excel_pivot3](https://s2.loli.net/2025/04/11/LDnbkg3AVUR4EFr.png)\n\n6. 在字段、项目和集中可以插入自定义计算字段，输入完成后修改名称点击修改即可添加，添加完成后会出现在数据透视表字段中，勾选后即可添加到数据透视表中\n\n![excel_pivot4](https://s2.loli.net/2025/04/11/lhR4vWUEztXDI1n.png)\n\n### 1.3. 数据透视表技巧\n\n- **字段筛选和排序**：利用字段列表中的筛选按钮对数据进行快速筛选和排序。\n\n- **分组数据**：右击行/列标签，选择“分组”，例如按日期分组按月或季度统计。\n\n- **数据格式化**：右键单击数据区域，选择“值字段设置”，自定义数据汇总方式和数字格式。\n\n- 拖拽字段到对应区域：\n\n  - **行/列**：分组维度（时间等）\n\n  - **值**：计算指标（求和/计数/平均值/占比）\n\n  - **筛选器**：数据过滤，直接拖拽字段即可在数据透视表增加筛选项\n\n  - 插入切片器：可视化**联动**筛选，点击不同的筛选项，数据透视表会自动更新表内数值，同时，切片器处于**当前工作表外**的工作表时点击，同样可以筛选当前表的内容，而筛选器只能在当前数据透视表内使用\n\n    ![excel_pivot5](https://s2.loli.net/2025/04/11/9pQjEZkbTftowRe.png)\n\n  - 刷新数据：右键 → 刷新\n\n- 点击数据透视表，插入数据透视图，右键可以更改图表类型，可以插入多张数据透视图，图表也会根据切片器内容进行变换\n\n![excel_pivot6](https://s2.loli.net/2025/04/11/RVvXKolMzHcIrQd.png)\n\n![excel_pivot7](https://s2.loli.net/2025/04/11/yYMwi9xvP8BSabK.png)\n\n- 插入组合图可以将多种图表混合展示\n\n![excel_pivot8](https://s2.loli.net/2025/04/11/DQKchpe7EJ9TIxH.png)\n\n------\n\n## 2.📈 进阶数据透视表技巧\n\n### 1. 计算字段与计算项\n\n- **计算字段**：在值区域添加自定义公式  \n  `分析 → 字段、项目和集 → 计算字段`  \n  示例：`利润率 = (销售额 - 成本)/销售额`\n\n- **时间智能计算**（结合Power Pivot）  \n\n  ```excel\n  MTD销售额 := TOTALMTD(SUM(数据[销售额]), 数据[日期])\n  ```\n\n### 2. 动态数据源\n\n- **超级表（Ctrl+T）**\n  将数据区域转换为表 → 透视表自动扩展范围\n- **连接Power Query**\n  通过ETL清洗后的数据自动更新透视表\n\n------\n\n## 3. 常用函数详解\n\n### 2.1. SUM\n\n- **功能**：对一组数值求和。\n\n- **语法**： `=SUM(number1, [number2], …)`\n\n- **示例**：\n\n  ```excel\n  =SUM(A1:A10)\n  ```\n\n### 2.2. SUMIF\n\n- **功能**：根据单一条件对范围内符合条件的数值求和。\n\n- **语法**： `=SUMIF(range, criteria, [sum_range])`\n\n- **示例**：\n\n  ```\n  =SUMIF(B1:B10, \">100\", C1:C10)\n  ```\n\n### 2.3. SUMIFS\n\n- **功能**：根据多个条件对范围内符合条件的数值求和。\n\n- **语法**： `=SUMIFS(sum_range, criteria_range1, criteria1, [criteria_range2, criteria2], …)`\n\n- sumifs(要返回的值所在列, 查找条件1所在列, 查找限定条件1, 查找条件2所在列, 查找限定条件2……)\n\n- **示例**：\n\n  ```\n  =SUMIFS(C1:C10, A1:A10, \"产品A\", B1:B10, \">100\")\n  ```\n\n- 通常会设计计算月总和，环比等数值，因此需要计算上个月的这一天用来作为被减项用于筛选时间范围，Excel中，日期表示的是从1900.01.01到今天的天数，有以下几种方法可以计算上个月\n  - `EDATE(start_date，months)`返回一串日期，指示起始日期之前/之后的月数，如`EDATE(A1，-1)`表示这天的前一个月，7月31日会返回6月30日\n  - `EOMONTH(start_date，months)`返回一串日期，表示指定月数之前或之后的月份的最后一天（只针对月份操作）如`EOMONTH(A1,-1)+1`表示这个时间月份的第一天，比如8月（无论几号）会返回8月1日，不+1则会返回7月31日\n  - `DATE(YEAR(A1),MONTH(A1),1)`返回本月的第一天，最直观的形式，在date函数外再-1即可返回上月的最后一天\n\n### 2.4. SUBTOTAL\n\n- **功能**：返回数据列表或数据库中的分类汇总。subtotal值会根据字段筛选而变化。\n\n- **语法**： `=SUBTOTAL(function_num, ref1, [ref2], …)`\n\n- **常用 function_num**：\n\n  - 9：求和\n  - 1：求平均值\n\n- **示例**：\n\n  ```\n  =SUBTOTAL(9, A1:A10)\n  ```\n\n### 2.5. IF\n\n- **功能**：根据条件返回不同的结果，一般需要多层嵌套使用。\n\n- **语法**： `=IF(logical_test, value_if_true, value_if_false)`\n\n- **示例**：\n\n  ```\n  =IF(A1>100, \"大于100\", \"小于等于100\")\n  ```\n\n### 2.6. VLOOKUP\n\n- **功能**：在数据区域的首列中搜索指定值，并返回该值所在行中指定列的内容。\n\n- **语法**： `=VLOOKUP(lookup_value, table_array, col_index_num, [range_lookup])`\n\n- VLOOKUP(查找值, 查找区域(要查找的必须在第一列), 返回第几列, 0)\n\n- **示例**：\n\n  ```\n  =VLOOKUP(\"产品A\", A1:D10, 3, FALSE)\n  ```\n\n### 2.7. XLOOKUP\n\n- **功能**：现代化的查找函数，能够向任意方向查找数据，取代 VLOOKUP/HLOOKUP。\n\n- **语法**： `=XLOOKUP(lookup_value, lookup_array, return_array, [if_not_found], [match_mode], [search_mode])`\n\n- XLOOKUP(查找值, 查找值所在列, 返回列, 未找到返回值(可选), 匹配模式(可选), 搜索模式(可选))\n\n- **示例**：\n\n  ```\n  =XLOOKUP(\"产品A\", A1:A10, C1:C10, \"未找到\")\n  ```\n\n### 2.8. INDEX 和 MATCH\n\n- **INDEX**\n\n  - **功能**：返回数组中指定位置的值。\n  - **语法**： `=INDEX(array, row_num, [column_num])`\n  - INDEX(区域, 行号, 列号)：根据行号从某列中返回对应的值\n\n- **MATCH**\n\n  - **功能**：返回指定值在一维数组中的相对位置。\n  - **语法**： `=MATCH(lookup_value, lookup_array, [match_type])`\n  - MATCH(查找值, 区域, 0)：在某行/列中查找指定的值，并返回其列/行号\n\n- **组合使用示例**：\n\n  ```\n  =INDEX(C1:C10, MATCH(\"产品A\", A1:A10, 0))\n  \n  index(数据区域,match(行查找顶,index数据区域的相对区域,0),match(列查找项,indexB数据区域的相对区域,0))\n  ```\n\n同时使用xlookup和index+match实现的相同功能\n\n![index_match](https://s2.loli.net/2025/04/11/tpAuPg7GJbKjSQF.png)\n\n当函数不清晰时，可以先把要实现的函数单独写好，再复制进完整的表达式，同时可以配合`ALT+ENTER`在函数中换行避免混淆\n\n## 4.🔢 常用函数总结\n\n### 基础聚合\n\n| 函数     | 语法                                                  | 说明                 | 周报应用示例                                                |\n| -------- | ----------------------------------------------------- | -------------------- | ----------------------------------------------------------- |\n| SUM      | `=SUM(range)`                                         | 基础求和             | `=SUM(C2:C100)` → 周总销售额                                |\n| SUMIF    | `=SUMIF(range, criteria, [sum_range])`                | 单条件求和           | `=SUMIF(A2:A100, \"华东\", C2:C100)` → 华东区销售总额         |\n| SUMIFS   | `=SUMIFS(sum_range, criteria_range1, criteria1, ...)` | 多条件求和           | `=SUMIFS(C2:C100, A2:A100, \"华东\", B2:B100, \">2023-01-01\")` |\n| SUBTOTAL | `=SUBTOTAL(function_num, range)`                      | 分类汇总（支持筛选） | `=SUBTOTAL(9, C2:C100)` → 筛选后可见数据求和                |\n\n### 逻辑判断\n\n| IF   | `=IF(logical_test, [value_if_true], [value_if_false])` |\n| ---- | ------------------------------------------------------ |\n| 示例 | `=IF(C2>10000, \"达标\", \"未达标\")` → 销售目标判断       |\n\n### 查找匹配\n\n| 函数        | 语法                                                         | 特点                                       |\n| ----------- | ------------------------------------------------------------ | ------------------------------------------ |\n| VLOOKUP     | `=VLOOKUP(lookup_value, table_array, col_index_num, [range_lookup])` | 纵向查找，需注意**首列匹配**和**列索引号** |\n| XLOOKUP     | `=XLOOKUP(lookup_value, lookup_array, return_array, [if_not_found], [match_mode], [search_mode])` | 支持双向查找、错误处理，更灵活             |\n| INDEX+MATCH | `=INDEX(return_range, MATCH(lookup_value, lookup_range, 0))` | 灵活组合，支持多维度查找                   |\n\n------\n\n- \n\n------\n\n## 5.🔍 高阶函数扩展\n\n### 动态数组函数（Excel 365+）\n\n| 函数   | 作用             | 周报应用                                        |\n| ------ | ---------------- | ----------------------------------------------- |\n| FILTER | 条件筛选数据区域 | `=FILTER(订单表, (销售额>10000)*(区域=\"华东\"))` |\n| SORT   | 动态排序         | `=SORT(UNIQUE(产品列表),,-1)`                   |\n| UNIQUE | 去重提取         | `=UNIQUE(销售大区)`                             |\n\n### 时间处理函数\n\n```\n=WEEKNUM(A2)  // 返回日期所属周数（周报核心函数）\n=EDATE(A2,3)  // 计算3个月后的日期（常用于滚动预测）\n=TEXT(A2,\"YYYY-MMM\")  // 日期转\"2023-Jul\"格式\n```\n\n### 错误处理\n\n```\n=IFERROR(VLOOKUP(...), \"未找到\")  // 屏蔽#N/A错误\n=AGGREGATE(9,6,C2:C100)  // 忽略隐藏行和错误值的求和\n```\n\n## 6.周报开发\n\n- [ ] 掌握数据引用、公式填写和自动化拖拽等基本功能\n- [ ] 理解数据美化、数据计算与逻辑结构的构建\n\n**整体流程建议：**\n\n- **先搭建框架：** 建立好各区域结构及基本引用和公式\n- **再填数据：** 在框架内填充各项指标数据和日期\n- **最后美化：** 格式设置、风格统一等作为最后一步处理，避免中途美化造成数据修改的不便\n\n### 6.1 周报框架搭建\n\n#### 1. 周报结构\n\n- **四大区域**：\n\n  1. 标题（包含时间范围）\n  2. 目标看板（单独区域展示周报的目标内容，如累计值，环比，同比等，同时包含筛选器）\n  3. 结果指标（GMV、商家实收、到手率等）\n  4. 过程指标（曝光人数、转化率等）\n\n  > 小看板区域（3、4）显示关键指标的概览，通常包括目标、区域、过程指标和结果指标。\n\n#### 2. 基础设置\n\n- **标题**：`A2`单元格填写`2020年8月第二周`\n\n- **日期列**：\n\n  - 输入起始日期（如在`A13`输入`2020-08-10`）\n  - 后续日期使用公式`=A13+1`并拖动填充（需从第二个单元格开始拖动）向下拖动填充至 A19，生成 8 月 10 日 - 16 日的日期。\n\n  ![zhoubao1](https://s2.loli.net/2025/04/11/JrDCv3qbeVa6XdM.png)\n\n- **星期列**：\n\n  - 右键单元格 → 设置单元格格式 → 数字 → 日期 → 选择 “周几” 格式（如 “周三”）\n\n  ![zhoubao2](https://s2.loli.net/2025/04/11/xApZhg4wFU9Inke.png)\n\n- **日期联动**：\n\n  - 所有与日期相关的操作都建议使用引用方式，这样如果改变某个日期数据，其他依赖数据也会自动更新，极大地提升工作效率\n  - 使用公式动态引用日期，避免手动修改（选中 `A13:A19`，根据需要设置为 “短日期” 格式，如`=TEXT(A2, \"m月d日\")`）\n\n#### 3.  指标体系构建\n\n1. 结果指标（核心数据）\n\n| 指标     | 说明                             | 计算公式                         |\n| -------- | -------------------------------- | -------------------------------- |\n| GMV      | 总成交额                         | 直接引用原数据或通过 SUMIFS 计算 |\n| 商家实收 | 商家实际收入                     | 同上                             |\n| 到手率   | 实收 / GMV，反映收入转化率       | `=商家实收/GMV`                  |\n| 有效订单 | 有效订单数                       | 直接引用                         |\n| 无效订单 | 无效订单数                       | 直接引用                         |\n| 客单价   | GMV / 有效订单，反映平均消费金额 | `=GMV/有效订单`                  |\n\n2. 过程指标（流量漏斗）\n\n| 指标       | 说明                                  | 计算公式             |\n| ---------- | ------------------------------------- | -------------------- |\n| 曝光人数   | 店铺曝光次数                          | 直接引用             |\n| 进店人数   | 点击进入店铺的人数                    | 直接引用             |\n| 进店转化率 | 进店人数 / 曝光人数，反映流量承接能力 | `=进店人数/曝光人数` |\n| 下单人数   | 实际下单的人数                        | 直接引用             |\n| 下单转化率 | 下单人数 / 进店人数，反映转化效率     | `=下单人数/进店人数` |\n| 营销占比   | cpc总费用 / GMV，反映投放效果         | `=cpc总费用 / GMV`   |\n\n------\n\n### 6.2 核心函数与数据引用\n\n#### 1. 数据验证（筛选器）\n\n- **步骤**：\n\n  1. 选择目标单元格（如平台筛选器）\n  2. 数据 → 数据验证 → 允许“序列”\n  3. 输入选项：`全部,美团,饿了么`（英文逗号分隔）\n  4. 点击确定，生成下拉菜单\n\n  ![zhoubao3](https://s2.loli.net/2025/04/11/RVzQnEvb31qcoOw.png)\n\n  > **作用**：通过选择平台（全部 / 美团 / 饿了么），动态筛选对应数据。\n\n#### 2. 动态条件求和（SUMIFS）\n\n- **配合筛选器的公式逻辑**：\n\n  ```excel\n  =IF(\n    平台单元格=\"全部\",\n    SUMIF(日期列, 当前日期, GMV列),\n    SUMIFS(GMV列, 日期列, 当前日期, 平台列, 平台单元格)\n  )\n  ```\n\n- **绝对引用与相对引用**：\n\n  - 固定不变的列或单元格使用绝对引用，例如: `H$5`, `A:A`\n  - 需要随拖拽变化的行或列使用相对引用，例如: `A13`\n  - 混合引用用于锁定列或行，例如: `A$13`\n  - 锁定区域：`$A$2:$X$1000`\n  - 锁定条件单元格：`$H$5`（平台筛选器）\n\n#### 3. 动态列引用（INDEX+MATCH）\n\n**目标**：让函数自动识别表头列，提高灵活性（如 GMV 列、商家实收列可动态切换），因此需要先写出日期列，平台列（筛选器），求和列的公式\n\n- **查找列名位置**：\n\n  使用MATCH 找到目标列在表头中的位置，再使用INDEX 根据列位置提取数据\n\n  ```excel\n  =INDEX(原表数据区域, 0, MATCH(列名标题, 表头行, 0))\n  ```\n\n- **示例（日期列动态引用）**：\n\n  ```excel\n  =INDEX($A:$X, 0, MATCH(\"日期\", $A$1:$X$1, 0))\n  ```\n\n- **示例（动态求和 GMV 列）：**\n\n  ```excel\n  =SUMIFS(INDEX(数据区域, , MATCH(\"GMV\", 表头, 0)), 日期列, 当天日期, 平台列, H5)\n  ```\n\n**拖拽填充：**\n\n- 从第二个有公式的单元格开始拖拽，确保公式自动更新。\n- 如果直接从第一个单元格拖拽，可能会只是简单的序列填充，而没有公式。\n- 例如，若第一个单元格手动修改为“9”，则后续单元格不会自动更新公式中的逻辑。\n\n> **注意**: \n> 使用INDEX和MATCH组合动态获取日期列、GMV列和平台列，替换SUMIF和SUMIFS公式中对应的部分\n> 替换后的公式会变得很长，要仔细核对括号和参数。\n\n### 6.3 关键指标计算\n\n#### 1. 计算型指标\n\n- **到手率**：`=商家实收/GMV`\n\n  > *注意*：结果设为百分比格式（保留 2 位小数）\n\n  ```excel\n  =IF($H$5=\"全部\",SUMIF(INDEX('拌客源数据1-8月'!$A:$X,0,MATCH($A$12,'拌客源数据1-8月'!$A$1:$X$1,0)),$A13,\n  INDEX('拌客源数据1-8月'!$A:$X,0,MATCH(C$12,'拌客源数据1-8月'!$A$1:$X$1,0))),\n  SUMIFS(INDEX('拌客源数据1-8月'!$A:$X,0,MATCH(C$12,'拌客源数据1-8月'!$A$1:$X$1,0)),\n  INDEX('拌客源数据1-8月'!$A:$X,0,MATCH($A$12,'拌客源数据1-8月'!$A$1:$X$1,0)),$A13,\n  INDEX('拌客源数据1-8月'!$A:$X,0,MATCH(\"平台i\",'拌客源数据1-8月'!$A$1:$X$1,0)),$H$5))\n  ```\n\n  逻辑在2中已经陈述\n\n- **客单价**：`=GMV/有效订单`\n\n- **转化率（进店 / 下单）**：\n\n  - 进店转化率：`=进店人数/曝光人数`\n  - 下单转化率：`=下单人数/进店人数`\n\n- **营销占比：**`=CPC总费用 / GMV`\n\n  ```excel\n  =IF($H$5=\"全部\",SUMIF(INDEX('拌客源数据1-8月'!$A:$X,0,MATCH($A$12,'拌客源数据1-8月'!$A$1:$X$1,0)),$A13,\n  INDEX('拌客源数据1-8月'!$A:$X,0,MATCH(\"cpc总费用\",'拌客源数据1-8月'!$A$1:$X$1,0))),\n  SUMIFS(INDEX('拌客源数据1-8月'!$A:$X,0,MATCH(\"cpc总费用\",'拌客源数据1-8月'!$A$1:$X$1,0)),\n  INDEX('拌客源数据1-8月'!$A:$X,0,MATCH($A$12,'拌客源数据1-8月'!$A$1:$X$1,0)),$A13,\n  INDEX('拌客源数据1-8月'!$A:$X,0,MATCH(\"平台i\",'拌客源数据1-8月'!$A$1:$X$1,0)),$H$5))/$C13\n  ```\n\n#### 2. 周累计与周环比（时间维度分析）\n\n1. **周累计（当周总和）**\n\n   - **方法**：对当周 7 天的数据求和（使用`SUM`函数或快捷键`Alt+=`）\n     *例：曝光人数周累计*：`=SUM(H13:H19)`（H13-H19 为每天曝光人数）\n\n2. **周环比（与上周对比）**\n\n   - **公式**：`=(本周数据/上周数据)-1`（结果为百分比，正增长为绿色，负增长为红色）\n   - 将日期范围向前偏移 7 天（如本周第一天为 `A13`，上周第一天为`A13-7`）\n   - **上周GMV数据公式**：\n\n   ```excel\n   =SUMIFS(\n     数值列,\n     日期列, \">=\"&起始日期-7,\n     日期列, \"<=\"&结束日期-7(或<当前日期),\n     平台列, 平台筛选器\n   )\n   ```\n\n**例：有效订单周环比**\n\n```excel\n=A9/IF($H$5=\"全部\",SUMIFS(INDEX('拌客源数据1-8月'!$A:$X,0,MATCH(F$12,'拌客源数据1-8月'!$A$1:$X$1,0)),\nINDEX('拌客源数据1-8月'!$A:$X,0,MATCH($A$12,'拌客源数据1-8月'!$A$1:$X$1,0)),\">=\"&$A13-7,\nINDEX('拌客源数据1-8月'!$A:$X,0,MATCH($A$12,'拌客源数据1-8月'!$A$1:$X$1,0)),\"<\"&$A13),\nSUMIFS(INDEX('拌客源数据1-8月'!$A:$X,0,MATCH(F$12,'拌客源数据1-8月'!$A$1:$X$1,0)),\nINDEX('拌客源数据1-8月'!$A:$X,0,MATCH($A$12,'拌客源数据1-8月'!$A$1:$X$1,0)),\">=\"&$A13-7,\nINDEX('拌客源数据1-8月'!$A:$X,0,MATCH($A$12,'拌客源数据1-8月'!$A$1:$X$1,0)),\"<\"&$A13,\nINDEX('拌客源数据1-8月'!$A:$X,0,MATCH(\"平台i\",'拌客源数据1-8月'!$A$1:$X$1,0)),$H$5))-1\n```\n\n其中A9为本周有效订单\n\n#### 3. 业务进度计算\n\n- **当月GMV总和**：日期条件为大于等于本月第一天（在SUMIFS中介绍了3种实现方式）\n\n  ```excel\n  =SUMIFS(GMV列, 日期列, \">=\"&EOMONTH(TODAY(),-1)+1)\n  ```\n\n- **进度公式**：`=当月累计GMV/目标值`目标值的设置使用IF嵌套，将在6.5中提到\n\n  ```excel\n  =IF($H$5=\"全部\",SUMIFS(INDEX('拌客源数据1-8月'!$A:$X,0,MATCH(C$12,'拌客源数据1-8月'!$A$1:$X$1,0)),\n  INDEX('拌客源数据1-8月'!$A:$X,0,MATCH($A$12,'拌客源数据1-8月'!$A$1:$X$1,0)),\">=\"&EOMONTH(A13,-1)+1,\n  INDEX('拌客源数据1-8月'!$A:$X,0,MATCH($A$12,'拌客源数据1-8月'!$A$1:$X$1,0)),\"<=\"&$A19),\n  SUMIFS(INDEX('拌客源数据1-8月'!$A:$X,0,MATCH(C$12,'拌客源数据1-8月'!$A$1:$X$1,0)),\n  INDEX('拌客源数据1-8月'!$A:$X,0,MATCH($A$12,'拌客源数据1-8月'!$A$1:$X$1,0)),\">=\"&DATE(YEAR(A13),MONTH(A13),1),\n  INDEX('拌客源数据1-8月'!$A:$X,0,MATCH($A$12,'拌客源数据1-8月'!$A$1:$X$1,0)),\"<=\"&$A19,\n  INDEX('拌客源数据1-8月'!$A:$X,0,MATCH(\"平台i\",'拌客源数据1-8月'!$A$1:$X$1,0)),$H$5))/$H$8\n  ```\n\n  逻辑：判断筛选器是否为全部，是则使用sumifs计算要求的值，条件设置大于本月第一天，小于本周的最后一天，否则多使用sumifs增加一个判断平台的条件，其余相同。\n\n### 6.4 可视化与格式优化\n\n#### 1. 数值格式\n\n- **百分比**：选中转化率、到手率等单元格，按`Ctrl+Shift+%`。\n\n- **保留小数**：右键→设置单元格格式→数值→小数位数（如 2 位）/直接在开始菜单点击。\n\n  ![zhoubao4](https://s2.loli.net/2025/04/11/ORKnvWMy15TU3LX.png)\n\n#### 2. 条件格式\n\n- **数据条**：可视化进度（如业务进度）\n\n  操作：选中单元格 →【开始】→【条件格式】→【新建规则】→【基于各自值设置所有单元格的格式】→【格式样式：数据条】→【选择类型】\n  如：选中数值区域 → 条件格式 → 数据条 → 类型选择数字 → 最大值设置为1 → 设置颜色 → 渐变填充\n\n  ![zhoubao5](https://s2.loli.net/2025/04/11/Swokm5OgZEfPj89.png)\n\n- **颜色标记**：标记正负值（如周环比）\n\n  操作：新建规则 → 只为包含以下内容的单元格设置格式 → “单元格值> 0” 设为绿色，“≤0” 设为红色（设置两次）。\n\n  ![zhoubao6](https://s2.loli.net/2025/04/11/KClDevNhX5EzFGJ.png)\n\n- **图标集**：显示趋势（上升 / 下降箭头）\n\n  操作：条件格式 → 新建规则 → 基于各自值设置所有单元格的格式 → 图标集 → 选择 “三向箭头”或自定义中间值（0）为横线 → 分别设置>0, =0, <0的图标 → 类型设置为**数字**\n\n  - 大于0：绿色字体 + ↑图标\n  - 等于0：红色字体 + -图标\n  - 小于0：红色字体 + ↓图标\n\n  ![zhoubao7](https://s2.loli.net/2025/04/11/fdAN4vDgVOBFSQl.png)\n\n- **低于GMV平均值标记**：(注意混合引用)\n\n  - 标记低于周平均值的GMV数值\n  - 选中结果指标区域 →  条件格式 →  新建规则  →  使用公式确定要设置格式的单元格\n\n  ```excel\n  =$C13 < AVERAGE($C$13:$C$19)\n  ```\n\n  - 格式 →  下划线 →  加粗\n\n  ![zhoubao8](https://s2.loli.net/2025/04/11/MyVvPFasfj8xApt.png)\n\n- **格式刷**\n\n  - 单击格式刷：复制格式到单个单元格\n  - 双击格式刷：复制格式到多个单元格\n\n  点击管理自定义规则即可查看、修改设置的规则\n\n  ![zhoubao9](https://s2.loli.net/2025/04/11/bHoNGgAKUcVqwiv.png)\n\n#### 3. 迷你图制作\n\n- **步骤**：\n\n  1. 选中数据区域（如一周的曝光人数）\n\n  2. 【插入】 → 【迷你图 】→ 折线图\n\n     ![zhoubao10](https://s2.loli.net/2025/04/11/a4FrJf2NR89Y6O1.png)\n\n  3. 指定放置单元格，设置标记（显示数据点）和高点颜色\n\n     ![zhoubao11](https://s2.loli.net/2025/04/11/1an5bU8gNjm7T4M.png)\n\n#### 4. 美化技巧\n\n- **格式优先**：先确保数据计算正确，在数据与公式全部建立后，**最后**进行整体的美化设计\n\n- **隐藏网格线：**视图 → 取消勾选“网格线”\n\n- **合并单元格**：合并标题单元格并居中，标题和列名加粗、放大\n\n- **添加主题色：**给结果指标和过程指标的表头（列名）添加主题色\n\n  ![zhoubao12](https://s2.loli.net/2025/04/11/PFvjyX1lKxcqrEe.png)\n\n- **边框与字体**：给小看板、指标表格添加外边框，统一字体（推荐微软雅黑），调整字体、对齐方式等\n\n  ![zhoubao13](https://s2.loli.net/2025/04/11/P8bvOyEd2M4GrmU.png)\n\n### 6.5 目标看板与业务进度\n\n#### 1. 目标设置\n\n- 按平台设定 GMV 目标（如全部 = 20 万，美团 = 15 万，饿了么 = 5 万）。\n  *示例*：在 H8 单元格输入公式\n  `=IF(H5=\"全部\",200000,IF(H5=\"美团\",150000,50000))`。\n\n#### 2. 业务进度\n\n- **公式**：`=截至目前GMV/目标`（如 `=SUMIFS(GMV列, 日期列, \">=\"&DATE(YEAR(A13),MONTH(A13),1))`表示大于当月第一天）。\n\n  > 已在6.3.3中做出陈述\n\n- **进度条**：通过条件格式→数据条可视化，最大值设为 1（100%）。\n\n  ![zhoubao14](https://s2.loli.net/2025/04/11/avTSQ9Vn3iJbsoG.png)\n\n### 6.6 自动化维护\n\n- **日期联动**：所有日期、星期、平台筛选均通过引用和公式实现，修改`A13`单元格日期（初始设置日期的单元格）后，所有关联数据自动更新\n- **数据扩展**：新增数据时，调整公式引用范围（如`$A:$X`改为`$A:$Z`）\n- **模板复用**：保存为模板文件（.xltx），每周复制使用\n\n> **提示**  \n>\n> 1. 所有公式中的区域引用需根据实际表格调整（如`A:X`为示例列范围）  \n> 2. 建议逐步测试每个函数模块，使用`F9`键分解验证公式逻辑  \n> 3. 格式美化可最后进行，避免干扰数据处理\n\n- 最终效果\n\n  ![zhoubao15](https://s2.loli.net/2025/04/11/cWlSQYHTry19Z4D.png)","tags":["数据操作","可视化","看板与报表"],"categories":["数据分析"]},{"title":"LeetCode每日一题2025.04.11","url":"/post/countSymmetricIntegers.html","content":"\n## [2843. 统计对称整数的数目](https://leetcode.cn/problems/count-symmetric-integers/) E\n\n给你两个正整数 `low` 和 `high` 。\n\n对于一个由 `2 * n` 位数字组成的整数 `x` ，如果其前 `n` 位数字之和与后 `n` 位数字之和相等，则认为这个数字是一个对称整数。\n\n返回在 `[low, high]` 范围内的 **对称整数的数目** 。\n\n**示例 1：**\n\n```\n输入：low = 1, high = 100\n输出：9\n解释：在 1 到 100 范围内共有 9 个对称整数：11、22、33、44、55、66、77、88 和 99 。\n```\n\n**示例 2：**\n\n```\n输入：low = 1200, high = 1230\n输出：4\n解释：在 1200 到 1230 范围内共有 4 个对称整数：1203、1212、1221 和 1230 。\n```\n\n- **提示：**$1 <= low <= high <= 10^4$\n\n\n\n题目需要找出在给定范围内满足特定数字对称条件的所有整数的数量。\n\n1. **检查位数是否为偶数**：只有当数字的位数是偶数时才有可能成为对称整数，否则直接跳过。\n2. **分割数字前后半部分**：对于一个 2*n 位数字，将该数字转换为字符串，然后将其前 n 位数字和后 n 位数字分别累加求和，判断两部分是否相等。两者之和相等，则该数字符合条件。\n3. **遍历范围**： low 和 high 的范围较小（最高 $10^4$），可以直接遍历 [low, high] 区间内的所有数字，对符合条件的数字进行计数。\n\n代码如下：\n\n```python\nclass Solution:\n    def countSymmetricIntegers(self, low: int, high: int) -> int:\n        count = 0\n        for num in range(low, high + 1):\n            num_str = str(num)\n            # 数字必须为偶数位，才能分成两部分比较\n            if len(num_str) % 2 == 0:\n                half = len(num_str) // 2\n                # 将前一半和后一半的各个数字相加\n                left_sum = sum(int(digit) for digit in num_str[:half])\n                right_sum = sum(int(digit) for digit in num_str[half:])\n                if left_sum == right_sum:\n                    count += 1\n        return count\n```\n\n- 首先通过 `str(num)` 将整数转换为字符串，以便判断数字的位数是否为偶数。\n- 如果是偶数位，则将字符串分为前后两部分，分别计算各自数字的和。\n- 如果两部分的和相等，则计数器 `count` 累加。\n\n通过遍历 [𝑙𝑜𝑤,ℎ𝑖𝑔ℎ]范围内的每个整数，对于每个数字：\n\n1. 将数字转换为字符串：复杂度 $O(d)$（其中 ddd 为数字的位数）。\n2. 对前半部分和后半部分求和，各需要 $O(d/2)$，加起来也是 $O(d)$。\n\n总体时间复杂度大致为 $O(N×d)$，其中 $N=high−low+1$，$d$通常为常数","tags":["Algorithm","暴力搜索","数位处理","字符串处理","简单"],"categories":["算法"]},{"title":"SQL常用函数补充","url":"/post/SQLfunc.html","content":"\n# SQL 执行顺序与常用函数\n\n## 🔄 SQL 语句执行顺序\n\n1. **FROM**  \n   从数据库复制原始表（生成临时表）\n2. **WHERE**  \n   在临时表中筛选符合条件的`数据行`\n3. **GROUP BY**  \n   按指定字段分组（类似Excel数据透视表的行标签）\n4. **HAVING**  \n   筛选满足条件的`分组`\n5. **ORDER BY**  \n   对结果进行排序\n6. **LIMIT**  \n   限制显示行数\n7. **SELECT**  \n   最终提取显示的字段\n\n> 📝 注意：SELECT *实际在最后阶段执行\n\n------\n\n## 常用函数汇总\n\n### 一、数学函数\n\n**`ROUND(x, y)`**  \n\n- 功能：四舍五入\n\n- 参数：\n\n  - `y>0`：保留小数点后y位  \n  - `y=0`：取整数  \n  - `y<0`：小数点左侧指定位变0  \n\n- 示例：\n\n  | 表达式           | 结果 |\n  | ---------------- | ---- |\n  | ROUND(3.15, 1)   | 3.2  |\n  | ROUND(14.15, -1) | 10   |\n\n------\n\n### 二、字符串函数\n\n| 函数                     | 功能说明                                                     | 示例                                                         |\n| ------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| `CONCAT(s1, s2,...)`     | 连接字符串（含NULL则返回NULL）                               | CONCAT('My',' ','SQL')→My SQL      CONCAT('My', NULL, 'SQL') → NULL |\n| `REPLACE(s, s1, s2)`     | 全量替换字符串                                               | REPLACE('MySQL','SQL','sql') → Mysql                         |\n| `LEFT(s,n)/RIGHT(s,n)`   | 截取左/右侧n字符                                             | LEFT('abcdefg',3) → abc                                      |\n| `SUBSTRING(s, n, len)`   | 从位置n截取len长度（支持负数位置）                           | SUBSTRING('abcdefg',-2,3) → fg SUBSTRING('abcdefg',2)→bcdefg |\n| `LOWER()`                | 将字母变为小写                                               | LOWER('A') → a                                               |\n| `UPPER()`                | 将字母变为大写                                               | UPPER('a') → A                                               |\n| `LENGTH()/CHAR_LENGTH()` | CHAR_LENGTH() 返回字符串的字符数，而 LENGTH() 返回字符串的字节数,对于 ASCII 字符，这两个函数的结果是相同的 | char_length('数') = 1(字符)， length('数') = 3(字节)         |\n\n#### **补充：GROUP_CONCAT 函数**\n\n**功能说明**\n将分组内的多个字符串值**合并为一个字符串**，常用于多值拼接（需配合 `GROUP BY` 使用）。\n\n```sql\nGROUP_CONCAT(\n    [DISTINCT] 字段名 \n    [ORDER BY 排序字段 [ASC|DESC]] \n    [SEPARATOR '分隔符']\n)\n```\n\n**示例数据**（表 `students`）：\n\n| class | name |\n| ----- | ---- |\n| A     | 张三 |\n| A     | 李四 |\n| B     | 王五 |\n\n```sql\nSELECT \n    class,\n    GROUP_CONCAT(name) AS members\nFROM students\nGROUP BY class;\n```\n\n**结果**：\n\n| class | members   |\n| ----- | --------- |\n| A     | 张三,李四 |\n| B     | 王五      |\n\n```sql\n-- 去重 + 自定义分隔符 + 排序\nSELECT \n    class,\n    GROUP_CONCAT(\n        DISTINCT name\n        ORDER BY name DESC\n        SEPARATOR '|'\n    ) AS members\nFROM students\nGROUP BY class;\n```\n\n> **注意事项**\n>\n> 1. **长度限制**：受 `group_concat_max_len` 参数限制（默认1024字节），超长部分被截断\n> 2. **NULL处理**：自动忽略 NULL 值\n> 3. **跨数据库差异**：\n>    - MySQL：`GROUP_CONCAT`\n>    - PostgreSQL：`STRING_AGG`\n>    - SQL Server：`STRING_AGG`（2017+版本）\n\n**典型应用场景**\n\n1. **标签聚合**\n\n   ```sql\n   -- 文章表+标签表联查，合并文章的所有标签\n   SELECT \n       a.title,\n       GROUP_CONCAT(t.tag_name) AS tags\n   FROM articles a\n   JOIN article_tags at ON a.id = at.article_id\n   JOIN tags t ON at.tag_id = t.id\n   GROUP BY a.id;\n   ```\n\n2. **路径生成**\n\n   ```sql\n   -- 生成层级路径（部门树结构）\n   SELECT \n       dept_id,\n       GROUP_CONCAT(parent_name SEPARATOR ' > ') AS full_path\n   FROM department_hierarchy\n   GROUP BY dept_id;\n   ```\n\n3. **动态SQL拼接**\n\n   ```sql\n   -- 生成批量更新语句（示例用途）\n   SELECT \n       CONCAT(\n           'UPDATE users SET status=1 WHERE id IN (',\n           GROUP_CONCAT(id SEPARATOR ','),\n           ');'\n       ) AS sql_statement\n   FROM temp_ids;\n   ```\n\n#### **补充：正则表达式函数**\n\n##### **1. 字符集（[] 内可用的符号）**\n\n| **符号** | **含义**                                                     | **示例**                                   | **匹配示例**                 |\n| -------- | ------------------------------------------------------------ | ------------------------------------------ | ---------------------------- |\n| `a-z`    | 任意小写字母                                                 | `[a-z]`                                    | `a`, `b`, ..., `z`           |\n| `A-Z`    | 任意大写字母                                                 | `[A-Z]`                                    | `A`, `B`, ..., `Z`           |\n| `0-9`    | 任意数字                                                     | `[0-9]`                                    | `0`, `1`, ..., `9`           |\n| `.`      | 字面量点（需转义 `\\.`）                                      | `[a-z.]`                                   | `a`, `b`, `.`                |\n| `_`      | 下划线                                                       | `[a-z_]`                                   | `a`, `_`                     |\n| `%`      | 百分号                                                       | `[a-z%]`                                   | `a`, `%`                     |\n| `+`      | 加号（在 `[]` 内是普通字符）                                 | `[a-z+]`                                   | `a`, `+`                     |\n| `-`      | 减号（需放在开头或结尾，否则表示范围如 `a-z`）               | `[-a-z]` 或 `[a-z-]`                       | `-`, `a`                     |\n| `^`      | 在 `[]` 内开头表示**否定**（如 `[^a-z]` 匹配非小写字母）     | `[^0-9]`                                   | `A`, `!`（不匹配 `1`）       |\n| `\\w`     | 等价于 `[a-zA-Z0-9_]`（单词字符）                            | `[\\w]`                                     | `a`, `1`, `_`                |\n| `\\d`     | 等价于 `[0-9]`（数字）                                       | `[\\d]`                                     | `0`, `1`                     |\n| `\\s`     | 空白字符（空格、制表符 `\\t`、换行 `\\n` 等）                  | `[\\s]`                                     | ``, `\\t`                     |\n| `\\b`     | 匹配 **单词和非单词字符之间的位置**（如空格、标点符号、字符串开头/结尾等） | `\\\\bword`<br />`word\\\\b`<br />`\\\\bword\\\\b` | 匹配单词开头、结尾和整个单词 |\n\n------\n\n##### **2. 量词（控制出现次数，单个字符不用加）**\n\n| **量词** | **含义**           | **示例** | **匹配示例**                    |\n| -------- | ------------------ | -------- | ------------------------------- |\n| `*`      | 零次或多次         | `a*`     | `\"\"`, `a`, `aa`（允许空字符串） |\n| `+`      | 一次或多次         | `a+`     | `a`, `aa`（不匹配空字符串）     |\n| `?`      | 零次或一次（可选） | `a?`     | `\"\"`, `a`                       |\n| `{n}`    | 恰好 `n` 次        | `a{2}`   | `aa`                            |\n| `{n,}`   | 至少 `n` 次        | `a{2,}`  | `aa`, `aaa`                     |\n| `{n,m}`  | `n` 到 `m` 次      | `a{2,4}` | `aa`, `aaa`, `aaaa`             |\n\n------\n\n##### **3. 边界和转义**\n\n| **符号** | **含义**                        | **示例**        | **作用**                    |\n| -------- | ------------------------------- | --------------- | --------------------------- |\n| `^`      | 匹配字符串开头                  | `^[a-z]`        | 必须以小写字母开头          |\n| `$`      | 匹配字符串结尾                  | `[a-z]$`        | 必须以小写字母结尾          |\n| `\\`      | 转义特殊字符（如 `\\\\.` 匹配点） | `example\\\\.com` | 避免 `.` 被解释为\"任意字符\" |\n| `|`      | 或逻辑（匹配左边或右边）        | `cat|dog`       | 匹配 `cat` 或 `dog`         |\n\n------\n\n##### **4. 组合用法示例**\n\n| **正则表达式**                 | **含义**                                   | **匹配示例**                     |\n| ------------------------------ | ------------------------------------------ | -------------------------------- |\n| `^[a-zA-Z0-9._%+-]+@`          | 邮箱本地部分（字母/数字/._%+-，至少1字符） | `user`, `name+123`               |\n| `@[a-zA-Z0-9.-]+\\\\.[a-z]{2,}$` | 域名部分（含点和至少2字母TLD）             | `@example.com`, `@sub.domain.co` |\n\n------\n\n> **注意事项**\n>\n> 1. **减号 -**：在 `[]` 内如果不是开头/结尾，表示范围（如 `a-z`）。\n>    - ✅ 正确：`[a-z-]` 或 `[-a-z]`\n>    - ❌ 错误：`[a-z-0-9]`（会被解析为 `z` 到 `-` 的范围）\n> 2. **点 .**：在 `[]` 外是通配符（匹配任意字符），需转义 `\\.` 才能匹配字面量点。\n> 3. **大小写敏感**：默认区分大小写，添加 `i` 标志可忽略（如 `/^[a-z]+$/i`）。\n\n**1. 正则匹配检测**\n\n| 函数/操作符                 | 功能说明                   | 数据库支持          | 示例                                                         |\n| --------------------------- | -------------------------- | ------------------- | ------------------------------------------------------------ |\n| `REGEXP_LIKE(str, pattern)` | 检查字符串是否匹配正则模式 | Oracle, MySQL 8.0+, | `SELECT * FROM users WHERE REGEXP_LIKE(email, '^[a-z0-9]+@[a-z]+\\.com$')` |\n| `str REGEXP pattern`        | 简写匹配操作符             | MySQL, MariaDB      | `SELECT 'abc123' REGEXP '^[a-z]+[0-9]+$' → 1 (匹配)`         |\n| `~`                         | 正则匹配操作符             | PostgreSQL          | `SELECT 'abc' ~ '^a' → true`                                 |\n\n**2. 正则替换**\n\n| 函数                                        | 功能说明           | 示例                                                         |\n| ------------------------------------------- | ------------------ | ------------------------------------------------------------ |\n| `REGEXP_REPLACE(str, pattern, replacement)` | 替换匹配正则的内容 | `REGEXP_REPLACE('Tel: 010-12345678', '[^0-9]', '') → '01012345678'` |\n\n**3. 子串提取**\n\n| 函数                          | 功能说明             | 示例                                                        |\n| ----------------------------- | -------------------- | ----------------------------------------------------------- |\n| `REGEXP_SUBSTR(str, pattern)` | 提取第一个匹配的子串 | `REGEXP_SUBSTR('2023Q4 Report', '[0-9]+Q[1-4]') → '2023Q4'` |\n\n**4. 常用正则模式**\n\n| 模式                                             | 说明             | 应用场景示例     |\n| ------------------------------------------------ | ---------------- | ---------------- |\n| `^abc`                                           | 以\"abc\"开头      | 验证身份证号开头 |\n| `xyz$`                                           | 以\"xyz\"结尾      | 检测文件扩展名   |\n| `[0-9]{4}`                                       | 连续4位数字      | 提取年份信息     |\n| `\\d{3}-\\d{8}`                                    | 匹配电话号码格式 | 010-12345678     |\n| `[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}` | 邮箱格式验证     | 过滤无效邮箱地址 |\n\n**5. 跨数据库语法对比**\n\n| 操作         | MySQL/MariaDB      | PostgreSQL                    | Oracle           | SQL Server             |\n| ------------ | ------------------ | ----------------------------- | ---------------- | ---------------------- |\n| **匹配检测** | `REGEXP` / `RLIKE` | `~`                           | `REGEXP_LIKE`    | `LIKE`（有限支持）     |\n| **替换**     | `REGEXP_REPLACE`   | `REGEXP_REPLACE`              | `REGEXP_REPLACE` | 无内置函数             |\n| **提取子串** | `REGEXP_SUBSTR`    | `SUBSTRING(str FROM pattern)` | `REGEXP_SUBSTR`  | `PATINDEX`+`SUBSTRING` |\n\n**6. 使用示例**\n\n```sql\n-- 验证手机号格式（11位数字）\nSELECT *\nFROM customers \nWHERE phone REGEXP '^1[3-9][0-9]{9}$';\n\n-- 提取带区号的电话号码\nSELECT \n  REGEXP_SUBSTR(contact_info, '\\([0-9]{3}\\) [0-9]{8}') AS phone \nFROM contacts;\n\n-- 清理混合文本中的字母\nSELECT REGEXP_REPLACE('a1b2c3', '[A-Za-z]', '') → '123';\n\n-- 查找包含价格的描述\nSELECT * \nFROM products \nWHERE description ~ '\\$[0-9]+\\.[0-9]{2}';\n```\n\n> 1. **字符集敏感**：注意数据库字符集设置（如中文匹配需用`[一-龥]`）\n> 2. **特殊字符转义**：需用`\\\\`转义（如匹配点号需写`\\\\.`）\n\n\n\n------\n\n### 三、日期函数\n\n**时间计算**  \n\n```sql\nDATE_ADD(date, INTERVAL expr type)  -- 时间加法\nDATE_SUB(date, INTERVAL expr type)  -- 时间减法\n```\n\n- 示例：\n\n```sql\nSELECT DATE_ADD('2021-08-03 23:59:59', INTERVAL 1 SECOND) → '2021-08-04 00:00:00'\nSELECT DATE_SUB('2021-08-03', INTERVAL 2 MONTH) → '2021-06-03'\n```\n\n**时间差与格式化**\n\n| 函数                        | 功能说明               | 示例                                   |\n| --------------------------- | ---------------------- | -------------------------------------- |\n| `DATEDIFF(date1, date2)`    | 计算日期差（忽略时间） | DATEDIFF('2021-06-08','2021-06-01') →7 |\n| `DATE_FORMAT(date, format)` | 日期格式化             | DATE_FORMAT(NOW(),'%Y-%m') → 2023-12   |\n\n### 📅 DATE_FORMAT 格式符对照表\n\n| 格式符       | 描述                          | 示例值             |\n| ------------ | ----------------------------- | ------------------ |\n| **日期相关** |                               |                    |\n| `%Y`         | 四位年份                      | 2023               |\n| `%y`         | 两位年份                      | 23                 |\n| `%m`         | 两位月份（01-12）             | 07                 |\n| `%c`         | 月份（1-12，无前导零）        | 7                  |\n| `%M`         | 月份英文全称                  | January, December  |\n| `%b`         | 月份缩写                      | Jan, Dec           |\n| `%d`         | 两位日期（01-31）             | 09                 |\n| `%e`         | 日期（1-31，无前导零）        | 9                  |\n| `%D`         | 英文后缀日期（1st, 2nd...）   | 1st, 22nd          |\n| **时间相关** |                               |                    |\n| `%H`         | 24小时制小时（00-23）         | 15                 |\n| `%h`         | 12小时制小时（01-12）         | 03                 |\n| `%i`         | 分钟（00-59）                 | 08                 |\n| `%S`         | 秒（00-59）                   | 45                 |\n| `%p`         | AM/PM                         | AM, PM             |\n| **星期相关** |                               |                    |\n| `%W`         | 星期全称                      | Monday, Sunday     |\n| `%a`         | 星期缩写                      | Mon, Sun           |\n| `%w`         | 数字星期（0=周日, 1=周一...） | 1 (周一), 0 (周日) |\n| **组合格式** |                               |                    |\n| `%T`         | 时间（HH:mm:ss）              | 23:59:58           |\n| `%r`         | 带AM/PM的时间（hh:mm:ss AM）  | 11:59:58 PM        |\n| `%x`         | 年份周编号（年份部分）        | 2023 (用于周计算)  |\n| `%v`         | 周编号（周一为周起始）        | 52                 |\n\n#### 使用示例\n\n```sql\n-- 原始时间：2023-07-25 14:30:45\nDATE_FORMAT(date, '%Y/%m/%d %H:%i')    → 2023/07/25 14:30\nDATE_FORMAT(date, '%b %D %Y %h:%i %p') → Jul 25th 2023 02:30 PM\nDATE_FORMAT(date, '%W, %M %e')         → Tuesday, July 25\n```\n\n------\n\n### 四、条件判断函数\n\n**IF 函数**\n\n```sql\nIF(expr, v1, v2)  -- expr为真返回v1，否则v2\n```\n\n- 示例：`IF(1>2, 'Y', 'N') → N`\n\n**CASE 表达式**\n\n```\n-- 简单CASE\nCASE expr \n    WHEN v1 THEN r1 \n    WHEN v2 THEN r2 \n    ELSE rn \nEND\n\n-- 搜索CASE\nCASE \n    WHEN condition1 THEN r1 \n    WHEN condition2 THEN r2 \n    ELSE rn \nEND\n```\n\n- 示例：\n\n```sql\nCASE WHEN 1<0 THEN 'T' ELSE 'F' END → F\n```\n\n***NULLIF vs. IFNULL***\n\n| 特性         | `NULLIF`                                  | `IFNULL`                                     |\n| ------------ | ----------------------------------------- | -------------------------------------------- |\n| **功能**     | 比较两个值，相等时返回 `NULL`             | 检查一个值是否为 `NULL`，并提供替代值        |\n| **返回值**   | 返回 `NULL` 或 `expression1`              | 返回 `expression1` 或 `expression2`          |\n| **常见用途** | 避免除零错误、处理重复值                  | 提供默认值、数据清洗                         |\n| **示例**     | `NULLIF(a, b)`：如果 `a = b`，返回 `NULL` | `IFNULL(a, b)`：如果 `a` 是 `NULL`，返回 `b` |\n\n**COALESCE 函数**\n\n**功能说明**\n\n返回参数列表中**第一个非 NULL 的值**，常用于处理缺失值替换。\n\n**语法**\n\n```sql\nCOALESCE(v1, v2, v3, ..., vn)\n```\n\n**执行逻辑**\n\n1. 从左到右依次检查参数\n2. 返回第一个不为 `NULL` 的值\n3. 如果所有参数均为 `NULL`，则返回 `NULL`\n\n**示例**\n\n```sql\n-- 数据示例：name字段为NULL，nickname='小张'，default_name='匿名用户'\nCOALESCE(NULL, '小张', '匿名用户') → '小张'\nCOALESCE(NULL, NULL, '2023-01-01') → '2023-01-01'\nCOALESCE(NULL, NULL, NULL) → NULL\n```\n\n**与 IFNULL 的对比**\n\n| 特性         | `COALESCE`             | `IFNULL`       |\n| ------------ | ---------------------- | -------------- |\n| **参数数量** | 支持多个参数           | 仅支持两个参数 |\n| **功能范围** | 多条件NULL处理         | 简单双值替换   |\n| **可读性**   | 更适合多字段优先级选择 | 适合简单场景   |\n\n**等价写法**\n\n```sql\nCOALESCE(a, b, c) \n-- 等价于 \nCASE \n    WHEN a IS NOT NULL THEN a \n    WHEN b IS NOT NULL THEN b \n    ELSE c \nEND\n```\n\n**常见使用场景**\n\n1. **多级备用值选择**\n\n   ```sql\n   -- 优先显示用户昵称，其次邮箱，最后显示'未知用户'\n   SELECT COALESCE(nickname, email, '未知用户') AS display_name FROM users;\n   ```\n\n2. **NULL值数据清洗**\n\n   ```sql\n   -- 将NULL金额转换为0计算总和\n   SELECT SUM(COALESCE(amount, 0)) AS total FROM orders;\n   ```\n\n3. **多字段优先级合并**\n\n   ```sql\n   -- 合并地址信息（优先使用详细地址，没有时使用区域地址）\n   SELECT COALESCE(detail_address, area_address) AS full_address FROM locations;\n   ```\n\n### 五、类型转换函数\n\n**CAST(x AS type)**\n\n- 支持类型：`CHAR(n)`, `DATE`, `TIME`,`DATETIME`,`DECIMAL`等\n- 示例：`CAST('2023' AS DECIMAL) → 2023`\n\n### 六、表连接补充自连接\n\n#### 自连接介绍\n\n自连接是一种特殊的连接查询，指的是同一个表自己与自己进行连接。常用于处理具有层级关系的数据，例如员工与经理、分类的父类与子类等场景。自连接实际上是将同一个表视为两个不同的实例，通过别名进行区分，并根据关联条件进行连接。\n\n#### 自连接语法\n\n自连接可以使用内连接或外连接语法，核心是为同一表赋予不同的别名：\n\n```sql\n-- 内自连接（查询匹配条件的记录）\nSELECT 字段 \nFROM 表 AS 别名1 \nINNER JOIN 表 AS 别名2 \nON 别名1.字段 = 别名2.关联字段;\n\n-- 左自连接（以左表为主，查询右表可能不存在的记录）\nSELECT 字段 \nFROM 表 AS 别名1 \nLEFT JOIN 表 AS 别名2 \nON 别名1.字段 = 别名2.关联字段;\n```\n\n#### 自连接示例\n\n**场景**：假设有员工表 `employees`，结构如下：\n\n| id   | name | manager_id |\n| ---- | ---- | ---------- |\n| 1    | 张三 | NULL       |\n| 2    | 李四 | 1          |\n| 3    | 王五 | 1          |\n| 4    | 赵六 | 2          |\n\n**需求**：查询每个员工及其对应经理的名字（包括没有经理的员工）。\n\n**SQL语句**：\n\n```sql\nSELECT \n    e1.name AS employee_name,\n    e2.name AS manager_name\nFROM employees e1\nLEFT JOIN employees e2 \nON e1.manager_id = e2.id;\n```\n\n**查询结果**：\n\n| employee_name | manager_name |\n| ------------- | ------------ |\n| 张三          | NULL         |\n| 李四          | 张三         |\n| 王五          | 张三         |\n| 赵六          | 李四         |\n\n#### 自连接应用场景\n\n1. **层级关系**：如组织架构、分类层级（父类与子类）。\n2. **数据对称性分析**：如社交网络中的用户关系（用户A和用户B互为好友）。\n3. **路径查询**：如地铁站点之间的连接关系。\n\n#### 注意事项\n\n1. **别名必要性**：必须为表指定不同的别名以区分左、右表。\n2. **性能优化**：自连接可能引发较大的计算开销，尤其是大表操作时，建议在关联字段上创建索引。\n3. **连接类型选择**：\n   - 使用 **内自连接** 时，只返回满足条件的记录（如“有经理的员工”）。\n   - 使用 **左自连接** 时，会包含左表所有记录，右表无匹配则填充 `NULL`（如“包括无经理的员工”）。\n\n### 七、交叉连接 CROSS JOIN\n\n#### 功能说明\n\n生成两个表的**笛卡尔积**（所有行的组合），无关联条件。\n特点：\n\n- 结果集行数 = 表A行数 × 表B行数\n- 不需要连接条件（无`ON`子句）\n- 常用于生成组合数据、测试数据等场景\n\n#### 语法形式\n\n```sql\n-- 显式语法\nSELECT * \nFROM table1 \nCROSS JOIN table2;\n\n-- 隐式语法（等同于CROSS JOIN）\nSELECT * \nFROM table1, table2;\n```\n\n#### 典型应用场景\n\n1. **生成组合数据**\n   如：颜色与尺寸组合、日期与产品组合\n2. **数据模拟测试**\n   快速生成大量测试数据\n3. **全量关联分析**\n   计算所有可能的组合关系\n\n#### 与INNER JOIN的区别\n\n| 特性           | `CROSS JOIN`     | `INNER JOIN`       |\n| -------------- | ---------------- | ------------------ |\n| **连接条件**   | 无需`ON`子句     | 必须使用`ON`子句   |\n| **结果集逻辑** | 强制所有行组合   | 仅匹配关联条件的行 |\n| **数据量**     | 可能极大（慎用） | 通常较小           |\n\n### 八、集合操作符 UNION ALL\n\n#### 功能说明\n\n用于合并多个查询结果，**保留所有记录**（包括重复行）\n\n#### 基本语法\n\n```sql\nSELECT 字段列表 FROM 表1\nUNION ALL\nSELECT 字段列表 FROM 表2\n...\n```\n\n#### 与UNION的区别\n\n| 特性         | `UNION ALL`              | `UNION`      |\n| ------------ | ------------------------ | ------------ |\n| **去重处理** | 保留所有记录，包括重复行 | 自动去重     |\n| **排序操作** | 不排序                   | 默认进行排序 |\n| **性能**     | 更高（无去重、排序开销） | 较低         |\n\n#### 使用场景\n\n1. 合并分表数据（如按年份拆分的订单表）\n2. 需要保留重复记录的统计场景\n3. 明确知道数据无重复时的性能优化选择\n\n#### 注意事项\n\n- 合并的SELECT语句必须包含**相同数量**的字段\n- 对应字段的**数据类型必须兼容**\n- 最终结果集的字段名以第一个SELECT语句为准\n\n#### 使用示例\n\n```sql\n-- 合并两个季度的销售数据（保留重复）\nSELECT product_id, sales FROM Q1_sales\nUNION ALL\nSELECT product_id, sales FROM Q2_sales;\n\n-- 组合不同表结构数据（使用别名统一字段）\nSELECT id, name, 'employee' AS type FROM employees\nUNION ALL\nSELECT customer_id, company_name, 'customer' FROM customers;\n```\n\n------\n\n### 小结\n\n- **自连接本质**：同一表通过别名模拟两个表的连接操作，支持内连接或外连接语法。\n- **核心步骤**：\n  1. 为同一表赋予不同别名（如 `e1`, `e2`）。\n  2. 指定连接条件（如 `e1.manager_id = e2.id`）。\n- **适用场景**：处理数据内部的层级或对称关系。\n- **优化建议**：合理使用索引，避免全表扫描带来的性能问题。\n\n# 👀 窗口函数详解\n\n## 一、什么是窗口函数？\n\n窗口函数（Window Function）是一种**对查询结果集进行逐行计算**的特殊函数，能够：\n\n- 在保留原始数据行的同时进行聚合/排序等操作\n- 实现复杂的分组统计需求（如：累计值、移动平均值、排名等）\n- 不会像`GROUP BY`那样合并结果集\n\n## 二、标准语法\n\n```sql\n函数名() OVER (\n    [PARTITION BY 字段]  -- 定义分组窗口\n    [ORDER BY 字段 [ASC|DESC]]  -- 定义排序规则\n)\n```\n\n## 三、核心组件\n\n### 1. PARTITION BY\n\n- 作用：将数据**按指定字段分组**，每组称为一个窗口\n- 类似`GROUP BY`但**不合并结果集**\n- 示例：`PARTITION BY department` 按部门分组\n\n### 2. ORDER BY\n\n- 作用：在窗口内**指定排序规则**\n- 示例：`ORDER BY sales DESC` 按销售额降序排列\n\n## 四、常用窗口函数\n\n### 1. 排序函数\n\n| 函数           | 特点                          | 示例结果（相同值处理） |\n| -------------- | :---------------------------- | :--------------------- |\n| `RANK()`       | 出现并列时**跳号**（1,1,3）   | 1,1,3,4                |\n| `DENSE_RANK()` | 出现并列时**不跳号**（1,1,2） | 1,1,2,3                |\n| `ROW_NUMBER()` | **强制生成唯一序号**          | 1,2,3,4                |\n\n📝 示例数据（按成绩排序）：\n\n```sql\nSELECT \n    name,\n    score,\n    RANK() OVER(ORDER BY score DESC) AS rank,\n    DENSE_RANK() OVER(ORDER BY score DESC) AS dense_rank,\n    ROW_NUMBER() OVER(ORDER BY score DESC) AS row_num\nFROM students;\n```\n\n| name | score | rank | dense_rank | row_num |\n| ---- | ----- | ---- | ---------- | ------- |\n| 张三 | 95    | 1    | 1          | 1       |\n| 李四 | 95    | 1    | 1          | 2       |\n| 王五 | 90    | 3    | 2          | 3       |\n\n### 2. 偏移分析函数\n\n| 函数                           | 功能说明                   | 参数说明                  |\n| ------------------------------ | -------------------------- | ------------------------- |\n| `LAG(字段, 偏移量[, 默认值])`  | 获取**当前行向上偏移**的值 | 默认偏移量=1，默认值=NULL |\n| `LEAD(字段, 偏移量[, 默认值])` | 获取**当前行向下偏移**的值 | 默认偏移量=1，默认值=NULL |\n\n📝 示例（查看相邻订单金额）：\n\n```sql\nSELECT \n    order_date,\n    amount,\n    LAG(amount, 1) OVER(ORDER BY order_date) AS prev_amount,\n    LEAD(amount, 1) OVER(ORDER BY order_date) AS next_amount\nFROM orders;\n```\n\n| order_date | amount | prev_amount | next_amount |\n| ---------- | ------ | ----------- | ----------- |\n| 2023-01-01 | 100    | NULL        | 150         |\n| 2023-01-02 | 150    | 100         | 200         |\n| 2023-01-03 | 200    | 150         | NULL        |\n\n### 3.滑动窗口（窗口框架）\n\n#### 核心概念\n\n通过定义窗口框架（Window Frame），**动态控制计算范围**。支持两种模式：\n\n- **基于行数**（`ROWS`）：物理行偏移\n- **基于数值范围**（`RANGE`）：逻辑值偏移\n\n#### 标准语法\n\n```sql\n函数() OVER (\n    PARTITION BY ... \n    ORDER BY ...\n    [ROWS|RANGE BETWEEN 起始点 AND 结束点]\n)\n```\n\n#### 框架边界定义\n\n| 关键词                | 说明                            |\n| --------------------- | ------------------------------- |\n| `UNBOUNDED PRECEDING` | 窗口起始位置（第一行/最小值）   |\n| `UNBOUNDED FOLLOWING` | 窗口结束位置（最后一行/最大值） |\n| `CURRENT ROW`         | 当前行                          |\n| `n PRECEDING`         | 当前行向前n行/n值（包含当前行） |\n| `n FOLLOWING`         | 当前行向后n行/n值（包含当前行） |\n\n#### 常用模式示例\n\n##### 1. 累计计算（默认模式）\n\n```sql\nSUM(sales) OVER (\n    ORDER BY date \n    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\n) \n-- 等价简写：\nSUM(sales) OVER (ORDER BY date)\n```\n\n##### 2. 移动平均（近3天）\n\n```\nAVG(temperature) OVER (\n    ORDER BY date \n    ROWS BETWEEN 2 PRECEDING AND CURRENT ROW\n)\n```\n\n##### 3. 对称窗口（前后各1行）\n\n```\nMAX(score) OVER (\n    ORDER BY id \n    ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING\n)\n```\n\n#### ROWS vs RANGE 对比\n\n| 对比项       | `ROWS`                  | `RANGE`                       |\n| ------------ | ----------------------- | ----------------------------- |\n| **计算逻辑** | 按物理行偏移            | 按ORDER BY字段的数值偏移      |\n| **适用场景** | 明确行数移动（如近3行） | 按数值区间计算（如3天范围）   |\n| **性能**     | 更高                    | 较低（需排序计算）            |\n| **数据要求** | 无特殊要求              | ORDER BY字段需为数值/日期类型 |\n\n```sql\n-- ROWS模式（物理行）\nSUM(amount) OVER (\n    ORDER BY date \n    ROWS BETWEEN 1 PRECEDING AND CURRENT ROW\n) → 当前行+前1行\n\n-- RANGE模式（逻辑值）\nSUM(amount) OVER (\n    ORDER BY date \n    RANGE BETWEEN INTERVAL 1 DAY PRECEDING AND CURRENT ROW\n) → 当天+前一天的所有记录\n```\n\n#### 典型应用场景\n\n1. **金融分析**\n   - 7日移动平均线\n   - 滚动波动率计算\n2. **电商分析**\n   - 近30天消费趋势\n   - 周环比增长率\n3. **运营监控**\n   - 每小时累计UV\n   - 滑动窗口异常检测\n\n#### 高级用法示例\n\n动态最近N条记录统计\n\n```sql\nSELECT \n    order_id,\n    order_time,\n    AVG(amount) OVER (\n        ORDER BY order_time \n        ROWS BETWEEN 9 PRECEDING AND CURRENT ROW\n    ) AS last_10_avg\nFROM orders;\n```\n\n#### 时间段累计（日期类型）\n\n```sql\nSELECT \n    report_date,\n    SUM(revenue) OVER (\n        ORDER BY report_date \n        RANGE BETWEEN INTERVAL 6 DAY PRECEDING AND CURRENT ROW\n    ) AS 7day_revenue \nFROM daily_stats;\n```\n\n> #### 注意事项\n>\n> 1. **性能优化**\n>    - 避免大范围窗口（如`UNBOUNDED`+大数据量表）\n>    - 优先使用`ROWS`模式\n>    - 配合合适的索引（ORDER BY字段）\n> 2. **边界处理**\n>    - 窗口起始前的行返回`NULL`\n>    - 使用`COALESCE`处理空值\n> 3. **框架限制**\n>    - `RANGE`模式不支持`n FOLLOWING`（MySQL限制）\n>    - 不同数据库实现细节可能有差异\n\n## 五、综合应用场景\n\n### 案例：**部门薪资排名**\n\n```sql\nSELECT \n    department,\n    name,\n    salary,\n    RANK() OVER(PARTITION BY department ORDER BY salary DESC) AS dept_rank\nFROM employees;\n```\n\n| department | name | salary | dept_rank |\n| ---------- | ---- | ------ | --------- |\n| 技术部     | 张三 | 15000  | 1         |\n| 技术部     | 李四 | 12000  | 2         |\n| 市场部     | 王五 | 13000  | 1         |\n\n## 六、注意事项\n\n1. 窗口函数执行顺序：在`WHERE`、`GROUP BY`之后，`ORDER BY`之前\n2. 可以组合使用多个窗口函数\n3. 不同数据库支持情况可能不同（MySQL 8.0+支持）\n4. 大数据量时注意性能优化\n\n","tags":["数据操作","SQL","数据库"],"categories":["大数据"]},{"title":"Linux基础","url":"/post/linuxba.html","content":"\n# 所需软件的安装和配置\n\n## 1.VMware和远程连接软件（FinalShell、Xshell等）的安装\n\nVMware软件安装简单，激活码查找也方便，FinalShell若不使用专业版内容也是直接安装即可。\n\n下面是FinalShell3.9.5.7及之前版本的高级/专业版激活码获取方式。\n\n打开FinalShell后点击激活，选择离线激活，随便输入账号密码，复制机器码，粘贴即可获取\n\n```php\n<?php\n    if(!empty($_POST['k'])){\n        if($_POST['s'] == 1){\n            $a = '激活码为：'.strtolower(substr(md5('2356'.$_POST['k'].'13593'),8,16));\n        }\n        if($_POST['s'] == 0){\n            $a = '激活码为：'.strtolower(substr(md5('61305'.$_POST['k'].'8552'),8,16));\n        }\n    }\n?>\n```\n\nsubstr截取md5的一部分，从第八位开始往后面的16个字符，strtolower()将字符串全部转为小写\n\n```html\n<form action=\"#\" method=\"post\">\n        <input type=\"text\" name=\"k\" id=\"k\">\n        <input type=\"radio\" name=\"s\" id=\"s\" value=\"1\">专业版\n        <input type=\"radio\" name=\"s\" id=\"s\" value=\"0\">高级版\n        <input type=\"submit\" value=\"提交\">\n    </form>\n```\n\nphp文件内容应为\n\n```php+HTML\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>FinalShell激活码计算</title>\n</head>\n\n<body>\n\n<form action=\"#\" method=\"post\">\n    <input type=\"text\" name=\"k\" id=\"k\">\n    <input type=\"radio\" name=\"s\" id=\"s1\" value=\"1\">专业版\n    <input type=\"radio\" name=\"s\" id=\"s2\" value=\"0\">高级版\n    <input type=\"submit\" value=\"提交\">\n</form>\n\n<?php\n    $a = '';\n    if(!empty($_POST['k'])){\n        if($_POST['s'] == 1){\n            $a = '激活码为：'.strtolower(substr(md5('2356'.$_POST['k'].'13593'),8,16));\n        }\n        if($_POST['s'] == 0){\n            $a = '激活码为：'.strtolower(substr(md5('61305'.$_POST['k'].'8552'),8,16));\n        }\n    }\n    echo $a;\n?>\n\n</body>\n</html>\n```\n\n\n\nJava代码 [附在线运行网站](https://www.json.cn/runcode/run_java/)\n\n```java\nimport java.io.IOException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Scanner;\n\nclass Main{\n    public static void main(String[] args) throws NoSuchAlgorithmException, IOException {\n        System.out.print(\"请输入FinalShell的离线机器码：\");\n        @SuppressWarnings(\"resource\")\n        //Scanner reader = new Scanner(System.in);\n        String machineCode = \"aa@6a6c73491cbe6c6e\"; // 在此处放置机器码\n        generateKey(machineCode);\n    }\n\n    public static void generateKey(String hardwareId) throws NoSuchAlgorithmException {\n        String proKey = transform(61305 + hardwareId + 8552); //高级版\n        String pfKey = transform(2356 + hardwareId + 13593); //专业版\n        System.out.println(\"请将此行复制到离线激活中：\" + pfKey);\n    }\n\n    public static String transform(String str) throws NoSuchAlgorithmException {\n\n        @SuppressWarnings(\"unused\")\n        String md5 = hashMD5(str);\n\n        return hashMD5(str).substring(8, 24);\n    }\n\n    public static String hashMD5(String str) throws NoSuchAlgorithmException {\n        MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n        byte[] hashed = digest.digest(str.getBytes());\n        StringBuilder sb = new StringBuilder();\n        for (byte b : hashed) {\n            int len = b & 0xFF;\n            if (len < 16) {\n                sb.append(\"0\");\n            }\n            sb.append(Integer.toHexString(len));\n        }\n        return sb.toString();\n    }\n}\n\n```\n\n\n\n### 虚拟网络配置\n\n安装好本地虚拟机后，需要对网络进行配置，~~*使用vps可跳过这个步骤*~~ 课程中使用的是CentOS7的系统，不同版本的具体配置可能不尽相同。在虚拟机设置中，将虚拟机的网络模式设置为NAT模式。\n\n\n\n在终端界面输入`ifconfig` 查看ens33的ip地址，ip地址为192.168.88.100，然后打开虚拟网络编辑器，选中VMnet8更改配置\n\n![linux01.png](https://s2.loli.net/2024/03/15/lPkyoLge326WTBd.png)\n\n![linux02.png](https://s2.loli.net/2024/03/15/LFHSh8DZvm3cKPo.png)\n\n子网IP更改为192.168.88.0，点击将主机虚拟适配器连接到此网络，点击NAT设置，将网关IP改为192.168.88.2，点击确定，保存。\n\n\n\n修改配置文件，IP地址192.168.88.100和网关地址192.168.88.2、DNS192.168.88.2\n\n```\nvim /etc/sysconfig/network-scripts/ifcfg-ens33\n```\n\n![linux03.png](https://s2.loli.net/2024/03/15/atjAwCNBLsIOlWu.png)\n\n然后修改网络适配器\n\n![linux04.png](https://s2.loli.net/2024/03/15/oAz421RPdbOt86q.png)\n\n删除`/etc/sysconfig/network-scripts/` 下的以ifcfg开头除ifcfg-ens33和ifcfg-lo以外的文件（ifcfg-配置_1， ifcfg-ens33.bak），重启网络`systemctl restart network` 此时虚拟机应能正常访问网络。\n\n## 2.Linux命令\n\nLinux是树状存储结构，在一个根节点下存放了系统的不同文件夹，Windows是森林结构\n\n/bin：这个目录存放着最经常使用的命令,ls、cp、rm、chmod 等常用命令都在此目录\n\n/boot 系统启动目录，保存与系统启动相关的文件，如内核文件和启动引导程序；\n\n/dev 设备文件保存位置；\n\n/etc：存放在配置文件\n\n/home：用户的主目录 \n\n/lib：存放程序所需的动态库和静态库文件；\n\n/root ：超级用户 home目录\n\n### 2.1.Linux基础命令\n\n#### 2.1.1.linux命令的构成\n\nlinux指令=命令（做什么） +选项（怎么做） +参数（对谁做）\n\n​\t\t\t-command ：命令名 ：使用英文单词的缩写或者英文单词\n\n​\t\t\t-options：选项     ，可以对命令进行控制   但是 也可以省略\n\n​\t\t\t-parameter：给命令传参数， 可以是一个 ，也可以是多个或者零个\n\n**在使用命令时，可以使用man 命令名查看使用说明**\n\n./ ：代表当前目录\n\n../：上一级目录\n\n使用这两种方式可实现绝对路径和相对路径访问文件\n\n**ctrl+r：历史记录中所搜命令（输入命令中的任意一个字符）；**\n\n**ctrl+c：终止当前的命令**\n\n#### 2.1.2 ls命令\n\nls命令：展示linux系统中指定位置的目录信息   -F 查看目录中的文件\n\n```\n-a ：查看所有文件，包括隐藏的文件，Linux下隐藏文件 隐藏目录 名称都是以.开头，图形界面下可以使用ctrl+h切换是否显示隐藏文件\n\n-l ：展示文件的详细信息，包括权限、归属、文件大小、创建修改时间、文件名称，linux内置了ll命令作为ls -l的别名\nls -ld：显示目录和链接信息；\n\n-h ：人性化显示文件大小，赋予最恰当的单位 但是需要和 l一起使用  \n\nls -R：递归显示子目录结构；\n\nls [0-9] ：显示包含数字的文件名和目录名\n```\n\n\n\n#### 2.1.3 cd命令\n\n```\ncd ../   返回上一级目录\ncd ../.. 返回上两级目录\n\ncd - 返回上一次操作的工作目录\n\ncd / 进入根目录\n\ncd ~ 返回家目录中   ~ 可以省略\n```\n\n#### 2.1.4 pwd命令\n\npwd命令：获取当前所在工作目录的绝对路径\n\n#### 2.1.5 mkdir命令\n\nmkdir命令用来创建空目录的命令，我们可以在指定的路径下厨房间一个空目录\n\n```\nmkdir 文件夹名字  ：在当前目录下创建一个文件夹\n\nmkdir -p 文件路径   指定路径下创建一个空目录，同时创建其父目录\n```\n\n#### 2.1.6 touch命令\n\ntouch命令可以创建一个新的文件，文件的拓展名随意，甚至可以是一个不存在的拓展名，当文件存在的时候，修改文件的创建时间\n\ntouch 可以一次性创建多个文件，但是这个文件路径**必须正确**\n\n```\ntouch -t 0712250000 file1 修改一个文件或目录的时间戳 - (YYMMDDhhmm)\ntouch * ：将当前下的文件时间修改为系统的当前时间\n\ntouch –d 20040210 test：将test文件的日期改为20040210\n\ntouch abc　：若abc文件存在，则修改为系统的当前时间；若不存在，则生成一个为当前时间的空文件\n```\n\n#### 2.1.7 rm命令\n\nrm 是删除文件的指令，可以删除文件 ，也可以删除文件夹\n\n```\n-r  递归删除，删除文件夹的时候使用\n\n-f  强制删除 ，不进行询问\n\nrm  可以删除任意文件，路径可以是相对/绝对的\n```\n\n#### 2.1.8 mv命令\n\nmv是一个移动文件的指令，将文件从一个位置移动到另一个位置，在移动的过程中可以修改文件或者目录的**名称**，格式：mv 源文件路径（相对/绝对）   目标路径。移动文件或者目录时，目标路径必须存在，改名只需输入相同的路径不同的文件名即可，可同时改名并移动文件\n\n```\nmv dir1 new_dir 重命名/移动 一个目录\n```\n\n\n\n#### 2.1.9 cp命令\n\ncp命令就是可以复制文件或者目录的命令，在复制的过程中，源文件不会被删除，复制完成后，文件可以修改名称，格式：cp 源文件路径  目标路径\n\n```\ncp -r #复制目录时需要- r\n\ncp file1 file2 复制一个文件\ncp dir/* . 复制一个目录下的所有文件到当前工作目录\ncp -a /tmp/dir1 . 复制一个目录到当前工作目录\ncp -a dir1 dir2 复制一个目录\n```\n\nmv和cp的使用方式基本一致，只有两个地方不一样：\n\n1：mv移动目录时不需要使用-r，cp需要使用-r\n\n2：cp不会删除源文件，而mv源文件会消失\n\n#### 2.1.10 echo命令\n\n功能：输出内容\n\n语法：`echo 参数`\n\n- 参数：被输出的内容\n- 被两个反引号包围的内容，会作为命令执行，echo \\`pwd\\`，会输出当前工作目录\n\n#### 2.1.11 重定向符\n\n功能：将符号左边的结果，输出到右边指定的文件中去\n\n- `>`，表示覆盖输出\n- `>>`，表示追加输出\n\n### 2.2 进阶命令\n\n#### 2.2.1 cat命令\n\n用于查看linux中**小型的**文本文件，cat 文件名\n\n因为他会一次行将所有的文件内容加载终端中，终端显示的数据有限，大的文件会显示不全，且消耗内存\n\n使用生产场景：   大数据框架的运行日志、大数据计算的运行日志\n\n```\ncat file1 从第一个字节开始正向查看文件的内容\ntac file1 从最后一行开始反向查看一个文件的内容\n```\n\n\n\n#### 2.2.2 more命令\n\n用于查看linux中中型的文本文件\n\n使用more进行文件的查看可以按页，手动翻页或者回滚，更灵活。但是统一也消耗内存\n\n```\n -回车   向下一行\n -空格    向下一页\n b   向上一页\n q   退出查看\n \nmore file1 查看一个长文件的内容\nless file1 类似于 'more' 命令，但是它允许在文件中和正向操作一样的反向操作\n```\n\ncat 和 more 都可用来查看文件内容。不同点在于：cat 指令查看完毕后会自动返回到正常模式而 more 指令则需要用户手动退出查看模式。cat 命令用于显示整个文件的内容，单独使用没有翻页功能。而 more 命令则可以分页显示文件内容，可以向前或向后翻页，可**与cat配合使用**。\n\n#### 2.2.3 head，tail命令\n\nhead功能：查看文件头部内容\n\n语法：`head [-n] 参数`\n\n- 参数：被查看的文件\n- 选项：-n，查看的行数\n\ntail默认查看该文件的最新10行（如果这个文件发生变动，有新的内容添加到文件的尾部，tail命令会把新添加的内容展示出来，**实时查看** ）\n\n```\ntail -f 文件名\nhead -2 file1 查看一个文件的前两行\ntail -2 file1 查看一个文件的最后两行\n```\n\n#### 2.2.4 ps命令\n\n查看当前活跃的进程\n\nps -ef 作用：查看当前所有的进程，查看PID和了解进程cpu资源占比情况\n\n```\nUID：表示是哪个一个用户执行的\n\nPPID：进行的父进行标识号\n\nC：cpu使用资源的百分比\n\nStime：进程开始执行的时间\n```\n\n#### 2.2.5 kill命令\n\n用于结束linux中的软件或者服务，格式： kill -9 进程编号  \n\nkill -9 可以快速的杀死进程，但是不安全，因为我们的服务在运行的过程中，可能会需要保存或者某执行完某一个任务在关闭。所以不轻易使用，一般都是用于杀死闲置进程或者不响应的进行。\n\n#### 2.2.6 ifconfig命令\n\n作用：用于查看服务器网络信息\n\n#### 2.2.7 free命令\n\n作用：查看内存的使用情况\n\n```\ntotal：表示总计的物理内存大小\n\nused：表示已经使用的多了\n\nfree：表示还可以用多少\n\nshared：表示多个进行共享的内存总额\n\nbuff：表示缓存的大小\n\nfree -k：以kb为单位来显示内存（默认就是k）\n\nfree -m：以m为单位来显示内存信息\n\nfree -g ：以m为单位来显示内存信息\n\nfree -h ：以用户适合的方式去显示内存\n\nfree -t：显示linux全部的内存（total）\n\nfree -s：表示每个N秒打印一次内存信息，直到使用crtl+c结束\n\n\nfree -hs  5：生产使用场景：提交大数据计算任务后，动态的查看内存变化情况\n```\n\n#### 2.2.8 df命令\n\n作用：查看磁盘的使用情况\n\n```\ndf -h：以用户方便的单位进行显示\ndf-Th：显示文件系统的类型\n```\n\n#### 2.2.9 clear命令 \n\n清除终端窗口的信息=crlt+l\n\n#### 2.2.10 关机&重启命令\n\n```\n1：reboot命令\n\n重启计算机，reboot属于安全重启，不属于强制重启，可以放心的使用\n\n2：shutdown命令\n\nshutdown命令主要用于关机操作，关闭过程中，可以指定关机时间\n\nshutdown -h now 立即关机\n\nshutdown -h 1 一分钟后关机\nshutdown -h hours:minutes & 按预定时间关闭系统\n\nshutdown -c 取消按预定时间关闭系统\n\nshutdown -r now 重启\n\ninit 0    关闭系统\ntelinit 0 关闭系统\nlogout    注销\n```\n\n#### 2.2.11 which命令\n\n查看脚本或者终端命令文件所在位置\n\n一般情况下可以使用which命令找到**终端指令**的安装目录\n\n#### 2.2.12 grep命令\n\ngrep就是根据一定的规则做全文检索，在文件中查询到满足规则的文本内容\n\ngrep是在文件中查询文本，指定的文件中查找特定的字符组合\n\n用法: grep [选项]... \n\n生产使用场景：从日志中找到错误信息，方便我们分析日志\n\n​\tgrep ERROR 文件名\n\n​\t警告：grep INFO 文件名\n\n##### pgrep \n\n用于列举进程ID，下面两条命令是等效的\n\n```\npgrep -u hchen2244122444\nps -ef | egrep '^hchen' | awk '{print $2}'\n```\n\n\n\n#### 2.2.13 hostname命令\n\n查看主机名\n\n#### 2.2.14 | 无名管道命令\n\n管道指令，是连接两个命令的指令，前一个命令的输出，就是下一个命令的输入\n\n```\n查找文件：ls -l | grep 创建时间 |grep 文件名\n\n查找进程：ps -ef | grep 进程名 | grep 进程归属\n```\n\n#### 2.2.14.1 mkfifo 命名管道\n\n用法：mkfifo [选项] 文件名\n\n命名管道是一种特殊的文件类型，可以用于实现进程间通信（IPC，Inter-Process Communication），允许不同进程之间通过读写同一个文件来传递数据\n\n使用 `mkfifo` 命令创建的命名管道可以像普通文件一样被读取和写入。一个进程可以将数据写入命名管道，而另一个进程可以从同一个命名管道中读取这些数据，从而实现了进程间的通信。命名管道通常用于在不同的进程之间传递数据，例如在Shell脚本中用于管道操作、在不同的程序之间传递数据等\n\n命名管道在使用时需要注意同步和阻塞的问题，因为命名管道是基于文件系统的，读写操作可能会阻塞，导致进程在没有数据可读或可写时被阻塞。此外，命名管道在使用完毕后需要手动删除，可以使用 `rm` 命令删除对应的文件\n\n```\n# mkfifo /tmp/aapipe           创建命名管道\n# ls -l /tmp\n输出 prw-rw-r-- 1 aa  aa  0 05-10 18:58 aapipe\n# ls -al > /tmp/aapipe         在一个shell中运行此命令，命令不会返回，除非有人从这个有名管道中把信息读走\n# head /tmp/aapipe             在另一命令窗口读取管道中的信息，同时上一命令会返回\n输出 drwx------ 8 aa aa    4096 05-10 18:27 .\n    drwxr-xr-x 7 root  root     4096 03-05 00:06 ..\n    drwxr-xr-x 3 aa aa    4096 03-01 18:13 backup\n    -rw------- 1 aa aa     721 05-05 22:12 .bash_history\n    -rw-r--r-- 1 aa aa      24 02-28 22:20 .bash_logout\n    -rw-r--r-- 1 aa aa     176 02-28 22:20 .bash_profile\n    -rw-r--r-- 1 aa aa     124 02-28 22:20 .bashrc\n    -rw-r--r-- 1 root  root    14002 03-07 00:29 index.htm\n    -rw-r--r-- 1 aa aa   31465 03-01 23:48 index.php\n```\n\n\n\n#### 2.2.15 tar命令\n\ntar命令是进行打包，解包，压缩和解压的命令\n\n打包：将多个文件归档为一个文件，文件大小不会减少\t\n\n解包（拆包）：将一个包文件分拆多个实体的文件\n\n压缩：将文件按照一定的算法减少体积，但是文件的内容和信息不会发送改变\n\n解压缩：将一个压缩文件还原到正常的状态\n\n```\n参数：\nc：打包选项\nx：解包选项\nz：压缩或者解压缩选项\nv：展示过程\nf：指定文件名\n一般情况tar -cxvf压缩 tar -zxvf解压\n```\n\n**其它压缩指令**\n\n```\nbunzip2 file1.bz2           解压一个叫做 'file1.bz2'的文件\nbzip2 file1                 压缩一个叫做 'file1' 的文件\ngunzip file1.gz             解压一个叫做 'file1.gz'的文件\ngzip file1                  压缩一个叫做 'file1'的文件\ngzip -9 file1               最大程度压缩\nrar a file1.rar test_file          创建一个叫做 'file1.rar' 的包\nrar a file1.rar file1 file2 dir1   同时压缩 'file1', 'file2' 以及目录 'dir1'\nrar x file1.rar     压缩rar包\nunrar x file1.rar   解压rar包\ntar -cvf archive.tar file1     创建一个非压缩的 tarball\ntar -tf archive.tar            显示一个包中的内容\ntar -xvf archive.tar           释放一个包\ntar -xvf archive.tar -C /tmp   将压缩包释放到 /tmp目录下\ntar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包\ntar -xvfj archive.tar.bz2      解压一个bzip2格式的压缩包\ntar -cvfz archive.tar.gz dir1  创建一个gzip格式的压缩包\ntar -xvfz archive.tar.gz       解压一个gzip格式的压缩包\nzip file1.zip file1            创建一个zip格式的压缩包\nzip -r file1.zip file1 file2 dir1   将几个文件和目录同时压缩成一个zip格式的压缩包\nunzip file1.zip                     解压一个zip格式压缩包\n```\n\n\n\n#### 2.2.16 useradd，groupadd命令\n\nuseradd 可以添加一个linux用户，/home目录会创建一个该用户的家目录 \n\n```\ngroupmod -n new_group_name old_group_name                              重命名一个用户组\nuseradd -c \"Name Surname \" -g admin -d /home/user1 -s /bin/bash user1  创建一个属于 \"admin\" 用户组的用户\n```\n\n\n\n#### 2.2.17 userdel，groupdel命令\n\n删除用户同时会删除用户的家目录\n\n```\nuserdel -r user1              删除一个用户 ( '-r' 排除主目录)\nusermod -c \"User FTP\" -g system -d /ftp/user1 -s /bin/nologin user1   修改用户属性\nnewgrp group_name             登陆进一个新的群组以改变新创建文件的预设群组\n```\n\n\n\n#### 2.2.18 passwd命令\n\n格式：passwd 用户名 更改指定用户的密码，不可使用数字小键盘\n\n```\npasswd user1               修改一个用户的密码 (只允许root执行)\nchage -E 2023-04-10 user1  设置用户密码的失效期限\n\npwck                       检查 '/etc/passwd' 的文件格式和语法修正以及存在的用户\ngrpck                      检查 '/etc/passwd' 的文件格式和语法修正以及存在的群组\n```\n\n\n\n#### 2.2.19 chmod，chown命令\n\ninux的文件**权限**\n\n|           |         | 权值 |\n| --------- | ------- | ---- |\n| 读：r     | read    | 4    |\n| 写：w     | write   | 2    |\n| 执行： x  | excuter | 1    |\n| 无权限：- |         | 0    |\n\nlinux文件**归属**\n\n属主：文件拥有者，一般是创建者 u   –user\n\n属组：文件拥有者所在的用户组   g    -group\n\n其他用户： 除了 属主和数组的其他用户 o -other\n\nls -l 可以查看文件的详细信息，包含文件权限其中d ：代表目录，-：普通文件\n\n```\nchmod 777 文件名                #表示给当前用户，用户所在组，其他用户都给予全部权限\nchmod u+x,g+x,o+x 文件名        #增加权限，-则为删除权限\nchmod u=rwx, g=wx, o=r 文件名   #同时编辑多个权限\n\nchmod go-rwx directory1        删除群组(g)与其他人(o)对目录的读写执行权限\n\nchown [-R] [用户][:][用户组] 文件或文件夹\nchown -R user1 directory1      改变一个目录的所有人属性并同时改变改目录下所有文件的属性\nchgrp group1 file1             改变文件的群组\n\nchmod u+s /bin/file1       设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限\nchmod u-s /bin/file1       禁用一个二进制文件的 SUID位\nchmod g+s /home/public     设置一个目录的 SGID 位 - 类似SUID ，不过这是针对目录的\nchmod g-s /home/public     禁用一个目录的 SGID 位\nchmod o+t /home/public     设置一个文件的 STIKY 位 - 只允许合法所有人删除文件\nchmod o-t /home/public     禁用一个目录的 STIKY 位\n```\n\n#### 2.2.20 tree命令（需安装）\n\ntree    显示文件和目录由根目录开始的树形结构\n        lstree 显示文件和目录由根目录开始的树形结构\n\n#### 2.2.21 ln命令\n\n功能：在文件和目录之间建立链接\n\n格式：ln [参数] <源文件或目录> <目标文件或目录>\n\n```\nln -s file1 lnk1 创建一个指向文件或目录的软链接\nln file1 lnk1    创建一个指向文件或目录的物理链接\n```\n\n#### 2.2.22 chattr命令\n\n```\nchattr +a file1    只允许以追加方式读写文件\nchattr +c file1    允许这个文件能被内核自动压缩/解压\nchattr +d file1    在进行文件系统备份时，dump程序将忽略这个文件\nchattr +i file1    设置成不可变的文件，不能被删除、修改、重命名或者链接\nchattr +s file1    允许一个文件被安全地删除\nchattr +S file1    一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘\nchattr +u file1    若文件被删除，系统会允许你在以后恢复这个被删除的文件\nlsattr             显示特殊的属性\n```\n\n#### 2.2.23 wc命令\n\n功能：统计\n\n语法：`wc [-c -m -l -w] 文件路径`\n\n- 选项，-c，统计bytes数量\n- 选项，-m，统计字符数量\n- 选项，-l，统计行数\n- 选项，-w，统计单词数量\n- 参数，文件路径，被统计的文件，可作为内容输入端口\n\n### 2.3 系统指令\n\n#### 2.3.1 系统信息查看\n\n```\nuname -m         显示机器的处理器架构\nuname -r         显示正在使用的内核版本\nhdparm -tT /dev/sda                在磁盘上执行测试性读取操作系统信息\n(SMBIOS / DMI) hdparm -i /dev/hda  罗列一个磁盘的架构特性\nhdparm -i /dev/hda   罗列一个磁盘的架构特性\narch                 显示机器的处理器架构\ndmidecode -q         显示硬件系统部件 - (SMBIOS / DMI)\ncat /proc/cpuinfo    显示CPU info的信息\ncat /proc/interrupts 显示中断\ncat /proc/meminfo    校验内存使用\ncat /proc/swaps      显示哪些swap被使用\ncat /proc/version    显示内核的版本\ncat /proc/net/dev    显示网络适配器及统计\ncat /proc/mounts     显示已加载的文件系统\nlspci -tv            罗列 PCI 设备\nlsusb -tv            显示 USB 设备\nlsmod                查看加载的模块(驱动)\ndate                 显示系统日期\ncal 2007             显示2007年的日历表\ndate 041217002007.00 设置日期和时间 - 月日时分年.秒\nclock -w             将时间修改保存到 BIOS\niconv -l             列出已知的编码\n```\n\n#### 2.3.2 文件查找\n\n```\nfind / -name file1                          从 '/' 开始进入根文件系统搜索文件和目录\nfind / -user user1                          搜索属于用户 'user1' 的文件和目录\nfind /home/user1 -name \\.bin                在目录 '/ home/user1' 中搜索带有'.bin' 结尾的文件\nfind /usr/bin -type f -atime +100           搜索在过去100天内未被使用过的执行文件\nfind /usr/bin -type f -mtime -10            搜索在10天内被创建或者修改过的文件\nfind / -name \\.rpm -exec chmod 755 '{}' \\;  搜索以 '.rpm' 结尾的文件并定义其权限\nfind / -xdev -name \\.rpm                    搜索以 '.rpm' 结尾的文件，忽略光驱等可移动设备\nfind / -perm -u+s                           罗列一个系统中所有使用了SUID控制的文件\nlocate \\.ps                                 寻找以 '.ps' 结尾的文件 - 先运行 'updatedb' 命令\nwhereis halt                                显示一个二进制文件、源码或man的位置\nwhich halt                                  显示一个二进制文件或可执行文件的完整路径\n```\n\n#### 2.3.3 文件系统挂载\n\n```\nmount /dev/hda2 /mnt/hda2                挂载一个叫做hda2的盘 - 确定目录 '/ mnt/hda2' 已经存在\numount /dev/hda2                         卸载一个叫做hda2的盘 - 先从挂载点 '/ mnt/hda2' 退出\nfuser -km /mnt/hda2                      当设备繁忙时强制卸载\numount -n /mnt/hda2                      运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用\nmount /dev/fd0 /mnt/floppy               挂载一个软盘\nmount /dev/cdrom /mnt/cdrom              挂载一个cdrom或dvdrom\nmount /dev/hdb /mnt/cdrecorder           挂载一个cdrw或dvdrom\nmount -o loop file.iso /mnt/cdrom        挂载一个文件或ISO镜像文件\nmount -t vfat /dev/hda5 /mnt/hda5        挂载一个Windows FAT32文件系统\nmount /dev/sda1 /mnt/usbdisk             挂载一个usb 捷盘或闪存设备\nmount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share 挂载一个windows网络共享\n```\n\n#### 2.3.4 磁盘查看\n\n```\ndf -h                                               显示已经挂载的分区列表\nls -lSr |more                                       以尺寸大小排列文件和目录\ndu -sh dir1                                         估算目录 'dir1' 已经使用的磁盘空间'\ndu -sk * | sort -rn                                 以容量大小为依据依次显示文件和目录的大小\ndmesg                                               显示系统诊断信息、操作系统版本号、物理内存的大小以及其它信息\nrpm -q -a --qf '%10{SIZE}t%{NAME}n' | sort -k1,1n   以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)\ndpkg-query -W -f='${Installed-Size;10}t${Package}n' | sort -k1,1n   以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统)\n```\n\n#### 2.3.5 软件安装命令\n\n##### rpm\n\n```\nrpm -ivh package.rpm             安装一个rpm包\nrpm -ivh --nodeeps package.rpm   安装一个rpm包而忽略依赖关系警告\nrpm -U package.rpm               更新一个rpm包但不改变其配置文件\nrpm -F package.rpm               更新一个确定已经安装的rpm包\nrpm -e package_name.rpm          删除一个rpm包\nrpm -qa                          显示系统中所有已经安装的rpm包\nrpm -qa | grep httpd             显示所有名称中包含 \"httpd\" 字样的rpm包\nrpm -qi package_name             获取一个已安装包的特殊信息\nrpm -qg \"System Environment/Daemons\"     显示一个组件的rpm包\nrpm -ql package_name                     显示一个已经安装的rpm包提供的文件列表\nrpm -qc package_name                     显示一个已经安装的rpm包提供的配置文件列表\nrpm -q package_name --whatrequires       显示与一个rpm包存在依赖关系的列表\nrpm -q package_name --whatprovides       显示一个rpm包所占的体积\nrpm -q package_name --scripts            显示在安装/删除期间所执行的脚本l\nrpm -q package_name --changelog          显示一个rpm包的修改历史\nrpm -qf /etc/httpd/conf/httpd.conf       确认所给的文件由哪个rpm包所提供\nrpm -qp package.rpm -l                   显示由一个尚未安装的rpm包提供的文件列表\nrpm --import /media/cdrom/RPM-GPG-KEY    导入公钥数字证书\nrpm --checksig package.rpm               确认一个rpm包的完整性\nrpm -qa gpg-pubkey                       确认已安装的所有rpm包的完整性\nrpm -V package_name                      检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间\nrpm -Va                                  检查系统中所有已安装的rpm包- 小心使用\nrpm -Vp package.rpm                      确认一个rpm包还未安装\nrpm2cpio package.rpm | cpio --extract --make-directories *bin* 从一个rpm包运行可执行文件\nrpm -ivh /usr/src/redhat/RPMS/`arch`/package.rpm               从一个rpm源码安装一个构建好的包\nrpmbuild --rebuild package_name.src.rpm                        从一个rpm源码构建一个 rpm 包\n```\n\n##### yum[-y 自动确认] [install / remove / search] 软件名称\n\n```\nyum install package_name            下载并安装一个rpm包\nyum localinstall package_name.rpm   将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系\nyum update package_name.rpm         更新当前系统中所有安装的rpm包\nyum update package_name             更新一个rpm包\nyum remove package_name             删除一个rpm包\nyum list                            列出当前系统中安装的所有包\nyum search package_name             在rpm仓库中搜寻软件包\nyum clean packages                  清理rpm缓存删除下载的包\nyum clean headers                   删除所有头文件\nyum clean all                       删除所有缓存的包和头文件\n```\n\n##### deb\n\n```\ndpkg -i package.deb         安装/更新一个 deb 包\ndpkg -r package_name        从系统删除一个 deb 包\ndpkg -l                     显示系统中所有已经安装的 deb 包\ndpkg -l | grep httpd        显示所有名称中包含 \"httpd\" 字样的deb包\ndpkg -s package_name        获得已经安装在系统中一个特殊包的信息\ndpkg -L package_name        显示系统中已经安装的一个deb包所提供的文件列表\ndpkg --contents package.deb 显示尚未安装的一个包所提供的文件列表\ndpkg -S /bin/ping           确认所给的文件由哪个deb包提供\n```\n\n##### apt(用于Debian, Ubuntu 以及类似系统)[-y 自动确认] [install / remove / search] 软件名称\n\n```\napt-get install package_name       安装/更新一个 deb 包\napt-cdrom install package_name     从光盘安装/更新一个 deb 包\napt-get update                     升级列表中的软件包\napt-get upgrade                    升级所有已安装的软件\napt-get remove package_name        从系统删除一个deb包\napt-get check                      确认依赖的软件仓库正确\napt-get clean                      从下载的软件包中清理缓存\napt-cache search searched-package  返回包含所要搜索字符串的软件包名称\n```\n\n#### 2.3.6 文本处理\n\n```\ncat file1 file2 ... | command <> file1_in.txt_or_file1_out.txt general syntax for text manipulation using PIPE, STDIN and STDOUT\ncat file1 | command( sed, grep, awk, grep, etc...) > result.txt  合并一个文件的详细说明文本，并将简介写入一个新文件中\ncat file1 | command( sed, grep, awk, grep, etc...) >> result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中\ngrep Aug /var/log/messages    在文件 '/var/log/messages'中查找关键词\"Aug\"\ngrep ^Aug /var/log/messages   在文件 '/var/log/messages'中查找以\"Aug\"开始的词汇\ngrep [0-9] /var/log/messages  选择 '/var/log/messages' 文件中所有包含数字的行\ngrep Aug -R /var/log/         在目录 '/var/log' 及随后的目录中搜索字符串\"Aug\"\nsed 's/stringa1/stringa2/g' example.txt     将example.txt文件中的 \"string1\" 替换成 \"string2\"\nsed '/^$/d' example.txt                     从example.txt文件中删除所有空白行\nsed '/ *#/d; /^$/d' example.txt             从example.txt文件中删除所有注释和空白行\necho 'esempio' | tr '[:lower:]' '[:upper:]' 合并上下单元格内容\nsed -e '1d' result.txt                      从文件example.txt 中排除第一行\nsed -n '/stringa1/p'                        查看只包含词汇 \"string1\"的行\nsed -e 's/ *$//' example.txt                删除每一行最后的空白字符\nsed -e 's/stringa1//g' example.txt          从文档中只删除词汇 \"string1\" 并保留剩余全部\nsed -n '1,5p;5q' example.txt                查看从第一行到第5行内容\nsed -n '5p;5q' example.txt                  查看第5行\nsed -e 's/00*/0/g' example.txt              用单个零替换多个零\ncat -n file1                                标示文件的行数\ncat example.txt | awk 'NR%2==1'             删除example.txt文件中的所有偶数行\necho a b c | awk '{print $1}'               查看一行第一栏\necho a b c | awk '{print $1,$3}'            查看一行的第一和第三栏\npaste file1 file2                           合并两个文件或两栏的内容\npaste -d '+' file1 file2                    合并两个文件或两栏的内容，中间用\"+\"区分\nsort file1 file2                            排序两个文件的内容\nsort file1 file2 | uniq                     取出两个文件的并集(重复的行只保留一份)\nsort file1 file2 | uniq -u                  删除交集，留下其他的行\nsort file1 file2 | uniq -d                  取出两个文件的交集(只留下同时存在于两个文件中的文件)\ncomm -1 file1 file2                         比较两个文件的内容只删除 'file1' 所包含的内容\ncomm -2 file1 file2                         比较两个文件的内容只删除 'file2' 所包含的内容\ncomm -3 file1 file2                         比较两个文件的内容只删除两个文件共有的部分\n```\n\n#### 2.3.7 字符/文件格式转换\n\n```\ndos2unix filedos.txt fileunix.txt     将一个文本文件的格式从MSDOS转换成UNIX\nunix2dos fileunix.txt filedos.txt     将一个文本文件的格式从UNIX转换成MSDOS\nrecode ..HTML < page.txt > page.html  将一个文本文件转换成html\nrecode -l | more                      显示所有允许的转换格式\n```\n\n#### 2.3.8 文件系统操作\n\n```\nbadblocks -v /dev/hda1    检查磁盘hda1上的坏磁块\nfsck /dev/hda1            修复/检查hda1磁盘上linux文件系统的完整性\nfsck.ext2 /dev/hda1       修复/检查hda1磁盘上ext2文件系统的完整性\ne2fsck /dev/hda1          修复/检查hda1磁盘上ext2文件系统的完整性\ne2fsck -j /dev/hda1       修复/检查hda1磁盘上ext3文件系统的完整性\nfsck.ext3 /dev/hda1       修复/检查hda1磁盘上ext3文件系统的完整性\nfsck.vfat /dev/hda1       修复/检查hda1磁盘上fat文件系统的完整性\nfsck.msdos /dev/hda1      修复/检查hda1磁盘上dos文件系统的完整性\ndosfsck /dev/hda1         修复/检查hda1磁盘上dos文件系统的完整性\n\nmkfs /dev/hda1         在hda1分区创建一个文件系统\nmke2fs /dev/hda1       在hda1分区创建一个linux ext2的文件系统\nmke2fs -j /dev/hda1    在hda1分区创建一个linux ext3(日志型)的文件系统\nmkfs -t vfat 32 -F /dev/hda1  创建一个 FAT32 文件系统\nfdformat -n /dev/fd0          格式化一个软盘\nmkswap /dev/hda3              创建一个swap文件系统\nswapon /dev/hda3              启用一个新的swap文件系统\nswapon /dev/hda2 /dev/hdb3    启用两个swap分区\n```\n\n#### 2.3.9 备份\n\n```\ndump -0aj -f /tmp/home0.bak /home    制作一个 '/home' 目录的完整备份\ndump -1aj -f /tmp/home0.bak /home    制作一个 '/home' 目录的交互式备份\nrestore -if /tmp/home0.bak           还原一个交互式备份\nrsync -rogpav --delete /home /tmp    同步两边的目录\nrsync -rogpav -e ssh --delete /home ip_address:/tmp           通过SSH通道rsync\nrsync -az -e ssh --delete ip_addr:/home/public /home/local    通过ssh和压缩将一个远程目录同步到本地目录\nrsync -az -e ssh --delete /home/local ip_addr:/home/public    通过ssh和压缩将本地目录同步到远程目录\ndd bs=1M if=/dev/hda | gzip | ssh user@ip_addr 'dd of=hda.gz' 通过ssh在远程主机上执行一次备份本地磁盘的操作\ndd if=/dev/sda of=/tmp/file1     备份磁盘内容到一个文件\ntar -Puf backup.tar /home/user   执行一次对 '/home/user' 目录的交互式备份操作\n( cd /tmp/local/ && tar c . ) | ssh -C user@ip_addr 'cd /home/share/ && tar x -p'  通过ssh在远程目录中复制一个目录内容\n( tar c /home ) | ssh -C user@ip_addr 'cd /home/backup-home && tar x -p'           通过ssh在远程目录中复制一个本地目录\ntar cf - . | (cd /tmp/backup ; tar xf - )      本地将一个目录复制到另一个地方，保留原有权限及链接\nfind /home/user1 -name '*.txt' | xargs cp -av --target-directory=/home/backup/ --parents 从一个目录查找并复制所有以 '.txt' 结尾的文件到另一个目录\nfind /var/log -name '*.log' | tar cv --files-from=- | bzip2 > log.tar.bz2          查找所有以 '.log' 结尾的文件并做成一个bzip包\ndd if=/dev/hda of=/dev/fd0 bs=512 count=1      做一个将 MBR (Master Boot Record)内容复制到软盘的动作\ndd if=/dev/fd0 of=/dev/hda bs=512 count=1 从已经保存到软盘的备份中恢复MBR内容\n```\n\n#### 2.3.10 光盘\n\n```\ncdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force 清空一个可复写的光盘内容\nmkisofs /dev/cdrom > cd.iso            在磁盘上创建一个光盘的iso镜像文件\nmkisofs /dev/cdrom | gzip > cd_iso.gz  在磁盘上创建一个压缩了的光盘iso镜像文件\nmkisofs -J -allow-leading-dots -R -V \"Label CD\" -iso-level 4 -o ./cd.iso data_cd 创建一个目录的iso镜像文件\ncdrecord -v dev=/dev/cdrom cd.iso  刻录一个ISO镜像文件\ngzip -dc cd_iso.gz | cdrecord dev=/dev/cdrom - 刻录一个压缩了的ISO镜像文件\nmount -o loop cd.iso /mnt/iso      挂载一个ISO镜像文件\ncd-paranoia -B           从一个CD光盘转录音轨到 wav 文件中\ncd-paranoia -- \"-3\"      从一个CD光盘转录音轨到 wav 文件中（参数-3）\ncdrecord --scanbus       扫描总线以识别scsi通道\ndd if=/dev/hdc | md5sum  校验一个设备的md5sum编码，例如一张 CD\n```\n\n#### 2.3.11 网络\n\n```\nifconfig eth0：显示网络接口“eth0”的配置详细信息，例如IP地址、子网掩码和其他网络设置\n\nifup eth0：    启动网络接口“eth0”，使其能够发送和接收网络流量\n\nifdown eth0：  关闭网络接口“eth0”，禁止其发送或接收网络流量\n\nifconfig eth0 192.168.1.1 netmask 255.255.255.0：将网络接口“eth0”的IP地址和子网掩码配置为分别为“192.168.1.1”和“255.255.255.0”\n\nifconfig eth0 promisc：      将网络接口“eth0”设置为混杂模式，允许其捕获所有网络流量，包括不是发送到其MAC地址的数据包。\n\ndhclient eth0：              请求网络接口“eth0”从DHCP服务器获取IP地址租约。\n\nroute -n show routing table：显示当前系统的路由表，显示当前的路由配置。\n\nroute add -net 0/0 gw IP_Gateway：  为系统添加默认网关，其中网关IP地址设置为“IP_Gateway”。\n\nroute add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1：通过网关“192.168.1.1”添加静态路由，以便通过该网关访问网络“192.168.0.0/16”。\n\nroute del 0/0 gw IP_gateway：删除之前添加的默认网关。\n\necho \"1\" > /proc/sys/net/ipv4/ip_forward：激活IP转发，允许系统在不同的网络接口之间进行IP数据包路由。\n\nhostname：显示系统的主机名，即在网络上标识系统的名称。\n\nhost www.example.com：    执行DNS查找，将主机名“www.example.com”解析为IP地址，反之亦然。\n\nnslookup www.example.com：同样执行DNS查找，将主机名“www.example.com”解析为IP地址，反之亦然。\n\nip link show： 显示所有网络接口的状态，包括其链路状态（已启用或已禁用）和其他信息。\n\nmii-tool eth0：使用Media Independent Interface（MII）工具显示网络接口“eth0”的链路状态。\n\nethtool eth0： 显示网络卡“eth0”的统计信息和详细信息，例如速度、双工模式和错误计数器。\n\nnetstat -tup： 显示使用TCP和UDP协议的所有活动网络连接及其关联的进程（通过PID标识）。\n\nnetstat -tupl：显示系统上所有监听的网络服务及其关联的进程（通过PID标识）使用TCP和UDP协议。\n\n`tcpdump tcp port 80`：显示所有在端口80上使用TCP协议的网络流量，通常用于监控HTTP（超文本传输协议）流量。\n\niwlist scan：  显示无线网络接口的扫描结果，列出可用的无线网络。\n\niwconfig eth1：显示无线网络接口“eth1”的配置信息，包括SSID、信号强度和加密设置等。\n\nhostname：     显示系统的主机名，即在网络上标识系统的名称。\n\nhost www.example.com：    执行DNS查找，将主机名“www.example.com”解析为IP地址，反之亦然。\n\nnslookup www.example.com：同样执行DNS查找，将主机名“www.example.com”解析为IP地址，反之亦然。\n\nwhois www.example.com：   在Whois数据库中查找主机名“www.example.com”的注册信息，包括域名所有者、注册商、联系信息等。\n```\n\n#### 2.3.12 其它命令\n\n**bc**  用于编写脚本进行高精度数学运算\n\n编写如下sqrt脚本，可使用`./sqrt 数字` 进行平方根运算\n\n```\n#!/bin/bash\nif [ $# -ne 1 ]\nthen\n    echo 'Usage: sqrt number'\n    exit 1else\n    echo -e \"sqrt($1)\\nquit\\n\" | bc -q -i\nfi\n```\n\n**split** 用于分割大型文件\n\n用法：split [选项] [输入文件] [输出文件前缀]\n\n```\n-b：指定每个输出文件的大小，后面跟着的参数可以是以字节（B）、千字节（K）、兆字节（M）等为单位的数值。例如 \n\n-b 1M 表示每个输出文件的大小为1兆字节\n\n-l：指定每个输出文件的行数，后面跟着的参数为整数。例如 -l 1000 表示每个输出文件包含1000行\n\n-d：设置输出文件的后缀数字的长度，默认为2\n\n-a：设置输出文件的后缀字符，默认为字母 \"a\"\n```\n\n```\n# ls -l largefile.tar.gz\n输出-rw-r--r-- 1 aa aa 436774774 04-17 02:00 largefile.tar.gz\n# split -b 50m largefile.tar.gz LF_\n# ls -l LF_*-rw-r--r-- 1 aa aa 52428800 05-10 18:34 LF_aa\n输出-rw-r--r-- 1 aa aa 52428800 05-10 18:34 LF_ab\n   -rw-r--r-- 1 aa aa 52428800 05-10 18:34 LF_ac\n   -rw-r--r-- 1 aa aa 52428800 05-10 18:34 LF_ad\n   -rw-r--r-- 1 aa aa 52428800 05-10 18:34 LF_ae\n   -rw-r--r-- 1 aa aa 52428800 05-10 18:35 LF_af\n   -rw-r--r-- 1 aa aa 52428800 05-10 18:35 LF_ag\n   -rw-r--r-- 1 aa aa 52428800 05-10 18:35 LF_ah\n   -rw-r--r-- 1 aa aa 17344374 05-10 18:35 LF_ai\n```\n\n拆分后合并\n\n```\ncat LF_* >largefile.tar.gz\n```\n\n**nl** nl命令其它和cat命令很像，只不过它会打上行号\n\n**ldd** 查看一个可执行文件所使用的动态链接库 ldd+文件目录/文件名\n\n**col** 把man文件转成纯文本文件\n\n```\n# PAGER=cat# man less | col -b > less.txt\n```\n\n**xmlwf** 检查一个XML文档是否是所有的tag都是正常的\n\n```\n# curl 'https://coolshell.cn/?feed=rss2' > cocre.xml\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 64882    0 64882    0     0  86455      0 --:--:-- --:--:-- --:--:-- 2073k\n# xmlwf cocre.xml\n# perl -i -pe 's@<link>@<br>@g' cocre.xml\n# xmlwf cocre.xmlcocre.xml:13:23: mismatched tag\n```\n\n**lsof** 可以列出打开了的文件\n\n```\n# lsof | grep TCPhttpd       548    apache    4u     IPv6   14300967    TCP *:http (LISTEN)\nhttpd       548    apache    6u     IPv6   14300972    TCP *:https (LISTEN)\nhttpd       561    apache    4u     IPv6   14300967    TCP *:http (LISTEN)\nhttpd       561    apache    6u     IPv6   14300972    TCP *:https (LISTEN)\nsshd       1764      root    3u     IPv6       4993    TCP *:ssh (LISTEN)\ntcpserver  8965      root    3u     IPv4  153795500    TCP *:pop3 (LISTEN)\nmysqld    10202     mysql   10u     IPv4   73819697    TCP *:mysql (LISTEN)\nsshd      10735      root    3u     IPv6  160731956    TCP 210.51.0.232:ssh->123.117.239.68:31810 (ESTABLISHED)\nsshd      10767     hchen    3u     IPv6  160731956    TCP 210.51.0.232:ssh->123.117.239.68:31810 (ESTABLISHED)\nvsftpd    11095      root    3u     IPv4  152157957    TCP *:ftp (LISTEN)\n```\n\n\n\n### 2.4 vim的使用\n\nvim有三种模式\n\n![linux_vim3.png](https://s2.loli.net/2024/03/15/OGYkAc25yVW4brl.png)\n\n**<u>使用技巧</u>**帮助系统（内容收集于vimtutor）\n\n```\n- 按下 <HELP> 键 (如果键盘上有的话)\n- 按下 <F1> 键 (如果键盘上有的话)\n- 输入 :help <回车>\n输入 CTRL-W CTRL-W   可以在窗口之间跳转。\n输入 :q <回车> 可以关闭帮助窗口\n\nVim 的功能特性要比 Vi 多得多，但其中大部分都没有缺省启用，创建一个vimrc文件以启用更多特性\n1. 开始编辑 vimrc 文件\n :edit ~/.vimrc\t\t这是 Unix 系统所使用的命令\n :edit $VIM/_vimrc\t这是 MS-Windows 系统所使用的命令\n2. 接着读取 vimrc 示例文件的内容：\n :r $VIMRUNTIME/vimrc_example.vim\n\n3. 保存文件，命令为：\n :write\n  下次您启动 Vim 时，编辑器就会有了语法高亮的功能，要了解更多信息，添加设置请输入 :help vimrc-intro\n```\n\n#### 2.4.1基本插入删除，保存退出\n\nh、j、k、l 键分别对应光标键的左、下、上、右\n\n按<ESC>键。然后输入`:q!` <回车>   表示不保存退出，使用 `:wq` 可以保存文件并退出\n\n命令模式下按`x`即可删除字符\n\n命令模式下按`i`即可进入插入模式，按`a`键可在光标之后插入文本\n\n命令模式输入 `o` 将在光标的**下方**打开新的一行并进入插入模式\n\n命令模式输入 `O` 将在光标的**上方**打开新的一行并进入插入模式\n\n#### 2.4.2删除与撤销\n\n输入 `dw` 可以从光标处删除至一个单词的末尾\n\n输入 `d$` 从当前光标删除到行末\n\n输入 `dd` 可以删除整一个当前行\n\n```\n    d      - 删除操作符。\n    motion - 操作符的操作对象。\n\n    w - 从当前光标当前位置直到下一个单词起始处，不包括它的第一个字符。\n    e - 从当前光标当前位置直到单词末尾，包括最后一个字符。\n    $ - 从当前光标当前位置直到当前行末。\n    \n    在动作前输入数字会使它重复那么多次，如输入 2w 使光标向前移动两个单词，输入 3e 使光标向前移动到第三个单词的末尾，因此输入 d2w 可以删除两个大写字母单词，输入 2dd 可以删除两行\n```\n\n```\n输入 u 来撤消最后执行的命令，输入 U 来撤消对整行的修改，输入 CTRL+R 可以重做被撤消的命令\n```\n\n#### 2.4.3更改与替换\n\n输入 `p` 可以将最后一次删除的内容置入光标之后\n\n```\n输入 dd 删除整行，这样会将该行保存到 Vim 的一个寄存器中\n接着将光标移动到 准备置入的位置的上方，然后在命令模式下输入 p 将该行粘贴置入\n```\n\n输入 `r` 和**一个字符**替换光标所在位置的字符\n\n输入 `R` 可连续替换多个字符\n\n输入  `ce` 可以改变文本直到一个单词的末尾\n\n改类操作符的工作方式跟删除类是一致的，动作参数（motion）也是相同的。\n\n#### 2.4.4查找与定位\n\n1.输入 `CTRL-G` 显示当前编辑文件中当前**光标所在行**位置以及文件状态信息\n\n输入 `CTRL-O` 可以回到之前的位置\n\n`CTRL-I` 会跳转到较新的位置\n\n```\n输入大写 G 可以使得当前光标直接跳转到文件最后一行，行号+G跳转到指定行\n输入 gg 可以使得当前光标直接跳转到文件第一行\n```\n\n2.在命令模式下输入`/ 想查找的字符` 可以实现查找操作，按n键可以查找同上一次的字符串，N向相反方向查找同上一次的字符串`？ 想查找的字符` 可以逆向查找字符串\n\n3.输入 `%` 可以查找配对的括号 )、]、}，当光标在括号上时按`%` 即可跳转到与之匹配的括号处，再按则返回原来位置，可用于程序调试\n\n4.输入 :s/old/new 可以替换第一个匹配到的字符串 old 为 new\n\n```\n     输入   :s/old/new/g      可以替换整行 old 为 new\n     输入   :#,#s/old/new/g   其中 #,# 代表的是替换操作的若干行中首尾两行的行号。\n     输入   :%s/old/new/g     则是替换整个文件中的每个匹配串。\n     输入   :%s/old/new/gc    会找到整个文件中的每个匹配串，并且对每个匹配串提示是否进行替换。\n```\n\n#### 2.4.5移动与批量操作\n\n输入 `:!` 然后紧接着输入一个外部命令+<回车>即可执行该外部命令\n\n输入 `:w FILENAME`可以把对当前文件的改动保存到FILENAME文件中\n\n```\n部分保存：\n按 v 键，将光标从第一个想保存的字符移动至最后一个，这之间的文本被高亮了，按 : 字符。屏幕底部会出现 :'<,'> \n输入 w TEST， TEST 应是一个未被使用的文件名。在出现:'<,'>w TEST 之后按 <回车> 键\n```\n\n插入\n\n```\n输入 :r FILENAME向当前文件中插入另外的文件的内容，提取进来的文件将从光标所在位置处开始置入\n```\n\n复制\n\n```\n按 v 键，将光标从第一个想保存的字符移动至最后一个，这之间的文本被高亮了，输入y复制，接着输入 p 粘贴。\ny 可以当作操作符来使用，如yw复制一个单词\n```\n\n```\n输入 :set xxx 可以设置 xxx 选项。一些有用的选项如下：\n    'ic' 'ignorecase'   查找时忽略字母大小写\n    'is' 'incsearch'    查找短语时显示部分匹配\n    'hls' 'hlsearch'    高亮显示所有的匹配短语\n    :set nu             显示行号\n    :set nonu           不显示行号\n     选项名可以用完整版本，也可以用缩略版本，在选项前加上 no 可以关闭选项：  :set noic\n```\n\n#### 2.4.6补全功能\n\n使用 CTRL+D 和 <TAB> 可以进行命令行补全\n\n```\n  1. 确保 Vim 不是在以兼容模式运行： :set nocp\n  2. 查看一下当前目录下已经存在哪些文件，输入： :!ls   或者  :!dir\n  3. 现在输入一个目录的起始部分，例如输入： :e\n  4. 接着按 CTRL+D 键，Vim 会显示以 e 开始的命令的列表。\n  5. 然后按 <TAB> 键，Vim 会补全命令为 :edit 。\n  6. 现在添加一个空格，以及一个已有文件的文件名的起始部分，例如： :edit FIL\n  7. 接着按 <TAB> 键，Vim 会补全文件名(如果它是唯一匹配的)。\n```","tags":["vim","shell","linux"],"categories":["大数据"]},{"title":"大数据套件安装","url":"/post/datainstall.html","content":"\n# 大数据套件安装\n\n本文记录了jdk，FineBI，kettle的安装过程。\n\n## jdk安装\n\n把jdk1.8.0_301.zip文件解压缩，放在某个目录中，本教程中是D:\\program files\\\n\n![jdk01.png](https://s2.loli.net/2024/03/15/T638VMZOIGXkPDH.png)\n\n![jdk02.png](https://s2.loli.net/2024/03/15/D9BxGebIt54kmWj.png)\n\n![jdk03.png](https://s2.loli.net/2024/03/15/Vo5H4jxE8TLYNeg.png)\n\n确认jdk安装成功，在cmd中输入 java -version\n\n![jdk04.png](https://s2.loli.net/2024/03/15/5EXqCWRSnt6wVl4.png)\n\n## FineBI安装使用\n\nBI：business intelligence\n\n### FineBI介绍\n\n1：数据可以帮助我们做什么 ？\n\n​\t1-1  历史数据分析：分析已有的数据，对之前发生的事情做分析，找到原因\n\n​\t1-2  实时数据分析：对当下发生的数据进行处理，及时展示数据信息。让企业关注实时发展动态\n\n​\t1-3  未来数据：对未来即将发生的事情进行预测，帮助企业调整方向  \n\n2：FineBI有哪些优势\n\n​\t1：个人用户完全免费，企业用户收费较低\n\n​\t2：自动式BI工具，企业或者个人自己搭建服务器，就可以访问BI版块\n\n​\t3：兼容多种数据源\n\n​\t4：零编码设计，让数据可视化工具通过拖拉拽就可以完成日常的需求\n\n​\t5：有超强的数据录入能力，在数据源加载以后依然可以修改、删除补录数据\n\n\n\n3：FineBI的使用场景\n\n​\tFineBI在大数据的场景中，使用一般是将我们抽取的数据源加载完毕后，满足数据分析要求的数据或者指标的数据在进行BI开发。\n\n### FineBI的安装\n\n第一步：找到软件，右键安装\n\n第二步：配置安装路径\n\n第三步：修改jvm内存（默认-本机内存的二分之一）\n\n第四步：安装后运行之激活码的获取\n\n第五步：启动界面分析\n\n![finebi1.png](https://s2.loli.net/2024/03/15/5NYWSD6VXmJjOTq.png)\n\n第六步：密码设置\n\n第七步：数据库的选择\n\n第八步：页面介绍\n\n![finebi2.png](https://s2.loli.net/2024/03/15/XBFx7AvksMcOlDQ.png)\n\n#### 网页开发优点\n\n如果企业中，我们将FineBI部署在一个服务器中，所有人都可以访问浏览器访问这个服务器进行BI开发\n\n1、此时所有的人的使用开发环境是相同\n\n2、方便数据源的使用，绑定或者提取一次数据源所有的开发者都可以使用\n\n3、开发结果所有的人都可以通过浏览器的方式查看\n\n4、可以快速分析数据报表（表格和图形）给非专业人事看\n\n#### 开发前的数据准备\n\n1、大数据开发，既不产生数据，也不消费数据\n\n​     业务部门各个数据源提供生产数据（抽）\n\n​    BI开发、数据分析师、运营部门、产品经理\n\n因为BI开发都是大数据的下游部门，所以开发之前必须有数据！！！\n\n\n\n操作：把我们提供给大家的sql脚本，导入到数据库中\n\n##### 1：启动datagrip ，选择一个数据库连接，找到结构，右键 run sql Script\n\n![finebi3.png](https://s2.loli.net/2024/03/15/yEZUi6v3RTPfK2r.png)\n\n##### 2：找到要执行sql脚本文件\n\n![finebi4.png](https://s2.loli.net/2024/03/15/uAJKLMZQON2tYzG.png)\n\n##### 3：导入数据结果\n\n![finebi5.png](https://s2.loli.net/2024/03/15/4Dexl6sOC7PQJcZ.png)\n\n### 数据准备\n\n##### 1：创建数据库连接\n\n![finebi6.png](https://s2.loli.net/2024/03/15/HumxMIjN5GUTZQt.png)\n\n##### 2：创建分组&业务包\n\n![finebi7.png](https://s2.loli.net/2024/03/15/vGkxCuwKsF2D6dE.png)\n\n##### 3：给业务包添加数据\n\n![finebi8.png](https://s2.loli.net/2024/03/15/Fb2aWqe5LynPsAR.png)\n\n##### 4：最重要的一步\n\n![finebi9.png](https://s2.loli.net/2024/03/15/BmitKnvarHYSF97.png)\n\n\n\n##### 仪表版内容\n\n![finebi10.png](https://s2.loli.net/2024/03/15/fy2QtpqY9hgzIUA.png)\n\n1：新建仪表板\n\n![finebi11.png](https://s2.loli.net/2024/03/15/BZYusIOzKh8XlGv.png)\n\n2：选择仪表板样式\n\n![finebi12.png](https://s2.loli.net/2024/03/15/HzA7tkjagdZi38q.png)\n\n3：选择数据源\n\n![finebi13.png](https://s2.loli.net/2024/03/15/bgdrt4OKjmFTD2Y.png)\n\n4：页面编辑界面介绍\n\n![finebi14.png](https://s2.loli.net/2024/03/15/bXSQHAf3mag7uPM.png)\n\n5：点击分区柱形图\n\n6：拖拽字段\n\n![finebi15.png](https://s2.loli.net/2024/03/15/2eyawqHhcn9OpoY.png)\n\n7：通过自定义图标将下面的展示改为线\n\n\n\n8：修改图表颜色\n\n\n\n第九步：取消图例\n\n![finebi16.png](https://s2.loli.net/2024/03/15/3MQ25cjH1DvnuKe.png)\n\n### 不同地区访问人数表\n\n1：加载数据源\n\n![finebi17.png](https://s2.loli.net/2024/03/15/5SbzNi9AOwWEkDu.png)\n\n第二步：选择分析数据表\n\n![finebi18.png](https://s2.loli.net/2024/03/15/RAQjfEiC13ozIeJ.png)\n\n第三步：更新业务数据包\n\n![finebi19.png](https://s2.loli.net/2024/03/15/uJk7BQjcLAlDtW5.png)\n\n\n\n第四步：进入仪表盘\n\n![finebi20.png](https://s2.loli.net/2024/03/15/I9sJSgUZujEMPRA.png)\n\n第五步：选择要分析的数据表\n\n![finebi21.png](https://s2.loli.net/2024/03/15/M3JQYAT7RNa4PUv.png)\n\n第六步：选择 地图\n\n![finebi22.png](https://s2.loli.net/2024/03/15/fbgNq872OHaBJGD.png)\n\n\n\n第七步：构建地图（添加横轴、纵轴）\n\n![finebi23.png](https://s2.loli.net/2024/03/15/vHlKe62Y7XQ3Udm.png)\n\n\n\n总结：大屏展示的步骤\n\n1：连接内部（外部的数据库）-找到要展示bi库  \n\n2：数据准备、 创建分组，根据数据连接创建业务包【注意！！一定要记得点更新】\n\n3：进入仪表板\n\n​\t3-1：创建组件 \n\n​\t3-2：加载数据源\n\n​\t3-3：配置\n\n拓展：\n\n​\t遇到问题！！！记载页面数据发现有点卡\n\n1：进入安装目录下的bin文件夹， 找到 finebi.vmoptions\n\n### 集团数据分析_数据准备\n\n1：找到数据需要数据\n\n![finebi24.png](https://s2.loli.net/2024/03/15/SGmNX8D5ePoCJqL.png)\n\n2：分析数据之前的关系\n\n![finebi25.png](https://s2.loli.net/2024/03/15/FawKpMVYmHD8tXC.png)\n\n3：自主选取数据，选择字段\n\n![finebi26.png](https://s2.loli.net/2024/03/15/83eytUAWIEwNXnm.png)\n\n\n\n4：数据自助选取结果\n\n![finebi27.png](https://s2.loli.net/2024/03/15/NZ3nG7UYdLz5Tgs.png)\n\n5：添加新增了-毛利额\n\n![finebi28.png](https://s2.loli.net/2024/03/15/mM9sFB2UpQLH8z3.png)\n\n6：创建集团分析源表\n\n![finebi29.png](https://s2.loli.net/2024/03/15/yivjopRnPrBA6HM.png)\n\n7：查看源数据集是否创建成功\n\n![finebi30.png](https://s2.loli.net/2024/03/15/r4G3awAdoxM5iec.png)\n\n8：创建仪表盘\n\n![finebi31.png](https://s2.loli.net/2024/03/15/iuyJzIrtqK8YACe.png)\n\n### 集团数据分析_月销售额\n\n1：使用sql分析\n\n![finebi32.png](https://s2.loli.net/2024/03/15/2p4x1XjKPwuagSd.png)\n\n\n\n2：创建图表\n\n![finebi33.png](https://s2.loli.net/2024/03/15/y7LowKvkPcQhq9l.png)\n\n3：解决时间的问题&毛利额问题\n\n![finebi34.png](https://s2.loli.net/2024/03/15/b4S2xtfszGPpvRT.png)\n\n**同比&环比**【拓展】\n\n1：同比是本期与同期做对比   eg： 2020-1    2019-1\n\n​\t\t–本期指一定时期如**月**、季度、年\n\n​\t\t同期\n\n2：环比：表示连续2个统计周期内的量的变化比  eg：2020-1   2020-2\n\n\n\n![finebi35.png](https://s2.loli.net/2024/03/15/eS7wdsZIqhfoM9r.png)\n\n\n\n![finebi36.png](https://s2.loli.net/2024/03/15/s1w7S4qcgIENokt.png)\n\n4：修改组件颜色\n\n![finebi37.png](https://s2.loli.net/2024/03/15/WUsOdD2r4JqB7fl.png)\n\n## Kettle安装使用\n\nkettle是一个etl工具，etl是进行数据抽取 转换 加载\n\nkettle用java开发的，所以要安装jdk（java development kit），\n\n\n\n> windows下使用 kettle打开Spoon.bat\n\n> mac 下打开 kettle 使用终端 cd  切换到 你解压的kettle的目录下，  ==sh ./spoon.sh== \n\n##### txt数据转换Excel数据\n\n1. 新建转换\n\n![kettle1.png](https://s2.loli.net/2024/03/15/vC1LaWb8XEUTApq.png)\n\n2. 创建文本输入组件\n\n![kettle2.png](https://s2.loli.net/2024/03/15/BylHVEw3fLGm4nh.png)\n\n   \n\n3. ![kettle3.png](https://s2.loli.net/2024/03/15/2cnfBZ9wq71L6Hg.png)\n\n4. ![kettle4.png](https://s2.loli.net/2024/03/15/7LaKBvZJmgQwG3x.png)\n\n5. ![kettle5.png](https://s2.loli.net/2024/03/15/9lOnRoQNuVCBMe7.png)\n\n6. ![kettle6.png](https://s2.loli.net/2024/03/15/elq3fVckPT6GZ4y.png)\n\n7. ![kettle7.png](https://s2.loli.net/2024/03/15/6VrijyLchdlQTOX.png)\n\n8. 获取好字段之后，点击确定保存即可。\n\n9. ![kettle8.png](https://s2.loli.net/2024/03/15/vogj6dZIAsaLNmu.png)\n\n10. ![kettle9.png](https://s2.loli.net/2024/03/15/SqyVTG3uAo1kbnM.png)\n\n11. ![kettle10.png](https://s2.loli.net/2024/03/15/NKrUtLYDlWBXveC.png)\n\n    \n\n12. ![kettle11.png](https://s2.loli.net/2024/03/15/AHqoJynOWVdj6Dz.png)\n\n13. 当看到流程上面有绿色的对勾 表示转换成功了\n\n## Excel数据转换Mysql数据\n\n1. 找到要转换为excel文件\n\n2. 打开DG或者是使用命令行进入到mysql数据库，创建一个数据库\n\n   ```sql\n   CREATE DATABASE kettle_db CHARSET =utf8;\n   ```\n\n3. 配置kettle和mysql连接，\n\n   ![kettle12.png](https://s2.loli.net/2024/03/15/UlGgcFup39tNA1Z.png)\n\n   ![kettle13.png](https://s2.loli.net/2024/03/15/tq34LjXBzO68fDK.png)\n\n   ![kettle14.png](https://s2.loli.net/2024/03/15/WIowGyBzk4ENRgM.png)\n\n   ![kettle15.png](https://s2.loli.net/2024/03/15/csDNY62uaoyFmOP.png)\n\n   ```mysql\n   kettle_demo/type=javax.sql.DataSource  \n   kettle_demo/driver=com.mysql.cj.jdbc.Driver\n   kettle_demo/url=jdbc:mysql://192.168.88.100:3306/kettle_demo?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=GMT\n   kettle_demo/user=root\n   kettle_demo/password=123456\n   ```\n\n   \n\n4. 先去新建输入和输出组件\n\n![kettle16.png](https://s2.loli.net/2024/03/15/iy26VlrcBtWH8PG.png)\n\n![image-20211202104034187.png](https://s2.loli.net/2024/03/15/UHLs2tqEeGXY567.png)\n\n5. ![kettle17.png](https://s2.loli.net/2024/03/15/2HmDj45c3WduvYX.png)\n\n6. ![kettle18.png](https://s2.loli.net/2024/03/15/bGWBT1UPFlMfE2D.png)\n\n7. ![kettle19.png](https://s2.loli.net/2024/03/15/1FUY4JmkjAgxNhw.png)\n\n8. ![kettle20.png](https://s2.loli.net/2024/03/15/bl5qvSARpD8taBQ.png)\n\n9. ![kettle21.png](https://s2.loli.net/2024/03/15/YcMJhNZTutsnajH.png)\n\n10. ![kettle22.png](https://s2.loli.net/2024/03/15/f41nWPrqpaEUoXl.png)\n\n11. ![kettle23.png](https://s2.loli.net/2024/03/15/eqMjbadQyvcpSgR.png)\n\n12. ![kettle24.png](https://s2.loli.net/2024/03/15/hjLyXT9Pxc152qU.png)\n\n13. ctrl+s 将流程进行保存，保存之后，点击执行即可。\n\n错误问题\n\n![kettle25.png](https://s2.loli.net/2024/03/15/eiQCgBShnbJEjwm.png)\n\n1. 找到自己的mysql的配置文件 my.ini\n\ndefault_authentication_plugin 这个选项后面的值 改为 \n\n```sql\ndefault_authentication_plugin=mysql_native_password\n```\n\n保存这个文件， 打开 win+R， 输入services.msc，重启此服务\n\n\n\n## Mysql表间转换\n\n设置数据库连接的共享\n\n![kettle26.png](https://s2.loli.net/2024/03/15/cpXqEG8xovrV6P7.png)\n\n1. ![kettle27.png](https://s2.loli.net/2024/03/15/gltfuIj1iwBEnMC.png)\n2. ![kettle28.png](https://s2.loli.net/2024/03/15/1MUFNLkxXnViSrQ.png)\n3. ![kettle29.png](https://s2.loli.net/2024/03/15/rROkWXlBwHfdxPt.png)\n4. ![kettle30.png](https://s2.loli.net/2024/03/15/ugACReU6pbjtG1k.png)\n5. 保存并执行即可\n\n## 插入-更新组件\n\n1. 清空 new_user 表中的数据（右键Database Tools Truncate）\n2. 先将 t_user 表中的张三 改为 20岁，重新的去执行 刚才的 table_to_table 这个脚本，将t_user表中的数据 ，添加到 new_user 表。\n3. ![kettle31.png](https://s2.loli.net/2024/03/15/ju1K3qFZDC6s8UA.png)\n4. ![kettle32.png](https://s2.loli.net/2024/03/15/vf5Ny9cDMSiHnds.png)\n5. ![kettle33.png](https://s2.loli.net/2024/03/15/pFOXJRcv6TrEn2d.png)\n6. ![kettle34.png](https://s2.loli.net/2024/03/15/XtzJcqeM6DoFZAE.png)\n7. 保存并执行\n\n## switch-case组件\n\n1， ![kettle35.png](https://s2.loli.net/2024/03/15/uovrAZagDOEJbHN.png)\n\n2. ![kettle36.png](https://s2.loli.net/2024/03/15/CcIw6DNajsrQPqt.png)\n3. ![kettle37.png](https://s2.loli.net/2024/03/15/ECmuKAtxgLYa9FV.png)\n4. ![kettle38.png](https://s2.loli.net/2024/03/15/uOrWP6z2SdZhcYH.png)\n5. excel输出男和女的时候，配置基本一样，女的配置参照男的截图（3-4）\n6. 保存这个流程 并执行。\n\n## SQL脚本组件\n\n![kettle39.png](https://s2.loli.net/2024/03/15/yg2QmV9uTDvOZ7F.png)\n\n\n\n## 设置转换参数\n\n![kettle40.png](https://s2.loli.net/2024/03/15/mQy8Lg3v1KtVNHz.png)\n\n![kettle41.png](https://s2.loli.net/2024/03/15/WSaAPo4T1mHtVqE.png)\n\n![kettle42.png](https://s2.loli.net/2024/03/15/acTtHq9xWKLd7bF.png)\n\n![kettle43.png](https://s2.loli.net/2024/03/15/jJf9CyDbpKsqW58.png)\n\n接下来就可以保存去执行了\n\n\n\n## job开发\n\n1. 新建job![kettle44.png](https://s2.loli.net/2024/03/15/fQ3j1Ds86ySO5KF.png)\n2. 先将job保存完毕之后，再去设置转换![kettle45.png](https://s2.loli.net/2024/03/15/5RfM8pOhq3YQvtx.png)\n3. ![kettle46.png](https://s2.loli.net/2024/03/15/eyGjtOIHQ2cBvZ7.png)\n\n\n\n==[Kettle中文网 – Kettle安装、Kettle使用、Kettle中文](https://www.kettle.net.cn/)==\n\n","tags":["大数据"],"categories":["大数据"]},{"title":"SQL基础","url":"/post/SQLba.html","content":"\n\n## 一、数据库概述\n\n### 1、数据库介绍\n\n数据库就是存储数据的仓库，其本质是一个文件系统，按照特定的格式将数据存储起来，用户可以对数据库中的数据进行增加，修改，删除及查询操作。\n\n随着互联网的高速发展，大量的数据在不断的产生，伴随而来的是如何高效安全的存储数据和处理数据，而这一问题成为了信息时代的一个非常大的问题，而使用数据库可以高效的有条理的储存数据。\n\n- 可以结构化存储大量的数据；\n- 可以有效的保持数据的一致性、完整性；\n- 读写效率极高。\n\n### 2、数据库分类\n\n数据库又分为关系型数据库和非关系型数据库\n\n#### 关系型数据库RDBMS\n\n关系型数据库：指采用了关系模型来组织数据的数据库。\n\n关系模型指的就是二维表格模型，而一个关系型数据库就是由二维表及其之间的联系所组成的一个数据组织。\n\n#### 非关系型数据库NoSQL\n\n非关系型数据库：又被称为NoSQL（Not Only SQL )，意为不仅仅是SQL，对NoSQL 最普遍的定义是“非关联型的”，强调 Key-Value 的方式存储数据。\n\nKey-Value结构存储： Key-value数据库是一种以键值对存储数据的一种数据库，类似Java中的map。可以将整个数据库理解为一个大的map，每个键都会对应一个唯一的值。\n\n![mysql图1.png](https://s2.loli.net/2024/03/15/ASPFqNxer8mgMa9.png)\n\n关系型数据库（RDBMS）和非关系型数据库（NoSQL）是两种不同类型的数据库管理系统，用于存储和管理数据的方式不同，它们之间的一些主要区别如下：\n\n1. 数据结构：关系型数据库使用表格（表）来组织数据，每个表都有固定的列和行。表之间可以建立关系，通过键（键值对）进行连接。而非关系型数据库则没有固定的表结构，数据可以以文档、键值对、列族或者图等形式存储。\n2. 可扩展性：非关系型数据库通常具有更好的可扩展性，可以更容易地处理大规模和高并发的数据。关系型数据库在处理大量数据和高并发请求时可能会面临性能瓶颈。\n3. 数据一致性：关系型数据库通常具有强一致性，即数据在数据库中的状态是一致的。而非关系型数据库则可能具有弱一致性或最终一致性，即在某一时刻数据在不同节点之间可能存在不一致，但最终会达到一致状态。\n4. 灵活性：非关系型数据库通常更加灵活，可以在不需要事先定义数据结构的情况下存储和处理各种不同类型的数据。而关系型数据库需要事先定义表结构，并在存储数据之前进行严格的模式设计。\n5. 查询语言：关系型数据库通常使用结构化查询语言（SQL）来查询和操作数据。而非关系型数据库使用不同的查询语言，例如键值对数据库使用键（key）来查询数据，文档数据库使用类似于JSON的查询语法，列族数据库使用列族和列来查询数据。\n6. 数据库设计：关系型数据库通常适用于复杂的事务性应用，需要保持数据的一致性和完整性，如金融系统、人力资源管理系统等。而非关系型数据库通常适用于需要处理大量半结构化或非结构化数据、需要高度可扩展性和灵活性的应用，如社交媒体、物联网应用、日志数据等。\n\n### 3、常见数据库介绍\n\n####  关系型数据库\n\n| **数据库**    | **介绍**                                                     |\n| ------------- | ------------------------------------------------------------ |\n| **MySQL**     | 开源免费的中型数据库,已经被Oracle收购.MySQL6.x版本也开始收费。 |\n| **Oracle**    | 收费的大型数据库，Oracle公司的产品。Oracle收购SUN公司，收购MYSQL。 |\n| **DB2**       | IBM公司的数据库产品,收费的。常应用在银行系统中.              |\n| **SQLserver** | MicroSoft 公司收费的中型的数据库。C#、.net等语言常使用。     |\n| **SQLite**    | 嵌入式的小型数据库，应用在手机端。                           |\n\n#### 非关系型数据库\n\n| **数据库**  | **介绍**                                                     |\n| ----------- | ------------------------------------------------------------ |\n| **Redis**   | 是一个小而美的数据库，主要用在key-value的内存缓存，读写性能极佳 |\n| **HBase**   | HBase是列式数据库，目标是高效存储大量数据                    |\n| **MongoDB** | MongoDB是文档型数据库，非常接近关系型数据库的。              |\n\n## 二、MySQL数据库\n\n### 1、MySQL介绍\n\nMySQL是一个关系型数据库管理系统，在 WEB 应用方面，MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件，它是由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品，MySQL 是最流行的关系型数据库管理系统中的一个。\n\n### 2、MySQL特点\n\n1.MySQL支持大型的数据库。可以处理拥有上千万条记录的大型数据库。\n        2.MySQL使用标准的SQL数据语言形式。\n        3.MySQL可以安装在不同的操作系统，并且提供多种编程语言的操作接口。这些编程语言包括C、C++、Python、Java、Ruby等等。\n\n### 3、MySQL版本\n\nMySQL Community Server：社区版本，开源免费，但不提供官方技术支持。\n\nMySQL Enterprise Edition：企业版本，需付费，可以试用30天。\n\nMySQL Cluster：集群版，开源免费。可将几个MySQL Server封装成一个Server。\n\nMySQL Cluster CGE：高级集群版，需付费。\n\nMySQL Workbench（GUITOOL）：一款专为MySQL设计的ER/数据库建模工具。它是著名的数据库设计工具DBDesigner4的继任者。MySQL Workbench又分为两个版本，分别是社区版（MySQL Workbench OSS）、商用版（MySQL WorkbenchSE）。\n\n## 三、Linux系统MySQL使用\n\n### 1、登陆MySQL数据库\n\nMySQL是一个需要账户名密码登录的数据库，登陆后使用，它提供了一个默认的root账号，使用安装时设置的密码即可登录，目前有两种登录场景：\n\n####  本地登录\n\n```\n# mysql -uroot –p 回车  \npassword：输入密码\n```\n\n-u 后面是登录的用户名\n        -p 后面是登录密码, 如果不填写, 回车之后会提示输入密码\n\n#### 远程登录\n\n```\n# mysql -h 远程服务器IP地址 -P 端口号 -u用户名 -p 回车\npassword：输入密码\n```\n\n#### 退出\n\n```\nmysql> exit\n\nmysql> quit\n\n快捷键Ctrl + d\n```\n\n### 2.DataGrip使用\n\n### 创建工程\n\n点击File->New->Project新建DataGrip工程\n\n输入项目名称，点击确定。\n\n选择新项目打开方式：This Windows（在本窗口中打开），New Windows（在新窗口中打开）， Attach（附加模式）\n\n### 连接数据库\n\n选择Database下的➕，点击DataSource菜单下的MySQL。\n       填写对应的参数，连接数据库：连接名，IP，用户名，密码等，点击OK完成连接。\n       如果是第一次使用，需要下载mysql驱动文件。\n\n\n\n设置数据库时区：\n\n1. 点击Advanced按钮；\n2. 在VM options后面写入`-Duser.timezone=Asia/Shanghai\n\n\n\n设置完成后，单击Apply（应用），单击OK，连接完成\n\n### 选择要使用的数据库\n\n点击连接名称之后的按钮可以选择所要使用的数据库：![mysql图2.png](https://s2.loli.net/2024/03/15/UgTEJmiSWzwtKH6.png)\n\n### DataGrip软件设置\n\n####  设置字体大小\n\n设置文字大小： File--->settings--->Editor---->Font，可以设置文字尺寸Size和行高Line height\n\n#### 设置关键字大写\n\n设置关键字大写： File--->settings--->Editor---->Code Style--->SQL--->MySql(需要设置的数据库)--->Case\n\n![mysql图3.png](https://s2.loli.net/2024/03/15/l85hCm9oiXQzfIN.png)\n\n#### 自动排版\n\n自动排版布局： File--->settings--->Editor---->Code Style--->SQL--->MySql(需要设置的数据库)--->Queries\n自动排版快捷键：Ctrl+ Alt + L![mysql图4.png](https://s2.loli.net/2024/03/15/gecvOzLyQsxPmjR.png)\n\n## 四、SQL语句\n\n### 1、连接数据库\n\n结构化查询语言(Structured Query Language)简称SQL，是关系型数据库管理系统都需要遵循的规范，是数据库认识的语句。不同的数据库生产厂商都支持SQL语句，但都有特有内容。\n\n**举例：**\n\n普通话：各数据库厂商都遵循的ISO标准\n\n方言：数据库特有的关键字\n\n### 2、SQL语句分类\n\n#### DDL\n\nDDL（Data Definition Language）用于定义和管理数据库中的数据结构，包括表、视图、索引、触发器、存储过程、用户等。\n\nDDL通常包括以下几种常见的语句：\n\n1. CREATE：用于创建数据库中的各种对象，如创建表、视图、索引、触发器、存储过程等。例如，CREATE TABLE用于创建表，CREATE VIEW用于创建视图。\n2. ALTER：用于修改数据库中已存在的对象，如修改表结构、修改视图定义等。例如，ALTER TABLE用于修改表结构，ALTER VIEW用于修改视图定义。\n3. DROP：用于删除数据库中的对象，如删除表、删除视图等。例如，DROP TABLE用于删除表，DROP VIEW用于删除视图。\n4. TRUNCATE：用于删除表中的所有数据，并且保留表结构和属性。例如，TRUNCATE TABLE用于删除表中的所有数据。\n5. RENAME：用于修改数据库中对象的名称，如修改表名、修改视图名等。例如，RENAME TABLE用于修改表名，RENAME VIEW用于修改视图名。\n6. GRANT和REVOKE：用于授权和撤销数据库对象的权限，如授权用户对表进行增、删、改、查操作等。例如，GRANT SELECT, INSERT, UPDATE, DELETE ON table_name TO user_name用于授权用户对表进行查询、插入、更新、删除操作。\n\nDDL语句通常由数据库管理员或具有相应权限的用户执行，用于定义数据库的结构和元数据，对数据库的整体架构进行管理和控制。\n\n#### DML\n\nDML（Data Manipulation Language）用于对数据库中的数据进行操作，包括查询、插入、更新、删除等操作。\n\nDML通常包括以下几种常见的语句：\n\n1. SELECT：用于查询数据库中的数据，包括单表查询、多表查询、嵌套查询、聚合查询、排序、分组等操作。例如，SELECT * FROM table_name用于查询表中的所有数据，SELECT column1, column2 FROM table_name用于查询表中指定列的数据。\n2. INSERT：用于向数据库中插入新数据，包括单行插入和多行插入。例如，INSERT INTO table_name (column1, column2) VALUES (value1, value2)用于向表中插入一行数据。\n3. UPDATE：用于更新数据库中的数据，可以更新单表或多表中的数据。例如，UPDATE table_name SET column1 = value1, column2 = value2 WHERE condition用于更新表中符合条件的数据。\n4. DELETE：用于删除数据库中的数据，可以删除单表或多表中的数据。例如，DELETE FROM table_name WHERE condition用于删除表中符合条件的数据。\n\nDML语句用于对数据库中的数据进行增、删、改、查等操作，由应用程序或数据库用户执行，用于操作数据库中的具体数据记录。DML操作可以通过执行DML语句来实现对数据库中数据的增加、删除、修改和查询。\n\n#### DQL\n\nDQL（Data Query Language）用于查询数据库中的数据，即实现从数据库中获取数据的操作。\n\nDQL通常包括以下几种常见的语句：\n\n1. SELECT：用于查询数据库中的数据，包括单表查询、多表查询、嵌套查询、聚合查询、排序、分组等操作。SELECT语句可以通过指定要查询的表、列、条件、排序方式等来获取数据。例如，SELECT * FROM table_name用于查询表中的所有数据，SELECT column1, column2 FROM table_name用于查询表中指定列的数据。\n2. FROM：用于指定要查询的表名，可以查询单个表或多个表的数据。例如，SELECT * FROM table1, table2用于从table1和table2两个表中获取数据。\n3. WHERE：用于指定查询的条件，可以使用逻辑运算符、比较运算符、通配符等来定义查询条件。例如，SELECT * FROM table_name WHERE column1 = 'value'用于查询column1等于特定值的数据。\n4. ORDER BY：用于指定查询结果的排序方式，可以按照一个或多个列进行升序或降序排序。例如，SELECT * FROM table_name ORDER BY column1 ASC用于按照column1列的升序排序。\n5. GROUP BY：用于将查询结果按照一个或多个列进行分组，并对每个分组进行聚合计算。例如，SELECT column1, SUM(column2) FROM table_name GROUP BY column1用于按照column1列的值进行分组，并计算每个分组中column2列的和。\n6. JOIN：用于连接多个表的数据，可以通过不同的连接方式（如内连接、外连接、自连接等）来获取联接后的结果。例如，SELECT * FROM table1 INNER JOIN table2 ON table1.id = table2.id用于执行内连接操作，连接两个表的id列相等的记录。\n\nDQL语句用于查询数据库中的数据，并通过结果集返回查询结果。DQL语句可以通过执行查询操作来实现从数据库中获取数据，并支持丰富的查询功能，用于满足应用程序或用户对数据库中数据的查询需求。\n\n#### DCL\n\nDCL（Data Control Language用于控制数据库中的数据访问和权限管理。\n\nDCL主要包括以下两种常见的语句：\n\n1. GRANT：用于授权用户或角色对数据库对象（如表、视图、存储过程等）进行特定的操作权限。GRANT语句可以授权用户或角色执行SELECT、INSERT、UPDATE、DELETE等数据库操作，也可以授权用户或角色对特定的数据库对象进行操作。例如，GRANT SELECT, INSERT ON table_name TO user_name或GRANT UPDATE ON table_name TO role_name用于授权用户或角色对表进行SELECT、INSERT或UPDATE操作。\n2. REVOKE：用于撤销用户或角色对数据库对象的操作权限。REVOKE语句可以撤销之前通过GRANT语句授权的权限。例如，REVOKE SELECT ON table_name FROM user_name或REVOKE INSERT ON table_name FROM role_name用于撤销用户或角色对表的SELECT或INSERT权限。\n\nDCL语句用于对数据库中的数据访问进行控制，包括授权用户或角色对数据库对象的操作权限，以及撤销之前授权的权限。通过DCL语句，数据库管理员可以灵活地管理用户或角色对数据库的操作权限，确保数据库的安全性和数据的合法性。\n\n#### 要点\n\n① SQL语句可以单行或多行书写，以分号结尾\n\n② 可使用空格和缩进来增强语句的可读性\n\n③ MySQL数据库的SQL语句不区分大小写，关键字建议使用大写\n\n④ 可以使用单行与多行注释（#和/*）\n\n## 五、DDL数据库操作\n\n### 1、MySQL的组成结构\n\n![mysql图5.png](https://s2.loli.net/2024/03/15/6tPWEkzJH4G9Soh.png)\n\n一个MySQL DBMS可以同时存放多个数据库，理论上一个项目就对应一个数据库\n\n一个数据库中还可以同时包含多个数据表，而数据表才是真正用于存放数据的位置。（类似Office软件中的Excel表格），理论上一个功能就对应一个数据表。如博客系统中的用户管理功能，就需要一个user数据表、博客中的文章就需要一个article数据表、博客中的评论就需要一个message数据表\n\n一个数据表又可以拆分为多个字段，每个字段就是一个属性\n\n一个数据表除了字段以外，还有很多行，每一行都是一条完整的数据（记录）\n\n### 2、数据库的基本操作\n\n#### ① 创建数据库\n\ncreate database 数据库名称(字母+数字+下划线组成，以字母开头，不能出现中文以及特殊字符，不能重名)\n\n```powershell\nmysql> create database 数据库名称 [设置编码格式];\ncreate database if not exists db_itheima default character set utf8 指定默认字符集设置编码格式\n```\n\n国内汉字无法通过256个字符进行描述，所以国内开发了自己的编码格式gb2312，升级gbk\n\n中国台湾业开发了一套自己的编码格式big5\n\n很多项目并不仅仅只在本地使用，也可能支持多国语言，标准化组织开发了一套通用编码utf8，后来5.6版本以后又进行了升级utf8mb4\n\n> 编写SQL语句是一个比较细致工作，不建议直接在终端中输入SQL语句，可以先把要写的SQL语句写入一个记事本中，然后拷贝执行。\n\n#### ② 查询数据库\n\n基本语法：显示所有数据库\n\n```powershell\nmysql> show databases;\n```\n\n#### ③ 删除数据库\n\n基本语法：\n\n```powershell\nmysql> drop database 数据库名称;\n```\n\n#### ④ 选择数据库\n\n从数据库列表中查找需要使用的数据库 格式：\n\n```mysql\nmysql> use datab;\n```\n\n查看正在使用的数据库（8.0以后版本需要基于select查询来获取当前数据库）\n\n```powershell\nmysql> select database();\n```\n\n## 六、DDL数据表操作\n\n特别注意：创建数据表必须有一个前提，首先要明确选择某一个数据库。\n\n### 1、数据表的基本操作\n\n####  数据表的创建\n\n基本语法：\n\n```powershell\nmysql> create table 数据表名称(\n\t字段1 字段类型 [字段约束],\n\t字段2 字段类型 [字段约束],\n\t...\n); \n```\n\n> use在MySQL中的含义代表选择，use 数据库名称相当于选择指定的数据库。而且use比较特殊，其选择结束后，其尾部可以不加分号；但是强烈建议所有的SQL语句都要加分号，养成一个好习惯。\n\n```powershell\nmysql> create table aa(\n\tid tinyint,\n    username varchar(20),\n    password char(32)\n) engine=innodb default charset=utf8;\n```\n\n> tinyint ：微整型，范围-128 ~ 127，无符号型，则表示0 ~ 255\n\n> 表示字符串类型可以使用char与varchar，char代表固定长度的字段，varchar代表变化长度的字段。\n\n创建一个article文章表，拥有4个字段（编号、标题、作者、内容）\n\n```powershell\nmysql> use datab;\nmysql> create table article(\n\tid int,\n\ttitle varchar(50),\n\tauthor varchar(20),\n\tcontent text\n) engine=innodb default charset=utf8;\n```\n\n> text ：文本类型，一般情况下，用varchar存储不了的字符串信息，都建议使用text文本进行处理。\n\n> varchar存储的最大长度，理论值65535个字符。但是实际上，有几个字符是用于存放内容的长度的，所以真正可以使用的不足65535个字符，另外varchar类型存储的字符长度还和编码格式有关。1个GBK格式的占用2个字节长度，1个UTF8格式的字符占用3个字节长度。GBK = 65532~65533/2，UTF8 = 65532~65533/3\n\n\n\n####  查询已创建数据表\n\n显示所有数据表（当前数据库）\n\n```powershell\nmysql> use 数据库名称;\nmysql> show tables;\n```\n\n显示数据表的（编码格式、字段等信息）\n\n```powershell\nmysql> desc 数据表名称;\n```\n\n####  修改数据表信息\n\n##### ① 数据表字段添加\n\n```powershell\nmysql> alter table 数据表名称 add 新字段名称 字段类型 first|after 其他字段名称;\n选项说明：\nfirst：把新添加字段放在第一位\nafter 字段名称：把新添加字段放在指定字段的后面\n```\n\n案例：在tb_article文章表中添加一个addtime字段，类型为date(年-月-日)\n\n```powershell\nmysql> alter table tb_article add addtime date after content;\nmysql> desc tb_article;\n```\n\n##### ② 修改字段名称或字段类型\n\n修改字段名称与字段类型（也可以只修改名称）\n\n```powershell\nmysql> alter table tb_admin change username user varchar(40);\nmysql> desc tb_admin;\n```\n\n仅修改字段的类型\n\n```powershell\nmysql> alter table tb_admin modify user varchar(20\nmysql> desc tb_admin;\n```\n\n##### ③ 删除某个字段\n\n```powershell\nmysql> alter table tb_article drop 字段名称;\nmysql> desc tb_article;\n```\n\n##### ④ 修改数据表名称\n\n```powershell\nrename table 旧名称 to 新名称;\n```\n\n####  删除数据表\n\n```powershell\nmysql> drop table IF EXISTS 数据表名称;\n```\n\n### 2、字段类型详解\n\n① 整数类型\n\n| **分类**     | **类型名称**   | **说明**                 |\n| ------------ | -------------- | ------------------------ |\n| tinyint      | 很小的整数     | -128 ~ 127               |\n| smallint     | 小的整数       | -32768 ~ 32767           |\n| mediumint    | 中等大小的整数 | -8388608 ~ 8388607       |\n| int(integer) | 普通大小的整数 | -2147483648 ~ 2147483647 |\n\n② 浮点类型\n\n浮点类型（精度失真情况）和定点类型（推荐使用定点类型）\n\n| 分类         | 类型名称              |\n| ------------ | --------------------- |\n| float        | 单精度浮点数          |\n| double       | 双精度浮点数          |\n| decimal(m,d) | 定点数，decimal(10,2) |\n\n> decimal(10,2) ：代表这个数的总长度为10 = 整数长度 + 小数长度，2代表保留2位小数\n\n③ 日期类型\n\n| 分类      | 类型名称                                                     |\n| --------- | ------------------------------------------------------------ |\n| year      | YYYY 1901~2155                                               |\n| time      | HH:MM:SS -838:59:59~838:59:59                                |\n| date      | YYYY-MM-DD  1000-01-01~9999-12-3                             |\n| datetime  | YYYY-MM-DD  HH:MM:SS 1000-01-01 00:00:00~ 9999-12-31 23:59:59 |\n| timestamp | YYYY-MM-DD  HH:MM:SS 1970~01~01 00:00:01  UTC~2038-01-19 03:14:07UTC |\n\n④ 文本\n\n| **类型名称** | **说明**                             |\n| ------------ | ------------------------------------ |\n| char(m)      | m为0~255之间的整数定长（固定长度）   |\n| varchar(m)   | m为0~65535之间的整数变长（变化长度） |\n| text         | 允许长度0~65535字节                  |\n| mediumtext   | 允许长度0~167772150字节              |\n| longtext     | 允许长度0~4294967295字节             |\n\n## 七、DML数据操作语言\n\n### 1、DML的SQL语句\n\ninsert插入、update更新、delete删除\n\n### 2、数据的增删改\n\n#### 数据的增加操作\n\n```powershell\nmysql> insert into 数据表名称([字段1,字段2,字段3...]) values (字段1的值,字段2的值,字段3的值...);\n```\n\n> 特别注意：在SQL语句中，除了数字，其他类型的值，都需要使用引号引起来，否则插入时会报错。\n\n第一步：准备一个数据表\n\n```powershell\nmysql> use aa;\nmysql> create table tb_user(\n\tid int,\n\tusername varchar(20),\n\tage tinyint unsigned,\n\tgender enum('男','女','保密'),\n\taddress varchar(255)\n) engine=innodb default charset=utf8;\n```\n\n> unsigned代表无符号型，只有0到正数。tinyint unsigned无符号型，范围0 ~ 255\n\n> enum枚举类型，多选一。只能从给定的值中选择一个\n\n第二步：使用insert语句插入数据\n\n```powershell\nmysql> insert into tb_user values (1,'刘备',34,'男','广州市天河区');\nmysql> insert into tb_user(id,username,age) values (2,'关羽',33);\n```\n\n第三步：批量插入多条数据\n\n```powershell\nmysql> insert into tb_user values (3,'大乔',19,'女','上海市浦东新区'),(4,'小乔',18,'女','上海市浦东新区'),(5,'马超',26,'男','北京市昌平区');\n\nINSERT INTO aaa(name)VALUES ('heheh');                               #单独插入一个数据\nINSERT INTO aaa(name,gender,age)VALUES ('hehe','male',18);           #插入多个列出数据\nINSERT INTO aaa VALUES ('hehe1','male',18);                          #插入一条完整数据\nINSERT INTO aaa VALUES ('hehe2','male',18),('hehehe','female',18);   #插入多条完整数据\nINSERT INTO aaa(name,gender)VALUES ('hehe3','male'),('hehe4','male');#插入多条列出数据\n```\n\n#### 数据的修改操作\n\n```powershell\nmysql> update 数据表名称 set 字段1=更新后的值,字段2=更新后的值,... where 更新条件;\n```\n\n> 特别说明：如果在更新数据时，不指定更新条件，则其会把这个数据表的所有记录全部更新一遍。\n\n案例：修改username='马鹏'这条记录，将其性别更新为男，家庭住址更新为广东省深圳市\n\n```powershell\nmysql> update tb_user set gender='男',address='广东省深圳市' where username='马鹏';\n```\n\n案例：今年是2020年，假设到了2021年，现在存储的学生年龄都差1岁，整体进行一次更新\n\n```powershell\nmysql> update tb_user set age=age+1;\n```\n\n#### 数据的删除操作\n\n```powershell\nmysql> delete from 数据表名称 [where 删除条件];\n```\n\n删除tb_user表中，id=1的用户信息\n\n```powershell\nmysql> delete from tb_user where id=1;\n```\n\n\n\ndelete from与truncate清空数据表操作\n\n```powershell\nmysql> delete from 数据表;\n或\nmysql> truncate 数据表;\n```\n\n\n\ndelete from与truncate区别\n\n- delete：删除数据记录\n  - 数据操作语言（DML）\n  - 删除大量记录速度慢，只删除数据，主键自增序列不清零，100 => 新插入 => 101\n  - 可以带条件删除\n- truncate：删除所有数据记录\n  - 数据定义语言（DDL）\n  - 清里大量数据速度快，主键自增序列清零, 100 => 新插入 => 1\n  - 不能带条件删除\n\n## 八、SQL约束\n\n### 1、主键约束\n\n1、PRIMARY KEY 约束唯一标识数据库表中的每条记录。\n        2、主键必须包含唯一的值。\n        3、主键列不能包含 NULL 值。\n        4、每个表都应该有一个主键，并且每个表只能有一个主键。\n\n遵循原则：\n\n1）主键应当是对用户没有意义的\n        2）永远也不要更新主键。\n        3）主键不应包含动态变化的数据，如时间戳、创建时间列、修改时间列等。\n        4） 主键应当由计算机自动生成。\n\n创建主键约束：创建表时，在字段描述处，声明指定字段为主键\n\n![mysql图6.png](https://s2.loli.net/2024/03/15/TiFnpNmeAYq8dPQ.png)\n\n如：创建一个学生信息表tb_students，包含编号id、学生姓名name、年龄age、性别gender以及家庭住址address等字段，然后将id设置为主键。\n\n```sql\ncreate table tb_students(\n\tid int primary key,\n    name varchar(20),\n    age tinyint unsigned,\n    gender enum('男', '女'),\n    address varchar(255)\n) engine=innodb default charset=utf8;\n```\n\n删除主键约束：如需撤销 PRIMARY KEY 约束，请使用下面的 SQL\n\n```powershell\nalter table persons2 drop primary key;\n```\n\n删除tb_students数据表的主键\n\n```sql\nalter table tb_students drop primary key;\n```\n\n\n\n> 自动增长\n\n我们通常希望在每次插入新记录时，数据库自动生成字段的值。\n\n我们可以在表中使用 auto_increment（自动增长列）关键字，自动增长列类型必须是整型，自动增长列必须为键(一般是主键)。\n\n**下列 SQL 语句把 \"Persons\" 表中的 \"Id\" 列定义为** **auto_increment** **主键**\n\n```powershell\ncreate table persons3(\n\tid int primary key auto_increment,\n\tfirst_name varchar(255),\n\tlast_name varchar(255),\n\taddress varchar(255),\n\tcity varchar(255)\n) default charset=utf8;\n```\n\n向persons添加数据时，可以不为Id字段设置值，也可以设置成null，数据库将自动维护主键值：\n\n```powershell\ninsert into persons3(first_name,last_name) values('Bill','Gates');\ninsert into persons3(id,first_name,last_name) values(null,'Bill','Gates');\n```\n\n\n\n如：创建一个学生信息表tb_students，包含编号id、学生姓名name、年龄age、性别gender以及家庭住址address等字段，然后将id设置为主键自动增长列。\n\n```sql\ndrop table tb_students;\n\ncreate table tb_students(\n\tid int auto_increment primary key,\n    name varchar(20),\n    age tinyint unsigned,\n    gender enum('男', '女'),\n    address varchar(255)\n) engine=innodb default charset=utf8;\n或\ncreate table tb_students(\n\tid int auto_increment,\n    name varchar(20),\n    age tinyint unsigned,\n    gender enum('男', '女'),\n    address varchar(255),\n    primary key(id)\n) engine=innodb default charset=utf8;\n\n-- 插入测试数据\ninsert into tb_students values (null, '吕布', 30, '男', '内蒙古包头市');\ninsert into tb_students values (null, '貂蝉', 19, '女', '山西忻州市');\n\n-- 删除auto_increment\nalter table 表名 change 列名 列名 类型; \n\nALTER TABLE 表名 CHANGE 列名 列名 类型;\nALTER TABLE 表名 DROP PRIMARY KEY ;#删除主键自增的值需要先更改主键类型\n```\n\n### 2、非空约束\n\nNOT NULL 约束强制列不接受 NULL 值。\nNOT NULL 约束强制字段始终包含值。这意味着，如果不向字段添加值，就无法插入新记录或者更新记录。\n下面的 SQL 语句强制 \"id\" 列和 \"last_name\" 列不接受 NULL 值：\n\n![mysql图7.png](https://s2.loli.net/2024/03/15/LH4D1AqFgcWaktz.png)\n\n创建一个tb_news新闻表，包含id主键列、title新闻标题、description描述、content新闻内容以及addtime添加时间，要求为title字段添加非空约束。\n\n```sql\ncreate table tb_news(\n\tid int auto_increment,\n    title varchar(80) not null,\n    description varchar(255),\n    content text,\n    addtime datetime,\n    primary key(id)\n) engine=innodb default charset=utf8;\n```\n\n### 3、唯一约束\n\nUNIQUE 约束唯一标识数据库表中的每条记录。\nUNIQUE 和 PRIMARY KEY 约束均为列或列集合提供了唯一性的保证。\nPRIMARY KEY 拥有自动定义的 UNIQUE 约束。\n\n请注意：\n每个表可以有多个 UNIQUE 约束，但是每个表只能有一个 PRIMARY KEY 约束。\n\n![mysql图8.png](https://s2.loli.net/2024/03/15/xoFvkLelYCJquzr.png)\n\n创建一个tb_member会员表 ，包含字段有id主键、username用户名、password密码（密码必须使用密文保存，长度为固定的32位），由于用户名不允许出现重复的情况，所以请为username添加唯一约束。\n\n```sql\ncreate table tb_member(\n\tid int auto_increment,\n    username varchar(20) unique,\n    password char(32),\n    primary key(id)\n) engine=innodb default charset=utf8;\n```\n\n### 4、默认值约束\n\n关键字：default\n\n用来指定某列的默认值。在表中插入一条新记录时，如果没有为这个字段赋值，系统就会自动为这个字段插入默认值。\n\n创建一个tb_department部门表，包含字段id主键、name部门名称以及location部门位置。由于我们的部门位置位于北京的较多，所以部门位置就可以默认为“Beijing”。\n\n```sql\ncreate table tb_department(\n\tid int auto_increment,\n    name varchar(20),\n    location varchar(50) default 'Beijing',\n    primary key(id)\n) engine=innodb default charset=utf8;\n```\n\n### 5、外键约束\n\n外键约束：关键字foreign key（主要用于多表关联使用）\n\n用于保持不同表之间的数据一致性和完整性。它是一种规定，用于确保在一个表中的外键（Foreign Key）值必须存在于另一个表中的主键（Primary Key）中。\n\n外键约束的主要目的是建立表之间的关联关系，以确保表之间的数据一致性。外键约束可以在数据库设计时定义，并且可以由数据库管理系统（DBMS）自动执行，以防止不符合约束条件的数据插入或更新操作。\n\n比如：有两张数据表，这两个数据表之间有联系，通过了某个字段可以建立连接，这个字段在其中一个表中是主键，在另外一张表中，我们就把其称之为==外键==。\n\n![mysql图9.png](https://s2.loli.net/2024/03/15/tLpQDuqBj8JPAU4.png)\n\n外键约束可以有以下特性：\n\n1. 引用完整性：外键约束可以确保表之间的关联关系是有效的，即在外键列中的值必须在主键列中存在。这可以防止插入或更新数据时出现无效的外键值，从而保持数据的完整性。\n2. 数据一致性：外键约束可以确保在关联表之间的数据一致性，因为它要求外键值与主键值相匹配。这可以防止在不同表中出现不一致的数据，从而保持数据的一致性。\n3. 数据操作控制：外键约束可以限制对外键列的插入、更新和删除操作，从而控制对关联表的数据操作。这可以帮助防止不正确的数据操作，从而提高数据的质量和准确性。\n\n外键约束可能会对数据库的性能和灵活性产生影响，因为它会增加对数据的检查和验证操作。在设计数据库时，需要仔细考虑外键约束的使用，并根据具体情况进行权衡。\n\n### 6、小结\n\n① 主键约束：唯一标示，不能重复，不能为空。\n1）主键应当是对用户没有意义的\n2）永远也不要更新主键。\n3）主键不应包含动态变化的数据，如时间戳、创建时间列、修改时间列等。\n4） 主键应当由计算机自动生成。\n\n自动增长：\n我们可以在表中使用 auto_increment（自动增长列）关键字，自动增长列类型必须是整型，自动增长列必须为键(一般是主键)。\n\n② 非空约束：\nNOT NULL 约束强制列不接受 NULL 值。\n\n③ 唯一约束：\nUNIQUE 约束唯一标识数据库表中的每条记录。\nUNIQUE 和 PRIMARY KEY 约束均为列或列集合提供了唯一性的保证。\nPRIMARY KEY 拥有自动定义的 UNIQUE 约束。\n\n④ 默认值约束\n\ndefault 默认值\n\n用来指定某列的默认值。在表中插入一条新记录时，如果没有为这个字段赋值，系统就会自动为这个字段插入默认值。\n\n⑤ 外键约束\n\n主要用于指定两张表之间的关联关系。\n\n## 九、DQL数据查询语言\n\n### 1、数据集准备\n\n```mysql\nCREATE TABLE product\n(\n    pid         INT PRIMARY KEY,\n    pname       VARCHAR(20),\n    price       DOUBLE,\n    category_id VARCHAR(32)\n);\n```\n\n插入数据：\n\n```mysql\nINSERT INTO product VALUES (1,'联想',5000,'c001');\nINSERT INTO product VALUES (2,'海尔',3000,'c001');\nINSERT INTO product VALUES (3,'雷神',5000,'c001');\nINSERT INTO product VALUES (4,'杰克琼斯',800,'c002');\nINSERT INTO product VALUES (5,'真维斯',200,'c002');\nINSERT INTO product VALUES (6,'花花公子',440,'c002');\nINSERT INTO product VALUES (7,'劲霸',2000,'c002');\nINSERT INTO product VALUES (8,'香奈儿',800,'c003');\nINSERT INTO product VALUES (9,'相宜本草',200,'c003');\nINSERT INTO product VALUES (10,'面霸',5,'c003');\nINSERT INTO product VALUES (11,'好想你枣',56,'c004');\nINSERT INTO product VALUES (12,'香飘飘奶茶',1,'c005');\nINSERT INTO product VALUES (13,'海澜之家',1,'c002');\n```\n\n### 2、select查询\n\n基础查询：\n\n```powershell\n# 根据某些条件从某个表中查询指定字段的内容\n格式：select [distinct]*| 列名,列名 from 表 where 条件\n```\n\n高级查询：SQL查询五子句\n\n```sql\nselect */列名,列名 from 数据表 where 子句 group by 子句 having 子句 order by 子句 limit 子句;\n\n① where子句\n② group by子句\n③ having子句\n④ order by子句\n⑤ limit子句\n```\n\n### 3、简单查询\n\n```mysql\n# 1.查询所有的商品.  \nselect *  from product;\n# 2.查询商品名和商品价格. \nselect pname,price from product;\n# 3.查询结果是表达式（运算查询）：将所有商品的价格+10元进行显示.\nselect pname,price+10 from product;\n```\n\n### 4、条件查询\n\n![mysql图10.png](https://s2.loli.net/2024/03/15/sWaSuJbvqHVidmw.png)\n\n####  比较查询\n\n```powershell\n# 查询商品名称为“花花公子”的商品所有信息：\nSELECT * FROM product WHERE pname = '花花公子';\n# 查询价格为800商品\nSELECT * FROM product WHERE price = 800;\n# 查询价格不是800的所有商品\nSELECT * FROM product WHERE price != 800;\nSELECT * FROM product WHERE price <> 800;\n# 查询商品价格大于60元的所有商品信息\nSELECT * FROM product WHERE price > 60;\n# 查询商品价格小于等于800元的所有商品信息\nSELECT * FROM product WHERE price <= 800;\n```\n\n####  范围查询\n\n```powershell\n# 查询商品价格在200到1000之间所有商品\nSELECT * FROM product WHERE price BETWEEN 200 AND 1000;\n# 查询商品价格是200或800的所有商品\nSELECT * FROM product WHERE price IN (200,800);\n```\n\n####  逻辑查询\n\n```powershell\n# 查询商品价格在200到1000之间所有商品\nSELECT * FROM product WHERE price >= 200 AND price <=1000;\n# 查询商品价格是200或800的所有商品\nSELECT * FROM product WHERE price = 200 OR price = 800;\n# 查询价格不是800的所有商品\nSELECT * FROM product WHERE NOT(price = 800);\n```\n\n####  模糊查询\n\n```powershell\n# 查询以'香'开头的所有商品\nSELECT * FROM product WHERE pname LIKE '香%';\n# 查询第二个字为'想'的所有商品\nSELECT * FROM product WHERE pname LIKE '_想%';\n```\n\n####  非空查询\n\n```powershell\n# 查询没有分类的商品\nSELECT * FROM product WHERE category_id IS NULL;\n# 查询有分类的商品\nSELECT * FROM product WHERE category_id IS NOT NULL;\n```\n\n### 5、排序查询\n\n```powershell\n# 通过order by语句，可以将查询出的结果进行排序。暂时放置在select语句的最后。\n格式：SELECT * FROM 表名 ORDER BY 排序字段 ASC|DESC;\nASC 升序 (默认)\nDESC 降序\n\n# 1.使用价格排序(降序)\nSELECT * FROM product ORDER BY price DESC;\n# 2.在价格排序(降序)的基础上，以分类排序(降序)\nSELECT * FROM product ORDER BY price DESC,category_id DESC;\n```\n\n### 6、聚合查询\n\n之前我们做的查询都是横向查询，它们都是根据条件一行一行的进行判断，而使用聚合函数查询是纵向查询，它是对一列的值进行计算，然后返回一个单一的值；另外聚合函数会忽略空值。\n\n今天我们学习如下五个聚合函数：\n\n| **聚合函数** | **作用**                                                     |\n| ------------ | ------------------------------------------------------------ |\n| count()      | 统计指定列不为NULL的记录行数；                               |\n| sum()        | 计算指定列的数值和，如果指定列类型不是数值类型，则计算结果为0 |\n| max()        | 计算指定列的最大值，如果指定列是字符串类型，使用字符串排序运算； |\n| min()        | 计算指定列的最小值，如果指定列是字符串类型，使用字符串排序运算； |\n| avg()        | 计算指定列的平均值，如果指定列类型不是数值类型，则计算结果为0 |\n\n演示：\n\n```powershell\n# 1、查询商品的总条数\nSELECT COUNT(*) FROM product;\n# 2、查询价格大于200商品的总条数\nSELECT COUNT(*) FROM product WHERE price > 200;\n# 3、查询分类为'c001'的所有商品的总和\nSELECT SUM(price) FROM product WHERE category_id = 'c001';\n# 4、查询分类为'c002'所有商品的平均价格\nSELECT AVG(price) FROM product WHERE categ ory_id = 'c002';\n# 5、查询商品的最大价格和最小价格\nSELECT MAX(price),MIN(price) FROM product;\n```\n\n### 7、分组查询与having子句\n\n####  分组查询介绍\n\n分组查询就是将查询结果按照指定字段进行分组，字段中数据相等的分为一组。\n\n**分组查询基本的语法格式如下：**\n\nGROUP BY 列名 [HAVING 条件表达式] [WITH ROLLUP]\n\n**说明:**\n\n- 列名: 是指按照指定字段的值进行分组。\n- HAVING 条件表达式: 用来过滤分组后的数据。\n- WITH ROLLUP：在所有记录的最后加上一条记录，显示select查询时聚合函数的统计和计算结果\n\n####  group by的使用\n\n创建数据集\n\n```sql\ncreate table students(\n\tid int auto_increment,\n\tname varchar(20),\n\tage tinyint unsigned,\n\tgender enum('male', 'female'),\n\theight float(5,2),\n\tprimary key(id)\n) engine=innodb default charset=utf8;\n\ninsert into students values (null,'郭靖',33,'male',1.80);\ninsert into students values (null,'黄蓉',19,'female',1.65);\ninsert into students values (null,'柯镇恶',45,'male',1.61);\ninsert into students values (null,'黄药师',50,'male',1.72);\ninsert into students values (null,'华筝',18,'female',1.60);\n```\n\n\n\ngroup by可用于单个字段分组，也可用于多个字段分组\n\n```sql\n-- 根据gender字段来分组\nselect gender from students group by gender;\n-- 根据name和gender字段进行分组\nselect name, gender from students group by name, gender;\n```\n\n① group by可以实现去重操作\n\n② group by的作用是为了实现分组统计（group by + 聚合函数）\n\n####  group by + 聚合函数的使用\n\n```sql\n-- 统计不同性别的人的平均年龄\nselect gender,avg(age) from students group by gender;\n-- 统计不同性别的人的个数\nselect gender,count(*) from students group by gender;\n```\n\n执行原理图\n\n![mysql图11.png](https://s2.loli.net/2024/03/15/H4dDUatMegwfKYn.png)\n\n####  group by + having的使用\n\nhaving作用和where类似都是过滤数据的，但having是过滤分组数据的，只能用于group by\n\n```sql\n-- 根据gender字段进行分组，统计分组条数大于2的\nselect gender,count(*) from students group by gender having count(*)>2;\n```\n\n\n\n```powershell\n#1 统计各个分类商品的个数\nSELECT category_id ,COUNT(*) FROM product GROUP BY category_id ;\n\n#2 统计各个分类商品的个数,且只显示个数大于1的信息\nSELECT category_id ,COUNT(*) FROM product GROUP BY category_id HAVING COUNT(*) > 1;\n```\n\n### 8、limit分页查询\n\n作用：限制数据的查询数量\n\n基本语法：\n\n```sql\nselect * from 数据表 limit 查询数量;\n```\n\n案例：查询学生表中，身高最高的3名同学信息\n\n```sql\nselect * from students order by height desc limit 3;\n```\n\n\n\nlimit除了可以限制查询数量以外，其还可以指定从哪条数据开始查起，limit完整语法：\n\n```sql\nselect * from students limit offset,count;\n\noffset：索引，默认从0开始\ncount：查询总数量\n```\n\n如：查询学生表中，身高第2、3高的同学信息\n\n```sql\nselect * from students order by height desc limit 1,2;\n```\n\n\n\nlimit子句典型应用场景：\n\n分页查询在项目开发中常见，由于数据量很大，显示屏长度有限，因此对数据需要采取分页显示方式。例如数据共有30条，每页显示5条，第一页显示1-5条，第二页显示6-10条。\n\n 格式：\n\n```powershell\nSELECT 字段1，字段2... FROM 表名 LIMIT M,N\nM: 整数，表示从第几条索引开始，计算方式 （当前页-1）* 每页显示条数\nN: 整数，表示查询多少条数据\nSELECT 字段1，字段2... FROM 表名 LIMIT 0,5\nSELECT 字段1，字段2... FROM 表名 LIMIT 5,5\n```\n\n### 9、小结\n\n```powershell\nSQL查询五子句：\nselect * from 表名 where子句 group by子句 having子句 order by子句 limit子句;\n特别注意：查询五子句中，五子句的顺序一定要严格按照以上格式。\n\n条件查询：SELECT *|字段名 FROM 表名 WHERE 条件；\n排序查询：SELECT * FROM 表名 ORDER BY 排序字段 ASC|DESC;\n聚合查询函数：count()，sum()，max()，min()，avg()。\n分组查询：SELECT 字段1,字段2… FROM 表名 GROUP BY 分组字段 HAVING 分组条件;\n分页查询：\nSELECT 字段1，字段2... FROM 表名 LIMIT M,N\nM: 整数，表示从第几条索引开始，计算方式 （当前页-1）*每页显示条数\nN: 整数，表示查询多少条数据\n```\n\n## 十、多表查询\n\n### 数据集准备\n\nclasses班级表\n\n```sql\ncreate table classes(\n\tcls_id tinyint auto_increment,\n    cls_name varchar(20),\n    primary key(cls_id)\n) engine=innodb default charset=utf8;\n\n-- 插入测试数据\ninsert into classes values (null, 'ui');\ninsert into classes values (null, 'java');\ninsert into classes values (null, 'python');\n```\n\nstudents学生表\n\n```sql\ncreate table students(\n\tid int auto_increment,\n    name varchar(20),\n    age tinyint unsigned,\n    gender enum('male','female'),\n    score float(5,1),\n\tcls_id tinyint,\n    primary key(id)\n) engine=innodb default charset=utf8;\n\n-- 插入测试数据\ninsert into students values (null,'刘备',34,'male',90.0,2);\ninsert into students values (null,'貂蝉',18,'female',75.0,1);\ninsert into students values (null,'赵云',28,'male',95.0,3);\ninsert into students values (null,'关羽',32,'male',98.0,3);\ninsert into students values (null,'大乔',19,'female',80.0,1);\n```\n\n\n\n### 交叉连接\n\n是所有连接的基础。其功能就是将表1和表2中的每一条数据进行连接。\n\n结果：\n\n字段数 = 表1字段 + 表2的字段\n\n记录数 = 表1中的总数量 * 表2中的总数量（笛卡尔积）\n\n```powershell\nselect * from students cross join classes;\n或\nselect * from students, classes;\n```\n\n\n\n### 1、内连接\n\n####  连接查询的介绍\n\n连接查询可以实现多个表的查询，当查询的字段数据来自不同的表就可以使用连接查询来完成。\n\n连接查询可以分为:\n\n1. 内连接查询\n2. 左外连接查询\n3. 右外连接查询\n\n####  内连接查询\n\n查询两个表中符合条件的共有记录\n\n![mysql图12](https://s2.loli.net/2025/04/12/NlPWnSOzx3E5fsw.png)\n\n**内连接查询语法格式:**\n\n```sql\nselect 字段 from 表1 inner join 表2 on 表1.字段1 = 表2.字段2\n```\n\n**说明:**\n\n- inner join 就是内连接查询关键字\n- on 就是连接查询条件\n\n**例1：使用内连接查询学生表与班级表:**\n\n```sql\nselect * from students as s inner join classes as c on s.cls_id = c.id;\n```\n\n####  小结\n\n- 内连接使用inner join .. on .., on 表示两个表的连接查询条件\n- 内连接根据连接查询条件取出两个表的 “交集”\n\n### 2、左外连接\n\n#### 左连接查询\n\n以左表为主根据条件查询右表数据，如果根据条件查询右表数据不存在使用null值填充\n\n![mysql图12.png](https://s2.loli.net/2024/03/15/xDXCSlnTcuWrsL4.png)\n\n**左连接查询语法格式:**\n\n```sql\nselect 字段 from 表1 left join 表2 on 表1.字段1 = 表2.字段2\n```\n\n**说明:**\n\n- left join 就是左连接查询关键字\n- on 就是连接查询条件\n- 表1 是左表\n- 表2 是右表\n\n**例1：使用左连接查询学生表与班级表:**\n\n```sql\nselect * from students as s left join classes as c on s.cls_id = c.id;\n```\n\n**例2：查询学生表中每一位学生（包括没有对应班级的学生）所属的班级信息**\n\n前提：\n\n在students学生表中，插入一条测试数据\n\n```sql\ninsert into students values (null,'林黛玉',19,'female',96.0,99);\n```\n\n执行左外连接查询：\n\n```sql\nselect * from students as s left join classes as c on s.cls_id = c.id;\n```\n\n####  小结\n\n- 左连接使用left join .. on .., on 表示两个表的连接查询条件\n- 左连接以左表为主根据条件查询右表数据，右表数据不存在使用null值填充。\n\n### 3、右外连接\n\n####  右连接查询\n\n以右表为主根据条件查询左表数据，如果根据条件查询左表数据不存在使用null值填充\n\n![mysql图13.png](https://s2.loli.net/2024/03/15/tFMayxRQZh9pYLW.png)\n\n**右连接查询语法格式:**\n\n```sql\nselect 字段 from 表1 right join 表2 on 表1.字段1 = 表2.字段2\n```\n\n**说明:**\n\n- right join 就是右连接查询关键字\n- on 就是连接查询条件\n- 表1 是左表\n- 表2 是右表\n\n**例1：使用右连接查询学生表与班级表:**\n\n```sql\nselect * from students as s right join classes as c on s.cls_id = c.id;\n```\n\n####  小结\n\n- 右连接使用right join .. on .., on 表示两个表的连接查询条件\n- 右连接以右表为主根据条件查询左表数据，左表数据不存在使用null值填充。\n\n## 十一、子查询\n\n### 1、子查询（嵌套查询）的介绍\n\n在一个 select 语句中,嵌入了另外一个 select 语句, 那么被嵌入的 select 语句称之为子查询语句，外部那个select语句则称为主查询.\n\n**主查询和子查询的关系:**\n\n1. 子查询是嵌入到主查询中\n2. 子查询是辅助主查询的,要么充当条件,要么充当数据源(数据表)\n3. 子查询是可以独立存在的语句,是一条完整的 select 语句\n\n### 2、子查询的使用\n\n**例1. 查询学生表中大于平均年龄的所有学生:**\n\n需求：查询年龄 > 平均年龄的所有学生\n\n前提：① 获取所有学生的平均年龄\n\n​\t   ② 查询表中的所有记录，判断哪个同学 > 平均年龄值\n\n第一步：写子查询\n\n```powershell\nselect avg(age) from students;\n```\n\n第二步：写主查询\n\n```powershell\nselect * from students where age > (平均值);\n```\n\n第三步：第一步和第二步进行合并\n\n```powershell\nselect * from students where age > (select avg(age) from students);\n```\n\n\n\n**例2. 查询学生在班的所有班级名字:**\n\n需求：显示所有有学生的班级名称\n\n前提：① 先获取所有学员都属于那些班级\n\n​\t         ② 查询班级表中的所有记录，判断是否出现在①结果中，如果在，则显示，不在，则忽略。\n\n第一步：编写子查询\n\n```powershell\nselect distinct cls_id from students is not null;\n```\n\n第二步：编写主查询\n\n```powershell\nselect * from classes where cls_id in (1, 2, 3);\n```\n\n第三步：把主查询和子查询合并\n\n```sql\nselect * from classes where cls_id in (select distinct cls_id from students where cls_id is not null);\n```\n\n\n\n**例3. 查找年龄最小,成绩最低的学生:**\n\n第一步：获取年龄最小值和成绩最小值\n\n```powershell\nselect min(age), min(score) from student;\n```\n\n第二步：查询所有学员信息（主查询）\n\n```sql\nselect * from students where (age, score) = (最小年龄, 最少成绩);\n```\n\n第三步：把第一步和第二步合并\n\n```powershell\nselect * from students where (age, score) = (select min(age), min(score) from students);\n```\n\n## 十二、练习部分\n\n练习使用 微软的Northwind数据集, 零售业务，包含了客户，供应商和订单数据。原始数据集可以在 [微软GitHub 仓库](https://github.com/Microsoft/sql-server-samples/tree/master/samples/databases/northwind-pubs)下载。当前使用数据库数据在原始数据基础上做了微调，放在了文末。\n\n基于此份数据，通过SQL来创建数据报表，满足业务需求。\n\n本项目中一共用到7张表\n\n1. `employees` 员工表 记录了Northwind所有员工信息.\n2. `customers` 客户表，记录了客户相关信息.\n3. `products` 记录了商品信息.\n4. `categories` 记录了商品类别信息.\n5. `suppliers` 记录了商品供应商信息.\n6. `orders` 记录了Northwind的顾客下的订单.\n7. `order_items` 记录了订单中的每一件商品明细.\n\n**数据表结构及表关系**\n\n![mysql图14.png](https://s2.loli.net/2024/03/15/dk5Le8RXhZT1FaW.png)\n\n![mysql图15.png](https://s2.loli.net/2024/03/15/UbNQkfIhJSlVE53.png)\n\n### 1.1 员工表(employees)\n\n![mysql图16.png](https://s2.loli.net/2024/03/15/WN8c5ydk9uDBVwl.png)\n\n- 保存员工基本信息：\n  - 唯一ID (`employee_id`).\n  - 姓，名(`first_name` and `last_name`).\n  - 职务 (`title`).\n- 需要注意的是 `reports_to`这一列, 保存的是员工所对应的直属领导的员工ID (也在这张表中保存) ，此外还有其它列包括入职时间，生日... ...\n\n#### 练习1\n\n- 选中`employees` 表的所有数据\n\n```sql\nselect * from employees\n```\n\n![mysql图17.png](https://s2.loli.net/2024/03/15/6rq1TGNiyuvngja.png)\n\n### 1.2 顾客表(customers)\n\n- 每一个顾客都有唯一ID`customer_id`, 顾客的ID是公司全名的缩写，用5个字母表示\n\n- 公司全名在 `company_name` 列中保存\n\n- `contact_name` 和 `contact_title` 两列代表了客户公司的联系人信息（名字和职务）\n\n  除此之外还保存了顾客的地址信息和联系方式`city`, `region`, `postal_code`, `country`, `fax`\n\n#### 练习2\n\n- 查询每个客户的 `ID`, `company name`, `contact name`, `contact title`, `city`, 和 `country`.并按照国家名字排序\n\n```sql\nselect customer_id,\n  company_name,\n  contact_name,\n  contact_title,\n  city,\n  country from customers\n  order by country\n```\n\n![mysql图18.png](https://s2.loli.net/2024/03/15/FzSiLJ3yK4DAhGV.png)\n\n### 1.3 商品(products)和商品类别(categories)表\n\n- 商品表中保存了在Northwind商店中出售的商品信息\n  - 每一种商品都有唯一的 `product_id` 和商品名字`product_name`.\n  - 每一种商品都有一个供应商 (`supplier_id`) \n  - 每一种商品都有一个商品类别 (`category_id`).\n  - 每一种商品都有确定的单价 `unit_price`. \n  - 字段 `discontinued` 代表商品是否缺货， `false` (有货)   `true` (缺货) \n- 商品类别表 `categories` ，保存了所有商品的类别\n  - 每个类别都有唯一的id\n  - 每个类别都有自己的名称 `category_name`\n  - 字段`description` 存储了类别的简短描述信息\n- 商品表中包含了  `category_id` 字段，所以可以使用join 将商品表中的信息与商品类别表中的信息进行关联查询\n\n#### 练习3\n\n- 查询每一个商品的`product_name`，`category_name`，`quantity_per_unit`，`unit_price`，`units_in_stock` 并且通过 `unit_price` 字段排序\n\n```sql\nSELECT\n  product_name,\n  category_name,\n  quantity_per_unit,\n  unit_price,\n  units_in_stock\nFROM products\nJOIN categories\n  ON products.category_id = categories.category_id\nORDER BY unit_price;\n```\n\n![mysql图19.png](https://s2.loli.net/2024/03/15/vl9HDzPXf4yh5AQ.png)\n\n### 1.4 供应商表（supplier）\n\n- 供应商表与用户表类似\n- 每个供应商都有唯一ID `supplier_id` \n- 每个供应商都有公司名字`company_name`\n- 表中还记录了供应商的地址信息 `address`，`city`，`region`，`postal_code`，`country`\n\n#### 练习4\n\n- 列出所有提供了4种以上不同商品的供应商列表\n- 所需字段：`supplier_id`, `company_name`, and `products_count` (提供的商品种类数量).\n\n```sql\nSELECT\n  s.supplier_id, \n  s.company_name, \n  COUNT(*) AS products_count\nFROM products p\nJOIN suppliers s \n  ON p.supplier_id = s.supplier_id\nGROUP BY s.supplier_id,\n  s.company_name\nHAVING COUNT(*) > 4;\n```\n\n![mysql图20.png](https://s2.loli.net/2024/03/15/NSHhZDv5rALW9O2.png)\n\n### 1.5 订单和订单明细表\n\n- 订单表 `orders` 中的每一条数据包含了一个订单的基本信息：\n  - 订单ID `order_id`，顾客ID `customer_id`, 销售员的员工ID `employee_id` \n  - 订单相关的时间信息  (下单日期`order_date` 和配送日期 `shipped_date`) 和其他配送相关信息\n    - ship_via 运输方式\n    - freight   运费\n    - ship_address  收货地址\n    - ship_city   收货城市\n    - ship_region 收货地区\n    - ship_postal_code 收货地址邮编\n    - ship_country 收货国家\n\n#### 练习5\n\n- 提取订单编号为10250的订单详情，显示如下信息：\n\n  `product_name`, `quantity`, `unit_price` （ `order_items` 表)`discount` ，`order_date` ,按商品名字排序\n\n```sql\nSELECT\n  product_name,\n  quantity,\n  order_items.unit_price,\n  discount,\n  order_date\nFROM order_items\nJOIN products\n  ON order_items.product_id = products.product_id\nJOIN orders\n  ON orders.order_id = order_items.order_id\nWHERE orders.order_id = 10250\nORDER BY product_name;\n```\n\n### 2.1 详细报告\n\n- 将一个或者多个业务对象的详细信息汇总到一张表中是一种比较常见的报表形式\n- 我们需要的信息可能分散在多张表中，在写SQL时可以通过一个或者多个`JOIN`子句将信息进行汇总\n\n```sql\nSELECT\n  c.company_name AS customer_company_name, \n  e.first_name AS employee_first_name, \n  e.last_name AS employee_last_name,\n  o.order_date,\n  o.shipped_date,\n  o.ship_country\nFROM orders o\nJOIN employees e\n  ON o.employee_id = e.employee_id\nJOIN customers c\n  ON o.customer_id = c.customer_id\nWHERE o.ship_country = 'France';\n```\n\n- 在上面的SQL查询中，我们想收集运输到法国的订单的相关信息，包括订单涉及的顾客和员工信息，下单和发货日期等\n- 由于相关数据保存在不同的表中，所以需要将`orders` 表， `employees` 表和 `customers` 表连接在一起\n- 注意在写SQL时，我们可以为每一张表都起了一个别名，可以减少输入的字符数\n\n#### 练习6\n\n- 需求：提供订单编号为10248的相关信息，包括**product name**,  **unit price** (在 `order_items` 表中),  **quantity（数量）**,**company_name**（供应商公司名字 ，起别名 `supplier_name`).\n\n```sql\nSELECT\n  product_name,\n  oi.unit_price,\n  oi.quantity,\n  company_name AS supplier_name\nFROM order_items oi\nJOIN products p \n  ON oi.product_id = p.product_id\nJOIN suppliers s\n  ON s.supplier_id = p.supplier_id\nWHERE oi.order_id = 10248;\n```\n\n#### 练习7\n\n- 需求：提取每件商品的详细信息，包括  商品名称（`product_name`）, 供应商的公司名称  (`company_name`，在 `suppliers` 表中), 类别名称 `category_name`, 商品单价`unit_price`, 和每单位商品数量`quantity per unit`\n\n```sql\nSELECT \n  p.product_name,\n  s.company_name,\n  c.category_name,\n  p.unit_price,\n  p.quantity_per_unit\nFROM products p\nJOIN suppliers s\n  ON p.supplier_id = s.supplier_id\nJOIN categories c\n  ON c.category_id = p.category_id;\n```\n\n### 2.2 带时间限制的报表\n\n- 另一种常见的报表需求是查询某段时间内的业务指标\n\n```sql\nSELECT\n  COUNT(*)\nFROM orders\nWHERE order_date >= '2016-07-01' AND  order_date < '2016-08-01';\n```\n\n- 在上面的查询中，我们统计了2016年7月的订单数量，\n- 需要注意SQL中的日期总是放在单引号内，格式通常为“ YYYY-MM-DD”（年-月-日）\n\n#### 练习8\n\n- 统计2013年入职的员工数量，统计字段起别名 `number_of_employees`\n\n```sql\nSELECT\n  COUNT(*) AS number_of_employees\nFROM employees\nWHERE hire_date >= '2013-01-01' AND hire_date < '2014-01-01';\n```\n\n### 2.3 计算多个对象\n\n- 在业务报表中，我们通常希望同时计算多个业务对象的某些指标。\n\n```sql\nSELECT\n    order_id,\n    COUNT(*) AS order_items_count\nFROM\n    order_items\nWHERE\n    order_id BETWEEN 10200 AND 10300\nGROUP BY\n    order_id;\n```\n\n- 在上面的查询中，我们统计了指定范围内的`order_id`，计算每个订单中的商品数量\n  - 通过连接`orders` 和`order_items`表，在同一行显示单个订单商品及其父订单的信息\n  - 按照父顺序对所有行进行分组\n  - 使用`COUNT（*）`统计每个订单的商品数量\n\n#### 练习9\n\n- 需求：统计每个供应商供应的商品总数量\n  - 结果返回供应商ID`supplier_id` ，公司名字`company_name` ，商品种类数量（起别名`products_count` )\n  - 使用 `products` 和 `suppliers` 表.\n\n```sql\nSELECT\n  s.supplier_id,\n  company_name,\n  COUNT(*) AS products_count\nFROM products p\nJOIN suppliers s\n  ON p.supplier_id = s.supplier_id \nGROUP BY s.supplier_id,company_name;\n```\n\n需求：统计每个供应商分别供应每类商品的数量\n\n```sql\nSELECT\n    count(*) AS `products_count`,\n    s.supplier_id,\n    s.company_name,\n    category_id\nFROM\n    products AS p\n        INNER JOIN suppliers AS s ON p.supplier_id = s.supplier_id\nGROUP BY\n    s.supplier_id, s.company_name, category_id ;\n```\n\n\n\n### 2.4 总订单金额\n\n- 在销售报表中,我们经常需要计算订单的总付款额。\n\n```sql\nSELECT\n    sum(unit_price * quantity) AS total_price\nFROM\n    order_items\nWHERE\n    order_id = 10250;\n```\n\n- 我们要查找ID为10250的订单的总价（折扣前），`SUM(unit_price * quantity)`\n\n#### 练习10\n\n- Northwind商店某些产品会不定期做打折促销\n- 每个商品的折扣都存储在 `order_items` 表的`discount` 列中\n- 例如，“ 0.20”折扣意味着客户支付原始价格的“ 1-0.2 = 0.8”\n- 在下面的代码中添加第二个名为`total_price_after_discount`的列，计算打折后的商品价格\n\n```sql\nSELECT\n  SUM(unit_price * quantity) AS total_price\nFROM orders o\nJOIN order_items oi \n  ON o.order_id = oi.order_id\nWHERE o.order_id = 10250;\n```\n\n\n\n```sql\nSELECT\n    SUM(unit_price * quantity) AS total_price,\n    SUM(unit_price * quantity * (1 - discount)) AS total_price_after_discount\nFROM\n    order_items\nWHERE\n        order_id = 10250\n```\n\n### 2.5 计算多个订单的订单金额\n\n- 上面的案例中我们计算了单个订单的订单总金额，接下来我们统计多个订单的总金额\n\n```sql\nSELECT\n  o.order_id,\n  c.company_name AS customer_company_name, \n  SUM(unit_price * quantity) AS total_price\nFROM orders o\nJOIN customers c\n  ON o.customer_id = c.customer_id\nJOIN order_items oi\n  ON o.order_id = oi.order_id\nWHERE o.ship_country = 'France'\nGROUP BY o.order_id, c.company_name;\n```\n\n- 我们想计算运输到法国的所有订单的总订单金额\n- 在结果中，我们想保留订单ID和订单公司名字，可以通过`GROUP BY` 实现\n- 注意：通过`GROUP BY`  我们只需要对 `order_id` 进行分组就可以了，但MySQL 5.7之后要求，在使用`GROUP BY`分组时，SELECT 后的字段，如果没有在聚合函数中使用，就必须在GROUP BY 后出现\n\n#### 练习11\n\n- 统计每个员工处理的订单总数\n- 结果包含员工ID`employee_id`，姓名`first_name` 和 `last_name`，处理的订单总数(别名 `orders_count`)\n\n```sql\nSELECT\n  e.employee_id,\n  e.first_name,\n  e.last_name,\n  COUNT(*) AS orders_count\nFROM orders o\nJOIN employees e\n  ON e.employee_id = o.employee_id\nGROUP BY e.employee_id,\n  e.first_name,\n  e.last_name;\n```\n\n### 2.6 不同类别商品的库存\n\n- 统计每个类别中的库存产品值多少钱？ \n  - 显示三列：`category_id`, `category_name`, 和 `category_total_value`\n  - 如何计算库存商品总价：`SUM(unit_price * units_in_stock)`。\n\n```sql\nSELECT\n  c.category_id,\n  c.category_name,\n  SUM(unit_price * units_in_stock) AS category_total_value\nFROM products p\nJOIN categories c\n  ON p.category_id = c.category_id\nGROUP BY c.category_id,\n  c.category_name;\n```\n\n### 2.7 Group by分组\n\n- 接下来，我们来了解每个员工的业绩：计算每个员工的订单数量\n- 看下面的SQL是否有问题\n\n```sql\nSELECT\n  e.first_name,\n  e.last_name,\n  COUNT(*) AS orders_count\nFROM orders o\nJOIN employees e\n  ON o.employee_id = e.employee_id\nGROUP BY e.first_name,\n  e.last_name;\n```\n\n- 上面的SQL貌似正确，但是没有考虑到员工重名的问题，所以需要做一个小调整：\n\n```sql\nSELECT\n  e.employee_id,\n  e.first_name,\n  e.last_name,\n  COUNT(*) AS orders_count\nFROM orders o\nJOIN employees e\n  ON o.employee_id = e.employee_id\nGROUP BY e.employee_id,\n  e.first_name,\n  e.last_name;\n```\n\n- 在`SELECT` 和 `GROUP BY` 中添加了 员工ID `employee_id`字段后,重名的问题就可以解决了\n- 注意，在使用GROUP BY进行分组聚合统计时，需要考虑分组字段中的相同值的业务含义是否相同\n\n#### 练习12\n\n- 需求：计算每个客户的下订单数\n- 结果包含：用户id、用户公司名称、订单数量（`customer_id`, `company_name`,  `orders_count` ）\n\n```sql\nSELECT\n  c.customer_id,\n  c.company_name,\n  COUNT(*) AS orders_count\nFROM orders o\nJOIN customers c\n  ON o.customer_id = c.customer_id\nGROUP BY c.customer_id,\n  c.company_name;\n```\n\n### 2.8 选择显示部分信息\n\n- 再看一下上面的例子\n\n```sql\nSELECT\n  e.employee_id,\n  e.first_name,\n  e.last_name,\n  COUNT(*) AS orders_count\nFROM orders o\nJOIN employees e\n  ON o.employee_id = e.employee_id\nGROUP BY e.employee_id,\n  e.first_name,\n  e.last_name;\n```\n\n- 我们通过 `employee_id`进行分组, 但是`GROUP BY`中的字段，不一定在`SELECT`中出现，例如下面的SQL：\n\n```sql\nSELECT\n  e.first_name,\n  e.last_name,\n  COUNT(*) AS orders_count\nFROM orders o\nJOIN employees e\n  ON o.employee_id = e.employee_id\nGROUP BY e.employee_id,\n  e.first_name,\n  e.last_name;\n```\n\n- 之前我们强调过，`SELECT` 中的字段，如果没在聚合函数中使用，就一定更要在`GROUP BY` 子句中出现\n- 但是，`GROUPY BY`子句中的字段，可以不用都出现在`SELECT`中\n\n#### 练习13\n\n- 需求：统计2016年6月到2016年7月底用户的总下单金额并按金额从高到低排序\n- 结果包含：顾客公司名称`company_name` 和总下单金额（折后实付金额）`total_paid`\n- 提示：\n  - 计算实际总付款金额： SUM(unit_price * quantity * (1 - discount)) \n  - 日期过滤 `WHERE order_date >= '2016-06-01' AND order_date < '2016-08-01'`\n\n```sql\nSELECT\n  c.company_name, \n  SUM(unit_price * quantity * (1 - discount)) AS total_paid\nFROM orders o\nJOIN order_items oi\n  ON o.order_id = oi.order_id\nJOIN customers c\n  ON o.customer_id = c.customer_id\nWHERE order_date >= '2016-06-01' AND order_date < '2016-08-01'\nGROUP BY c.customer_id,\n  c.company_name\nORDER BY total_paid DESC;\n```\n\n### 2.9 COUNT()函数回顾\n\n- 当创建业务报表的时候，需要注意 `COUNT(*)` 和 `COUNT(列名)` 之间的区别\n- 假设我们要统计发货到不同国家/地区的订单数量以及已经发货的订单数量\n\n```sql\nSELECT\n  ship_country,\n  COUNT(*) AS all_orders,\n  COUNT(shipped_date) AS shipped_orders\nFROM orders\nGROUP BY ship_country;\n```\n\n- `COUNT（*）`将计算ship_country中的所有订单\n- `COUNT（shipped_date）`将仅计算shipped_date列值不为NULL的行\n- 在我们的数据库中，` shipped_date` 列中的`NULL`表示尚未发货，COUNT（shipped_date）` 仅计算已经发货的订单。\n\n#### 练习14\n\n- 需求：统计客户总数和带有传真号码的客户数量\n- 需要字段：`all_customers_count` 和 `customers_with_fax_count`\n\n```sql\nSELECT\n  COUNT(*) AS all_customers_count, \n  COUNT(fax) AS customers_with_fax_count\nFROM customers;\n```\n\n### 3.1 使用CASE WHEN自定义分组\n\n- 需求：我们要在报表中显示每种产品的库存量，但我们不想简单地将“ units_in_stock”列放在报表中。报表中只需要一个总体级别，例如低，高：\n\n```sql\nSELECT\n  product_id,\n  product_name,\n  units_in_stock,\n  CASE\n    WHEN units_in_stock > 100 THEN 'high'\n    WHEN units_in_stock > 50 THEN 'moderate'\n    WHEN units_in_stock > 0 THEN 'low'\n    WHEN units_in_stock = 0 THEN 'none'\n  END AS availability\nFROM products;\n```\n\n- 上面的SQL查询结果中，我们创建了一个新列`availability`， 通过 `CASE WHEN` 语句来对这一列赋值\n- `CASE WHEN` 语法回顾\n- 上面的查询中，通过  `units_in_stock` 列的值来判断库存的可用性\n  - 库存大于100 的可用性为高(high)\n  - 50到100的可用性为中等(moderate)\n  - 小于50的为低(low)\n  - 零库存 为 (none)\n\n#### 练习15\n\n运行上面的SQL，比较`units_in_stock` 和 `availability`两列的结果\n\n#### 练习16\n\n- 需求： 创建一个报表，统计员工的经验水平\n- 显示字段：`first_name`, `last_name`, `hire_date`, 和 `experience` \n- 经验字段（`experience` ）：\n  - `'junior'`  2014年1月1日以后雇用的员工\n  - `'middle'` 在2013年1月1日之后至2014年1月1日之前雇用的员工\n  - `'senior'` 2013年1月1日或之前雇用的员工\n\n```sql\nSELECT\n  first_name,\n  last_name,\n  hire_date,\n  CASE\n    WHEN hire_date > '2014-01-01' THEN 'junior'\n    WHEN hire_date > '2013-01-01' THEN 'middle'\n    WHEN hire_date <= '2013-01-01' THEN 'senior'\n  END AS experience\nFROM employees;\n```\n\n### 3.2 CASE WHEN中ELSE的使用\n\n- 我们的商店要针对北美地区的用户做促销活动：任何运送到北美地区（美国，加拿大) 的包裹免运费。 \n- 创建报表，查询订单编号为10720~10730 活动后的运费价格\n\n```sql\nSELECT \n  order_id,\n  customer_id,\n  ship_country,\n  CASE\n    WHEN ship_country = 'USA' OR ship_country = 'Canada' THEN 0.0\n  END AS shipping_cost\nFROM orders\nWHERE order_id BETWEEN 10720 AND 10730;\n```\n\n- 上面的SQL中，只定义了美国和加拿大的运费，并没有处理其他目的地的运费信息\n\n#### 练习17\n\n- 运行上面的SQL 观察 `ship_country` 和 `shipping_cost` 列，除了美国和加拿大之外，其他行的 `shipping_cost`  的值为NULL\n\n- 在上面的案例中，除了北美地区的以外的订单，运费统计为NULL, 如果将其他地区的运费设置为10美元，那么可以用如下方式处理：\n\n  ```\n  SELECT \n    order_id,\n    customer_id,\n    ship_country,\n    CASE\n      WHEN ship_country = 'USA' OR ship_country = 'Canada' THEN 0.0\n      ELSE 10.0\n    END AS shipping_cost\n  FROM orders\n  WHERE order_id BETWEEN 10720 AND 10730;\n  ```\n\n  - 我们在`CASE WHEN`结构中添加了`ELSE`\n  - 如果不满足其他条件，则执行`ELSE`。 因此，所有其他国家/地区的 `shipping_cost`都将变为“ 10.0”，而不是`NULL`。\n\n#### 练习18\n\n- 需求：创建客户基本信息报表\n- 包含字段：\n  - 客户id `customer_id`\n  - 公司名字 `company_name`\n  - 所在国家 `country`\n  - 使用语言`language`\n- 使用语言`language` 的取值按如下规则\n  - Germany, Switzerland, and Austria 语言为德语 `'German'` \n  - UK, Canada, the USA, and Ireland 语言为英语 `'English'` \n  - 其他所有国家 `'Other'` \n\n```sql\nSELECT \n  customer_id,\n  company_name,\n  country,\n  CASE\n    WHEN country IN ('Germany', 'Switzerland', 'Austria') THEN 'German'\n    WHEN country IN ('UK', 'Canada', 'USA', 'Ireland') THEN 'English'\n    ELSE 'Other'\n  END AS language\nFROM customers;\n```\n\n#### 练习19\n\n- 需求：创建报表将所有产品划分为素食和非素食两类\n- 报表中包含如下字段：\n  - 产品名字 `product_name`\n  - 类别名称 `category_name`\n  - 膳食类型 `diet_type`:\n    - 非素食 `'Non-vegetarian'`  商品类别字段的值为 `'Meat/Poultry'` 和 `'Seafood'`.\n    - 素食\n\n```sql\nSELECT\n  product_name,\n  category_name,\n  CASE\n    WHEN category_name IN ('Meat/Poultry', 'Seafood') THEN 'Non-vegetarian'\n    ELSE 'Vegetarian'\n  END AS diet_type\nFROM categories c\nJOIN products p\n  ON c.category_id = p.category_id;\n```\n\n### 3.3 在GROUP BY中使用CASE WHEN\n\n- 在引入北美地区免运费的促销策略时，我们也想知道运送到北美地区和其它国家地区的订单数量\n\n```sql\nSELECT \n  CASE\n    WHEN ship_country = 'USA' OR ship_country = 'Canada' THEN 0.0\n    ELSE 10.0\n  END AS shipping_cost,\n  COUNT(*) AS order_count\nFROM orders\nGROUP BY\n  CASE\n    WHEN ship_country = 'USA' OR ship_country = 'Canada' THEN 0.0\n    ELSE 10.0\n  END;\n```\n\n- 在`SELECT`子句和`GROUP BY`子句中，有相同的`CASE WHEN`出现在`GROUP BY`子句中\n- 这里并没有使用别名`shipping_cost`。 虽然在SELECT子句中指定了别名（shipping_cost），但标准SQL不允许在GROUP BY子句中引用别名，所以这里`CASE WHEN` 写了两次\n- MySQL允许 在`GROUP BY`中使用列别名，在本案例中两种写法都可以\n- 注意：CASE WHEN` 语句在 `GROUP BY` 和 `SELECT` 子句中，写法必须相同\n\n#### 练习20\n\n- 需求：创建报表统计供应商来自那个大洲\n- 报表中包含两个字段：供应商来自哪个大洲（`supplier_continent` ）和 供应产品种类数量（`product_count`）\n- 供应商来自哪个大洲（`supplier_continent` ）包含如下取值：\n  - `'North America'` （供应商来自 `'USA'` 和 `'Canada'`.）\n  - `'Asia'` （供应商来自 `'Japan'` 和 `'Singapore'`)\n  - `'Other'` (其它国家)\n\n```sql\nSELECT \n  CASE\n    WHEN country IN ('USA', 'Canada') THEN 'North America'\n    WHEN country IN ('Japan', 'Singapore') THEN 'Asia'\n    ELSE 'Other'\n  END AS supplier_continent,\n  COUNT(*) AS product_count\nFROM products p\nJOIN suppliers s\n  ON p.supplier_id = s.supplier_id\nGROUP BY\n  CASE\n    WHEN country IN ('USA', 'Canada') THEN 'North America'\n    WHEN country IN ('Japan', 'Singapore') THEN 'Asia'\n    ELSE 'Other'\n  END;\n```\n\n#### 练习21\n\n- 需求：创建一个简单的报表来统计员工的年龄情况\n- 报表中包含如下字段\n  - 年龄（ `age` ）：生日大于1980年1月1日 `'young'` ，其余`'old'` \n  - 员工数量 （ `employee_count`）\n\n```sql\nSELECT\n  CASE\n    WHEN birth_date > '1980-01-01' THEN 'young'\n    ELSE 'old'\n  END AS age,\n  COUNT(*) AS employee_count\nFROM employees\nGROUP BY\n  CASE\n    WHEN birth_date > '1980-01-01' THEN 'young'\n    ELSE 'old'\n  END;\n```\n\n### 3.4 CASE WHEN 和 COUNT\n\n- 可以将 `CASE WHEN` 和 `COUNT` 结合使用，自定义分组并统计每组数据数量\n\n```sql\nSELECT \n  COUNT(CASE \n    WHEN ship_country = 'USA' OR ship_country = 'Canada' THEN order_id \n  END) AS free_shipping,\n  COUNT(CASE\n    WHEN ship_country != 'USA' AND ship_country != 'Canada' THEN order_id\n  END) AS paid_shipping\nFROM orders;\n```\n\n在上面的查询中，在`COUNT（）`函数中包含了一个`CASE WHEN`子句。\n\n- 对于每一行，`CASE WHEN`子句会检查`ship_country`中的值。 如果是“ USA”或“ Canada”，则将order_id传递给`COUNT（）`并进行计数。 \n- 如果`ship_country`中的值不同，则`CASE WHEN`将返回`NULL`, `COUNT（）`不会统计`NULL`值。 `free_shipping`列将**仅计算运往美国或加拿大的订单”**\n- ` paid_shipping`列的构建方式与上述方式类似\n\n#### 练习22\n\n- 需求：统计客户的contact_title 字段值为 ’Owner' 的客户数量\n- 查询结果有两个字段：`represented_by_owner` 和 `not_represented_by_owner`\n\n```sql\nSELECT \n  COUNT(CASE\n    WHEN contact_title = 'Owner' THEN customer_id\n  END) AS represented_by_owner,\n  COUNT(CASE\n    WHEN contact_title != 'Owner' THEN customer_id\n  END) AS not_represented_by_owner\nFROM customers;\n```\n\n#### 练习23\n\n- 需求：Washington (WA) 是 Northwind的主要运营地区，统计有多少订单是由华盛顿地区的员工处理的，多少订单是有其它地区的员工处理的\n- 结果字段： `orders_wa_employees` 和 `orders_not_wa_employees`\n\n```sql\nSELECT \n  COUNT(CASE\n    WHEN region = 'WA' THEN order_id\n  END) AS orders_wa_employees,\n  COUNT(CASE\n    WHEN region != 'WA' THEN order_id\n  END) AS orders_not_wa_employees\nFROM employees e\nJOIN orders o\n  ON e.employee_id = o.employee_id;\n```\n\n### 3.5 GROUP BY 和 CASE WHEN组合使用\n\n```sql\nSELECT \n  ship_country,\n  COUNT(CASE\n    WHEN freight < 40.0 THEN order_id\n  END) AS low_freight,\n  COUNT(CASE\n    WHEN freight >= 40.0 AND freight < 80.0 THEN order_id\n  END) AS avg_freight,\n  COUNT(CASE\n    WHEN freight >= 80.0 THEN order_id\n  END) AS high_freight\nFROM orders\nGROUP BY ship_country;\n```\n\n- 将`COUNT(CASE WHEN...)` 和 `GROUP BY` 组合使用，可以创建更复杂的报表，在报表中，我们将运输到不同国家的订单根据运费高低进一步分成三组，并统计每组数量\n\n#### 练习24\n\n- 需求：创建报表，统计不同类别产品的库存量，将库存量分成两类 >30 和 <=30 两档,分别统计这两档的商品数量\n- 报表包含三个字段\n  - 类别名称  `category_name`,\n  - 库存充足  `high_availability` \n  - 库存紧张 `low_availability` \n\n```sql\nSELECT \n  c.category_name,\n  COUNT(CASE\n    WHEN units_in_stock > 30 THEN product_id\n  END) AS high_availability,\n  COUNT(CASE\n    WHEN units_in_stock <= 30 THEN product_id\n  END) AS low_availability\nFROM products p\nJOIN categories c\n  ON p.category_id = c.category_id\nGROUP BY c.category_id,\n  c.category_name;\n```\n\n### 3.6 SUM中使用CASE WHEN\n\n- 上面通过我们通过  `COUNT()` 函数 和`CASE WHEN`子句联合使用来创建的报表，也可以通过  `SUM()` 来替代 `COUNT()`\n\n```sql\nSELECT \n  SUM(CASE\n    WHEN ship_country = 'USA' OR ship_country = 'Canada' THEN 1\n  END) AS free_shipping,\n  SUM(CASE\n    WHEN ship_country != 'USA' AND ship_country != 'Canada' THEN 1\n  END) AS paid_shipping\nFROM orders;\n```\n\n- 在上面的查询中，我们将`SUM（）`与`CASE WHEN`一起使用，结果与使用 `COUNT()`相同\n\n#### 练习25\n\n```sql\nSELECT \n  COUNT(CASE\n    WHEN region = 'WA' THEN order_id\n  END) AS orders_wa_employees,\n  COUNT(CASE\n    WHEN region != 'WA' THEN order_id\n  END) AS orders_not_wa_employees\nFROM employees e\nJOIN orders o\n  ON e.employee_id = o.employee_id;\n```\n\n- 将上面的SQL修改成用 SUM（） 函数实现\n\n```sql\nSELECT \n  SUM(CASE\n    WHEN region = 'WA' THEN 1\n  END) AS orders_wa_employees,\n  SUM(CASE\n    WHEN region != 'WA' THEN 1\n  END) AS orders_not_wa_employees\nFROM employees e\nJOIN orders o\n  ON e.employee_id = o.employee_id;\n```\n\n#### 练习26\n\n- 需求：创建报表统计运输到法国的的订单中，打折和未打折订单的总数量\n- 结果包含两个字段：`full_price` （原价）和 `discounted_price`（打折）\n\n```sql\nSELECT\n  SUM(CASE\n    WHEN discount = 0 THEN 1\n  END) AS full_price,\n  SUM(CASE\n    WHEN discount != 0 THEN 1\n  END) AS discounted_price\nFROM orders o\nJOIN order_items oi\n  ON o.order_id = oi.order_id\nWHERE ship_country = 'France';\n```\n\n### 3.7 SUM中使用CASE WHEN进行复杂计算\n\n- 我们现在要统计每个订单的总付款额以及非素食产品的总付款额。\n\n> 注: 非素食产品的产品ID （ `category_id`） 是 6 和 8\n\n```sql\nSELECT\n  o.order_id,\n  SUM(oi.quantity * oi.unit_price * (1 - oi.discount)) AS total_price,\n  SUM(CASE\n    WHEN p.category_id in (6, 8) THEN oi.quantity * oi.unit_price * (1 - oi.discount)\n    ELSE 0\n  END) AS non_vegetarian_price\nFROM orders o\nJOIN order_items oi\n  ON o.order_id = oi.order_id\nJOIN products p\n  ON p.product_id = oi.product_id\nGROUP BY o.order_id;\n```\n\n- 之前的场景中，我们可以通过`SUM(CASE WHEN...)` 来替换`COUNT(CASE WHEN...)` ，但在上面的例子中，我们只能使用`SUM(CASE WHEN...)` ，因为涉及到不同值的累加，不能通过COUNT计数替代\n\n#### 练习27\n\n- 需求：输出报表，统计不同供应商供应商品的总库存量，以及高价值商品的库存量（单价超过40定义为高价值）\n- 结果显示四列：\n  - 供应商ID `supplier_id`\n  - 供应商公司名 `company_name`\n  - 由该供应商提供的总库存 `all_units` \n  - 由该供应商提供的高价值商品库存 `expensive_units` \n\n```sql\nSELECT \n  s.supplier_id,\n  s.company_name,\n  SUM(units_in_stock) AS all_units,\n  SUM(CASE\n    WHEN unit_price > 40.0 THEN units_in_stock\n    ELSE 0\n  END) AS expensive_units\nFROM products p\nJOIN suppliers s\n  ON p.supplier_id = s.supplier_id\nGROUP BY s.supplier_id,\n  s.company_name;\n```\n\n### 小结\n\n1. CASE WHEN语句检查一个或多个条件，并在找到第一个匹配条件时返回一个值。 如果没有`ELSE`子句并且没有匹配条件，则`CASE WHEN`返回`NULL`。\n\n   ```sql\n   CASE\n     WHEN condition_1 THEN result_1\n     WHEN condition_2 THEN result_2\n     ...\n     ELSE result\n   END\n   ```\n\n2. 要添加新列，从而对业务数据进行**自定义分组**，可以在`SELECT`子句中使用`CASE WHEN`：\n\n   ```sql\n   SELECT \n     CASE\n       WHEN ... THEN ...\n     END AS sample_column\n   FROM table;\n   ```\n\n3. 可以在“ GROUP BY”子句中使用“ CASE WHEN”来创建自己的分组。 同样的`CASE WHEN`子句也必须出现在`SELECT`子句中：\n\n   ```sql\n   SELECT \n     CASE\n       WHEN ... THEN ...\n     END AS sample_column,\n     COUNT(*) AS sample_count\n   FROM table\n     ...\n   GROUP BY\n     CASE WHEN ... THEN ...\n     END;\n   ```\n\n4. 可以在`COUNT()`或`SUM()`函数内使用`CASE WHEN`来创建业务对象的自定义计数：\n\n   ```sql\n   SELECT \n     COUNT(CASE\n       WHEN ... THEN column_name\n     END) AS count_column\n   FROM table;\n   ```\n\n   ```sql\n   SELECT \n     SUM(CASE\n       WHEN ... THEN 1\n     END) AS count_column\n   FROM table;\n   ```\n\n#### 练习28\n\n- 需求：创建报表来为每种商品添加价格标签，贵、中等、便宜\n- 结果包含如下字段：`product_id`, `product_name`, `unit_price`, 和 `price_level`\n- 价格等级`price_level`的取值说明：\n  - `'expensive'`  单价高于100的产品\n  - `'average'`  单价高于40但不超过100的产品\n  - `'cheap'`  其他产品\n\n```sql\nSELECT \n  product_id,\n  product_name,\n  unit_price,\n  CASE\n    WHEN unit_price > 100 THEN 'expensive'\n    WHEN unit_price > 40 THEN 'average'\n    ELSE 'cheap'\n  END AS price_level\nFROM products;\n```\n\n#### 练习29\n\n- 需求：制作报表统计所有订单的总价（不计任何折扣）对它们进行分类。\n- 包含一下字段：\n  - `order_id`\n  - `total_price`（折扣前）\n  - `price_group`\n- 字段 price_group 取值说明：\n  - 总价超过2000美元\n  - `'average'`，总价在$ 600到$ 2,000之间，包括两端\n  - `'low'` 总价低于$ 600\n\n```sql\nSELECT\n  order_id,\n  SUM(unit_price * quantity) AS total_price,\n  CASE\n    WHEN SUM(unit_price * quantity) > 2000 THEN 'high'\n    WHEN SUM(unit_price * quantity) > 600 THEN 'average'\n    ELSE 'low'\n  END AS price_group\nFROM order_items\nGROUP BY order_id;\n```\n\n#### 练习30\n\n- 需求：统计所有订单的运费，将运费高低分为三档\n- 报表中包含三个字段\n  - `low_freight` `freight`值小于“ 40.0”的订单数\n  - `avg_freight`  `freight`值大于或等于“ 40.0”但小于“ 80.0”的订单数\n  - `high_freight `  `freight`值大于或等于“ 80.0”的订单数\n\n```sql\nSELECT\n  COUNT(CASE\n    WHEN freight >= 80.0 THEN order_id\n  END) AS high_freight,\n  COUNT(CASE\n    WHEN freight < 40.0 THEN order_id\n  END) AS low_freight,\n  COUNT(CASE\n    WHEN freight >= 40.0 AND freight < 80.0 THEN order_id\n  END) AS avg_freight\nFROM orders;\n```\n\n\n\n\n\n\n\n数据\n\n```\n/*\n Navicat Premium Data Transfer\n\n Source Server         : localhost\n Source Server Type    : MySQL\n Source Server Version : 80022\n Source Host           : localhost:3306\n Source Schema         : test\n\n Target Server Type    : MySQL\n Target Server Version : 80022\n File Encoding         : 65001\n\n Date: 27/04/2021 19:38:18\n*/\n\nSET NAMES utf8mb4;\nSET FOREIGN_KEY_CHECKS = 0;\n\n-- ----------------------------\n-- Table structure for categories\n-- ----------------------------\nDROP TABLE IF EXISTS `categories`;\nCREATE TABLE `categories` (\n  `category_id` int NOT NULL,\n  `category_name` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `description` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci,\n  PRIMARY KEY (`category_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n\n-- ----------------------------\n-- Records of categories\n-- ----------------------------\nBEGIN;\nINSERT INTO `categories` VALUES (1, 'Beverages', 'Soft drinks, coffees, teas, beers, and ales');\nINSERT INTO `categories` VALUES (2, 'Condiments', 'Sweet and savory sauces, relishes, spreads, and seasonings');\nINSERT INTO `categories` VALUES (3, 'Confections', 'Desserts, candies, and sweet breads');\nINSERT INTO `categories` VALUES (4, 'Dairy Products', 'Cheeses');\nINSERT INTO `categories` VALUES (5, 'Grains/Cereals', 'Breads, crackers, pasta, and cereal');\nINSERT INTO `categories` VALUES (6, 'Meat/Poultry', 'Prepared meats');\nINSERT INTO `categories` VALUES (7, 'Produce', 'Dried fruit and bean curd');\nINSERT INTO `categories` VALUES (8, 'Seafood', 'Seaweed and fish');\nCOMMIT;\n\n-- ----------------------------\n-- Table structure for customers\n-- ----------------------------\nDROP TABLE IF EXISTS `customers`;\nCREATE TABLE `customers` (\n  `customer_id` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,\n  `company_name` varchar(40) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `contact_name` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `contact_title` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `address` varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `city` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `region` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `postal_code` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `country` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `fax` varchar(24) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  PRIMARY KEY (`customer_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n\n-- ----------------------------\n-- Records of customers\n-- ----------------------------\nBEGIN;\nINSERT INTO `customers` VALUES ('ALFKI', 'Alfreds Futterkiste', 'Maria Anders', 'Sales Representative', 'Obere Str. 57', 'Berlin', NULL, '12209', 'Germany', '030-0076545');\nINSERT INTO `customers` VALUES ('ANATR', 'Ana Trujillo Emparedados y helados', 'Ana Trujillo', 'Owner', 'Avda. de la Constitución 2222', 'México D.F.', NULL, '5021', 'Mexico', '(5) 555-3745');\nINSERT INTO `customers` VALUES ('ANTON', 'Antonio Moreno Taquería', 'Antonio Moreno', 'Owner', 'Mataderos 2312', 'México D.F.', NULL, '5023', 'Mexico', NULL);\nINSERT INTO `customers` VALUES ('AROUT', 'Around the Horn', 'Thomas Hardy', 'Sales Representative', '120 Hanover Sq.', 'London', NULL, 'WA1 1DP', 'UK', '(171) 555-6750');\nINSERT INTO `customers` VALUES ('BERGS', 'Berglunds snabbköp', 'Christina Berglund', 'Order Administrator', 'Berguvsvägen 8', 'Luleå', NULL, 'S-958 22', 'Sweden', '0921-12 34 67');\nINSERT INTO `customers` VALUES ('BLAUS', 'Blauer See Delikatessen', 'Hanna Moos', 'Sales Representative', 'Forsterstr. 57', 'Mannheim', NULL, '68306', 'Germany', '0621-08924');\nINSERT INTO `customers` VALUES ('BLONP', 'Blondesddsl père et fils', 'Frédérique Citeaux', 'Marketing Manager', '24, place Kléber', 'Strasbourg', NULL, '67000', 'France', '88.60.15.32');\nINSERT INTO `customers` VALUES ('BOLID', 'Bólido Comidas preparadas', 'Martín Sommer', 'Owner', 'C/ Araquil, 67', 'Madrid', NULL, '28023', 'Spain', '(91) 555 91 99');\nINSERT INTO `customers` VALUES ('BONAP', 'Bon app\\'', 'Laurence Lebihan', 'Owner', '12, rue des Bouchers', 'Marseille', NULL, '13008', 'France', '91.24.45.41');\nINSERT INTO `customers` VALUES ('BOTTM', 'Bottom-Dollar Markets', 'Elizabeth Lincoln', 'Accounting Manager', '23 Tsawassen Blvd.', 'Tsawassen', 'BC', 'T2F 8M4', 'Canada', '(604) 555-3745');\nINSERT INTO `customers` VALUES ('BSBEV', 'B\\'s Beverages', 'Victoria Ashworth', 'Sales Representative', 'Fauntleroy Circus', 'London', NULL, 'EC2 5NT', 'UK', NULL);\nINSERT INTO `customers` VALUES ('CACTU', 'Cactus Comidas para llevar', 'Patricio Simpson', 'Sales Agent', 'Cerrito 333', 'Buenos Aires', NULL, '1010', 'Argentina', '(1) 135-4892');\nINSERT INTO `customers` VALUES ('CENTC', 'Centro comercial Moctezuma', 'Francisco Chang', 'Marketing Manager', 'Sierras de Granada 9993', 'México D.F.', NULL, '5022', 'Mexico', '(5) 555-7293');\nINSERT INTO `customers` VALUES ('CHOPS', 'Chop-suey Chinese', 'Yang Wang', 'Owner', 'Hauptstr. 29', 'Bern', NULL, '3012', 'Switzerland', NULL);\nINSERT INTO `customers` VALUES ('COMMI', 'Comércio Mineiro', 'Pedro Afonso', 'Sales Associate', 'Av. dos Lusíadas, 23', 'Sao Paulo', 'SP', '05432-043', 'Brazil', NULL);\nINSERT INTO `customers` VALUES ('CONSH', 'Consolidated Holdings', 'Elizabeth Brown', 'Sales Representative', 'Berkeley Gardens 12 Brewery', 'London', NULL, 'WX1 6LT', 'UK', '(171) 555-9199');\nINSERT INTO `customers` VALUES ('DRACD', 'Drachenblut Delikatessen', 'Sven Ottlieb', 'Order Administrator', 'Walserweg 21', 'Aachen', NULL, '52066', 'Germany', '0241-059428');\nINSERT INTO `customers` VALUES ('DUMON', 'Du monde entier', 'Janine Labrune', 'Owner', '67, rue des Cinquante Otages', 'Nantes', NULL, '44000', 'France', '40.67.89.89');\nINSERT INTO `customers` VALUES ('EASTC', 'Eastern Connection', 'Ann Devon', 'Sales Agent', '35 King George', 'London', NULL, 'WX3 6FW', 'UK', '(171) 555-3373');\nINSERT INTO `customers` VALUES ('ERNSH', 'Ernst Handel', 'Roland Mendel', 'Sales Manager', 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria', '7675-3426');\nINSERT INTO `customers` VALUES ('FAMIA', 'Familia Arquibaldo', 'Aria Cruz', 'Marketing Assistant', 'Rua Orós, 92', 'Sao Paulo', 'SP', '05442-030', 'Brazil', NULL);\nINSERT INTO `customers` VALUES ('FISSA', 'FISSA Fabrica Inter. Salchichas S.A.', 'Diego Roel', 'Accounting Manager', 'C/ Moralzarzal, 86', 'Madrid', NULL, '28034', 'Spain', '(91) 555 55 93');\nINSERT INTO `customers` VALUES ('FOLIG', 'Folies gourmandes', 'Martine Rancé', 'Assistant Sales Agent', '184, chaussée de Tournai', 'Lille', NULL, '59000', 'France', '20.16.10.17');\nINSERT INTO `customers` VALUES ('FOLKO', 'Folk och fä HB', 'Maria Larsson', 'Owner', 'Åkergatan 24', 'Bräcke', NULL, 'S-844 67', 'Sweden', NULL);\nINSERT INTO `customers` VALUES ('FRANK', 'Frankenversand', 'Peter Franken', 'Marketing Manager', 'Berliner Platz 43', 'München', NULL, '80805', 'Germany', '089-0877451');\nINSERT INTO `customers` VALUES ('FRANR', 'France restauration', 'Carine Schmitt', 'Marketing Manager', '54, rue Royale', 'Nantes', NULL, '44000', 'France', '40.32.21.20');\nINSERT INTO `customers` VALUES ('FRANS', 'Franchi S.p.A.', 'Paolo Accorti', 'Sales Representative', 'Via Monte Bianco 34', 'Torino', NULL, '10100', 'Italy', '011-4988261');\nINSERT INTO `customers` VALUES ('FURIB', 'Furia Bacalhau e Frutos do Mar', 'Lino Rodriguez', 'Sales Manager', 'Jardim das rosas n. 32', 'Lisboa', NULL, '1675', 'Portugal', '(1) 354-2535');\nINSERT INTO `customers` VALUES ('GALED', 'Galería del gastrónomo', 'Eduardo Saavedra', 'Marketing Manager', 'Rambla de Cataluña, 23', 'Barcelona', NULL, '8022', 'Spain', '(93) 203 4561');\nINSERT INTO `customers` VALUES ('GODOS', 'Godos Cocina Típica', 'José Pedro Freyre', 'Sales Manager', 'C/ Romero, 33', 'Sevilla', NULL, '41101', 'Spain', NULL);\nINSERT INTO `customers` VALUES ('GOURL', 'Gourmet Lanchonetes', 'André Fonseca', 'Sales Associate', 'Av. Brasil, 442', 'Campinas', 'SP', '04876-786', 'Brazil', NULL);\nINSERT INTO `customers` VALUES ('GREAL', 'Great Lakes Food Market', 'Howard Snyder', 'Marketing Manager', '2732 Baker Blvd.', 'Eugene', 'OR', '97403', 'USA', NULL);\nINSERT INTO `customers` VALUES ('GROSR', 'GROSELLA-Restaurante', 'Manuel Pereira', 'Owner', '5ª Ave. Los Palos Grandes', 'Caracas', 'DF', '1081', 'Venezuela', '(2) 283-3397');\nINSERT INTO `customers` VALUES ('HANAR', 'Hanari Carnes', 'Mario Pontes', 'Accounting Manager', 'Rua do Paço, 67', 'Rio de Janeiro', 'RJ', '05454-876', 'Brazil', '(21) 555-8765');\nINSERT INTO `customers` VALUES ('HILAA', 'HILARION-Abastos', 'Carlos Hernández', 'Sales Representative', 'Carrera 22 con Ave. Carlos Soublette #8-35', 'San Cristóbal', 'Táchira', '5022', 'Venezuela', '(5) 555-1948');\nINSERT INTO `customers` VALUES ('HUNGC', 'Hungry Coyote Import Store', 'Yoshi Latimer', 'Sales Representative', 'City Center Plaza 516 Main St.', 'Elgin', 'OR', '97827', 'USA', '(503) 555-2376');\nINSERT INTO `customers` VALUES ('HUNGO', 'Hungry Owl All-Night Grocers', 'Patricia McKenna', 'Sales Associate', '8 Johnstown Road', 'Cork', 'Co. Cork', 'null', 'Ireland', '2967 3333');\nINSERT INTO `customers` VALUES ('ISLAT', 'Island Trading', 'Helen Bennett', 'Marketing Manager', 'Garden House Crowther Way', 'Cowes', 'Isle of Wight', 'PO31 7PJ', 'UK', NULL);\nINSERT INTO `customers` VALUES ('KOENE', 'Königlich Essen', 'Philip Cramer', 'Sales Associate', 'Maubelstr. 90', 'Brandenburg', NULL, '14776', 'Germany', NULL);\nINSERT INTO `customers` VALUES ('LACOR', 'La corne d\\'abondance', 'Daniel Tonini', 'Sales Representative', '67, avenue de l\\'Europe', 'Versailles', NULL, '78000', 'France', '30.59.85.11');\nINSERT INTO `customers` VALUES ('LAMAI', 'La maison d\\'Asie', 'Annette Roulet', 'Sales Manager', '1 rue Alsace-Lorraine', 'Toulouse', NULL, '31000', 'France', '61.77.61.11');\nINSERT INTO `customers` VALUES ('LAUGB', 'Laughing Bacchus Wine Cellars', 'Yoshi Tannamuri', 'Marketing Assistant', '1900 Oak St.', 'Vancouver', 'BC', 'V3F 2K1', 'Canada', '(604) 555-7293');\nINSERT INTO `customers` VALUES ('LAZYK', 'Lazy K Kountry Store', 'John Steel', 'Marketing Manager', '12 Orchestra Terrace', 'Walla Walla', 'WA', '99362', 'USA', '(509) 555-6221');\nINSERT INTO `customers` VALUES ('LEHMS', 'Lehmanns Marktstand', 'Renate Messner', 'Sales Representative', 'Magazinweg 7', 'Frankfurt a.M.', NULL, '60528', 'Germany', '069-0245874');\nINSERT INTO `customers` VALUES ('LETSS', 'Let\\'s Stop N Shop', 'Jaime Yorres', 'Owner', '87 Polk St. Suite 5', 'San Francisco', 'CA', '94117', 'USA', NULL);\nINSERT INTO `customers` VALUES ('LILAS', 'LILA-Supermercado', 'Carlos González', 'Accounting Manager', 'Carrera 52 con Ave. Bolívar #65-98 Llano Largo', 'Barquisimeto', 'Lara', '3508', 'Venezuela', '(9) 331-7256');\nINSERT INTO `customers` VALUES ('LINOD', 'LINO-Delicateses', 'Felipe Izquierdo', 'Owner', 'Ave. 5 de Mayo Porlamar', 'I. de Margarita', 'Nueva Esparta', '4980', 'Venezuela', '(8) 34-93-93');\nINSERT INTO `customers` VALUES ('LONEP', 'Lonesome Pine Restaurant', 'Fran Wilson', 'Sales Manager', '89 Chiaroscuro Rd.', 'Portland', 'OR', '97219', 'USA', '(503) 555-9646');\nINSERT INTO `customers` VALUES ('MAGAA', 'Magazzini Alimentari Riuniti', 'Giovanni Rovelli', 'Marketing Manager', 'Via Ludovico il Moro 22', 'Bergamo', NULL, '24100', 'Italy', '035-640231');\nINSERT INTO `customers` VALUES ('MAISD', 'Maison Dewey', 'Catherine Dewey', 'Sales Agent', 'Rue Joseph-Bens 532', 'Bruxelles', NULL, 'B-1180', 'Belgium', '(02) 201 24 68');\nINSERT INTO `customers` VALUES ('MEREP', 'Mère Paillarde', 'Jean Fresnière', 'Marketing Assistant', '43 rue St. Laurent', 'Montréal', 'Québec', 'H1J 1C3', 'Canada', '(514) 555-8055');\nINSERT INTO `customers` VALUES ('MORGK', 'Morgenstern Gesundkost', 'Alexander Feuer', 'Marketing Assistant', 'Heerstr. 22', 'Leipzig', NULL, '4179', 'Germany', NULL);\nINSERT INTO `customers` VALUES ('NORTS', 'North/South', 'Simon Crowther', 'Sales Associate', 'South House 300 Queensbridge', 'London', NULL, 'SW7 1RZ', 'UK', '(171) 555-2530');\nINSERT INTO `customers` VALUES ('OCEAN', 'Océano Atlántico Ltda.', 'Yvonne Moncada', 'Sales Agent', 'Ing. Gustavo Moncada 8585 Piso 20-A', 'Buenos Aires', NULL, '1010', 'Argentina', '(1) 135-5535');\nINSERT INTO `customers` VALUES ('OLDWO', 'Old World Delicatessen', 'Rene Phillips', 'Sales Representative', '2743 Bering St.', 'Anchorage', 'AK', '99508', 'USA', '(907) 555-2880');\nINSERT INTO `customers` VALUES ('OTTIK', 'Ottilies Käseladen', 'Henriette Pfalzheim', 'Owner', 'Mehrheimerstr. 369', 'Köln', NULL, '50739', 'Germany', '0221-0765721');\nINSERT INTO `customers` VALUES ('PARIS', 'Paris spécialités', 'Marie Bertrand', 'Owner', '265, boulevard Charonne', 'Paris', NULL, '75012', 'France', '(1) 42.34.22.77');\nINSERT INTO `customers` VALUES ('PERIC', 'Pericles Comidas clásicas', 'Guillermo Fernández', 'Sales Representative', 'Calle Dr. Jorge Cash 321', 'México D.F.', NULL, '5033', 'Mexico', '(5) 545-3745');\nINSERT INTO `customers` VALUES ('PICCO', 'Piccolo und mehr', 'Georg Pipps', 'Sales Manager', 'Geislweg 14', 'Salzburg', NULL, '5020', 'Austria', '6562-9723');\nINSERT INTO `customers` VALUES ('PRINI', 'Princesa Isabel Vinhos', 'Isabel de Castro', 'Sales Representative', 'Estrada da saúde n. 58', 'Lisboa', NULL, '1756', 'Portugal', NULL);\nINSERT INTO `customers` VALUES ('QUEDE', 'Que Delícia', 'Bernardo Batista', 'Accounting Manager', 'Rua da Panificadora, 12', 'Rio de Janeiro', 'RJ', '02389-673', 'Brazil', '(21) 555-4545');\nINSERT INTO `customers` VALUES ('QUEEN', 'Queen Cozinha', 'Lúcia Carvalho', 'Marketing Assistant', 'Alameda dos Canàrios, 891', 'Sao Paulo', 'SP', '05487-020', 'Brazil', NULL);\nINSERT INTO `customers` VALUES ('QUICK', 'QUICK-Stop', 'Horst Kloss', 'Accounting Manager', 'Taucherstraße 10', 'Cunewalde', NULL, '1307', 'Germany', NULL);\nINSERT INTO `customers` VALUES ('RANCH', 'Rancho grande', 'Sergio Gutiérrez', 'Sales Representative', 'Av. del Libertador 900', 'Buenos Aires', NULL, '1010', 'Argentina', '(1) 123-5556');\nINSERT INTO `customers` VALUES ('RATTC', 'Rattlesnake Canyon Grocery', 'Paula Wilson', 'Assistant Sales Representative', '2817 Milton Dr.', 'Albuquerque', 'NM', '87110', 'USA', '(505) 555-3620');\nINSERT INTO `customers` VALUES ('REGGC', 'Reggiani Caseifici', 'Maurizio Moroni', 'Sales Associate', 'Strada Provinciale 124', 'Reggio Emilia', NULL, '42100', 'Italy', '0522-556722');\nINSERT INTO `customers` VALUES ('RICAR', 'Ricardo Adocicados', 'Janete Limeira', 'Assistant Sales Agent', 'Av. Copacabana, 267', 'Rio de Janeiro', 'RJ', '02389-890', 'Brazil', NULL);\nINSERT INTO `customers` VALUES ('RICSU', 'Richter Supermarkt', 'Michael Holz', 'Sales Manager', 'Grenzacherweg 237', 'Genève', NULL, '1203', 'Switzerland', NULL);\nINSERT INTO `customers` VALUES ('ROMEY', 'Romero y tomillo', 'Alejandra Camino', 'Accounting Manager', 'Gran Vía, 1', 'Madrid', NULL, '28001', 'Spain', '(91) 745 6210');\nINSERT INTO `customers` VALUES ('SANTG', 'Santé Gourmet', 'Jonas Bergulfsen', 'Owner', 'Erling Skakkes gate 78', 'Stavern', NULL, '4110', 'Norway', '07-98 92 47');\nINSERT INTO `customers` VALUES ('SAVEA', 'Save-a-lot Markets', 'Jose Pavarotti', 'Sales Representative', '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA', NULL);\nINSERT INTO `customers` VALUES ('SEVES', 'Seven Seas Imports', 'Hari Kumar', 'Sales Manager', '90 Wadhurst Rd.', 'London', NULL, 'OX15 4NB', 'UK', '(171) 555-5646');\nINSERT INTO `customers` VALUES ('SIMOB', 'Simons bistro', 'Jytte Petersen', 'Owner', 'Vinbæltet 34', 'Kobenhavn', NULL, '1734', 'Denmark', '31 13 35 57');\nINSERT INTO `customers` VALUES ('SPECD', 'Spécialités du monde', 'Dominique Perrier', 'Marketing Manager', '25, rue Lauriston', 'Paris', NULL, '75016', 'France', '(1) 47.55.60.20');\nINSERT INTO `customers` VALUES ('SPLIR', 'Split Rail Beer & Ale', 'Art Braunschweiger', 'Sales Manager', 'P.O. Box 555', 'Lander', 'WY', '82520', 'USA', '(307) 555-6525');\nINSERT INTO `customers` VALUES ('SUPRD', 'Suprêmes délices', 'Pascale Cartrain', 'Accounting Manager', 'Boulevard Tirou, 255', 'Charleroi', NULL, 'B-6000', 'Belgium', '(071) 23 67 22 21');\nINSERT INTO `customers` VALUES ('THEBI', 'The Big Cheese', 'Liz Nixon', 'Marketing Manager', '89 Jefferson Way Suite 2', 'Portland', 'OR', '97201', 'USA', NULL);\nINSERT INTO `customers` VALUES ('THECR', 'The Cracker Box', 'Liu Wong', 'Marketing Assistant', '55 Grizzly Peak Rd.', 'Butte', 'MT', '59801', 'USA', '(406) 555-8083');\nINSERT INTO `customers` VALUES ('TOMSP', 'Toms Spezialitäten', 'Karin Josephs', 'Marketing Manager', 'Luisenstr. 48', 'Münster', NULL, '44087', 'Germany', '0251-035695');\nINSERT INTO `customers` VALUES ('TORTU', 'Tortuga Restaurante', 'Miguel Angel Paolino', 'Owner', 'Avda. Azteca 123', 'México D.F.', NULL, '5033', 'Mexico', NULL);\nINSERT INTO `customers` VALUES ('TRADH', 'Tradição Hipermercados', 'Anabela Domingues', 'Sales Representative', 'Av. Inês de Castro, 414', 'Sao Paulo', 'SP', '05634-030', 'Brazil', '(11) 555-2168');\nINSERT INTO `customers` VALUES ('TRAIH', 'Trail\\'s Head Gourmet Provisioners', 'Helvetius Nagy', 'Sales Associate', '722 DaVinci Blvd.', 'Kirkland', 'WA', '98034', 'USA', '(206) 555-2174');\nINSERT INTO `customers` VALUES ('VAFFE', 'Vaffeljernet', 'Palle Ibsen', 'Sales Manager', 'Smagsloget 45', 'Århus', NULL, '8200', 'Denmark', '86 22 33 44');\nINSERT INTO `customers` VALUES ('VICTE', 'Victuailles en stock', 'Mary Saveley', 'Sales Agent', '2, rue du Commerce', 'Lyon', NULL, '69004', 'France', '78.32.54.87');\nINSERT INTO `customers` VALUES ('VINET', 'Vins et alcools Chevalier', 'Paul Henriot', 'Accounting Manager', '59 rue de l\\'Abbaye', 'Reims', NULL, '51100', 'France', '26.47.15.11');\nINSERT INTO `customers` VALUES ('WANDK', 'Die Wandernde Kuh', 'Rita Müller', 'Sales Representative', 'Adenauerallee 900', 'Stuttgart', NULL, '70563', 'Germany', '0711-035428');\nINSERT INTO `customers` VALUES ('WARTH', 'Wartian Herkku', 'Pirkko Koskitalo', 'Accounting Manager', 'Torikatu 38', 'Oulu', NULL, '90110', 'Finland', '981-443655');\nINSERT INTO `customers` VALUES ('WELLI', 'Wellington Importadora', 'Paula Parente', 'Sales Manager', 'Rua do Mercado, 12', 'Resende', 'SP', '08737-363', 'Brazil', NULL);\nINSERT INTO `customers` VALUES ('WHITC', 'White Clover Markets', 'Karl Jablonski', 'Owner', '305 - 14th Ave. S. Suite 3B', 'Seattle', 'WA', '98128', 'USA', '(206) 555-4115');\nINSERT INTO `customers` VALUES ('WILMK', 'Wilman Kala', 'Matti Karttunen', 'Owner/Marketing Assistant', 'Keskuskatu 45', 'Helsinki', NULL, '21240', 'Finland', '90-224 8858');\nINSERT INTO `customers` VALUES ('WOLZA', 'Wolski Zajazd', 'Zbyszek Piestrzeniewicz', 'Owner', 'ul. Filtrowa 68', 'Warszawa', NULL, '01-012', 'Poland', '(26) 642-7012');\nCOMMIT;\n\n-- ----------------------------\n-- Table structure for employees\n-- ----------------------------\nDROP TABLE IF EXISTS `employees`;\nCREATE TABLE `employees` (\n  `employee_id` int NOT NULL,\n  `last_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `first_name` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `title` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `birth_date` datetime DEFAULT NULL,\n  `hire_date` datetime DEFAULT NULL,\n  `address` varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `city` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `region` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `postal_code` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `country` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `reports_to` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  PRIMARY KEY (`employee_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n\n-- ----------------------------\n-- Records of employees\n-- ----------------------------\nBEGIN;\nINSERT INTO `employees` VALUES (1, 'Davolio', 'Nancy', 'Sales Representative', '1968-12-08 00:00:00', '2012-05-01 00:00:00', '507 - 20th Ave. E. Apt. 2A', 'Seattle', 'WA', '98122', 'USA', '2');\nINSERT INTO `employees` VALUES (2, 'Fuller', 'Andrew', 'Vice President, Sales', '1972-02-19 00:00:00', '2012-08-14 00:00:00', '908 W. Capital Way', 'Tacoma', 'WA', '98401', 'USA', NULL);\nINSERT INTO `employees` VALUES (3, 'Smith', 'John', 'Sales Representative', '1983-08-30 00:00:00', '2012-04-01 00:00:00', '722 Moss Bay Blvd.', 'Kirkland', 'WA', '98033', 'USA', '2');\nINSERT INTO `employees` VALUES (4, 'Peacock', 'Margaret', 'Sales Representative', '1957-09-19 00:00:00', '2013-05-03 00:00:00', '4110 Old Redmond Rd.', 'Redmond', 'WA', '98052', 'USA', '2');\nINSERT INTO `employees` VALUES (5, 'Buchanan', 'Steven', 'Sales Manager', '1975-03-04 00:00:00', '2013-10-17 00:00:00', '14 Garrett Hill', 'London', 'null', 'SW1 8JR', 'UK', '2');\nINSERT INTO `employees` VALUES (6, 'Suyama', 'Michael', 'Sales Representative', '1983-07-02 00:00:00', '2013-10-17 00:00:00', 'Coventry House Miner Rd.', 'London', 'null', 'EC2 7JR', 'UK', '5');\nINSERT INTO `employees` VALUES (7, 'King', 'Robert', 'Sales Representative', '1980-05-29 00:00:00', '2014-01-02 00:00:00', 'Edgeham Hollow Winchester Way', 'London', 'null', 'RG1 9SP', 'UK', '5');\nINSERT INTO `employees` VALUES (8, 'Callahan', 'Laura', 'Inside Sales Coordinator', '1978-01-09 00:00:00', '2014-03-05 00:00:00', '4726 - 11th Ave. N.E.', 'Seattle', 'WA', '98105', 'USA', '2');\nINSERT INTO `employees` VALUES (9, 'Dodsworth', 'Anne', 'Sales Representative', '1986-01-27 00:00:00', '2014-11-15 00:00:00', '7 Houndstooth Rd.', 'London', 'null', 'WG2 7LT', 'UK', '5');\nINSERT INTO `employees` VALUES (10, 'Smith', 'John', 'Sales Representative', '1994-08-30 00:00:00', '2017-03-21 00:00:00', '22 Abbey Rd', 'London', 'null', 'NW6 5JG', 'UK', '2');\nCOMMIT;\n\n-- ----------------------------\n-- Table structure for order_items\n-- ----------------------------\nDROP TABLE IF EXISTS `order_items`;\nCREATE TABLE `order_items` (\n  `order_id` int NOT NULL,\n  `product_id` int NOT NULL,\n  `unit_price` decimal(10,2) DEFAULT NULL,\n  `quantity` smallint DEFAULT NULL,\n  `discount` double(24,2) DEFAULT NULL,\n  PRIMARY KEY (`order_id`,`product_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n\n-- ----------------------------\n-- Records of order_items\n-- ----------------------------\nBEGIN;\nINSERT INTO `order_items` VALUES (10248, 11, 14.00, 12, 0.00);\nINSERT INTO `order_items` VALUES (10248, 42, 9.80, 10, 0.00);\nINSERT INTO `order_items` VALUES (10248, 72, 34.80, 5, 0.00);\nINSERT INTO `order_items` VALUES (10249, 14, 18.60, 9, 0.00);\nINSERT INTO `order_items` VALUES (10249, 51, 42.40, 40, 0.00);\nINSERT INTO `order_items` VALUES (10250, 41, 7.70, 10, 0.00);\nINSERT INTO `order_items` VALUES (10250, 51, 42.40, 35, 0.15);\nINSERT INTO `order_items` VALUES (10250, 65, 16.80, 15, 0.15);\nINSERT INTO `order_items` VALUES (10251, 22, 16.80, 6, 0.05);\nINSERT INTO `order_items` VALUES (10251, 57, 15.60, 15, 0.05);\nINSERT INTO `order_items` VALUES (10251, 65, 16.80, 20, 0.00);\nINSERT INTO `order_items` VALUES (10252, 20, 64.80, 40, 0.05);\nINSERT INTO `order_items` VALUES (10252, 33, 2.00, 25, 0.05);\nINSERT INTO `order_items` VALUES (10252, 60, 27.20, 40, 0.00);\nINSERT INTO `order_items` VALUES (10253, 31, 10.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10253, 39, 14.40, 42, 0.00);\nINSERT INTO `order_items` VALUES (10253, 49, 16.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10254, 24, 3.60, 15, 0.15);\nINSERT INTO `order_items` VALUES (10254, 55, 19.20, 21, 0.15);\nINSERT INTO `order_items` VALUES (10254, 74, 8.00, 21, 0.00);\nINSERT INTO `order_items` VALUES (10255, 2, 15.20, 20, 0.00);\nINSERT INTO `order_items` VALUES (10255, 16, 13.90, 35, 0.00);\nINSERT INTO `order_items` VALUES (10255, 36, 15.20, 25, 0.00);\nINSERT INTO `order_items` VALUES (10255, 59, 44.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10256, 53, 26.20, 15, 0.00);\nINSERT INTO `order_items` VALUES (10256, 77, 10.40, 12, 0.00);\nINSERT INTO `order_items` VALUES (10257, 27, 35.10, 25, 0.00);\nINSERT INTO `order_items` VALUES (10257, 39, 14.40, 6, 0.00);\nINSERT INTO `order_items` VALUES (10257, 77, 10.40, 15, 0.00);\nINSERT INTO `order_items` VALUES (10258, 2, 15.20, 50, 0.20);\nINSERT INTO `order_items` VALUES (10258, 5, 17.00, 65, 0.20);\nINSERT INTO `order_items` VALUES (10258, 32, 25.60, 6, 0.20);\nINSERT INTO `order_items` VALUES (10259, 21, 8.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10259, 37, 20.80, 1, 0.00);\nINSERT INTO `order_items` VALUES (10260, 41, 7.70, 16, 0.25);\nINSERT INTO `order_items` VALUES (10260, 57, 15.60, 50, 0.00);\nINSERT INTO `order_items` VALUES (10260, 62, 39.40, 15, 0.25);\nINSERT INTO `order_items` VALUES (10260, 70, 12.00, 21, 0.25);\nINSERT INTO `order_items` VALUES (10261, 21, 8.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10261, 35, 14.40, 20, 0.00);\nINSERT INTO `order_items` VALUES (10262, 5, 17.00, 12, 0.20);\nINSERT INTO `order_items` VALUES (10262, 7, 24.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10262, 56, 30.40, 2, 0.00);\nINSERT INTO `order_items` VALUES (10263, 16, 13.90, 60, 0.25);\nINSERT INTO `order_items` VALUES (10263, 24, 3.60, 28, 0.00);\nINSERT INTO `order_items` VALUES (10263, 30, 20.70, 60, 0.25);\nINSERT INTO `order_items` VALUES (10263, 74, 8.00, 36, 0.25);\nINSERT INTO `order_items` VALUES (10264, 2, 15.20, 35, 0.00);\nINSERT INTO `order_items` VALUES (10264, 41, 7.70, 25, 0.15);\nINSERT INTO `order_items` VALUES (10265, 17, 31.20, 30, 0.00);\nINSERT INTO `order_items` VALUES (10265, 70, 12.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10266, 12, 30.40, 12, 0.05);\nINSERT INTO `order_items` VALUES (10267, 40, 14.70, 50, 0.00);\nINSERT INTO `order_items` VALUES (10267, 59, 44.00, 70, 0.15);\nINSERT INTO `order_items` VALUES (10267, 76, 14.40, 15, 0.15);\nINSERT INTO `order_items` VALUES (10268, 29, 99.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10268, 72, 27.80, 4, 0.00);\nINSERT INTO `order_items` VALUES (10269, 33, 2.00, 60, 0.05);\nINSERT INTO `order_items` VALUES (10269, 72, 27.80, 20, 0.05);\nINSERT INTO `order_items` VALUES (10270, 36, 15.20, 30, 0.00);\nINSERT INTO `order_items` VALUES (10270, 43, 36.80, 25, 0.00);\nINSERT INTO `order_items` VALUES (10271, 33, 2.00, 24, 0.00);\nINSERT INTO `order_items` VALUES (10272, 20, 64.80, 6, 0.00);\nINSERT INTO `order_items` VALUES (10272, 31, 10.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10272, 72, 27.80, 24, 0.00);\nINSERT INTO `order_items` VALUES (10273, 10, 24.80, 24, 0.05);\nINSERT INTO `order_items` VALUES (10273, 31, 10.00, 15, 0.05);\nINSERT INTO `order_items` VALUES (10273, 33, 2.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10273, 40, 14.70, 60, 0.05);\nINSERT INTO `order_items` VALUES (10273, 76, 14.40, 33, 0.05);\nINSERT INTO `order_items` VALUES (10274, 71, 17.20, 20, 0.00);\nINSERT INTO `order_items` VALUES (10274, 72, 27.80, 7, 0.00);\nINSERT INTO `order_items` VALUES (10275, 24, 3.60, 12, 0.05);\nINSERT INTO `order_items` VALUES (10275, 59, 44.00, 6, 0.05);\nINSERT INTO `order_items` VALUES (10276, 10, 24.80, 15, 0.00);\nINSERT INTO `order_items` VALUES (10276, 13, 4.80, 10, 0.00);\nINSERT INTO `order_items` VALUES (10277, 28, 36.40, 20, 0.00);\nINSERT INTO `order_items` VALUES (10277, 62, 39.40, 12, 0.00);\nINSERT INTO `order_items` VALUES (10278, 44, 15.50, 16, 0.00);\nINSERT INTO `order_items` VALUES (10278, 59, 44.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10278, 63, 35.10, 8, 0.00);\nINSERT INTO `order_items` VALUES (10278, 73, 12.00, 25, 0.00);\nINSERT INTO `order_items` VALUES (10279, 17, 31.20, 15, 0.25);\nINSERT INTO `order_items` VALUES (10280, 24, 3.60, 12, 0.00);\nINSERT INTO `order_items` VALUES (10280, 55, 19.20, 20, 0.00);\nINSERT INTO `order_items` VALUES (10280, 75, 6.20, 30, 0.00);\nINSERT INTO `order_items` VALUES (10281, 19, 7.30, 1, 0.00);\nINSERT INTO `order_items` VALUES (10281, 24, 3.60, 6, 0.00);\nINSERT INTO `order_items` VALUES (10281, 35, 14.40, 4, 0.00);\nINSERT INTO `order_items` VALUES (10282, 30, 20.70, 6, 0.00);\nINSERT INTO `order_items` VALUES (10282, 57, 15.60, 2, 0.00);\nINSERT INTO `order_items` VALUES (10283, 15, 12.40, 20, 0.00);\nINSERT INTO `order_items` VALUES (10283, 19, 7.30, 18, 0.00);\nINSERT INTO `order_items` VALUES (10283, 60, 27.20, 35, 0.00);\nINSERT INTO `order_items` VALUES (10283, 72, 27.80, 3, 0.00);\nINSERT INTO `order_items` VALUES (10284, 27, 35.10, 15, 0.25);\nINSERT INTO `order_items` VALUES (10284, 44, 15.50, 21, 0.00);\nINSERT INTO `order_items` VALUES (10284, 60, 27.20, 20, 0.25);\nINSERT INTO `order_items` VALUES (10284, 67, 11.20, 5, 0.25);\nINSERT INTO `order_items` VALUES (10285, 1, 14.40, 45, 0.20);\nINSERT INTO `order_items` VALUES (10285, 40, 14.70, 40, 0.20);\nINSERT INTO `order_items` VALUES (10285, 53, 26.20, 36, 0.20);\nINSERT INTO `order_items` VALUES (10286, 35, 14.40, 100, 0.00);\nINSERT INTO `order_items` VALUES (10286, 62, 39.40, 40, 0.00);\nINSERT INTO `order_items` VALUES (10287, 16, 13.90, 40, 0.15);\nINSERT INTO `order_items` VALUES (10287, 34, 11.20, 20, 0.00);\nINSERT INTO `order_items` VALUES (10287, 46, 9.60, 15, 0.15);\nINSERT INTO `order_items` VALUES (10288, 54, 5.90, 10, 0.10);\nINSERT INTO `order_items` VALUES (10288, 68, 10.00, 3, 0.10);\nINSERT INTO `order_items` VALUES (10289, 3, 8.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10289, 64, 26.60, 9, 0.00);\nINSERT INTO `order_items` VALUES (10290, 5, 17.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10290, 29, 99.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10290, 49, 16.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10290, 77, 10.40, 10, 0.00);\nINSERT INTO `order_items` VALUES (10291, 13, 4.80, 20, 0.10);\nINSERT INTO `order_items` VALUES (10291, 44, 15.50, 24, 0.10);\nINSERT INTO `order_items` VALUES (10291, 51, 42.40, 2, 0.10);\nINSERT INTO `order_items` VALUES (10292, 20, 64.80, 20, 0.00);\nINSERT INTO `order_items` VALUES (10293, 18, 50.00, 12, 0.00);\nINSERT INTO `order_items` VALUES (10293, 24, 3.60, 10, 0.00);\nINSERT INTO `order_items` VALUES (10293, 63, 35.10, 5, 0.00);\nINSERT INTO `order_items` VALUES (10293, 75, 6.20, 6, 0.00);\nINSERT INTO `order_items` VALUES (10294, 1, 14.40, 18, 0.00);\nINSERT INTO `order_items` VALUES (10294, 17, 31.20, 15, 0.00);\nINSERT INTO `order_items` VALUES (10294, 43, 36.80, 15, 0.00);\nINSERT INTO `order_items` VALUES (10294, 60, 27.20, 21, 0.00);\nINSERT INTO `order_items` VALUES (10294, 75, 6.20, 6, 0.00);\nINSERT INTO `order_items` VALUES (10295, 56, 30.40, 4, 0.00);\nINSERT INTO `order_items` VALUES (10296, 11, 16.80, 12, 0.00);\nINSERT INTO `order_items` VALUES (10296, 16, 13.90, 30, 0.00);\nINSERT INTO `order_items` VALUES (10296, 69, 28.80, 15, 0.00);\nINSERT INTO `order_items` VALUES (10297, 39, 14.40, 60, 0.00);\nINSERT INTO `order_items` VALUES (10297, 72, 27.80, 20, 0.00);\nINSERT INTO `order_items` VALUES (10298, 2, 15.20, 40, 0.00);\nINSERT INTO `order_items` VALUES (10298, 36, 15.20, 40, 0.25);\nINSERT INTO `order_items` VALUES (10298, 59, 44.00, 30, 0.25);\nINSERT INTO `order_items` VALUES (10298, 62, 39.40, 15, 0.00);\nINSERT INTO `order_items` VALUES (10299, 19, 7.30, 15, 0.00);\nINSERT INTO `order_items` VALUES (10299, 70, 12.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10300, 66, 13.60, 30, 0.00);\nINSERT INTO `order_items` VALUES (10300, 68, 10.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10301, 40, 14.70, 10, 0.00);\nINSERT INTO `order_items` VALUES (10301, 56, 30.40, 20, 0.00);\nINSERT INTO `order_items` VALUES (10302, 17, 31.20, 40, 0.00);\nINSERT INTO `order_items` VALUES (10302, 28, 36.40, 28, 0.00);\nINSERT INTO `order_items` VALUES (10302, 43, 36.80, 12, 0.00);\nINSERT INTO `order_items` VALUES (10303, 40, 14.70, 40, 0.10);\nINSERT INTO `order_items` VALUES (10303, 65, 16.80, 30, 0.10);\nINSERT INTO `order_items` VALUES (10303, 68, 10.00, 15, 0.10);\nINSERT INTO `order_items` VALUES (10304, 49, 16.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10304, 59, 44.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10304, 71, 17.20, 2, 0.00);\nINSERT INTO `order_items` VALUES (10305, 18, 50.00, 25, 0.10);\nINSERT INTO `order_items` VALUES (10305, 29, 99.00, 25, 0.10);\nINSERT INTO `order_items` VALUES (10305, 39, 14.40, 30, 0.10);\nINSERT INTO `order_items` VALUES (10306, 30, 20.70, 10, 0.00);\nINSERT INTO `order_items` VALUES (10306, 53, 26.20, 10, 0.00);\nINSERT INTO `order_items` VALUES (10306, 54, 5.90, 5, 0.00);\nINSERT INTO `order_items` VALUES (10307, 62, 39.40, 10, 0.00);\nINSERT INTO `order_items` VALUES (10307, 68, 10.00, 3, 0.00);\nINSERT INTO `order_items` VALUES (10308, 69, 28.80, 1, 0.00);\nINSERT INTO `order_items` VALUES (10308, 70, 12.00, 5, 0.00);\nINSERT INTO `order_items` VALUES (10309, 4, 17.60, 20, 0.00);\nINSERT INTO `order_items` VALUES (10309, 6, 20.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10309, 42, 11.20, 2, 0.00);\nINSERT INTO `order_items` VALUES (10309, 43, 36.80, 20, 0.00);\nINSERT INTO `order_items` VALUES (10309, 71, 17.20, 3, 0.00);\nINSERT INTO `order_items` VALUES (10310, 16, 13.90, 10, 0.00);\nINSERT INTO `order_items` VALUES (10310, 62, 39.40, 5, 0.00);\nINSERT INTO `order_items` VALUES (10311, 42, 11.20, 6, 0.00);\nINSERT INTO `order_items` VALUES (10311, 69, 28.80, 7, 0.00);\nINSERT INTO `order_items` VALUES (10312, 28, 36.40, 4, 0.00);\nINSERT INTO `order_items` VALUES (10312, 43, 36.80, 24, 0.00);\nINSERT INTO `order_items` VALUES (10312, 53, 26.20, 20, 0.00);\nINSERT INTO `order_items` VALUES (10312, 75, 6.20, 10, 0.00);\nINSERT INTO `order_items` VALUES (10313, 36, 15.20, 12, 0.00);\nINSERT INTO `order_items` VALUES (10314, 32, 25.60, 40, 0.10);\nINSERT INTO `order_items` VALUES (10314, 58, 10.60, 30, 0.10);\nINSERT INTO `order_items` VALUES (10314, 62, 39.40, 25, 0.10);\nINSERT INTO `order_items` VALUES (10315, 34, 11.20, 14, 0.00);\nINSERT INTO `order_items` VALUES (10315, 70, 12.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10316, 41, 7.70, 10, 0.00);\nINSERT INTO `order_items` VALUES (10316, 62, 39.40, 70, 0.00);\nINSERT INTO `order_items` VALUES (10317, 1, 14.40, 20, 0.00);\nINSERT INTO `order_items` VALUES (10318, 41, 7.70, 20, 0.00);\nINSERT INTO `order_items` VALUES (10318, 76, 14.40, 6, 0.00);\nINSERT INTO `order_items` VALUES (10319, 17, 31.20, 8, 0.00);\nINSERT INTO `order_items` VALUES (10319, 28, 36.40, 14, 0.00);\nINSERT INTO `order_items` VALUES (10319, 76, 14.40, 30, 0.00);\nINSERT INTO `order_items` VALUES (10320, 71, 17.20, 30, 0.00);\nINSERT INTO `order_items` VALUES (10321, 35, 14.40, 10, 0.00);\nINSERT INTO `order_items` VALUES (10322, 52, 5.60, 20, 0.00);\nINSERT INTO `order_items` VALUES (10323, 15, 12.40, 5, 0.00);\nINSERT INTO `order_items` VALUES (10323, 25, 11.20, 4, 0.00);\nINSERT INTO `order_items` VALUES (10323, 39, 14.40, 4, 0.00);\nINSERT INTO `order_items` VALUES (10324, 16, 13.90, 21, 0.15);\nINSERT INTO `order_items` VALUES (10324, 35, 14.40, 70, 0.15);\nINSERT INTO `order_items` VALUES (10324, 46, 9.60, 30, 0.00);\nINSERT INTO `order_items` VALUES (10324, 59, 44.00, 40, 0.15);\nINSERT INTO `order_items` VALUES (10324, 63, 35.10, 80, 0.15);\nINSERT INTO `order_items` VALUES (10325, 6, 20.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10325, 13, 4.80, 12, 0.00);\nINSERT INTO `order_items` VALUES (10325, 14, 18.60, 9, 0.00);\nINSERT INTO `order_items` VALUES (10325, 31, 10.00, 4, 0.00);\nINSERT INTO `order_items` VALUES (10325, 72, 27.80, 40, 0.00);\nINSERT INTO `order_items` VALUES (10326, 4, 17.60, 24, 0.00);\nINSERT INTO `order_items` VALUES (10326, 57, 15.60, 16, 0.00);\nINSERT INTO `order_items` VALUES (10326, 75, 6.20, 50, 0.00);\nINSERT INTO `order_items` VALUES (10327, 2, 15.20, 25, 0.20);\nINSERT INTO `order_items` VALUES (10327, 11, 16.80, 50, 0.20);\nINSERT INTO `order_items` VALUES (10327, 30, 20.70, 35, 0.20);\nINSERT INTO `order_items` VALUES (10327, 58, 10.60, 30, 0.20);\nINSERT INTO `order_items` VALUES (10328, 59, 44.00, 9, 0.00);\nINSERT INTO `order_items` VALUES (10328, 65, 16.80, 40, 0.00);\nINSERT INTO `order_items` VALUES (10328, 68, 10.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10329, 19, 7.30, 10, 0.05);\nINSERT INTO `order_items` VALUES (10329, 30, 20.70, 8, 0.05);\nINSERT INTO `order_items` VALUES (10329, 38, 210.80, 20, 0.05);\nINSERT INTO `order_items` VALUES (10329, 56, 30.40, 12, 0.05);\nINSERT INTO `order_items` VALUES (10330, 26, 24.90, 50, 0.15);\nINSERT INTO `order_items` VALUES (10330, 72, 27.80, 25, 0.15);\nINSERT INTO `order_items` VALUES (10331, 54, 5.90, 15, 0.00);\nINSERT INTO `order_items` VALUES (10332, 18, 50.00, 40, 0.20);\nINSERT INTO `order_items` VALUES (10332, 42, 11.20, 10, 0.20);\nINSERT INTO `order_items` VALUES (10332, 47, 7.60, 16, 0.20);\nINSERT INTO `order_items` VALUES (10333, 14, 18.60, 10, 0.00);\nINSERT INTO `order_items` VALUES (10333, 21, 8.00, 10, 0.10);\nINSERT INTO `order_items` VALUES (10333, 71, 17.20, 40, 0.10);\nINSERT INTO `order_items` VALUES (10334, 52, 5.60, 8, 0.00);\nINSERT INTO `order_items` VALUES (10334, 68, 10.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10335, 2, 15.20, 7, 0.20);\nINSERT INTO `order_items` VALUES (10335, 31, 10.00, 25, 0.20);\nINSERT INTO `order_items` VALUES (10335, 32, 25.60, 6, 0.20);\nINSERT INTO `order_items` VALUES (10335, 51, 42.40, 48, 0.20);\nINSERT INTO `order_items` VALUES (10336, 4, 17.60, 18, 0.10);\nINSERT INTO `order_items` VALUES (10337, 23, 7.20, 40, 0.00);\nINSERT INTO `order_items` VALUES (10337, 26, 24.90, 24, 0.00);\nINSERT INTO `order_items` VALUES (10337, 36, 15.20, 20, 0.00);\nINSERT INTO `order_items` VALUES (10337, 37, 20.80, 28, 0.00);\nINSERT INTO `order_items` VALUES (10337, 72, 27.80, 25, 0.00);\nINSERT INTO `order_items` VALUES (10338, 17, 31.20, 20, 0.00);\nINSERT INTO `order_items` VALUES (10338, 30, 20.70, 15, 0.00);\nINSERT INTO `order_items` VALUES (10339, 4, 17.60, 10, 0.00);\nINSERT INTO `order_items` VALUES (10339, 17, 31.20, 70, 0.05);\nINSERT INTO `order_items` VALUES (10339, 62, 39.40, 28, 0.00);\nINSERT INTO `order_items` VALUES (10340, 18, 50.00, 20, 0.05);\nINSERT INTO `order_items` VALUES (10340, 41, 7.70, 12, 0.05);\nINSERT INTO `order_items` VALUES (10340, 43, 36.80, 40, 0.05);\nINSERT INTO `order_items` VALUES (10341, 33, 2.00, 8, 0.00);\nINSERT INTO `order_items` VALUES (10341, 59, 44.00, 9, 0.15);\nINSERT INTO `order_items` VALUES (10342, 2, 15.20, 24, 0.20);\nINSERT INTO `order_items` VALUES (10342, 31, 10.00, 56, 0.20);\nINSERT INTO `order_items` VALUES (10342, 36, 15.20, 40, 0.20);\nINSERT INTO `order_items` VALUES (10342, 55, 19.20, 40, 0.20);\nINSERT INTO `order_items` VALUES (10343, 64, 26.60, 50, 0.00);\nINSERT INTO `order_items` VALUES (10343, 68, 10.00, 4, 0.05);\nINSERT INTO `order_items` VALUES (10343, 76, 14.40, 15, 0.00);\nINSERT INTO `order_items` VALUES (10344, 4, 17.60, 35, 0.00);\nINSERT INTO `order_items` VALUES (10344, 8, 32.00, 70, 0.25);\nINSERT INTO `order_items` VALUES (10345, 8, 32.00, 70, 0.00);\nINSERT INTO `order_items` VALUES (10345, 19, 7.30, 80, 0.00);\nINSERT INTO `order_items` VALUES (10345, 42, 11.20, 9, 0.00);\nINSERT INTO `order_items` VALUES (10346, 17, 31.20, 36, 0.10);\nINSERT INTO `order_items` VALUES (10346, 56, 30.40, 20, 0.00);\nINSERT INTO `order_items` VALUES (10347, 25, 11.20, 10, 0.00);\nINSERT INTO `order_items` VALUES (10347, 39, 14.40, 50, 0.15);\nINSERT INTO `order_items` VALUES (10347, 40, 14.70, 4, 0.00);\nINSERT INTO `order_items` VALUES (10347, 75, 6.20, 6, 0.15);\nINSERT INTO `order_items` VALUES (10348, 1, 14.40, 15, 0.15);\nINSERT INTO `order_items` VALUES (10348, 23, 7.20, 25, 0.00);\nINSERT INTO `order_items` VALUES (10349, 54, 5.90, 24, 0.00);\nINSERT INTO `order_items` VALUES (10350, 50, 13.00, 15, 0.10);\nINSERT INTO `order_items` VALUES (10350, 69, 28.80, 18, 0.10);\nINSERT INTO `order_items` VALUES (10351, 38, 210.80, 20, 0.05);\nINSERT INTO `order_items` VALUES (10351, 41, 7.70, 13, 0.00);\nINSERT INTO `order_items` VALUES (10351, 44, 15.50, 77, 0.05);\nINSERT INTO `order_items` VALUES (10351, 65, 16.80, 10, 0.05);\nINSERT INTO `order_items` VALUES (10352, 24, 3.60, 10, 0.00);\nINSERT INTO `order_items` VALUES (10352, 54, 5.90, 20, 0.15);\nINSERT INTO `order_items` VALUES (10353, 11, 16.80, 12, 0.20);\nINSERT INTO `order_items` VALUES (10353, 38, 210.80, 50, 0.20);\nINSERT INTO `order_items` VALUES (10354, 1, 14.40, 12, 0.00);\nINSERT INTO `order_items` VALUES (10354, 29, 99.00, 4, 0.00);\nINSERT INTO `order_items` VALUES (10355, 24, 3.60, 25, 0.00);\nINSERT INTO `order_items` VALUES (10355, 57, 15.60, 25, 0.00);\nINSERT INTO `order_items` VALUES (10356, 31, 10.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10356, 55, 19.20, 12, 0.00);\nINSERT INTO `order_items` VALUES (10356, 69, 28.80, 20, 0.00);\nINSERT INTO `order_items` VALUES (10357, 10, 24.80, 30, 0.20);\nINSERT INTO `order_items` VALUES (10357, 26, 24.90, 16, 0.00);\nINSERT INTO `order_items` VALUES (10357, 60, 27.20, 8, 0.20);\nINSERT INTO `order_items` VALUES (10358, 24, 3.60, 10, 0.05);\nINSERT INTO `order_items` VALUES (10358, 34, 11.20, 10, 0.05);\nINSERT INTO `order_items` VALUES (10358, 36, 15.20, 20, 0.05);\nINSERT INTO `order_items` VALUES (10359, 16, 13.90, 56, 0.05);\nINSERT INTO `order_items` VALUES (10359, 31, 10.00, 70, 0.05);\nINSERT INTO `order_items` VALUES (10359, 60, 27.20, 80, 0.05);\nINSERT INTO `order_items` VALUES (10360, 28, 36.40, 30, 0.00);\nINSERT INTO `order_items` VALUES (10360, 29, 99.00, 35, 0.00);\nINSERT INTO `order_items` VALUES (10360, 38, 210.80, 10, 0.00);\nINSERT INTO `order_items` VALUES (10360, 49, 16.00, 35, 0.00);\nINSERT INTO `order_items` VALUES (10360, 54, 5.90, 28, 0.00);\nINSERT INTO `order_items` VALUES (10361, 39, 14.40, 54, 0.10);\nINSERT INTO `order_items` VALUES (10361, 60, 27.20, 55, 0.10);\nINSERT INTO `order_items` VALUES (10362, 25, 11.20, 50, 0.00);\nINSERT INTO `order_items` VALUES (10362, 51, 42.40, 20, 0.00);\nINSERT INTO `order_items` VALUES (10362, 54, 5.90, 24, 0.00);\nINSERT INTO `order_items` VALUES (10363, 31, 10.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10363, 75, 6.20, 12, 0.00);\nINSERT INTO `order_items` VALUES (10363, 76, 14.40, 12, 0.00);\nINSERT INTO `order_items` VALUES (10364, 69, 28.80, 30, 0.00);\nINSERT INTO `order_items` VALUES (10364, 71, 17.20, 5, 0.00);\nINSERT INTO `order_items` VALUES (10365, 11, 16.80, 24, 0.00);\nINSERT INTO `order_items` VALUES (10366, 65, 16.80, 5, 0.00);\nINSERT INTO `order_items` VALUES (10366, 77, 10.40, 5, 0.00);\nINSERT INTO `order_items` VALUES (10367, 34, 11.20, 36, 0.00);\nINSERT INTO `order_items` VALUES (10367, 54, 5.90, 18, 0.00);\nINSERT INTO `order_items` VALUES (10367, 65, 16.80, 15, 0.00);\nINSERT INTO `order_items` VALUES (10367, 77, 10.40, 7, 0.00);\nINSERT INTO `order_items` VALUES (10368, 21, 8.00, 5, 0.10);\nINSERT INTO `order_items` VALUES (10368, 28, 36.40, 13, 0.10);\nINSERT INTO `order_items` VALUES (10368, 57, 15.60, 25, 0.00);\nINSERT INTO `order_items` VALUES (10368, 64, 26.60, 35, 0.10);\nINSERT INTO `order_items` VALUES (10369, 29, 99.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10369, 56, 30.40, 18, 0.25);\nINSERT INTO `order_items` VALUES (10370, 1, 14.40, 15, 0.15);\nINSERT INTO `order_items` VALUES (10370, 64, 26.60, 30, 0.00);\nINSERT INTO `order_items` VALUES (10370, 74, 8.00, 20, 0.15);\nINSERT INTO `order_items` VALUES (10371, 36, 15.20, 6, 0.20);\nINSERT INTO `order_items` VALUES (10372, 20, 64.80, 12, 0.25);\nINSERT INTO `order_items` VALUES (10372, 38, 210.80, 40, 0.25);\nINSERT INTO `order_items` VALUES (10372, 60, 27.20, 70, 0.25);\nINSERT INTO `order_items` VALUES (10372, 72, 27.80, 42, 0.25);\nINSERT INTO `order_items` VALUES (10373, 58, 10.60, 80, 0.20);\nINSERT INTO `order_items` VALUES (10373, 71, 17.20, 50, 0.20);\nINSERT INTO `order_items` VALUES (10374, 31, 10.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10374, 58, 10.60, 15, 0.00);\nINSERT INTO `order_items` VALUES (10375, 14, 18.60, 15, 0.00);\nINSERT INTO `order_items` VALUES (10375, 54, 5.90, 10, 0.00);\nINSERT INTO `order_items` VALUES (10376, 31, 10.00, 42, 0.05);\nINSERT INTO `order_items` VALUES (10377, 28, 36.40, 20, 0.15);\nINSERT INTO `order_items` VALUES (10377, 39, 14.40, 20, 0.15);\nINSERT INTO `order_items` VALUES (10378, 71, 17.20, 6, 0.00);\nINSERT INTO `order_items` VALUES (10379, 41, 7.70, 8, 0.10);\nINSERT INTO `order_items` VALUES (10379, 63, 35.10, 16, 0.10);\nINSERT INTO `order_items` VALUES (10379, 65, 16.80, 20, 0.10);\nINSERT INTO `order_items` VALUES (10380, 30, 20.70, 18, 0.10);\nINSERT INTO `order_items` VALUES (10380, 53, 26.20, 20, 0.10);\nINSERT INTO `order_items` VALUES (10380, 60, 27.20, 6, 0.10);\nINSERT INTO `order_items` VALUES (10380, 70, 12.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10381, 74, 8.00, 14, 0.00);\nINSERT INTO `order_items` VALUES (10382, 5, 17.00, 32, 0.00);\nINSERT INTO `order_items` VALUES (10382, 18, 50.00, 9, 0.00);\nINSERT INTO `order_items` VALUES (10382, 29, 99.00, 14, 0.00);\nINSERT INTO `order_items` VALUES (10382, 33, 2.00, 60, 0.00);\nINSERT INTO `order_items` VALUES (10382, 74, 8.00, 50, 0.00);\nINSERT INTO `order_items` VALUES (10383, 13, 4.80, 20, 0.00);\nINSERT INTO `order_items` VALUES (10383, 50, 13.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10383, 56, 30.40, 20, 0.00);\nINSERT INTO `order_items` VALUES (10384, 20, 64.80, 28, 0.00);\nINSERT INTO `order_items` VALUES (10384, 60, 27.20, 15, 0.00);\nINSERT INTO `order_items` VALUES (10385, 7, 24.00, 10, 0.20);\nINSERT INTO `order_items` VALUES (10385, 60, 27.20, 20, 0.20);\nINSERT INTO `order_items` VALUES (10385, 68, 10.00, 8, 0.20);\nINSERT INTO `order_items` VALUES (10386, 24, 3.60, 15, 0.00);\nINSERT INTO `order_items` VALUES (10386, 34, 11.20, 10, 0.00);\nINSERT INTO `order_items` VALUES (10387, 24, 3.60, 15, 0.00);\nINSERT INTO `order_items` VALUES (10387, 28, 36.40, 6, 0.00);\nINSERT INTO `order_items` VALUES (10387, 59, 44.00, 12, 0.00);\nINSERT INTO `order_items` VALUES (10387, 71, 17.20, 15, 0.00);\nINSERT INTO `order_items` VALUES (10388, 45, 7.60, 15, 0.20);\nINSERT INTO `order_items` VALUES (10388, 52, 5.60, 20, 0.20);\nINSERT INTO `order_items` VALUES (10388, 53, 26.20, 40, 0.00);\nINSERT INTO `order_items` VALUES (10389, 10, 24.80, 16, 0.00);\nINSERT INTO `order_items` VALUES (10389, 55, 19.20, 15, 0.00);\nINSERT INTO `order_items` VALUES (10389, 62, 39.40, 20, 0.00);\nINSERT INTO `order_items` VALUES (10389, 70, 12.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10390, 31, 10.00, 60, 0.10);\nINSERT INTO `order_items` VALUES (10390, 35, 14.40, 40, 0.10);\nINSERT INTO `order_items` VALUES (10390, 46, 9.60, 45, 0.00);\nINSERT INTO `order_items` VALUES (10390, 72, 27.80, 24, 0.10);\nINSERT INTO `order_items` VALUES (10391, 13, 4.80, 18, 0.00);\nINSERT INTO `order_items` VALUES (10392, 69, 28.80, 50, 0.00);\nINSERT INTO `order_items` VALUES (10393, 2, 15.20, 25, 0.25);\nINSERT INTO `order_items` VALUES (10393, 14, 18.60, 42, 0.25);\nINSERT INTO `order_items` VALUES (10393, 25, 11.20, 7, 0.25);\nINSERT INTO `order_items` VALUES (10393, 26, 24.90, 70, 0.25);\nINSERT INTO `order_items` VALUES (10393, 31, 10.00, 32, 0.00);\nINSERT INTO `order_items` VALUES (10394, 13, 4.80, 10, 0.00);\nINSERT INTO `order_items` VALUES (10394, 62, 39.40, 10, 0.00);\nINSERT INTO `order_items` VALUES (10395, 46, 9.60, 28, 0.10);\nINSERT INTO `order_items` VALUES (10395, 53, 26.20, 70, 0.10);\nINSERT INTO `order_items` VALUES (10395, 69, 28.80, 8, 0.00);\nINSERT INTO `order_items` VALUES (10396, 23, 7.20, 40, 0.00);\nINSERT INTO `order_items` VALUES (10396, 71, 17.20, 60, 0.00);\nINSERT INTO `order_items` VALUES (10396, 72, 27.80, 21, 0.00);\nINSERT INTO `order_items` VALUES (10397, 21, 8.00, 10, 0.15);\nINSERT INTO `order_items` VALUES (10397, 51, 42.40, 18, 0.15);\nINSERT INTO `order_items` VALUES (10398, 35, 14.40, 30, 0.00);\nINSERT INTO `order_items` VALUES (10398, 55, 19.20, 120, 0.10);\nINSERT INTO `order_items` VALUES (10399, 68, 10.00, 60, 0.00);\nINSERT INTO `order_items` VALUES (10399, 71, 17.20, 30, 0.00);\nINSERT INTO `order_items` VALUES (10399, 76, 14.40, 35, 0.00);\nINSERT INTO `order_items` VALUES (10399, 77, 10.40, 14, 0.00);\nINSERT INTO `order_items` VALUES (10400, 29, 99.00, 21, 0.00);\nINSERT INTO `order_items` VALUES (10400, 35, 14.40, 35, 0.00);\nINSERT INTO `order_items` VALUES (10400, 49, 16.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10401, 30, 20.70, 18, 0.00);\nINSERT INTO `order_items` VALUES (10401, 56, 30.40, 70, 0.00);\nINSERT INTO `order_items` VALUES (10401, 65, 16.80, 20, 0.00);\nINSERT INTO `order_items` VALUES (10401, 71, 17.20, 60, 0.00);\nINSERT INTO `order_items` VALUES (10402, 23, 7.20, 60, 0.00);\nINSERT INTO `order_items` VALUES (10402, 63, 35.10, 65, 0.00);\nINSERT INTO `order_items` VALUES (10403, 16, 13.90, 21, 0.15);\nINSERT INTO `order_items` VALUES (10403, 48, 10.20, 70, 0.15);\nINSERT INTO `order_items` VALUES (10404, 26, 24.90, 30, 0.05);\nINSERT INTO `order_items` VALUES (10404, 42, 11.20, 40, 0.05);\nINSERT INTO `order_items` VALUES (10404, 49, 16.00, 30, 0.05);\nINSERT INTO `order_items` VALUES (10405, 3, 8.00, 50, 0.00);\nINSERT INTO `order_items` VALUES (10406, 1, 14.40, 10, 0.00);\nINSERT INTO `order_items` VALUES (10406, 21, 8.00, 30, 0.10);\nINSERT INTO `order_items` VALUES (10406, 28, 36.40, 42, 0.10);\nINSERT INTO `order_items` VALUES (10406, 36, 15.20, 5, 0.10);\nINSERT INTO `order_items` VALUES (10406, 40, 14.70, 2, 0.10);\nINSERT INTO `order_items` VALUES (10407, 11, 16.80, 30, 0.00);\nINSERT INTO `order_items` VALUES (10407, 69, 28.80, 15, 0.00);\nINSERT INTO `order_items` VALUES (10407, 71, 17.20, 15, 0.00);\nINSERT INTO `order_items` VALUES (10408, 37, 20.80, 10, 0.00);\nINSERT INTO `order_items` VALUES (10408, 54, 5.90, 6, 0.00);\nINSERT INTO `order_items` VALUES (10408, 62, 39.40, 35, 0.00);\nINSERT INTO `order_items` VALUES (10409, 14, 18.60, 12, 0.00);\nINSERT INTO `order_items` VALUES (10409, 21, 8.00, 12, 0.00);\nINSERT INTO `order_items` VALUES (10410, 33, 2.00, 49, 0.00);\nINSERT INTO `order_items` VALUES (10410, 59, 44.00, 16, 0.00);\nINSERT INTO `order_items` VALUES (10411, 41, 7.70, 25, 0.20);\nINSERT INTO `order_items` VALUES (10411, 44, 15.50, 40, 0.20);\nINSERT INTO `order_items` VALUES (10411, 59, 44.00, 9, 0.20);\nINSERT INTO `order_items` VALUES (10412, 14, 18.60, 20, 0.10);\nINSERT INTO `order_items` VALUES (10413, 1, 14.40, 24, 0.00);\nINSERT INTO `order_items` VALUES (10413, 62, 39.40, 40, 0.00);\nINSERT INTO `order_items` VALUES (10413, 76, 14.40, 14, 0.00);\nINSERT INTO `order_items` VALUES (10414, 19, 7.30, 18, 0.05);\nINSERT INTO `order_items` VALUES (10414, 33, 2.00, 50, 0.00);\nINSERT INTO `order_items` VALUES (10415, 17, 31.20, 2, 0.00);\nINSERT INTO `order_items` VALUES (10415, 33, 2.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10416, 19, 7.30, 20, 0.00);\nINSERT INTO `order_items` VALUES (10416, 53, 26.20, 10, 0.00);\nINSERT INTO `order_items` VALUES (10416, 57, 15.60, 20, 0.00);\nINSERT INTO `order_items` VALUES (10417, 38, 210.80, 50, 0.00);\nINSERT INTO `order_items` VALUES (10417, 46, 9.60, 2, 0.25);\nINSERT INTO `order_items` VALUES (10417, 68, 10.00, 36, 0.25);\nINSERT INTO `order_items` VALUES (10417, 77, 10.40, 35, 0.00);\nINSERT INTO `order_items` VALUES (10418, 2, 15.20, 60, 0.00);\nINSERT INTO `order_items` VALUES (10418, 47, 7.60, 55, 0.00);\nINSERT INTO `order_items` VALUES (10418, 61, 22.80, 16, 0.00);\nINSERT INTO `order_items` VALUES (10418, 74, 8.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10419, 60, 27.20, 60, 0.05);\nINSERT INTO `order_items` VALUES (10419, 69, 28.80, 20, 0.05);\nINSERT INTO `order_items` VALUES (10420, 9, 77.60, 20, 0.10);\nINSERT INTO `order_items` VALUES (10420, 13, 4.80, 2, 0.10);\nINSERT INTO `order_items` VALUES (10420, 70, 12.00, 8, 0.10);\nINSERT INTO `order_items` VALUES (10420, 73, 12.00, 20, 0.10);\nINSERT INTO `order_items` VALUES (10421, 19, 7.30, 4, 0.15);\nINSERT INTO `order_items` VALUES (10421, 26, 24.90, 30, 0.00);\nINSERT INTO `order_items` VALUES (10421, 53, 26.20, 15, 0.15);\nINSERT INTO `order_items` VALUES (10421, 77, 10.40, 10, 0.15);\nINSERT INTO `order_items` VALUES (10422, 26, 24.90, 2, 0.00);\nINSERT INTO `order_items` VALUES (10423, 31, 10.00, 14, 0.00);\nINSERT INTO `order_items` VALUES (10423, 59, 44.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10424, 35, 14.40, 60, 0.20);\nINSERT INTO `order_items` VALUES (10424, 38, 210.80, 49, 0.20);\nINSERT INTO `order_items` VALUES (10424, 68, 10.00, 30, 0.20);\nINSERT INTO `order_items` VALUES (10425, 55, 19.20, 10, 0.25);\nINSERT INTO `order_items` VALUES (10425, 76, 14.40, 20, 0.25);\nINSERT INTO `order_items` VALUES (10426, 56, 30.40, 5, 0.00);\nINSERT INTO `order_items` VALUES (10426, 64, 26.60, 7, 0.00);\nINSERT INTO `order_items` VALUES (10427, 14, 18.60, 35, 0.00);\nINSERT INTO `order_items` VALUES (10428, 46, 9.60, 20, 0.00);\nINSERT INTO `order_items` VALUES (10429, 50, 13.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10429, 63, 35.10, 35, 0.25);\nINSERT INTO `order_items` VALUES (10430, 17, 31.20, 45, 0.20);\nINSERT INTO `order_items` VALUES (10430, 21, 8.00, 50, 0.00);\nINSERT INTO `order_items` VALUES (10430, 56, 30.40, 30, 0.00);\nINSERT INTO `order_items` VALUES (10430, 59, 44.00, 70, 0.20);\nINSERT INTO `order_items` VALUES (10431, 17, 31.20, 50, 0.25);\nINSERT INTO `order_items` VALUES (10431, 40, 14.70, 50, 0.25);\nINSERT INTO `order_items` VALUES (10431, 47, 7.60, 30, 0.25);\nINSERT INTO `order_items` VALUES (10432, 26, 24.90, 10, 0.00);\nINSERT INTO `order_items` VALUES (10432, 54, 5.90, 40, 0.00);\nINSERT INTO `order_items` VALUES (10433, 56, 30.40, 28, 0.00);\nINSERT INTO `order_items` VALUES (10434, 11, 16.80, 6, 0.00);\nINSERT INTO `order_items` VALUES (10434, 76, 14.40, 18, 0.15);\nINSERT INTO `order_items` VALUES (10435, 2, 15.20, 10, 0.00);\nINSERT INTO `order_items` VALUES (10435, 22, 16.80, 12, 0.00);\nINSERT INTO `order_items` VALUES (10435, 72, 27.80, 10, 0.00);\nINSERT INTO `order_items` VALUES (10436, 46, 9.60, 5, 0.00);\nINSERT INTO `order_items` VALUES (10436, 56, 30.40, 40, 0.10);\nINSERT INTO `order_items` VALUES (10436, 64, 26.60, 30, 0.10);\nINSERT INTO `order_items` VALUES (10436, 75, 6.20, 24, 0.10);\nINSERT INTO `order_items` VALUES (10437, 53, 26.20, 15, 0.00);\nINSERT INTO `order_items` VALUES (10438, 19, 7.30, 15, 0.20);\nINSERT INTO `order_items` VALUES (10438, 34, 11.20, 20, 0.20);\nINSERT INTO `order_items` VALUES (10438, 57, 15.60, 15, 0.20);\nINSERT INTO `order_items` VALUES (10439, 12, 30.40, 15, 0.00);\nINSERT INTO `order_items` VALUES (10439, 16, 13.90, 16, 0.00);\nINSERT INTO `order_items` VALUES (10439, 64, 26.60, 6, 0.00);\nINSERT INTO `order_items` VALUES (10439, 74, 8.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10440, 2, 15.20, 45, 0.15);\nINSERT INTO `order_items` VALUES (10440, 16, 13.90, 49, 0.15);\nINSERT INTO `order_items` VALUES (10440, 29, 99.00, 24, 0.15);\nINSERT INTO `order_items` VALUES (10440, 61, 22.80, 90, 0.15);\nINSERT INTO `order_items` VALUES (10441, 27, 35.10, 50, 0.00);\nINSERT INTO `order_items` VALUES (10442, 11, 16.80, 30, 0.00);\nINSERT INTO `order_items` VALUES (10442, 54, 5.90, 80, 0.00);\nINSERT INTO `order_items` VALUES (10442, 66, 13.60, 60, 0.00);\nINSERT INTO `order_items` VALUES (10443, 11, 16.80, 6, 0.20);\nINSERT INTO `order_items` VALUES (10443, 28, 36.40, 12, 0.00);\nINSERT INTO `order_items` VALUES (10444, 17, 31.20, 10, 0.00);\nINSERT INTO `order_items` VALUES (10444, 26, 24.90, 15, 0.00);\nINSERT INTO `order_items` VALUES (10444, 35, 14.40, 8, 0.00);\nINSERT INTO `order_items` VALUES (10444, 41, 7.70, 30, 0.00);\nINSERT INTO `order_items` VALUES (10445, 39, 14.40, 6, 0.00);\nINSERT INTO `order_items` VALUES (10445, 54, 5.90, 15, 0.00);\nINSERT INTO `order_items` VALUES (10446, 19, 7.30, 12, 0.10);\nINSERT INTO `order_items` VALUES (10446, 24, 3.60, 20, 0.10);\nINSERT INTO `order_items` VALUES (10446, 31, 10.00, 3, 0.10);\nINSERT INTO `order_items` VALUES (10446, 52, 5.60, 15, 0.10);\nINSERT INTO `order_items` VALUES (10447, 19, 7.30, 40, 0.00);\nINSERT INTO `order_items` VALUES (10447, 65, 16.80, 35, 0.00);\nINSERT INTO `order_items` VALUES (10447, 71, 17.20, 2, 0.00);\nINSERT INTO `order_items` VALUES (10448, 26, 24.90, 6, 0.00);\nINSERT INTO `order_items` VALUES (10448, 40, 14.70, 20, 0.00);\nINSERT INTO `order_items` VALUES (10449, 10, 24.80, 14, 0.00);\nINSERT INTO `order_items` VALUES (10449, 52, 5.60, 20, 0.00);\nINSERT INTO `order_items` VALUES (10449, 62, 39.40, 35, 0.00);\nINSERT INTO `order_items` VALUES (10450, 10, 24.80, 20, 0.20);\nINSERT INTO `order_items` VALUES (10450, 54, 5.90, 6, 0.20);\nINSERT INTO `order_items` VALUES (10451, 55, 19.20, 120, 0.10);\nINSERT INTO `order_items` VALUES (10451, 64, 26.60, 35, 0.10);\nINSERT INTO `order_items` VALUES (10451, 65, 16.80, 28, 0.10);\nINSERT INTO `order_items` VALUES (10451, 77, 10.40, 55, 0.10);\nINSERT INTO `order_items` VALUES (10452, 28, 36.40, 15, 0.00);\nINSERT INTO `order_items` VALUES (10452, 44, 15.50, 100, 0.05);\nINSERT INTO `order_items` VALUES (10453, 48, 10.20, 15, 0.10);\nINSERT INTO `order_items` VALUES (10453, 70, 12.00, 25, 0.10);\nINSERT INTO `order_items` VALUES (10454, 16, 13.90, 20, 0.20);\nINSERT INTO `order_items` VALUES (10454, 33, 2.00, 20, 0.20);\nINSERT INTO `order_items` VALUES (10454, 46, 9.60, 10, 0.20);\nINSERT INTO `order_items` VALUES (10455, 39, 14.40, 20, 0.00);\nINSERT INTO `order_items` VALUES (10455, 53, 26.20, 50, 0.00);\nINSERT INTO `order_items` VALUES (10455, 61, 22.80, 25, 0.00);\nINSERT INTO `order_items` VALUES (10455, 71, 17.20, 30, 0.00);\nINSERT INTO `order_items` VALUES (10456, 21, 8.00, 40, 0.15);\nINSERT INTO `order_items` VALUES (10456, 49, 16.00, 21, 0.15);\nINSERT INTO `order_items` VALUES (10457, 59, 44.00, 36, 0.00);\nINSERT INTO `order_items` VALUES (10458, 26, 24.90, 30, 0.00);\nINSERT INTO `order_items` VALUES (10458, 28, 36.40, 30, 0.00);\nINSERT INTO `order_items` VALUES (10458, 43, 36.80, 20, 0.00);\nINSERT INTO `order_items` VALUES (10458, 56, 30.40, 15, 0.00);\nINSERT INTO `order_items` VALUES (10458, 71, 17.20, 50, 0.00);\nINSERT INTO `order_items` VALUES (10459, 7, 24.00, 16, 0.05);\nINSERT INTO `order_items` VALUES (10459, 46, 9.60, 20, 0.05);\nINSERT INTO `order_items` VALUES (10459, 72, 27.80, 40, 0.00);\nINSERT INTO `order_items` VALUES (10460, 68, 10.00, 21, 0.25);\nINSERT INTO `order_items` VALUES (10460, 75, 6.20, 4, 0.25);\nINSERT INTO `order_items` VALUES (10461, 21, 8.00, 40, 0.25);\nINSERT INTO `order_items` VALUES (10461, 30, 20.70, 28, 0.25);\nINSERT INTO `order_items` VALUES (10461, 55, 19.20, 60, 0.25);\nINSERT INTO `order_items` VALUES (10462, 13, 4.80, 1, 0.00);\nINSERT INTO `order_items` VALUES (10462, 23, 7.20, 21, 0.00);\nINSERT INTO `order_items` VALUES (10463, 19, 7.30, 21, 0.00);\nINSERT INTO `order_items` VALUES (10463, 42, 11.20, 50, 0.00);\nINSERT INTO `order_items` VALUES (10464, 4, 17.60, 16, 0.20);\nINSERT INTO `order_items` VALUES (10464, 43, 36.80, 3, 0.00);\nINSERT INTO `order_items` VALUES (10464, 56, 30.40, 30, 0.20);\nINSERT INTO `order_items` VALUES (10464, 60, 27.20, 20, 0.00);\nINSERT INTO `order_items` VALUES (10465, 24, 3.60, 25, 0.00);\nINSERT INTO `order_items` VALUES (10465, 29, 99.00, 18, 0.10);\nINSERT INTO `order_items` VALUES (10465, 40, 14.70, 20, 0.00);\nINSERT INTO `order_items` VALUES (10465, 45, 7.60, 30, 0.10);\nINSERT INTO `order_items` VALUES (10465, 50, 13.00, 25, 0.00);\nINSERT INTO `order_items` VALUES (10466, 11, 16.80, 10, 0.00);\nINSERT INTO `order_items` VALUES (10466, 46, 9.60, 5, 0.00);\nINSERT INTO `order_items` VALUES (10467, 24, 3.60, 28, 0.00);\nINSERT INTO `order_items` VALUES (10467, 25, 11.20, 12, 0.00);\nINSERT INTO `order_items` VALUES (10468, 30, 20.70, 8, 0.00);\nINSERT INTO `order_items` VALUES (10468, 43, 36.80, 15, 0.00);\nINSERT INTO `order_items` VALUES (10469, 2, 15.20, 40, 0.15);\nINSERT INTO `order_items` VALUES (10469, 16, 13.90, 35, 0.15);\nINSERT INTO `order_items` VALUES (10469, 44, 15.50, 2, 0.15);\nINSERT INTO `order_items` VALUES (10470, 18, 50.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10470, 23, 7.20, 15, 0.00);\nINSERT INTO `order_items` VALUES (10470, 64, 26.60, 8, 0.00);\nINSERT INTO `order_items` VALUES (10471, 7, 24.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10471, 56, 30.40, 20, 0.00);\nINSERT INTO `order_items` VALUES (10472, 24, 3.60, 80, 0.05);\nINSERT INTO `order_items` VALUES (10472, 51, 42.40, 18, 0.00);\nINSERT INTO `order_items` VALUES (10473, 33, 2.00, 12, 0.00);\nINSERT INTO `order_items` VALUES (10473, 71, 17.20, 12, 0.00);\nINSERT INTO `order_items` VALUES (10474, 14, 18.60, 12, 0.00);\nINSERT INTO `order_items` VALUES (10474, 28, 36.40, 18, 0.00);\nINSERT INTO `order_items` VALUES (10474, 40, 14.70, 21, 0.00);\nINSERT INTO `order_items` VALUES (10474, 75, 6.20, 10, 0.00);\nINSERT INTO `order_items` VALUES (10475, 31, 10.00, 35, 0.15);\nINSERT INTO `order_items` VALUES (10475, 66, 13.60, 60, 0.15);\nINSERT INTO `order_items` VALUES (10475, 76, 14.40, 42, 0.15);\nINSERT INTO `order_items` VALUES (10476, 55, 19.20, 2, 0.05);\nINSERT INTO `order_items` VALUES (10476, 70, 12.00, 12, 0.00);\nINSERT INTO `order_items` VALUES (10477, 1, 14.40, 15, 0.00);\nINSERT INTO `order_items` VALUES (10477, 21, 8.00, 21, 0.25);\nINSERT INTO `order_items` VALUES (10477, 39, 14.40, 20, 0.25);\nINSERT INTO `order_items` VALUES (10478, 10, 24.80, 20, 0.05);\nINSERT INTO `order_items` VALUES (10479, 38, 210.80, 30, 0.00);\nINSERT INTO `order_items` VALUES (10479, 53, 26.20, 28, 0.00);\nINSERT INTO `order_items` VALUES (10479, 59, 44.00, 60, 0.00);\nINSERT INTO `order_items` VALUES (10479, 64, 26.60, 30, 0.00);\nINSERT INTO `order_items` VALUES (10480, 47, 7.60, 30, 0.00);\nINSERT INTO `order_items` VALUES (10480, 59, 44.00, 12, 0.00);\nINSERT INTO `order_items` VALUES (10481, 49, 16.00, 24, 0.00);\nINSERT INTO `order_items` VALUES (10481, 60, 27.20, 40, 0.00);\nINSERT INTO `order_items` VALUES (10482, 40, 14.70, 10, 0.00);\nINSERT INTO `order_items` VALUES (10483, 34, 11.20, 35, 0.05);\nINSERT INTO `order_items` VALUES (10483, 77, 10.40, 30, 0.05);\nINSERT INTO `order_items` VALUES (10484, 21, 8.00, 14, 0.00);\nINSERT INTO `order_items` VALUES (10484, 40, 14.70, 10, 0.00);\nINSERT INTO `order_items` VALUES (10484, 51, 42.40, 3, 0.00);\nINSERT INTO `order_items` VALUES (10485, 2, 15.20, 20, 0.10);\nINSERT INTO `order_items` VALUES (10485, 3, 8.00, 20, 0.10);\nINSERT INTO `order_items` VALUES (10485, 55, 19.20, 30, 0.10);\nINSERT INTO `order_items` VALUES (10485, 70, 12.00, 60, 0.10);\nINSERT INTO `order_items` VALUES (10486, 11, 16.80, 5, 0.00);\nINSERT INTO `order_items` VALUES (10486, 51, 42.40, 25, 0.00);\nINSERT INTO `order_items` VALUES (10486, 74, 8.00, 16, 0.00);\nINSERT INTO `order_items` VALUES (10487, 19, 7.30, 5, 0.00);\nINSERT INTO `order_items` VALUES (10487, 26, 24.90, 30, 0.00);\nINSERT INTO `order_items` VALUES (10487, 54, 5.90, 24, 0.25);\nINSERT INTO `order_items` VALUES (10488, 59, 44.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10488, 73, 12.00, 20, 0.20);\nINSERT INTO `order_items` VALUES (10489, 11, 16.80, 15, 0.25);\nINSERT INTO `order_items` VALUES (10489, 16, 13.90, 18, 0.00);\nINSERT INTO `order_items` VALUES (10490, 59, 44.00, 60, 0.00);\nINSERT INTO `order_items` VALUES (10490, 68, 10.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10490, 75, 6.20, 36, 0.00);\nINSERT INTO `order_items` VALUES (10491, 44, 15.50, 15, 0.15);\nINSERT INTO `order_items` VALUES (10491, 77, 10.40, 7, 0.15);\nINSERT INTO `order_items` VALUES (10492, 25, 11.20, 60, 0.05);\nINSERT INTO `order_items` VALUES (10492, 42, 11.20, 20, 0.05);\nINSERT INTO `order_items` VALUES (10493, 65, 16.80, 15, 0.10);\nINSERT INTO `order_items` VALUES (10493, 66, 13.60, 10, 0.10);\nINSERT INTO `order_items` VALUES (10493, 69, 28.80, 10, 0.10);\nINSERT INTO `order_items` VALUES (10494, 56, 30.40, 30, 0.00);\nINSERT INTO `order_items` VALUES (10495, 23, 7.20, 10, 0.00);\nINSERT INTO `order_items` VALUES (10495, 41, 7.70, 20, 0.00);\nINSERT INTO `order_items` VALUES (10495, 77, 10.40, 5, 0.00);\nINSERT INTO `order_items` VALUES (10496, 31, 10.00, 20, 0.05);\nINSERT INTO `order_items` VALUES (10497, 56, 30.40, 14, 0.00);\nINSERT INTO `order_items` VALUES (10497, 72, 27.80, 25, 0.00);\nINSERT INTO `order_items` VALUES (10497, 77, 10.40, 25, 0.00);\nINSERT INTO `order_items` VALUES (10498, 24, 4.50, 14, 0.00);\nINSERT INTO `order_items` VALUES (10498, 40, 18.40, 5, 0.00);\nINSERT INTO `order_items` VALUES (10498, 42, 14.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10499, 28, 45.60, 20, 0.00);\nINSERT INTO `order_items` VALUES (10499, 49, 20.00, 25, 0.00);\nINSERT INTO `order_items` VALUES (10500, 15, 15.50, 12, 0.05);\nINSERT INTO `order_items` VALUES (10500, 28, 45.60, 8, 0.05);\nINSERT INTO `order_items` VALUES (10501, 54, 7.45, 20, 0.00);\nINSERT INTO `order_items` VALUES (10502, 45, 9.50, 21, 0.00);\nINSERT INTO `order_items` VALUES (10502, 53, 32.80, 6, 0.00);\nINSERT INTO `order_items` VALUES (10502, 67, 14.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10503, 14, 23.25, 70, 0.00);\nINSERT INTO `order_items` VALUES (10503, 65, 21.05, 20, 0.00);\nINSERT INTO `order_items` VALUES (10504, 2, 19.00, 12, 0.00);\nINSERT INTO `order_items` VALUES (10504, 21, 10.00, 12, 0.00);\nINSERT INTO `order_items` VALUES (10504, 53, 32.80, 10, 0.00);\nINSERT INTO `order_items` VALUES (10504, 61, 28.50, 25, 0.00);\nINSERT INTO `order_items` VALUES (10505, 62, 49.30, 3, 0.00);\nINSERT INTO `order_items` VALUES (10506, 25, 14.00, 18, 0.10);\nINSERT INTO `order_items` VALUES (10506, 70, 15.00, 14, 0.10);\nINSERT INTO `order_items` VALUES (10507, 43, 46.00, 15, 0.15);\nINSERT INTO `order_items` VALUES (10507, 48, 12.75, 15, 0.15);\nINSERT INTO `order_items` VALUES (10508, 13, 6.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10508, 39, 18.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10509, 28, 45.60, 3, 0.00);\nINSERT INTO `order_items` VALUES (10510, 29, 123.79, 36, 0.00);\nINSERT INTO `order_items` VALUES (10510, 75, 7.75, 36, 0.10);\nINSERT INTO `order_items` VALUES (10511, 4, 22.00, 50, 0.15);\nINSERT INTO `order_items` VALUES (10511, 7, 30.00, 50, 0.15);\nINSERT INTO `order_items` VALUES (10511, 8, 40.00, 10, 0.15);\nINSERT INTO `order_items` VALUES (10512, 24, 4.50, 10, 0.15);\nINSERT INTO `order_items` VALUES (10512, 46, 12.00, 9, 0.15);\nINSERT INTO `order_items` VALUES (10512, 47, 9.50, 6, 0.15);\nINSERT INTO `order_items` VALUES (10512, 60, 34.00, 12, 0.15);\nINSERT INTO `order_items` VALUES (10513, 21, 10.00, 40, 0.20);\nINSERT INTO `order_items` VALUES (10513, 32, 32.00, 50, 0.20);\nINSERT INTO `order_items` VALUES (10513, 61, 28.50, 15, 0.20);\nINSERT INTO `order_items` VALUES (10514, 20, 81.00, 39, 0.00);\nINSERT INTO `order_items` VALUES (10514, 28, 45.60, 35, 0.00);\nINSERT INTO `order_items` VALUES (10514, 56, 38.00, 70, 0.00);\nINSERT INTO `order_items` VALUES (10514, 65, 21.05, 39, 0.00);\nINSERT INTO `order_items` VALUES (10514, 75, 7.75, 50, 0.00);\nINSERT INTO `order_items` VALUES (10515, 9, 97.00, 16, 0.15);\nINSERT INTO `order_items` VALUES (10515, 16, 17.45, 50, 0.00);\nINSERT INTO `order_items` VALUES (10515, 27, 43.90, 120, 0.00);\nINSERT INTO `order_items` VALUES (10515, 33, 2.50, 16, 0.15);\nINSERT INTO `order_items` VALUES (10515, 60, 34.00, 84, 0.15);\nINSERT INTO `order_items` VALUES (10516, 18, 62.50, 25, 0.10);\nINSERT INTO `order_items` VALUES (10516, 41, 9.65, 80, 0.10);\nINSERT INTO `order_items` VALUES (10516, 42, 14.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10517, 52, 7.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10517, 59, 55.00, 4, 0.00);\nINSERT INTO `order_items` VALUES (10517, 70, 15.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10518, 24, 4.50, 5, 0.00);\nINSERT INTO `order_items` VALUES (10518, 38, 263.50, 15, 0.00);\nINSERT INTO `order_items` VALUES (10518, 44, 19.45, 9, 0.00);\nINSERT INTO `order_items` VALUES (10519, 10, 31.00, 16, 0.05);\nINSERT INTO `order_items` VALUES (10519, 56, 38.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10519, 60, 34.00, 10, 0.05);\nINSERT INTO `order_items` VALUES (10520, 24, 4.50, 8, 0.00);\nINSERT INTO `order_items` VALUES (10520, 53, 32.80, 5, 0.00);\nINSERT INTO `order_items` VALUES (10521, 35, 18.00, 3, 0.00);\nINSERT INTO `order_items` VALUES (10521, 41, 9.65, 10, 0.00);\nINSERT INTO `order_items` VALUES (10521, 68, 12.50, 6, 0.00);\nINSERT INTO `order_items` VALUES (10522, 1, 18.00, 40, 0.20);\nINSERT INTO `order_items` VALUES (10522, 8, 40.00, 24, 0.00);\nINSERT INTO `order_items` VALUES (10522, 30, 25.89, 20, 0.20);\nINSERT INTO `order_items` VALUES (10522, 40, 18.40, 25, 0.20);\nINSERT INTO `order_items` VALUES (10523, 17, 39.00, 25, 0.10);\nINSERT INTO `order_items` VALUES (10523, 20, 81.00, 15, 0.10);\nINSERT INTO `order_items` VALUES (10523, 37, 26.00, 18, 0.10);\nINSERT INTO `order_items` VALUES (10523, 41, 9.65, 6, 0.10);\nINSERT INTO `order_items` VALUES (10524, 10, 31.00, 2, 0.00);\nINSERT INTO `order_items` VALUES (10524, 30, 25.89, 10, 0.00);\nINSERT INTO `order_items` VALUES (10524, 43, 46.00, 60, 0.00);\nINSERT INTO `order_items` VALUES (10524, 54, 7.45, 15, 0.00);\nINSERT INTO `order_items` VALUES (10525, 36, 19.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10525, 40, 18.40, 15, 0.10);\nINSERT INTO `order_items` VALUES (10526, 1, 18.00, 8, 0.15);\nINSERT INTO `order_items` VALUES (10526, 13, 6.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10526, 56, 38.00, 30, 0.15);\nINSERT INTO `order_items` VALUES (10527, 4, 22.00, 50, 0.10);\nINSERT INTO `order_items` VALUES (10527, 36, 19.00, 30, 0.10);\nINSERT INTO `order_items` VALUES (10528, 11, 21.00, 3, 0.00);\nINSERT INTO `order_items` VALUES (10528, 33, 2.50, 8, 0.20);\nINSERT INTO `order_items` VALUES (10528, 72, 34.80, 9, 0.00);\nINSERT INTO `order_items` VALUES (10529, 55, 24.00, 14, 0.00);\nINSERT INTO `order_items` VALUES (10529, 68, 12.50, 20, 0.00);\nINSERT INTO `order_items` VALUES (10529, 69, 36.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10530, 17, 39.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10530, 43, 46.00, 25, 0.00);\nINSERT INTO `order_items` VALUES (10530, 61, 28.50, 20, 0.00);\nINSERT INTO `order_items` VALUES (10530, 76, 18.00, 50, 0.00);\nINSERT INTO `order_items` VALUES (10531, 59, 55.00, 2, 0.00);\nINSERT INTO `order_items` VALUES (10532, 30, 25.89, 15, 0.00);\nINSERT INTO `order_items` VALUES (10532, 66, 17.00, 24, 0.00);\nINSERT INTO `order_items` VALUES (10533, 4, 22.00, 50, 0.05);\nINSERT INTO `order_items` VALUES (10533, 72, 34.80, 24, 0.00);\nINSERT INTO `order_items` VALUES (10533, 73, 15.00, 24, 0.05);\nINSERT INTO `order_items` VALUES (10534, 30, 25.89, 10, 0.00);\nINSERT INTO `order_items` VALUES (10534, 40, 18.40, 10, 0.20);\nINSERT INTO `order_items` VALUES (10534, 54, 7.45, 10, 0.20);\nINSERT INTO `order_items` VALUES (10535, 11, 21.00, 50, 0.10);\nINSERT INTO `order_items` VALUES (10535, 40, 18.40, 10, 0.10);\nINSERT INTO `order_items` VALUES (10535, 57, 19.50, 5, 0.10);\nINSERT INTO `order_items` VALUES (10535, 59, 55.00, 15, 0.10);\nINSERT INTO `order_items` VALUES (10536, 12, 38.00, 15, 0.25);\nINSERT INTO `order_items` VALUES (10536, 31, 12.50, 20, 0.00);\nINSERT INTO `order_items` VALUES (10536, 33, 2.50, 30, 0.00);\nINSERT INTO `order_items` VALUES (10536, 60, 34.00, 35, 0.25);\nINSERT INTO `order_items` VALUES (10537, 31, 12.50, 30, 0.00);\nINSERT INTO `order_items` VALUES (10537, 51, 53.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10537, 58, 13.25, 20, 0.00);\nINSERT INTO `order_items` VALUES (10537, 72, 34.80, 21, 0.00);\nINSERT INTO `order_items` VALUES (10537, 73, 15.00, 9, 0.00);\nINSERT INTO `order_items` VALUES (10538, 70, 15.00, 7, 0.00);\nINSERT INTO `order_items` VALUES (10538, 72, 34.80, 1, 0.00);\nINSERT INTO `order_items` VALUES (10539, 13, 6.00, 8, 0.00);\nINSERT INTO `order_items` VALUES (10539, 21, 10.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10539, 33, 2.50, 15, 0.00);\nINSERT INTO `order_items` VALUES (10539, 49, 20.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10540, 3, 10.00, 60, 0.00);\nINSERT INTO `order_items` VALUES (10540, 26, 31.23, 40, 0.00);\nINSERT INTO `order_items` VALUES (10540, 38, 263.50, 30, 0.00);\nINSERT INTO `order_items` VALUES (10540, 68, 12.50, 35, 0.00);\nINSERT INTO `order_items` VALUES (10541, 24, 4.50, 35, 0.10);\nINSERT INTO `order_items` VALUES (10541, 38, 263.50, 4, 0.10);\nINSERT INTO `order_items` VALUES (10541, 65, 21.05, 36, 0.10);\nINSERT INTO `order_items` VALUES (10541, 71, 21.50, 9, 0.10);\nINSERT INTO `order_items` VALUES (10542, 11, 21.00, 15, 0.05);\nINSERT INTO `order_items` VALUES (10542, 54, 7.45, 24, 0.05);\nINSERT INTO `order_items` VALUES (10543, 12, 38.00, 30, 0.15);\nINSERT INTO `order_items` VALUES (10543, 23, 9.00, 70, 0.15);\nINSERT INTO `order_items` VALUES (10544, 28, 45.60, 7, 0.00);\nINSERT INTO `order_items` VALUES (10544, 67, 14.00, 7, 0.00);\nINSERT INTO `order_items` VALUES (10545, 11, 21.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10546, 7, 30.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10546, 35, 18.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10546, 62, 49.30, 40, 0.00);\nINSERT INTO `order_items` VALUES (10547, 32, 32.00, 24, 0.15);\nINSERT INTO `order_items` VALUES (10547, 36, 19.00, 60, 0.00);\nINSERT INTO `order_items` VALUES (10548, 34, 14.00, 10, 0.25);\nINSERT INTO `order_items` VALUES (10548, 41, 9.65, 14, 0.00);\nINSERT INTO `order_items` VALUES (10549, 31, 12.50, 55, 0.15);\nINSERT INTO `order_items` VALUES (10549, 45, 9.50, 100, 0.15);\nINSERT INTO `order_items` VALUES (10549, 51, 53.00, 48, 0.15);\nINSERT INTO `order_items` VALUES (10550, 17, 39.00, 8, 0.10);\nINSERT INTO `order_items` VALUES (10550, 19, 9.20, 10, 0.00);\nINSERT INTO `order_items` VALUES (10550, 21, 10.00, 6, 0.10);\nINSERT INTO `order_items` VALUES (10550, 61, 28.50, 10, 0.10);\nINSERT INTO `order_items` VALUES (10551, 16, 17.45, 40, 0.15);\nINSERT INTO `order_items` VALUES (10551, 35, 18.00, 20, 0.15);\nINSERT INTO `order_items` VALUES (10551, 44, 19.45, 40, 0.00);\nINSERT INTO `order_items` VALUES (10552, 69, 36.00, 18, 0.00);\nINSERT INTO `order_items` VALUES (10552, 75, 7.75, 30, 0.00);\nINSERT INTO `order_items` VALUES (10553, 11, 21.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10553, 16, 17.45, 14, 0.00);\nINSERT INTO `order_items` VALUES (10553, 22, 21.00, 24, 0.00);\nINSERT INTO `order_items` VALUES (10553, 31, 12.50, 30, 0.00);\nINSERT INTO `order_items` VALUES (10553, 35, 18.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10554, 16, 17.45, 30, 0.05);\nINSERT INTO `order_items` VALUES (10554, 23, 9.00, 20, 0.05);\nINSERT INTO `order_items` VALUES (10554, 62, 49.30, 20, 0.05);\nINSERT INTO `order_items` VALUES (10554, 77, 13.00, 10, 0.05);\nINSERT INTO `order_items` VALUES (10555, 14, 23.25, 30, 0.20);\nINSERT INTO `order_items` VALUES (10555, 19, 9.20, 35, 0.20);\nINSERT INTO `order_items` VALUES (10555, 24, 4.50, 18, 0.20);\nINSERT INTO `order_items` VALUES (10555, 51, 53.00, 20, 0.20);\nINSERT INTO `order_items` VALUES (10555, 56, 38.00, 40, 0.20);\nINSERT INTO `order_items` VALUES (10556, 72, 34.80, 24, 0.00);\nINSERT INTO `order_items` VALUES (10557, 64, 33.25, 30, 0.00);\nINSERT INTO `order_items` VALUES (10557, 75, 7.75, 20, 0.00);\nINSERT INTO `order_items` VALUES (10558, 47, 9.50, 25, 0.00);\nINSERT INTO `order_items` VALUES (10558, 51, 53.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10558, 52, 7.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10558, 53, 32.80, 18, 0.00);\nINSERT INTO `order_items` VALUES (10558, 73, 15.00, 3, 0.00);\nINSERT INTO `order_items` VALUES (10559, 41, 9.65, 12, 0.05);\nINSERT INTO `order_items` VALUES (10559, 55, 24.00, 18, 0.05);\nINSERT INTO `order_items` VALUES (10560, 30, 25.89, 20, 0.00);\nINSERT INTO `order_items` VALUES (10560, 62, 49.30, 15, 0.25);\nINSERT INTO `order_items` VALUES (10561, 44, 19.45, 10, 0.00);\nINSERT INTO `order_items` VALUES (10561, 51, 53.00, 50, 0.00);\nINSERT INTO `order_items` VALUES (10562, 33, 2.50, 20, 0.10);\nINSERT INTO `order_items` VALUES (10562, 62, 49.30, 10, 0.10);\nINSERT INTO `order_items` VALUES (10563, 36, 19.00, 25, 0.00);\nINSERT INTO `order_items` VALUES (10563, 52, 7.00, 70, 0.00);\nINSERT INTO `order_items` VALUES (10564, 17, 39.00, 16, 0.05);\nINSERT INTO `order_items` VALUES (10564, 31, 12.50, 6, 0.05);\nINSERT INTO `order_items` VALUES (10564, 55, 24.00, 25, 0.05);\nINSERT INTO `order_items` VALUES (10565, 24, 4.50, 25, 0.10);\nINSERT INTO `order_items` VALUES (10565, 64, 33.25, 18, 0.10);\nINSERT INTO `order_items` VALUES (10566, 11, 21.00, 35, 0.15);\nINSERT INTO `order_items` VALUES (10566, 18, 62.50, 18, 0.15);\nINSERT INTO `order_items` VALUES (10566, 76, 18.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10567, 31, 12.50, 60, 0.20);\nINSERT INTO `order_items` VALUES (10567, 51, 53.00, 3, 0.00);\nINSERT INTO `order_items` VALUES (10567, 59, 55.00, 40, 0.20);\nINSERT INTO `order_items` VALUES (10568, 10, 31.00, 5, 0.00);\nINSERT INTO `order_items` VALUES (10569, 31, 12.50, 35, 0.20);\nINSERT INTO `order_items` VALUES (10569, 76, 18.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10570, 11, 21.00, 15, 0.05);\nINSERT INTO `order_items` VALUES (10570, 56, 38.00, 60, 0.05);\nINSERT INTO `order_items` VALUES (10571, 14, 23.25, 11, 0.15);\nINSERT INTO `order_items` VALUES (10571, 42, 14.00, 28, 0.15);\nINSERT INTO `order_items` VALUES (10572, 16, 17.45, 12, 0.10);\nINSERT INTO `order_items` VALUES (10572, 32, 32.00, 10, 0.10);\nINSERT INTO `order_items` VALUES (10572, 40, 18.40, 50, 0.00);\nINSERT INTO `order_items` VALUES (10572, 75, 7.75, 15, 0.10);\nINSERT INTO `order_items` VALUES (10573, 17, 39.00, 18, 0.00);\nINSERT INTO `order_items` VALUES (10573, 34, 14.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10573, 53, 32.80, 25, 0.00);\nINSERT INTO `order_items` VALUES (10574, 33, 2.50, 14, 0.00);\nINSERT INTO `order_items` VALUES (10574, 40, 18.40, 2, 0.00);\nINSERT INTO `order_items` VALUES (10574, 62, 49.30, 10, 0.00);\nINSERT INTO `order_items` VALUES (10574, 64, 33.25, 6, 0.00);\nINSERT INTO `order_items` VALUES (10575, 59, 55.00, 12, 0.00);\nINSERT INTO `order_items` VALUES (10575, 63, 43.90, 6, 0.00);\nINSERT INTO `order_items` VALUES (10575, 72, 34.80, 30, 0.00);\nINSERT INTO `order_items` VALUES (10575, 76, 18.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10576, 1, 18.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10576, 31, 12.50, 20, 0.00);\nINSERT INTO `order_items` VALUES (10576, 44, 19.45, 21, 0.00);\nINSERT INTO `order_items` VALUES (10577, 39, 18.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10577, 75, 7.75, 20, 0.00);\nINSERT INTO `order_items` VALUES (10577, 77, 13.00, 18, 0.00);\nINSERT INTO `order_items` VALUES (10578, 35, 18.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10578, 57, 19.50, 6, 0.00);\nINSERT INTO `order_items` VALUES (10579, 15, 15.50, 10, 0.00);\nINSERT INTO `order_items` VALUES (10579, 75, 7.75, 21, 0.00);\nINSERT INTO `order_items` VALUES (10580, 14, 23.25, 15, 0.05);\nINSERT INTO `order_items` VALUES (10580, 41, 9.65, 9, 0.05);\nINSERT INTO `order_items` VALUES (10580, 65, 21.05, 30, 0.05);\nINSERT INTO `order_items` VALUES (10581, 75, 7.75, 50, 0.20);\nINSERT INTO `order_items` VALUES (10582, 57, 19.50, 4, 0.00);\nINSERT INTO `order_items` VALUES (10582, 76, 18.00, 14, 0.00);\nINSERT INTO `order_items` VALUES (10583, 29, 123.79, 10, 0.00);\nINSERT INTO `order_items` VALUES (10583, 60, 34.00, 24, 0.15);\nINSERT INTO `order_items` VALUES (10583, 69, 36.00, 10, 0.15);\nINSERT INTO `order_items` VALUES (10584, 31, 12.50, 50, 0.05);\nINSERT INTO `order_items` VALUES (10585, 47, 9.50, 15, 0.00);\nINSERT INTO `order_items` VALUES (10586, 52, 7.00, 4, 0.15);\nINSERT INTO `order_items` VALUES (10587, 26, 31.23, 6, 0.00);\nINSERT INTO `order_items` VALUES (10587, 35, 18.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10587, 77, 13.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10588, 18, 62.50, 40, 0.20);\nINSERT INTO `order_items` VALUES (10588, 42, 14.00, 100, 0.20);\nINSERT INTO `order_items` VALUES (10589, 35, 18.00, 4, 0.00);\nINSERT INTO `order_items` VALUES (10590, 1, 18.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10590, 77, 13.00, 60, 0.05);\nINSERT INTO `order_items` VALUES (10591, 3, 10.00, 14, 0.00);\nINSERT INTO `order_items` VALUES (10591, 7, 30.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10591, 54, 7.45, 50, 0.00);\nINSERT INTO `order_items` VALUES (10592, 15, 15.50, 25, 0.05);\nINSERT INTO `order_items` VALUES (10592, 26, 31.23, 5, 0.05);\nINSERT INTO `order_items` VALUES (10593, 20, 81.00, 21, 0.20);\nINSERT INTO `order_items` VALUES (10593, 69, 36.00, 20, 0.20);\nINSERT INTO `order_items` VALUES (10593, 76, 18.00, 4, 0.20);\nINSERT INTO `order_items` VALUES (10594, 52, 7.00, 24, 0.00);\nINSERT INTO `order_items` VALUES (10594, 58, 13.25, 30, 0.00);\nINSERT INTO `order_items` VALUES (10595, 35, 18.00, 30, 0.25);\nINSERT INTO `order_items` VALUES (10595, 61, 28.50, 120, 0.25);\nINSERT INTO `order_items` VALUES (10595, 69, 36.00, 65, 0.25);\nINSERT INTO `order_items` VALUES (10596, 56, 38.00, 5, 0.20);\nINSERT INTO `order_items` VALUES (10596, 63, 43.90, 24, 0.20);\nINSERT INTO `order_items` VALUES (10596, 75, 7.75, 30, 0.20);\nINSERT INTO `order_items` VALUES (10597, 24, 4.50, 35, 0.20);\nINSERT INTO `order_items` VALUES (10597, 57, 19.50, 20, 0.00);\nINSERT INTO `order_items` VALUES (10597, 65, 21.05, 12, 0.20);\nINSERT INTO `order_items` VALUES (10598, 27, 43.90, 50, 0.00);\nINSERT INTO `order_items` VALUES (10598, 71, 21.50, 9, 0.00);\nINSERT INTO `order_items` VALUES (10599, 62, 49.30, 10, 0.00);\nINSERT INTO `order_items` VALUES (10600, 54, 7.45, 4, 0.00);\nINSERT INTO `order_items` VALUES (10600, 73, 15.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10601, 13, 6.00, 60, 0.00);\nINSERT INTO `order_items` VALUES (10601, 59, 55.00, 35, 0.00);\nINSERT INTO `order_items` VALUES (10602, 77, 13.00, 5, 0.25);\nINSERT INTO `order_items` VALUES (10603, 22, 21.00, 48, 0.00);\nINSERT INTO `order_items` VALUES (10603, 49, 20.00, 25, 0.05);\nINSERT INTO `order_items` VALUES (10604, 48, 12.75, 6, 0.10);\nINSERT INTO `order_items` VALUES (10604, 76, 18.00, 10, 0.10);\nINSERT INTO `order_items` VALUES (10605, 16, 17.45, 30, 0.05);\nINSERT INTO `order_items` VALUES (10605, 59, 55.00, 20, 0.05);\nINSERT INTO `order_items` VALUES (10605, 60, 34.00, 70, 0.05);\nINSERT INTO `order_items` VALUES (10605, 71, 21.50, 15, 0.05);\nINSERT INTO `order_items` VALUES (10606, 4, 22.00, 20, 0.20);\nINSERT INTO `order_items` VALUES (10606, 55, 24.00, 20, 0.20);\nINSERT INTO `order_items` VALUES (10606, 62, 49.30, 10, 0.20);\nINSERT INTO `order_items` VALUES (10607, 7, 30.00, 45, 0.00);\nINSERT INTO `order_items` VALUES (10607, 17, 39.00, 100, 0.00);\nINSERT INTO `order_items` VALUES (10607, 33, 2.50, 14, 0.00);\nINSERT INTO `order_items` VALUES (10607, 40, 18.40, 42, 0.00);\nINSERT INTO `order_items` VALUES (10607, 72, 34.80, 12, 0.00);\nINSERT INTO `order_items` VALUES (10608, 56, 38.00, 28, 0.00);\nINSERT INTO `order_items` VALUES (10609, 1, 18.00, 3, 0.00);\nINSERT INTO `order_items` VALUES (10609, 10, 31.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10609, 21, 10.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10610, 36, 19.00, 21, 0.25);\nINSERT INTO `order_items` VALUES (10611, 1, 18.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10611, 2, 19.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10611, 60, 34.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10612, 10, 31.00, 70, 0.00);\nINSERT INTO `order_items` VALUES (10612, 36, 19.00, 55, 0.00);\nINSERT INTO `order_items` VALUES (10612, 49, 20.00, 18, 0.00);\nINSERT INTO `order_items` VALUES (10612, 60, 34.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10612, 76, 18.00, 80, 0.00);\nINSERT INTO `order_items` VALUES (10613, 13, 6.00, 8, 0.10);\nINSERT INTO `order_items` VALUES (10613, 75, 7.75, 40, 0.00);\nINSERT INTO `order_items` VALUES (10614, 11, 21.00, 14, 0.00);\nINSERT INTO `order_items` VALUES (10614, 21, 10.00, 8, 0.00);\nINSERT INTO `order_items` VALUES (10614, 39, 18.00, 5, 0.00);\nINSERT INTO `order_items` VALUES (10615, 55, 24.00, 5, 0.00);\nINSERT INTO `order_items` VALUES (10616, 38, 263.50, 15, 0.05);\nINSERT INTO `order_items` VALUES (10616, 56, 38.00, 14, 0.00);\nINSERT INTO `order_items` VALUES (10616, 70, 15.00, 15, 0.05);\nINSERT INTO `order_items` VALUES (10616, 71, 21.50, 15, 0.05);\nINSERT INTO `order_items` VALUES (10617, 59, 55.00, 30, 0.15);\nINSERT INTO `order_items` VALUES (10618, 6, 25.00, 70, 0.00);\nINSERT INTO `order_items` VALUES (10618, 56, 38.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10618, 68, 12.50, 15, 0.00);\nINSERT INTO `order_items` VALUES (10619, 21, 10.00, 42, 0.00);\nINSERT INTO `order_items` VALUES (10619, 22, 21.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10620, 24, 4.50, 5, 0.00);\nINSERT INTO `order_items` VALUES (10620, 52, 7.00, 5, 0.00);\nINSERT INTO `order_items` VALUES (10621, 19, 9.20, 5, 0.00);\nINSERT INTO `order_items` VALUES (10621, 23, 9.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10621, 70, 15.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10621, 71, 21.50, 15, 0.00);\nINSERT INTO `order_items` VALUES (10622, 2, 19.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10622, 68, 12.50, 18, 0.20);\nINSERT INTO `order_items` VALUES (10623, 14, 23.25, 21, 0.00);\nINSERT INTO `order_items` VALUES (10623, 19, 9.20, 15, 0.10);\nINSERT INTO `order_items` VALUES (10623, 21, 10.00, 25, 0.10);\nINSERT INTO `order_items` VALUES (10623, 24, 4.50, 3, 0.00);\nINSERT INTO `order_items` VALUES (10623, 35, 18.00, 30, 0.10);\nINSERT INTO `order_items` VALUES (10624, 28, 45.60, 10, 0.00);\nINSERT INTO `order_items` VALUES (10624, 29, 123.79, 6, 0.00);\nINSERT INTO `order_items` VALUES (10624, 44, 19.45, 10, 0.00);\nINSERT INTO `order_items` VALUES (10625, 14, 23.25, 3, 0.00);\nINSERT INTO `order_items` VALUES (10625, 42, 14.00, 5, 0.00);\nINSERT INTO `order_items` VALUES (10625, 60, 34.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10626, 53, 32.80, 12, 0.00);\nINSERT INTO `order_items` VALUES (10626, 60, 34.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10626, 71, 21.50, 20, 0.00);\nINSERT INTO `order_items` VALUES (10627, 62, 49.30, 15, 0.00);\nINSERT INTO `order_items` VALUES (10627, 73, 15.00, 35, 0.15);\nINSERT INTO `order_items` VALUES (10628, 1, 18.00, 25, 0.00);\nINSERT INTO `order_items` VALUES (10629, 29, 123.79, 20, 0.00);\nINSERT INTO `order_items` VALUES (10629, 64, 33.25, 9, 0.00);\nINSERT INTO `order_items` VALUES (10630, 55, 24.00, 12, 0.05);\nINSERT INTO `order_items` VALUES (10630, 76, 18.00, 35, 0.00);\nINSERT INTO `order_items` VALUES (10631, 75, 7.75, 8, 0.10);\nINSERT INTO `order_items` VALUES (10632, 2, 19.00, 30, 0.05);\nINSERT INTO `order_items` VALUES (10632, 33, 2.50, 20, 0.05);\nINSERT INTO `order_items` VALUES (10633, 12, 38.00, 36, 0.15);\nINSERT INTO `order_items` VALUES (10633, 13, 6.00, 13, 0.15);\nINSERT INTO `order_items` VALUES (10633, 26, 31.23, 35, 0.15);\nINSERT INTO `order_items` VALUES (10633, 62, 49.30, 80, 0.15);\nINSERT INTO `order_items` VALUES (10634, 7, 30.00, 35, 0.00);\nINSERT INTO `order_items` VALUES (10634, 18, 62.50, 50, 0.00);\nINSERT INTO `order_items` VALUES (10634, 51, 53.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10634, 75, 7.75, 2, 0.00);\nINSERT INTO `order_items` VALUES (10635, 4, 22.00, 10, 0.10);\nINSERT INTO `order_items` VALUES (10635, 5, 21.35, 15, 0.10);\nINSERT INTO `order_items` VALUES (10635, 22, 21.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10636, 4, 22.00, 25, 0.00);\nINSERT INTO `order_items` VALUES (10636, 58, 13.25, 6, 0.00);\nINSERT INTO `order_items` VALUES (10637, 11, 21.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10637, 50, 16.25, 25, 0.05);\nINSERT INTO `order_items` VALUES (10637, 56, 38.00, 60, 0.05);\nINSERT INTO `order_items` VALUES (10638, 45, 9.50, 20, 0.00);\nINSERT INTO `order_items` VALUES (10638, 65, 21.05, 21, 0.00);\nINSERT INTO `order_items` VALUES (10638, 72, 34.80, 60, 0.00);\nINSERT INTO `order_items` VALUES (10639, 18, 62.50, 8, 0.00);\nINSERT INTO `order_items` VALUES (10640, 69, 36.00, 20, 0.25);\nINSERT INTO `order_items` VALUES (10640, 70, 15.00, 15, 0.25);\nINSERT INTO `order_items` VALUES (10641, 2, 19.00, 50, 0.00);\nINSERT INTO `order_items` VALUES (10641, 40, 18.40, 60, 0.00);\nINSERT INTO `order_items` VALUES (10642, 21, 10.00, 30, 0.20);\nINSERT INTO `order_items` VALUES (10642, 61, 28.50, 20, 0.20);\nINSERT INTO `order_items` VALUES (10643, 28, 45.60, 15, 0.25);\nINSERT INTO `order_items` VALUES (10643, 39, 18.00, 21, 0.25);\nINSERT INTO `order_items` VALUES (10643, 46, 12.00, 2, 0.25);\nINSERT INTO `order_items` VALUES (10644, 18, 62.50, 4, 0.10);\nINSERT INTO `order_items` VALUES (10644, 43, 46.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10644, 46, 12.00, 21, 0.10);\nINSERT INTO `order_items` VALUES (10645, 18, 62.50, 20, 0.00);\nINSERT INTO `order_items` VALUES (10645, 36, 19.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10646, 1, 18.00, 15, 0.25);\nINSERT INTO `order_items` VALUES (10646, 10, 31.00, 18, 0.25);\nINSERT INTO `order_items` VALUES (10646, 71, 21.50, 30, 0.25);\nINSERT INTO `order_items` VALUES (10646, 77, 13.00, 35, 0.25);\nINSERT INTO `order_items` VALUES (10647, 19, 9.20, 30, 0.00);\nINSERT INTO `order_items` VALUES (10647, 39, 18.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10648, 22, 21.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10648, 24, 4.50, 15, 0.15);\nINSERT INTO `order_items` VALUES (10649, 28, 45.60, 20, 0.00);\nINSERT INTO `order_items` VALUES (10649, 72, 34.80, 15, 0.00);\nINSERT INTO `order_items` VALUES (10650, 30, 25.89, 30, 0.00);\nINSERT INTO `order_items` VALUES (10650, 53, 32.80, 25, 0.05);\nINSERT INTO `order_items` VALUES (10650, 54, 7.45, 30, 0.00);\nINSERT INTO `order_items` VALUES (10651, 19, 9.20, 12, 0.25);\nINSERT INTO `order_items` VALUES (10651, 22, 21.00, 20, 0.25);\nINSERT INTO `order_items` VALUES (10652, 30, 25.89, 2, 0.25);\nINSERT INTO `order_items` VALUES (10652, 42, 14.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10653, 16, 17.45, 30, 0.10);\nINSERT INTO `order_items` VALUES (10653, 60, 34.00, 20, 0.10);\nINSERT INTO `order_items` VALUES (10654, 4, 22.00, 12, 0.10);\nINSERT INTO `order_items` VALUES (10654, 39, 18.00, 20, 0.10);\nINSERT INTO `order_items` VALUES (10654, 54, 7.45, 6, 0.10);\nINSERT INTO `order_items` VALUES (10655, 41, 9.65, 20, 0.20);\nINSERT INTO `order_items` VALUES (10656, 14, 23.25, 3, 0.10);\nINSERT INTO `order_items` VALUES (10656, 44, 19.45, 28, 0.10);\nINSERT INTO `order_items` VALUES (10656, 47, 9.50, 6, 0.10);\nINSERT INTO `order_items` VALUES (10657, 15, 15.50, 50, 0.00);\nINSERT INTO `order_items` VALUES (10657, 41, 9.65, 24, 0.00);\nINSERT INTO `order_items` VALUES (10657, 46, 12.00, 45, 0.00);\nINSERT INTO `order_items` VALUES (10657, 47, 9.50, 10, 0.00);\nINSERT INTO `order_items` VALUES (10657, 56, 38.00, 45, 0.00);\nINSERT INTO `order_items` VALUES (10657, 60, 34.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10658, 21, 10.00, 60, 0.00);\nINSERT INTO `order_items` VALUES (10658, 40, 18.40, 70, 0.05);\nINSERT INTO `order_items` VALUES (10658, 60, 34.00, 55, 0.05);\nINSERT INTO `order_items` VALUES (10658, 77, 13.00, 70, 0.05);\nINSERT INTO `order_items` VALUES (10659, 31, 12.50, 20, 0.05);\nINSERT INTO `order_items` VALUES (10659, 40, 18.40, 24, 0.05);\nINSERT INTO `order_items` VALUES (10659, 70, 15.00, 40, 0.05);\nINSERT INTO `order_items` VALUES (10660, 20, 81.00, 21, 0.00);\nINSERT INTO `order_items` VALUES (10661, 39, 18.00, 3, 0.20);\nINSERT INTO `order_items` VALUES (10661, 58, 13.25, 49, 0.20);\nINSERT INTO `order_items` VALUES (10662, 68, 12.50, 10, 0.00);\nINSERT INTO `order_items` VALUES (10663, 40, 18.40, 30, 0.05);\nINSERT INTO `order_items` VALUES (10663, 42, 14.00, 30, 0.05);\nINSERT INTO `order_items` VALUES (10663, 51, 53.00, 20, 0.05);\nINSERT INTO `order_items` VALUES (10664, 10, 31.00, 24, 0.15);\nINSERT INTO `order_items` VALUES (10664, 56, 38.00, 12, 0.15);\nINSERT INTO `order_items` VALUES (10664, 65, 21.05, 15, 0.15);\nINSERT INTO `order_items` VALUES (10665, 51, 53.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10665, 59, 55.00, 1, 0.00);\nINSERT INTO `order_items` VALUES (10665, 76, 18.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10666, 29, 123.79, 36, 0.00);\nINSERT INTO `order_items` VALUES (10666, 65, 21.05, 10, 0.00);\nINSERT INTO `order_items` VALUES (10667, 69, 36.00, 45, 0.20);\nINSERT INTO `order_items` VALUES (10667, 71, 21.50, 14, 0.20);\nINSERT INTO `order_items` VALUES (10668, 31, 12.50, 8, 0.10);\nINSERT INTO `order_items` VALUES (10668, 55, 24.00, 4, 0.10);\nINSERT INTO `order_items` VALUES (10668, 64, 33.25, 15, 0.10);\nINSERT INTO `order_items` VALUES (10669, 36, 19.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10670, 23, 9.00, 32, 0.00);\nINSERT INTO `order_items` VALUES (10670, 46, 12.00, 60, 0.00);\nINSERT INTO `order_items` VALUES (10670, 67, 14.00, 25, 0.00);\nINSERT INTO `order_items` VALUES (10670, 73, 15.00, 50, 0.00);\nINSERT INTO `order_items` VALUES (10670, 75, 7.75, 25, 0.00);\nINSERT INTO `order_items` VALUES (10671, 16, 17.45, 10, 0.00);\nINSERT INTO `order_items` VALUES (10671, 62, 49.30, 10, 0.00);\nINSERT INTO `order_items` VALUES (10671, 65, 21.05, 12, 0.00);\nINSERT INTO `order_items` VALUES (10672, 38, 263.50, 15, 0.10);\nINSERT INTO `order_items` VALUES (10672, 71, 21.50, 12, 0.00);\nINSERT INTO `order_items` VALUES (10673, 16, 17.45, 3, 0.00);\nINSERT INTO `order_items` VALUES (10673, 42, 14.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10673, 43, 46.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10674, 23, 9.00, 5, 0.00);\nINSERT INTO `order_items` VALUES (10675, 14, 23.25, 30, 0.00);\nINSERT INTO `order_items` VALUES (10675, 53, 32.80, 10, 0.00);\nINSERT INTO `order_items` VALUES (10675, 58, 13.25, 30, 0.00);\nINSERT INTO `order_items` VALUES (10676, 10, 31.00, 2, 0.00);\nINSERT INTO `order_items` VALUES (10676, 19, 9.20, 7, 0.00);\nINSERT INTO `order_items` VALUES (10676, 44, 19.45, 21, 0.00);\nINSERT INTO `order_items` VALUES (10677, 26, 31.23, 30, 0.15);\nINSERT INTO `order_items` VALUES (10677, 33, 2.50, 8, 0.15);\nINSERT INTO `order_items` VALUES (10678, 12, 38.00, 100, 0.00);\nINSERT INTO `order_items` VALUES (10678, 33, 2.50, 30, 0.00);\nINSERT INTO `order_items` VALUES (10678, 41, 9.65, 120, 0.00);\nINSERT INTO `order_items` VALUES (10678, 54, 7.45, 30, 0.00);\nINSERT INTO `order_items` VALUES (10679, 59, 55.00, 12, 0.00);\nINSERT INTO `order_items` VALUES (10680, 16, 17.45, 50, 0.25);\nINSERT INTO `order_items` VALUES (10680, 31, 12.50, 20, 0.25);\nINSERT INTO `order_items` VALUES (10680, 42, 14.00, 40, 0.25);\nINSERT INTO `order_items` VALUES (10681, 19, 9.20, 30, 0.10);\nINSERT INTO `order_items` VALUES (10681, 21, 10.00, 12, 0.10);\nINSERT INTO `order_items` VALUES (10681, 64, 33.25, 28, 0.00);\nINSERT INTO `order_items` VALUES (10682, 33, 2.50, 30, 0.00);\nINSERT INTO `order_items` VALUES (10682, 66, 17.00, 4, 0.00);\nINSERT INTO `order_items` VALUES (10682, 75, 7.75, 30, 0.00);\nINSERT INTO `order_items` VALUES (10683, 52, 7.00, 9, 0.00);\nINSERT INTO `order_items` VALUES (10684, 40, 18.40, 20, 0.00);\nINSERT INTO `order_items` VALUES (10684, 47, 9.50, 40, 0.00);\nINSERT INTO `order_items` VALUES (10684, 60, 34.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10685, 10, 31.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10685, 41, 9.65, 4, 0.00);\nINSERT INTO `order_items` VALUES (10685, 47, 9.50, 15, 0.00);\nINSERT INTO `order_items` VALUES (10686, 17, 39.00, 30, 0.20);\nINSERT INTO `order_items` VALUES (10686, 26, 31.23, 15, 0.00);\nINSERT INTO `order_items` VALUES (10687, 9, 97.00, 50, 0.25);\nINSERT INTO `order_items` VALUES (10687, 29, 123.79, 10, 0.00);\nINSERT INTO `order_items` VALUES (10687, 36, 19.00, 6, 0.25);\nINSERT INTO `order_items` VALUES (10688, 10, 31.00, 18, 0.10);\nINSERT INTO `order_items` VALUES (10688, 28, 45.60, 60, 0.10);\nINSERT INTO `order_items` VALUES (10688, 34, 14.00, 14, 0.00);\nINSERT INTO `order_items` VALUES (10689, 1, 18.00, 35, 0.25);\nINSERT INTO `order_items` VALUES (10690, 56, 38.00, 20, 0.25);\nINSERT INTO `order_items` VALUES (10690, 77, 13.00, 30, 0.25);\nINSERT INTO `order_items` VALUES (10691, 1, 18.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10691, 29, 123.79, 40, 0.00);\nINSERT INTO `order_items` VALUES (10691, 43, 46.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10691, 44, 19.45, 24, 0.00);\nINSERT INTO `order_items` VALUES (10691, 62, 49.30, 48, 0.00);\nINSERT INTO `order_items` VALUES (10692, 63, 43.90, 20, 0.00);\nINSERT INTO `order_items` VALUES (10693, 9, 97.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10693, 54, 7.45, 60, 0.15);\nINSERT INTO `order_items` VALUES (10693, 69, 36.00, 30, 0.15);\nINSERT INTO `order_items` VALUES (10693, 73, 15.00, 15, 0.15);\nINSERT INTO `order_items` VALUES (10694, 7, 30.00, 90, 0.00);\nINSERT INTO `order_items` VALUES (10694, 59, 55.00, 25, 0.00);\nINSERT INTO `order_items` VALUES (10694, 70, 15.00, 50, 0.00);\nINSERT INTO `order_items` VALUES (10695, 8, 40.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10695, 12, 38.00, 4, 0.00);\nINSERT INTO `order_items` VALUES (10695, 24, 4.50, 20, 0.00);\nINSERT INTO `order_items` VALUES (10696, 17, 39.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10696, 46, 12.00, 18, 0.00);\nINSERT INTO `order_items` VALUES (10697, 19, 9.20, 7, 0.25);\nINSERT INTO `order_items` VALUES (10697, 35, 18.00, 9, 0.25);\nINSERT INTO `order_items` VALUES (10697, 58, 13.25, 30, 0.25);\nINSERT INTO `order_items` VALUES (10697, 70, 15.00, 30, 0.25);\nINSERT INTO `order_items` VALUES (10698, 11, 21.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10698, 17, 39.00, 8, 0.05);\nINSERT INTO `order_items` VALUES (10698, 29, 123.79, 12, 0.05);\nINSERT INTO `order_items` VALUES (10698, 65, 21.05, 65, 0.05);\nINSERT INTO `order_items` VALUES (10698, 70, 15.00, 8, 0.05);\nINSERT INTO `order_items` VALUES (10699, 47, 9.50, 12, 0.00);\nINSERT INTO `order_items` VALUES (10700, 1, 18.00, 5, 0.20);\nINSERT INTO `order_items` VALUES (10700, 34, 14.00, 12, 0.20);\nINSERT INTO `order_items` VALUES (10700, 68, 12.50, 40, 0.20);\nINSERT INTO `order_items` VALUES (10700, 71, 21.50, 60, 0.20);\nINSERT INTO `order_items` VALUES (10701, 59, 55.00, 42, 0.15);\nINSERT INTO `order_items` VALUES (10701, 71, 21.50, 20, 0.15);\nINSERT INTO `order_items` VALUES (10701, 76, 18.00, 35, 0.15);\nINSERT INTO `order_items` VALUES (10702, 3, 10.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10702, 76, 18.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10703, 2, 19.00, 5, 0.00);\nINSERT INTO `order_items` VALUES (10703, 59, 55.00, 35, 0.00);\nINSERT INTO `order_items` VALUES (10703, 73, 15.00, 35, 0.00);\nINSERT INTO `order_items` VALUES (10704, 4, 22.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10704, 24, 4.50, 35, 0.00);\nINSERT INTO `order_items` VALUES (10704, 48, 12.75, 24, 0.00);\nINSERT INTO `order_items` VALUES (10705, 31, 12.50, 20, 0.00);\nINSERT INTO `order_items` VALUES (10705, 32, 32.00, 4, 0.00);\nINSERT INTO `order_items` VALUES (10706, 16, 17.45, 20, 0.00);\nINSERT INTO `order_items` VALUES (10706, 43, 46.00, 24, 0.00);\nINSERT INTO `order_items` VALUES (10706, 59, 55.00, 8, 0.00);\nINSERT INTO `order_items` VALUES (10707, 55, 24.00, 21, 0.00);\nINSERT INTO `order_items` VALUES (10707, 57, 19.50, 40, 0.00);\nINSERT INTO `order_items` VALUES (10707, 70, 15.00, 28, 0.15);\nINSERT INTO `order_items` VALUES (10708, 5, 21.35, 4, 0.00);\nINSERT INTO `order_items` VALUES (10708, 36, 19.00, 5, 0.00);\nINSERT INTO `order_items` VALUES (10709, 8, 40.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10709, 51, 53.00, 28, 0.00);\nINSERT INTO `order_items` VALUES (10709, 60, 34.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10710, 19, 9.20, 5, 0.00);\nINSERT INTO `order_items` VALUES (10710, 47, 9.50, 5, 0.00);\nINSERT INTO `order_items` VALUES (10711, 19, 9.20, 12, 0.00);\nINSERT INTO `order_items` VALUES (10711, 41, 9.65, 42, 0.00);\nINSERT INTO `order_items` VALUES (10711, 53, 32.80, 120, 0.00);\nINSERT INTO `order_items` VALUES (10712, 53, 32.80, 3, 0.05);\nINSERT INTO `order_items` VALUES (10712, 56, 38.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10713, 10, 31.00, 18, 0.00);\nINSERT INTO `order_items` VALUES (10713, 26, 31.23, 30, 0.00);\nINSERT INTO `order_items` VALUES (10713, 45, 9.50, 110, 0.00);\nINSERT INTO `order_items` VALUES (10713, 46, 12.00, 24, 0.00);\nINSERT INTO `order_items` VALUES (10714, 2, 19.00, 30, 0.25);\nINSERT INTO `order_items` VALUES (10714, 17, 39.00, 27, 0.25);\nINSERT INTO `order_items` VALUES (10714, 47, 9.50, 50, 0.25);\nINSERT INTO `order_items` VALUES (10714, 56, 38.00, 18, 0.25);\nINSERT INTO `order_items` VALUES (10714, 58, 13.25, 12, 0.25);\nINSERT INTO `order_items` VALUES (10715, 10, 31.00, 21, 0.00);\nINSERT INTO `order_items` VALUES (10715, 71, 21.50, 30, 0.00);\nINSERT INTO `order_items` VALUES (10716, 21, 10.00, 5, 0.00);\nINSERT INTO `order_items` VALUES (10716, 51, 53.00, 7, 0.00);\nINSERT INTO `order_items` VALUES (10716, 61, 28.50, 10, 0.00);\nINSERT INTO `order_items` VALUES (10717, 21, 10.00, 32, 0.05);\nINSERT INTO `order_items` VALUES (10717, 54, 7.45, 15, 0.00);\nINSERT INTO `order_items` VALUES (10717, 69, 36.00, 25, 0.05);\nINSERT INTO `order_items` VALUES (10718, 12, 38.00, 36, 0.00);\nINSERT INTO `order_items` VALUES (10718, 16, 17.45, 20, 0.00);\nINSERT INTO `order_items` VALUES (10718, 36, 19.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10718, 62, 49.30, 20, 0.00);\nINSERT INTO `order_items` VALUES (10719, 18, 62.50, 12, 0.25);\nINSERT INTO `order_items` VALUES (10719, 30, 25.89, 3, 0.25);\nINSERT INTO `order_items` VALUES (10719, 54, 7.45, 40, 0.25);\nINSERT INTO `order_items` VALUES (10720, 35, 18.00, 21, 0.00);\nINSERT INTO `order_items` VALUES (10720, 71, 21.50, 8, 0.00);\nINSERT INTO `order_items` VALUES (10721, 44, 19.45, 50, 0.05);\nINSERT INTO `order_items` VALUES (10722, 2, 19.00, 3, 0.00);\nINSERT INTO `order_items` VALUES (10722, 31, 12.50, 50, 0.00);\nINSERT INTO `order_items` VALUES (10722, 68, 12.50, 45, 0.00);\nINSERT INTO `order_items` VALUES (10722, 75, 7.75, 42, 0.00);\nINSERT INTO `order_items` VALUES (10723, 26, 31.23, 15, 0.00);\nINSERT INTO `order_items` VALUES (10724, 10, 31.00, 16, 0.00);\nINSERT INTO `order_items` VALUES (10724, 61, 28.50, 5, 0.00);\nINSERT INTO `order_items` VALUES (10725, 41, 9.65, 12, 0.00);\nINSERT INTO `order_items` VALUES (10725, 52, 7.00, 4, 0.00);\nINSERT INTO `order_items` VALUES (10725, 55, 24.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10726, 4, 22.00, 25, 0.00);\nINSERT INTO `order_items` VALUES (10726, 11, 21.00, 5, 0.00);\nINSERT INTO `order_items` VALUES (10727, 17, 39.00, 20, 0.05);\nINSERT INTO `order_items` VALUES (10727, 56, 38.00, 10, 0.05);\nINSERT INTO `order_items` VALUES (10727, 59, 55.00, 10, 0.05);\nINSERT INTO `order_items` VALUES (10728, 30, 25.89, 15, 0.00);\nINSERT INTO `order_items` VALUES (10728, 40, 18.40, 6, 0.00);\nINSERT INTO `order_items` VALUES (10728, 55, 24.00, 12, 0.00);\nINSERT INTO `order_items` VALUES (10728, 60, 34.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10729, 1, 18.00, 50, 0.00);\nINSERT INTO `order_items` VALUES (10729, 21, 10.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10729, 50, 16.25, 40, 0.00);\nINSERT INTO `order_items` VALUES (10730, 16, 17.45, 15, 0.05);\nINSERT INTO `order_items` VALUES (10730, 31, 12.50, 3, 0.05);\nINSERT INTO `order_items` VALUES (10730, 65, 21.05, 10, 0.05);\nINSERT INTO `order_items` VALUES (10731, 21, 10.00, 40, 0.05);\nINSERT INTO `order_items` VALUES (10731, 51, 53.00, 30, 0.05);\nINSERT INTO `order_items` VALUES (10732, 76, 18.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10733, 14, 23.25, 16, 0.00);\nINSERT INTO `order_items` VALUES (10733, 28, 45.60, 20, 0.00);\nINSERT INTO `order_items` VALUES (10733, 52, 7.00, 25, 0.00);\nINSERT INTO `order_items` VALUES (10734, 6, 25.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10734, 30, 25.89, 15, 0.00);\nINSERT INTO `order_items` VALUES (10734, 76, 18.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10735, 61, 28.50, 20, 0.10);\nINSERT INTO `order_items` VALUES (10735, 77, 13.00, 2, 0.10);\nINSERT INTO `order_items` VALUES (10736, 65, 21.05, 40, 0.00);\nINSERT INTO `order_items` VALUES (10736, 75, 7.75, 20, 0.00);\nINSERT INTO `order_items` VALUES (10737, 13, 6.00, 4, 0.00);\nINSERT INTO `order_items` VALUES (10737, 41, 9.65, 12, 0.00);\nINSERT INTO `order_items` VALUES (10738, 16, 17.45, 3, 0.00);\nINSERT INTO `order_items` VALUES (10739, 36, 19.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10739, 52, 7.00, 18, 0.00);\nINSERT INTO `order_items` VALUES (10740, 28, 45.60, 5, 0.20);\nINSERT INTO `order_items` VALUES (10740, 35, 18.00, 35, 0.20);\nINSERT INTO `order_items` VALUES (10740, 45, 9.50, 40, 0.20);\nINSERT INTO `order_items` VALUES (10740, 56, 38.00, 14, 0.20);\nINSERT INTO `order_items` VALUES (10741, 2, 19.00, 15, 0.20);\nINSERT INTO `order_items` VALUES (10742, 3, 10.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10742, 60, 34.00, 50, 0.00);\nINSERT INTO `order_items` VALUES (10742, 72, 34.80, 35, 0.00);\nINSERT INTO `order_items` VALUES (10743, 46, 12.00, 28, 0.05);\nINSERT INTO `order_items` VALUES (10744, 40, 18.40, 50, 0.20);\nINSERT INTO `order_items` VALUES (10745, 18, 62.50, 24, 0.00);\nINSERT INTO `order_items` VALUES (10745, 44, 19.45, 16, 0.00);\nINSERT INTO `order_items` VALUES (10745, 59, 55.00, 45, 0.00);\nINSERT INTO `order_items` VALUES (10745, 72, 34.80, 7, 0.00);\nINSERT INTO `order_items` VALUES (10746, 13, 6.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10746, 42, 14.00, 28, 0.00);\nINSERT INTO `order_items` VALUES (10746, 62, 49.30, 9, 0.00);\nINSERT INTO `order_items` VALUES (10746, 69, 36.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10747, 31, 12.50, 8, 0.00);\nINSERT INTO `order_items` VALUES (10747, 41, 9.65, 35, 0.00);\nINSERT INTO `order_items` VALUES (10747, 63, 43.90, 9, 0.00);\nINSERT INTO `order_items` VALUES (10747, 69, 36.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10748, 23, 9.00, 44, 0.00);\nINSERT INTO `order_items` VALUES (10748, 40, 18.40, 40, 0.00);\nINSERT INTO `order_items` VALUES (10748, 56, 38.00, 28, 0.00);\nINSERT INTO `order_items` VALUES (10749, 56, 38.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10749, 59, 55.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10749, 76, 18.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10750, 14, 23.25, 5, 0.15);\nINSERT INTO `order_items` VALUES (10750, 45, 9.50, 40, 0.15);\nINSERT INTO `order_items` VALUES (10750, 59, 55.00, 25, 0.15);\nINSERT INTO `order_items` VALUES (10751, 26, 31.23, 12, 0.10);\nINSERT INTO `order_items` VALUES (10751, 30, 25.89, 30, 0.00);\nINSERT INTO `order_items` VALUES (10751, 50, 16.25, 20, 0.10);\nINSERT INTO `order_items` VALUES (10751, 73, 15.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10752, 1, 18.00, 8, 0.00);\nINSERT INTO `order_items` VALUES (10752, 69, 36.00, 3, 0.00);\nINSERT INTO `order_items` VALUES (10753, 45, 9.50, 4, 0.00);\nINSERT INTO `order_items` VALUES (10753, 74, 10.00, 5, 0.00);\nINSERT INTO `order_items` VALUES (10754, 40, 18.40, 3, 0.00);\nINSERT INTO `order_items` VALUES (10755, 47, 9.50, 30, 0.25);\nINSERT INTO `order_items` VALUES (10755, 56, 38.00, 30, 0.25);\nINSERT INTO `order_items` VALUES (10755, 57, 19.50, 14, 0.25);\nINSERT INTO `order_items` VALUES (10755, 69, 36.00, 25, 0.25);\nINSERT INTO `order_items` VALUES (10756, 18, 62.50, 21, 0.20);\nINSERT INTO `order_items` VALUES (10756, 36, 19.00, 20, 0.20);\nINSERT INTO `order_items` VALUES (10756, 68, 12.50, 6, 0.20);\nINSERT INTO `order_items` VALUES (10756, 69, 36.00, 20, 0.20);\nINSERT INTO `order_items` VALUES (10757, 34, 14.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10757, 59, 55.00, 7, 0.00);\nINSERT INTO `order_items` VALUES (10757, 62, 49.30, 30, 0.00);\nINSERT INTO `order_items` VALUES (10757, 64, 33.25, 24, 0.00);\nINSERT INTO `order_items` VALUES (10758, 26, 31.23, 20, 0.00);\nINSERT INTO `order_items` VALUES (10758, 52, 7.00, 60, 0.00);\nINSERT INTO `order_items` VALUES (10758, 70, 15.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10759, 32, 32.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10760, 25, 14.00, 12, 0.25);\nINSERT INTO `order_items` VALUES (10760, 27, 43.90, 40, 0.00);\nINSERT INTO `order_items` VALUES (10760, 43, 46.00, 30, 0.25);\nINSERT INTO `order_items` VALUES (10761, 25, 14.00, 35, 0.25);\nINSERT INTO `order_items` VALUES (10761, 75, 7.75, 18, 0.00);\nINSERT INTO `order_items` VALUES (10762, 39, 18.00, 16, 0.00);\nINSERT INTO `order_items` VALUES (10762, 47, 9.50, 30, 0.00);\nINSERT INTO `order_items` VALUES (10762, 51, 53.00, 28, 0.00);\nINSERT INTO `order_items` VALUES (10762, 56, 38.00, 60, 0.00);\nINSERT INTO `order_items` VALUES (10763, 21, 10.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10763, 22, 21.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10763, 24, 4.50, 20, 0.00);\nINSERT INTO `order_items` VALUES (10764, 3, 10.00, 20, 0.10);\nINSERT INTO `order_items` VALUES (10764, 39, 18.00, 130, 0.10);\nINSERT INTO `order_items` VALUES (10765, 65, 21.05, 80, 0.10);\nINSERT INTO `order_items` VALUES (10766, 2, 19.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10766, 7, 30.00, 35, 0.00);\nINSERT INTO `order_items` VALUES (10766, 68, 12.50, 40, 0.00);\nINSERT INTO `order_items` VALUES (10767, 42, 14.00, 2, 0.00);\nINSERT INTO `order_items` VALUES (10768, 22, 21.00, 4, 0.00);\nINSERT INTO `order_items` VALUES (10768, 31, 12.50, 50, 0.00);\nINSERT INTO `order_items` VALUES (10768, 60, 34.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10768, 71, 21.50, 12, 0.00);\nINSERT INTO `order_items` VALUES (10769, 41, 9.65, 30, 0.05);\nINSERT INTO `order_items` VALUES (10769, 52, 7.00, 15, 0.05);\nINSERT INTO `order_items` VALUES (10769, 61, 28.50, 20, 0.00);\nINSERT INTO `order_items` VALUES (10769, 62, 49.30, 15, 0.00);\nINSERT INTO `order_items` VALUES (10770, 11, 21.00, 15, 0.25);\nINSERT INTO `order_items` VALUES (10771, 71, 21.50, 16, 0.00);\nINSERT INTO `order_items` VALUES (10772, 29, 123.79, 18, 0.00);\nINSERT INTO `order_items` VALUES (10772, 59, 55.00, 25, 0.00);\nINSERT INTO `order_items` VALUES (10773, 17, 39.00, 33, 0.00);\nINSERT INTO `order_items` VALUES (10773, 31, 12.50, 70, 0.20);\nINSERT INTO `order_items` VALUES (10773, 75, 7.75, 7, 0.20);\nINSERT INTO `order_items` VALUES (10774, 31, 12.50, 2, 0.25);\nINSERT INTO `order_items` VALUES (10774, 66, 17.00, 50, 0.00);\nINSERT INTO `order_items` VALUES (10775, 10, 31.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10775, 67, 14.00, 3, 0.00);\nINSERT INTO `order_items` VALUES (10776, 31, 12.50, 16, 0.05);\nINSERT INTO `order_items` VALUES (10776, 42, 14.00, 12, 0.05);\nINSERT INTO `order_items` VALUES (10776, 45, 9.50, 27, 0.05);\nINSERT INTO `order_items` VALUES (10776, 51, 53.00, 120, 0.05);\nINSERT INTO `order_items` VALUES (10777, 42, 14.00, 20, 0.20);\nINSERT INTO `order_items` VALUES (10778, 41, 9.65, 10, 0.00);\nINSERT INTO `order_items` VALUES (10779, 16, 17.45, 20, 0.00);\nINSERT INTO `order_items` VALUES (10779, 62, 49.30, 20, 0.00);\nINSERT INTO `order_items` VALUES (10780, 70, 15.00, 35, 0.00);\nINSERT INTO `order_items` VALUES (10780, 77, 13.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10781, 54, 7.45, 3, 0.20);\nINSERT INTO `order_items` VALUES (10781, 56, 38.00, 20, 0.20);\nINSERT INTO `order_items` VALUES (10781, 74, 10.00, 35, 0.00);\nINSERT INTO `order_items` VALUES (10782, 31, 12.50, 1, 0.00);\nINSERT INTO `order_items` VALUES (10783, 31, 12.50, 10, 0.00);\nINSERT INTO `order_items` VALUES (10783, 38, 263.50, 5, 0.00);\nINSERT INTO `order_items` VALUES (10784, 36, 19.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10784, 39, 18.00, 2, 0.15);\nINSERT INTO `order_items` VALUES (10784, 72, 34.80, 30, 0.15);\nINSERT INTO `order_items` VALUES (10785, 10, 31.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10785, 75, 7.75, 10, 0.00);\nINSERT INTO `order_items` VALUES (10786, 8, 40.00, 30, 0.20);\nINSERT INTO `order_items` VALUES (10786, 30, 25.89, 15, 0.20);\nINSERT INTO `order_items` VALUES (10786, 75, 7.75, 42, 0.20);\nINSERT INTO `order_items` VALUES (10787, 2, 19.00, 15, 0.05);\nINSERT INTO `order_items` VALUES (10787, 29, 123.79, 20, 0.05);\nINSERT INTO `order_items` VALUES (10788, 19, 9.20, 50, 0.05);\nINSERT INTO `order_items` VALUES (10788, 75, 7.75, 40, 0.05);\nINSERT INTO `order_items` VALUES (10789, 18, 62.50, 30, 0.00);\nINSERT INTO `order_items` VALUES (10789, 35, 18.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10789, 63, 43.90, 30, 0.00);\nINSERT INTO `order_items` VALUES (10789, 68, 12.50, 18, 0.00);\nINSERT INTO `order_items` VALUES (10790, 7, 30.00, 3, 0.15);\nINSERT INTO `order_items` VALUES (10790, 56, 38.00, 20, 0.15);\nINSERT INTO `order_items` VALUES (10791, 29, 123.79, 14, 0.05);\nINSERT INTO `order_items` VALUES (10791, 41, 9.65, 20, 0.05);\nINSERT INTO `order_items` VALUES (10792, 2, 19.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10792, 54, 7.45, 3, 0.00);\nINSERT INTO `order_items` VALUES (10792, 68, 12.50, 15, 0.00);\nINSERT INTO `order_items` VALUES (10793, 41, 9.65, 14, 0.00);\nINSERT INTO `order_items` VALUES (10793, 52, 7.00, 8, 0.00);\nINSERT INTO `order_items` VALUES (10794, 14, 23.25, 15, 0.20);\nINSERT INTO `order_items` VALUES (10794, 54, 7.45, 6, 0.20);\nINSERT INTO `order_items` VALUES (10795, 16, 17.45, 65, 0.00);\nINSERT INTO `order_items` VALUES (10795, 17, 39.00, 35, 0.25);\nINSERT INTO `order_items` VALUES (10796, 26, 31.23, 21, 0.20);\nINSERT INTO `order_items` VALUES (10796, 44, 19.45, 10, 0.00);\nINSERT INTO `order_items` VALUES (10796, 64, 33.25, 35, 0.20);\nINSERT INTO `order_items` VALUES (10796, 69, 36.00, 24, 0.20);\nINSERT INTO `order_items` VALUES (10797, 11, 21.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10798, 62, 49.30, 2, 0.00);\nINSERT INTO `order_items` VALUES (10798, 72, 34.80, 10, 0.00);\nINSERT INTO `order_items` VALUES (10799, 13, 6.00, 20, 0.15);\nINSERT INTO `order_items` VALUES (10799, 24, 4.50, 20, 0.15);\nINSERT INTO `order_items` VALUES (10799, 59, 55.00, 25, 0.00);\nINSERT INTO `order_items` VALUES (10800, 11, 21.00, 50, 0.10);\nINSERT INTO `order_items` VALUES (10800, 51, 53.00, 10, 0.10);\nINSERT INTO `order_items` VALUES (10800, 54, 7.45, 7, 0.10);\nINSERT INTO `order_items` VALUES (10801, 17, 39.00, 40, 0.25);\nINSERT INTO `order_items` VALUES (10801, 29, 123.79, 20, 0.25);\nINSERT INTO `order_items` VALUES (10802, 30, 25.89, 25, 0.25);\nINSERT INTO `order_items` VALUES (10802, 51, 53.00, 30, 0.25);\nINSERT INTO `order_items` VALUES (10802, 55, 24.00, 60, 0.25);\nINSERT INTO `order_items` VALUES (10802, 62, 49.30, 5, 0.25);\nINSERT INTO `order_items` VALUES (10803, 19, 9.20, 24, 0.05);\nINSERT INTO `order_items` VALUES (10803, 25, 14.00, 15, 0.05);\nINSERT INTO `order_items` VALUES (10803, 59, 55.00, 15, 0.05);\nINSERT INTO `order_items` VALUES (10804, 10, 31.00, 36, 0.00);\nINSERT INTO `order_items` VALUES (10804, 28, 45.60, 24, 0.00);\nINSERT INTO `order_items` VALUES (10804, 49, 20.00, 4, 0.15);\nINSERT INTO `order_items` VALUES (10805, 34, 14.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10805, 38, 263.50, 10, 0.00);\nINSERT INTO `order_items` VALUES (10806, 2, 19.00, 20, 0.25);\nINSERT INTO `order_items` VALUES (10806, 65, 21.05, 2, 0.00);\nINSERT INTO `order_items` VALUES (10806, 74, 10.00, 15, 0.25);\nINSERT INTO `order_items` VALUES (10807, 40, 18.40, 1, 0.00);\nINSERT INTO `order_items` VALUES (10808, 56, 38.00, 20, 0.15);\nINSERT INTO `order_items` VALUES (10808, 76, 18.00, 50, 0.15);\nINSERT INTO `order_items` VALUES (10809, 52, 7.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10810, 13, 6.00, 7, 0.00);\nINSERT INTO `order_items` VALUES (10810, 25, 14.00, 5, 0.00);\nINSERT INTO `order_items` VALUES (10810, 70, 15.00, 5, 0.00);\nINSERT INTO `order_items` VALUES (10811, 19, 9.20, 15, 0.00);\nINSERT INTO `order_items` VALUES (10811, 23, 9.00, 18, 0.00);\nINSERT INTO `order_items` VALUES (10811, 40, 18.40, 30, 0.00);\nINSERT INTO `order_items` VALUES (10812, 31, 12.50, 16, 0.10);\nINSERT INTO `order_items` VALUES (10812, 72, 34.80, 40, 0.10);\nINSERT INTO `order_items` VALUES (10812, 77, 13.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10813, 2, 19.00, 12, 0.20);\nINSERT INTO `order_items` VALUES (10813, 46, 12.00, 35, 0.00);\nINSERT INTO `order_items` VALUES (10814, 41, 9.65, 20, 0.00);\nINSERT INTO `order_items` VALUES (10814, 43, 46.00, 20, 0.15);\nINSERT INTO `order_items` VALUES (10814, 48, 12.75, 8, 0.15);\nINSERT INTO `order_items` VALUES (10814, 61, 28.50, 30, 0.15);\nINSERT INTO `order_items` VALUES (10815, 33, 2.50, 16, 0.00);\nINSERT INTO `order_items` VALUES (10816, 38, 263.50, 30, 0.05);\nINSERT INTO `order_items` VALUES (10816, 62, 49.30, 20, 0.05);\nINSERT INTO `order_items` VALUES (10817, 26, 31.23, 40, 0.15);\nINSERT INTO `order_items` VALUES (10817, 38, 263.50, 30, 0.00);\nINSERT INTO `order_items` VALUES (10817, 40, 18.40, 60, 0.15);\nINSERT INTO `order_items` VALUES (10817, 62, 49.30, 25, 0.15);\nINSERT INTO `order_items` VALUES (10818, 32, 32.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10818, 41, 9.65, 20, 0.00);\nINSERT INTO `order_items` VALUES (10819, 43, 46.00, 7, 0.00);\nINSERT INTO `order_items` VALUES (10819, 75, 7.75, 20, 0.00);\nINSERT INTO `order_items` VALUES (10820, 56, 38.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10821, 35, 18.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10821, 51, 53.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10822, 62, 49.30, 3, 0.00);\nINSERT INTO `order_items` VALUES (10822, 70, 15.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10823, 11, 21.00, 20, 0.10);\nINSERT INTO `order_items` VALUES (10823, 57, 19.50, 15, 0.00);\nINSERT INTO `order_items` VALUES (10823, 59, 55.00, 40, 0.10);\nINSERT INTO `order_items` VALUES (10823, 77, 13.00, 15, 0.10);\nINSERT INTO `order_items` VALUES (10824, 41, 9.65, 12, 0.00);\nINSERT INTO `order_items` VALUES (10824, 70, 15.00, 9, 0.00);\nINSERT INTO `order_items` VALUES (10825, 26, 31.23, 12, 0.00);\nINSERT INTO `order_items` VALUES (10825, 53, 32.80, 20, 0.00);\nINSERT INTO `order_items` VALUES (10826, 31, 12.50, 35, 0.00);\nINSERT INTO `order_items` VALUES (10826, 57, 19.50, 15, 0.00);\nINSERT INTO `order_items` VALUES (10827, 10, 31.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10827, 39, 18.00, 21, 0.00);\nINSERT INTO `order_items` VALUES (10828, 20, 81.00, 5, 0.00);\nINSERT INTO `order_items` VALUES (10828, 38, 263.50, 2, 0.00);\nINSERT INTO `order_items` VALUES (10829, 2, 19.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10829, 8, 40.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10829, 13, 6.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10829, 60, 34.00, 21, 0.00);\nINSERT INTO `order_items` VALUES (10830, 6, 25.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10830, 39, 18.00, 28, 0.00);\nINSERT INTO `order_items` VALUES (10830, 60, 34.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10830, 68, 12.50, 24, 0.00);\nINSERT INTO `order_items` VALUES (10831, 19, 9.20, 2, 0.00);\nINSERT INTO `order_items` VALUES (10831, 35, 18.00, 8, 0.00);\nINSERT INTO `order_items` VALUES (10831, 38, 263.50, 8, 0.00);\nINSERT INTO `order_items` VALUES (10831, 43, 46.00, 9, 0.00);\nINSERT INTO `order_items` VALUES (10832, 13, 6.00, 3, 0.20);\nINSERT INTO `order_items` VALUES (10832, 25, 14.00, 10, 0.20);\nINSERT INTO `order_items` VALUES (10832, 44, 19.45, 16, 0.20);\nINSERT INTO `order_items` VALUES (10832, 64, 33.25, 3, 0.00);\nINSERT INTO `order_items` VALUES (10833, 7, 30.00, 20, 0.10);\nINSERT INTO `order_items` VALUES (10833, 31, 12.50, 9, 0.10);\nINSERT INTO `order_items` VALUES (10833, 53, 32.80, 9, 0.10);\nINSERT INTO `order_items` VALUES (10834, 29, 123.79, 8, 0.05);\nINSERT INTO `order_items` VALUES (10834, 30, 25.89, 20, 0.05);\nINSERT INTO `order_items` VALUES (10835, 59, 55.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10835, 77, 13.00, 2, 0.20);\nINSERT INTO `order_items` VALUES (10836, 22, 21.00, 52, 0.00);\nINSERT INTO `order_items` VALUES (10836, 35, 18.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10836, 57, 19.50, 24, 0.00);\nINSERT INTO `order_items` VALUES (10836, 60, 34.00, 60, 0.00);\nINSERT INTO `order_items` VALUES (10836, 64, 33.25, 30, 0.00);\nINSERT INTO `order_items` VALUES (10837, 13, 6.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10837, 40, 18.40, 25, 0.00);\nINSERT INTO `order_items` VALUES (10837, 47, 9.50, 40, 0.25);\nINSERT INTO `order_items` VALUES (10837, 76, 18.00, 21, 0.25);\nINSERT INTO `order_items` VALUES (10838, 1, 18.00, 4, 0.25);\nINSERT INTO `order_items` VALUES (10838, 18, 62.50, 25, 0.25);\nINSERT INTO `order_items` VALUES (10838, 36, 19.00, 50, 0.25);\nINSERT INTO `order_items` VALUES (10839, 58, 13.25, 30, 0.10);\nINSERT INTO `order_items` VALUES (10839, 72, 34.80, 15, 0.10);\nINSERT INTO `order_items` VALUES (10840, 25, 14.00, 6, 0.20);\nINSERT INTO `order_items` VALUES (10840, 39, 18.00, 10, 0.20);\nINSERT INTO `order_items` VALUES (10841, 10, 31.00, 16, 0.00);\nINSERT INTO `order_items` VALUES (10841, 56, 38.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10841, 59, 55.00, 50, 0.00);\nINSERT INTO `order_items` VALUES (10841, 77, 13.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10842, 11, 21.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10842, 43, 46.00, 5, 0.00);\nINSERT INTO `order_items` VALUES (10842, 68, 12.50, 20, 0.00);\nINSERT INTO `order_items` VALUES (10842, 70, 15.00, 12, 0.00);\nINSERT INTO `order_items` VALUES (10843, 51, 53.00, 4, 0.25);\nINSERT INTO `order_items` VALUES (10844, 22, 21.00, 35, 0.00);\nINSERT INTO `order_items` VALUES (10845, 23, 9.00, 70, 0.10);\nINSERT INTO `order_items` VALUES (10845, 35, 18.00, 25, 0.10);\nINSERT INTO `order_items` VALUES (10845, 42, 14.00, 42, 0.10);\nINSERT INTO `order_items` VALUES (10845, 58, 13.25, 60, 0.10);\nINSERT INTO `order_items` VALUES (10845, 64, 33.25, 48, 0.00);\nINSERT INTO `order_items` VALUES (10846, 4, 22.00, 21, 0.00);\nINSERT INTO `order_items` VALUES (10846, 70, 15.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10846, 74, 10.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10847, 1, 18.00, 80, 0.20);\nINSERT INTO `order_items` VALUES (10847, 19, 9.20, 12, 0.20);\nINSERT INTO `order_items` VALUES (10847, 37, 26.00, 60, 0.20);\nINSERT INTO `order_items` VALUES (10847, 45, 9.50, 36, 0.20);\nINSERT INTO `order_items` VALUES (10847, 60, 34.00, 45, 0.20);\nINSERT INTO `order_items` VALUES (10847, 71, 21.50, 55, 0.20);\nINSERT INTO `order_items` VALUES (10848, 5, 21.35, 30, 0.00);\nINSERT INTO `order_items` VALUES (10848, 9, 97.00, 3, 0.00);\nINSERT INTO `order_items` VALUES (10849, 3, 10.00, 49, 0.00);\nINSERT INTO `order_items` VALUES (10849, 26, 31.23, 18, 0.15);\nINSERT INTO `order_items` VALUES (10850, 25, 14.00, 20, 0.15);\nINSERT INTO `order_items` VALUES (10850, 33, 2.50, 4, 0.15);\nINSERT INTO `order_items` VALUES (10850, 70, 15.00, 30, 0.15);\nINSERT INTO `order_items` VALUES (10851, 2, 19.00, 5, 0.05);\nINSERT INTO `order_items` VALUES (10851, 25, 14.00, 10, 0.05);\nINSERT INTO `order_items` VALUES (10851, 57, 19.50, 10, 0.05);\nINSERT INTO `order_items` VALUES (10851, 59, 55.00, 42, 0.05);\nINSERT INTO `order_items` VALUES (10852, 2, 19.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10852, 17, 39.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10852, 62, 49.30, 50, 0.00);\nINSERT INTO `order_items` VALUES (10853, 18, 62.50, 10, 0.00);\nINSERT INTO `order_items` VALUES (10854, 10, 31.00, 100, 0.15);\nINSERT INTO `order_items` VALUES (10854, 13, 6.00, 65, 0.15);\nINSERT INTO `order_items` VALUES (10855, 16, 17.45, 50, 0.00);\nINSERT INTO `order_items` VALUES (10855, 31, 12.50, 14, 0.00);\nINSERT INTO `order_items` VALUES (10855, 56, 38.00, 24, 0.00);\nINSERT INTO `order_items` VALUES (10855, 65, 21.05, 15, 0.15);\nINSERT INTO `order_items` VALUES (10856, 2, 19.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10856, 42, 14.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10857, 3, 10.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10857, 26, 31.23, 35, 0.25);\nINSERT INTO `order_items` VALUES (10857, 29, 123.79, 10, 0.25);\nINSERT INTO `order_items` VALUES (10858, 7, 30.00, 5, 0.00);\nINSERT INTO `order_items` VALUES (10858, 27, 43.90, 10, 0.00);\nINSERT INTO `order_items` VALUES (10858, 70, 15.00, 4, 0.00);\nINSERT INTO `order_items` VALUES (10859, 24, 4.50, 40, 0.25);\nINSERT INTO `order_items` VALUES (10859, 54, 7.45, 35, 0.25);\nINSERT INTO `order_items` VALUES (10859, 64, 33.25, 30, 0.25);\nINSERT INTO `order_items` VALUES (10860, 51, 53.00, 3, 0.00);\nINSERT INTO `order_items` VALUES (10860, 76, 18.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10861, 17, 39.00, 42, 0.00);\nINSERT INTO `order_items` VALUES (10861, 18, 62.50, 20, 0.00);\nINSERT INTO `order_items` VALUES (10861, 21, 10.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10861, 33, 2.50, 35, 0.00);\nINSERT INTO `order_items` VALUES (10861, 62, 49.30, 3, 0.00);\nINSERT INTO `order_items` VALUES (10862, 11, 21.00, 25, 0.00);\nINSERT INTO `order_items` VALUES (10862, 52, 7.00, 8, 0.00);\nINSERT INTO `order_items` VALUES (10863, 1, 18.00, 20, 0.15);\nINSERT INTO `order_items` VALUES (10863, 58, 13.25, 12, 0.15);\nINSERT INTO `order_items` VALUES (10864, 35, 18.00, 4, 0.00);\nINSERT INTO `order_items` VALUES (10864, 67, 14.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10865, 38, 263.50, 60, 0.05);\nINSERT INTO `order_items` VALUES (10865, 39, 18.00, 80, 0.05);\nINSERT INTO `order_items` VALUES (10866, 2, 19.00, 21, 0.25);\nINSERT INTO `order_items` VALUES (10866, 24, 4.50, 6, 0.25);\nINSERT INTO `order_items` VALUES (10866, 30, 25.89, 40, 0.25);\nINSERT INTO `order_items` VALUES (10867, 53, 32.80, 3, 0.00);\nINSERT INTO `order_items` VALUES (10868, 26, 31.23, 20, 0.00);\nINSERT INTO `order_items` VALUES (10868, 35, 18.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10868, 49, 20.00, 42, 0.10);\nINSERT INTO `order_items` VALUES (10869, 1, 18.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10869, 11, 21.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10869, 23, 9.00, 50, 0.00);\nINSERT INTO `order_items` VALUES (10869, 68, 12.50, 20, 0.00);\nINSERT INTO `order_items` VALUES (10870, 35, 18.00, 3, 0.00);\nINSERT INTO `order_items` VALUES (10870, 51, 53.00, 2, 0.00);\nINSERT INTO `order_items` VALUES (10871, 6, 25.00, 50, 0.05);\nINSERT INTO `order_items` VALUES (10871, 16, 17.45, 12, 0.05);\nINSERT INTO `order_items` VALUES (10871, 17, 39.00, 16, 0.05);\nINSERT INTO `order_items` VALUES (10872, 55, 24.00, 10, 0.05);\nINSERT INTO `order_items` VALUES (10872, 62, 49.30, 20, 0.05);\nINSERT INTO `order_items` VALUES (10872, 64, 33.25, 15, 0.05);\nINSERT INTO `order_items` VALUES (10872, 65, 21.05, 21, 0.05);\nINSERT INTO `order_items` VALUES (10873, 21, 10.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10873, 28, 45.60, 3, 0.00);\nINSERT INTO `order_items` VALUES (10874, 10, 31.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10875, 19, 9.20, 25, 0.00);\nINSERT INTO `order_items` VALUES (10875, 47, 9.50, 21, 0.10);\nINSERT INTO `order_items` VALUES (10875, 49, 20.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10876, 46, 12.00, 21, 0.00);\nINSERT INTO `order_items` VALUES (10876, 64, 33.25, 20, 0.00);\nINSERT INTO `order_items` VALUES (10877, 16, 17.45, 30, 0.25);\nINSERT INTO `order_items` VALUES (10877, 18, 62.50, 25, 0.00);\nINSERT INTO `order_items` VALUES (10878, 20, 81.00, 20, 0.05);\nINSERT INTO `order_items` VALUES (10879, 40, 18.40, 12, 0.00);\nINSERT INTO `order_items` VALUES (10879, 65, 21.05, 10, 0.00);\nINSERT INTO `order_items` VALUES (10879, 76, 18.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10880, 23, 9.00, 30, 0.20);\nINSERT INTO `order_items` VALUES (10880, 61, 28.50, 30, 0.20);\nINSERT INTO `order_items` VALUES (10880, 70, 15.00, 50, 0.20);\nINSERT INTO `order_items` VALUES (10881, 73, 15.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10882, 42, 14.00, 25, 0.00);\nINSERT INTO `order_items` VALUES (10882, 49, 20.00, 20, 0.15);\nINSERT INTO `order_items` VALUES (10882, 54, 7.45, 32, 0.15);\nINSERT INTO `order_items` VALUES (10883, 24, 4.50, 8, 0.00);\nINSERT INTO `order_items` VALUES (10884, 21, 10.00, 40, 0.05);\nINSERT INTO `order_items` VALUES (10884, 56, 38.00, 21, 0.05);\nINSERT INTO `order_items` VALUES (10884, 65, 21.05, 12, 0.05);\nINSERT INTO `order_items` VALUES (10885, 2, 19.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10885, 24, 4.50, 12, 0.00);\nINSERT INTO `order_items` VALUES (10885, 70, 15.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10885, 77, 13.00, 25, 0.00);\nINSERT INTO `order_items` VALUES (10886, 10, 31.00, 70, 0.00);\nINSERT INTO `order_items` VALUES (10886, 31, 12.50, 35, 0.00);\nINSERT INTO `order_items` VALUES (10886, 77, 13.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10887, 25, 14.00, 5, 0.00);\nINSERT INTO `order_items` VALUES (10888, 2, 19.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10888, 68, 12.50, 18, 0.00);\nINSERT INTO `order_items` VALUES (10889, 11, 21.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10889, 38, 263.50, 40, 0.00);\nINSERT INTO `order_items` VALUES (10890, 17, 39.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10890, 34, 14.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10890, 41, 9.65, 14, 0.00);\nINSERT INTO `order_items` VALUES (10891, 30, 25.89, 15, 0.05);\nINSERT INTO `order_items` VALUES (10892, 59, 55.00, 40, 0.05);\nINSERT INTO `order_items` VALUES (10893, 8, 40.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10893, 24, 4.50, 10, 0.00);\nINSERT INTO `order_items` VALUES (10893, 29, 123.79, 24, 0.00);\nINSERT INTO `order_items` VALUES (10893, 30, 25.89, 35, 0.00);\nINSERT INTO `order_items` VALUES (10893, 36, 19.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10894, 13, 6.00, 28, 0.05);\nINSERT INTO `order_items` VALUES (10894, 69, 36.00, 50, 0.05);\nINSERT INTO `order_items` VALUES (10894, 75, 7.75, 120, 0.05);\nINSERT INTO `order_items` VALUES (10895, 24, 4.50, 110, 0.00);\nINSERT INTO `order_items` VALUES (10895, 39, 18.00, 45, 0.00);\nINSERT INTO `order_items` VALUES (10895, 40, 18.40, 91, 0.00);\nINSERT INTO `order_items` VALUES (10895, 60, 34.00, 100, 0.00);\nINSERT INTO `order_items` VALUES (10896, 45, 9.50, 15, 0.00);\nINSERT INTO `order_items` VALUES (10896, 56, 38.00, 16, 0.00);\nINSERT INTO `order_items` VALUES (10897, 29, 123.79, 80, 0.00);\nINSERT INTO `order_items` VALUES (10897, 30, 25.89, 36, 0.00);\nINSERT INTO `order_items` VALUES (10898, 13, 6.00, 5, 0.00);\nINSERT INTO `order_items` VALUES (10899, 39, 18.00, 8, 0.15);\nINSERT INTO `order_items` VALUES (10900, 70, 15.00, 3, 0.25);\nINSERT INTO `order_items` VALUES (10901, 41, 9.65, 30, 0.00);\nINSERT INTO `order_items` VALUES (10901, 71, 21.50, 30, 0.00);\nINSERT INTO `order_items` VALUES (10902, 55, 24.00, 30, 0.15);\nINSERT INTO `order_items` VALUES (10902, 62, 49.30, 6, 0.15);\nINSERT INTO `order_items` VALUES (10903, 13, 6.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10903, 65, 21.05, 21, 0.00);\nINSERT INTO `order_items` VALUES (10903, 68, 12.50, 20, 0.00);\nINSERT INTO `order_items` VALUES (10904, 58, 13.25, 15, 0.00);\nINSERT INTO `order_items` VALUES (10904, 62, 49.30, 35, 0.00);\nINSERT INTO `order_items` VALUES (10905, 1, 18.00, 20, 0.05);\nINSERT INTO `order_items` VALUES (10906, 61, 28.50, 15, 0.00);\nINSERT INTO `order_items` VALUES (10907, 75, 7.75, 14, 0.00);\nINSERT INTO `order_items` VALUES (10908, 7, 30.00, 20, 0.05);\nINSERT INTO `order_items` VALUES (10908, 52, 7.00, 14, 0.05);\nINSERT INTO `order_items` VALUES (10909, 7, 30.00, 12, 0.00);\nINSERT INTO `order_items` VALUES (10909, 16, 17.45, 15, 0.00);\nINSERT INTO `order_items` VALUES (10909, 41, 9.65, 5, 0.00);\nINSERT INTO `order_items` VALUES (10910, 19, 9.20, 12, 0.00);\nINSERT INTO `order_items` VALUES (10910, 49, 20.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10910, 61, 28.50, 5, 0.00);\nINSERT INTO `order_items` VALUES (10911, 1, 18.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10911, 17, 39.00, 12, 0.00);\nINSERT INTO `order_items` VALUES (10911, 67, 14.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10912, 11, 21.00, 40, 0.25);\nINSERT INTO `order_items` VALUES (10912, 29, 123.79, 60, 0.25);\nINSERT INTO `order_items` VALUES (10913, 4, 22.00, 30, 0.25);\nINSERT INTO `order_items` VALUES (10913, 33, 2.50, 40, 0.25);\nINSERT INTO `order_items` VALUES (10913, 58, 13.25, 15, 0.00);\nINSERT INTO `order_items` VALUES (10914, 71, 21.50, 25, 0.00);\nINSERT INTO `order_items` VALUES (10915, 17, 39.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10915, 33, 2.50, 30, 0.00);\nINSERT INTO `order_items` VALUES (10915, 54, 7.45, 10, 0.00);\nINSERT INTO `order_items` VALUES (10916, 16, 17.45, 6, 0.00);\nINSERT INTO `order_items` VALUES (10916, 32, 32.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10916, 57, 19.50, 20, 0.00);\nINSERT INTO `order_items` VALUES (10917, 30, 25.89, 1, 0.00);\nINSERT INTO `order_items` VALUES (10917, 60, 34.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10918, 1, 18.00, 60, 0.25);\nINSERT INTO `order_items` VALUES (10918, 60, 34.00, 25, 0.25);\nINSERT INTO `order_items` VALUES (10919, 16, 17.45, 24, 0.00);\nINSERT INTO `order_items` VALUES (10919, 25, 14.00, 24, 0.00);\nINSERT INTO `order_items` VALUES (10919, 40, 18.40, 20, 0.00);\nINSERT INTO `order_items` VALUES (10920, 50, 16.25, 24, 0.00);\nINSERT INTO `order_items` VALUES (10921, 35, 18.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10921, 63, 43.90, 40, 0.00);\nINSERT INTO `order_items` VALUES (10922, 17, 39.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10922, 24, 4.50, 35, 0.00);\nINSERT INTO `order_items` VALUES (10923, 42, 14.00, 10, 0.20);\nINSERT INTO `order_items` VALUES (10923, 43, 46.00, 10, 0.20);\nINSERT INTO `order_items` VALUES (10923, 67, 14.00, 24, 0.20);\nINSERT INTO `order_items` VALUES (10924, 10, 31.00, 20, 0.10);\nINSERT INTO `order_items` VALUES (10924, 28, 45.60, 30, 0.10);\nINSERT INTO `order_items` VALUES (10924, 75, 7.75, 6, 0.00);\nINSERT INTO `order_items` VALUES (10925, 36, 19.00, 25, 0.15);\nINSERT INTO `order_items` VALUES (10925, 52, 7.00, 12, 0.15);\nINSERT INTO `order_items` VALUES (10926, 11, 21.00, 2, 0.00);\nINSERT INTO `order_items` VALUES (10926, 13, 6.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10926, 19, 9.20, 7, 0.00);\nINSERT INTO `order_items` VALUES (10926, 72, 34.80, 10, 0.00);\nINSERT INTO `order_items` VALUES (10927, 20, 81.00, 5, 0.00);\nINSERT INTO `order_items` VALUES (10927, 52, 7.00, 5, 0.00);\nINSERT INTO `order_items` VALUES (10927, 76, 18.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10928, 47, 9.50, 5, 0.00);\nINSERT INTO `order_items` VALUES (10928, 76, 18.00, 5, 0.00);\nINSERT INTO `order_items` VALUES (10929, 21, 10.00, 60, 0.00);\nINSERT INTO `order_items` VALUES (10929, 75, 7.75, 49, 0.00);\nINSERT INTO `order_items` VALUES (10929, 77, 13.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10930, 21, 10.00, 36, 0.00);\nINSERT INTO `order_items` VALUES (10930, 27, 43.90, 25, 0.00);\nINSERT INTO `order_items` VALUES (10930, 55, 24.00, 25, 0.20);\nINSERT INTO `order_items` VALUES (10930, 58, 13.25, 30, 0.20);\nINSERT INTO `order_items` VALUES (10931, 13, 6.00, 42, 0.15);\nINSERT INTO `order_items` VALUES (10931, 57, 19.50, 30, 0.00);\nINSERT INTO `order_items` VALUES (10932, 16, 17.45, 30, 0.10);\nINSERT INTO `order_items` VALUES (10932, 62, 49.30, 14, 0.10);\nINSERT INTO `order_items` VALUES (10932, 72, 34.80, 16, 0.00);\nINSERT INTO `order_items` VALUES (10932, 75, 7.75, 20, 0.10);\nINSERT INTO `order_items` VALUES (10933, 53, 32.80, 2, 0.00);\nINSERT INTO `order_items` VALUES (10933, 61, 28.50, 30, 0.00);\nINSERT INTO `order_items` VALUES (10934, 6, 25.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10935, 1, 18.00, 21, 0.00);\nINSERT INTO `order_items` VALUES (10935, 18, 62.50, 4, 0.25);\nINSERT INTO `order_items` VALUES (10935, 23, 9.00, 8, 0.25);\nINSERT INTO `order_items` VALUES (10936, 36, 19.00, 30, 0.20);\nINSERT INTO `order_items` VALUES (10937, 28, 45.60, 8, 0.00);\nINSERT INTO `order_items` VALUES (10937, 34, 14.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10938, 13, 6.00, 20, 0.25);\nINSERT INTO `order_items` VALUES (10938, 43, 46.00, 24, 0.25);\nINSERT INTO `order_items` VALUES (10938, 60, 34.00, 49, 0.25);\nINSERT INTO `order_items` VALUES (10938, 71, 21.50, 35, 0.25);\nINSERT INTO `order_items` VALUES (10939, 2, 19.00, 10, 0.15);\nINSERT INTO `order_items` VALUES (10939, 67, 14.00, 40, 0.15);\nINSERT INTO `order_items` VALUES (10940, 7, 30.00, 8, 0.00);\nINSERT INTO `order_items` VALUES (10940, 13, 6.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10941, 31, 12.50, 44, 0.25);\nINSERT INTO `order_items` VALUES (10941, 62, 49.30, 30, 0.25);\nINSERT INTO `order_items` VALUES (10941, 68, 12.50, 80, 0.25);\nINSERT INTO `order_items` VALUES (10941, 72, 34.80, 50, 0.00);\nINSERT INTO `order_items` VALUES (10942, 49, 20.00, 28, 0.00);\nINSERT INTO `order_items` VALUES (10943, 13, 6.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10943, 22, 21.00, 21, 0.00);\nINSERT INTO `order_items` VALUES (10943, 46, 12.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10944, 11, 21.00, 5, 0.25);\nINSERT INTO `order_items` VALUES (10944, 44, 19.45, 18, 0.25);\nINSERT INTO `order_items` VALUES (10944, 56, 38.00, 18, 0.00);\nINSERT INTO `order_items` VALUES (10945, 13, 6.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10945, 31, 12.50, 10, 0.00);\nINSERT INTO `order_items` VALUES (10946, 10, 31.00, 25, 0.00);\nINSERT INTO `order_items` VALUES (10946, 24, 4.50, 25, 0.00);\nINSERT INTO `order_items` VALUES (10946, 77, 13.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10947, 59, 55.00, 4, 0.00);\nINSERT INTO `order_items` VALUES (10948, 50, 16.25, 9, 0.00);\nINSERT INTO `order_items` VALUES (10948, 51, 53.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10948, 55, 24.00, 4, 0.00);\nINSERT INTO `order_items` VALUES (10949, 6, 25.00, 12, 0.00);\nINSERT INTO `order_items` VALUES (10949, 10, 31.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10949, 17, 39.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10949, 62, 49.30, 60, 0.00);\nINSERT INTO `order_items` VALUES (10950, 4, 22.00, 5, 0.00);\nINSERT INTO `order_items` VALUES (10951, 33, 2.50, 15, 0.05);\nINSERT INTO `order_items` VALUES (10951, 41, 9.65, 6, 0.05);\nINSERT INTO `order_items` VALUES (10951, 75, 7.75, 50, 0.05);\nINSERT INTO `order_items` VALUES (10952, 6, 25.00, 16, 0.05);\nINSERT INTO `order_items` VALUES (10952, 28, 45.60, 2, 0.00);\nINSERT INTO `order_items` VALUES (10953, 20, 81.00, 50, 0.05);\nINSERT INTO `order_items` VALUES (10953, 31, 12.50, 50, 0.05);\nINSERT INTO `order_items` VALUES (10954, 16, 17.45, 28, 0.15);\nINSERT INTO `order_items` VALUES (10954, 31, 12.50, 25, 0.15);\nINSERT INTO `order_items` VALUES (10954, 45, 9.50, 30, 0.00);\nINSERT INTO `order_items` VALUES (10954, 60, 34.00, 24, 0.15);\nINSERT INTO `order_items` VALUES (10955, 75, 7.75, 12, 0.20);\nINSERT INTO `order_items` VALUES (10956, 21, 10.00, 12, 0.00);\nINSERT INTO `order_items` VALUES (10956, 47, 9.50, 14, 0.00);\nINSERT INTO `order_items` VALUES (10956, 51, 53.00, 8, 0.00);\nINSERT INTO `order_items` VALUES (10957, 30, 25.89, 30, 0.00);\nINSERT INTO `order_items` VALUES (10957, 35, 18.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10957, 64, 33.25, 8, 0.00);\nINSERT INTO `order_items` VALUES (10958, 5, 21.35, 20, 0.00);\nINSERT INTO `order_items` VALUES (10958, 7, 30.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10958, 72, 34.80, 5, 0.00);\nINSERT INTO `order_items` VALUES (10959, 75, 7.75, 20, 0.15);\nINSERT INTO `order_items` VALUES (10960, 24, 4.50, 10, 0.25);\nINSERT INTO `order_items` VALUES (10960, 41, 9.65, 24, 0.00);\nINSERT INTO `order_items` VALUES (10961, 52, 7.00, 6, 0.05);\nINSERT INTO `order_items` VALUES (10961, 76, 18.00, 60, 0.00);\nINSERT INTO `order_items` VALUES (10962, 7, 30.00, 45, 0.00);\nINSERT INTO `order_items` VALUES (10962, 13, 6.00, 77, 0.00);\nINSERT INTO `order_items` VALUES (10962, 53, 32.80, 20, 0.00);\nINSERT INTO `order_items` VALUES (10962, 69, 36.00, 9, 0.00);\nINSERT INTO `order_items` VALUES (10962, 76, 18.00, 44, 0.00);\nINSERT INTO `order_items` VALUES (10963, 60, 34.00, 2, 0.15);\nINSERT INTO `order_items` VALUES (10964, 18, 62.50, 6, 0.00);\nINSERT INTO `order_items` VALUES (10964, 38, 263.50, 5, 0.00);\nINSERT INTO `order_items` VALUES (10964, 69, 36.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10965, 51, 53.00, 16, 0.00);\nINSERT INTO `order_items` VALUES (10966, 37, 26.00, 8, 0.00);\nINSERT INTO `order_items` VALUES (10966, 56, 38.00, 12, 0.15);\nINSERT INTO `order_items` VALUES (10966, 62, 49.30, 12, 0.15);\nINSERT INTO `order_items` VALUES (10967, 19, 9.20, 12, 0.00);\nINSERT INTO `order_items` VALUES (10967, 49, 20.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10968, 12, 38.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10968, 24, 4.50, 30, 0.00);\nINSERT INTO `order_items` VALUES (10968, 64, 33.25, 4, 0.00);\nINSERT INTO `order_items` VALUES (10969, 46, 12.00, 9, 0.00);\nINSERT INTO `order_items` VALUES (10970, 52, 7.00, 40, 0.20);\nINSERT INTO `order_items` VALUES (10971, 29, 123.79, 14, 0.00);\nINSERT INTO `order_items` VALUES (10972, 17, 39.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10972, 33, 2.50, 7, 0.00);\nINSERT INTO `order_items` VALUES (10973, 26, 31.23, 5, 0.00);\nINSERT INTO `order_items` VALUES (10973, 41, 9.65, 6, 0.00);\nINSERT INTO `order_items` VALUES (10973, 75, 7.75, 10, 0.00);\nINSERT INTO `order_items` VALUES (10974, 63, 43.90, 10, 0.00);\nINSERT INTO `order_items` VALUES (10975, 8, 40.00, 16, 0.00);\nINSERT INTO `order_items` VALUES (10975, 75, 7.75, 10, 0.00);\nINSERT INTO `order_items` VALUES (10976, 28, 45.60, 20, 0.00);\nINSERT INTO `order_items` VALUES (10977, 39, 18.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10977, 47, 9.50, 30, 0.00);\nINSERT INTO `order_items` VALUES (10977, 51, 53.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10977, 63, 43.90, 20, 0.00);\nINSERT INTO `order_items` VALUES (10978, 8, 40.00, 20, 0.15);\nINSERT INTO `order_items` VALUES (10978, 21, 10.00, 40, 0.15);\nINSERT INTO `order_items` VALUES (10978, 40, 18.40, 10, 0.00);\nINSERT INTO `order_items` VALUES (10978, 44, 19.45, 6, 0.15);\nINSERT INTO `order_items` VALUES (10979, 7, 30.00, 18, 0.00);\nINSERT INTO `order_items` VALUES (10979, 12, 38.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10979, 24, 4.50, 80, 0.00);\nINSERT INTO `order_items` VALUES (10979, 27, 43.90, 30, 0.00);\nINSERT INTO `order_items` VALUES (10979, 31, 12.50, 24, 0.00);\nINSERT INTO `order_items` VALUES (10979, 63, 43.90, 35, 0.00);\nINSERT INTO `order_items` VALUES (10980, 75, 7.75, 40, 0.20);\nINSERT INTO `order_items` VALUES (10981, 38, 263.50, 60, 0.00);\nINSERT INTO `order_items` VALUES (10982, 7, 30.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10982, 43, 46.00, 9, 0.00);\nINSERT INTO `order_items` VALUES (10983, 13, 6.00, 84, 0.15);\nINSERT INTO `order_items` VALUES (10983, 57, 19.50, 15, 0.00);\nINSERT INTO `order_items` VALUES (10984, 16, 17.45, 55, 0.00);\nINSERT INTO `order_items` VALUES (10984, 24, 4.50, 20, 0.00);\nINSERT INTO `order_items` VALUES (10984, 36, 19.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10985, 16, 17.45, 36, 0.10);\nINSERT INTO `order_items` VALUES (10985, 18, 62.50, 8, 0.10);\nINSERT INTO `order_items` VALUES (10985, 32, 32.00, 35, 0.10);\nINSERT INTO `order_items` VALUES (10986, 11, 21.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (10986, 20, 81.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10986, 76, 18.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (10986, 77, 13.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10987, 7, 30.00, 60, 0.00);\nINSERT INTO `order_items` VALUES (10987, 43, 46.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (10987, 72, 34.80, 20, 0.00);\nINSERT INTO `order_items` VALUES (10988, 7, 30.00, 60, 0.00);\nINSERT INTO `order_items` VALUES (10988, 62, 49.30, 40, 0.10);\nINSERT INTO `order_items` VALUES (10989, 6, 25.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10989, 11, 21.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (10989, 41, 9.65, 4, 0.00);\nINSERT INTO `order_items` VALUES (10990, 21, 10.00, 65, 0.00);\nINSERT INTO `order_items` VALUES (10990, 34, 14.00, 60, 0.15);\nINSERT INTO `order_items` VALUES (10990, 55, 24.00, 65, 0.15);\nINSERT INTO `order_items` VALUES (10990, 61, 28.50, 66, 0.15);\nINSERT INTO `order_items` VALUES (10991, 2, 19.00, 50, 0.20);\nINSERT INTO `order_items` VALUES (10991, 70, 15.00, 20, 0.20);\nINSERT INTO `order_items` VALUES (10991, 76, 18.00, 90, 0.20);\nINSERT INTO `order_items` VALUES (10992, 72, 34.80, 2, 0.00);\nINSERT INTO `order_items` VALUES (10993, 29, 123.79, 50, 0.25);\nINSERT INTO `order_items` VALUES (10993, 41, 9.65, 35, 0.25);\nINSERT INTO `order_items` VALUES (10994, 59, 55.00, 18, 0.05);\nINSERT INTO `order_items` VALUES (10995, 51, 53.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10995, 60, 34.00, 4, 0.00);\nINSERT INTO `order_items` VALUES (10996, 42, 14.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (10997, 32, 32.00, 50, 0.00);\nINSERT INTO `order_items` VALUES (10997, 46, 12.00, 20, 0.25);\nINSERT INTO `order_items` VALUES (10997, 52, 7.00, 20, 0.25);\nINSERT INTO `order_items` VALUES (10998, 24, 4.50, 12, 0.00);\nINSERT INTO `order_items` VALUES (10998, 61, 28.50, 7, 0.00);\nINSERT INTO `order_items` VALUES (10998, 74, 10.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (10998, 75, 7.75, 30, 0.00);\nINSERT INTO `order_items` VALUES (10999, 41, 9.65, 20, 0.05);\nINSERT INTO `order_items` VALUES (10999, 51, 53.00, 15, 0.05);\nINSERT INTO `order_items` VALUES (10999, 77, 13.00, 21, 0.05);\nINSERT INTO `order_items` VALUES (11000, 4, 22.00, 25, 0.25);\nINSERT INTO `order_items` VALUES (11000, 24, 4.50, 30, 0.25);\nINSERT INTO `order_items` VALUES (11000, 77, 13.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (11001, 7, 30.00, 60, 0.00);\nINSERT INTO `order_items` VALUES (11001, 22, 21.00, 25, 0.00);\nINSERT INTO `order_items` VALUES (11001, 46, 12.00, 25, 0.00);\nINSERT INTO `order_items` VALUES (11001, 55, 24.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (11002, 13, 6.00, 56, 0.00);\nINSERT INTO `order_items` VALUES (11002, 35, 18.00, 15, 0.15);\nINSERT INTO `order_items` VALUES (11002, 42, 14.00, 24, 0.15);\nINSERT INTO `order_items` VALUES (11002, 55, 24.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (11003, 1, 18.00, 4, 0.00);\nINSERT INTO `order_items` VALUES (11003, 40, 18.40, 10, 0.00);\nINSERT INTO `order_items` VALUES (11003, 52, 7.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (11004, 26, 31.23, 6, 0.00);\nINSERT INTO `order_items` VALUES (11004, 76, 18.00, 6, 0.00);\nINSERT INTO `order_items` VALUES (11005, 1, 18.00, 2, 0.00);\nINSERT INTO `order_items` VALUES (11005, 59, 55.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (11006, 1, 18.00, 8, 0.00);\nINSERT INTO `order_items` VALUES (11006, 29, 123.79, 2, 0.25);\nINSERT INTO `order_items` VALUES (11007, 8, 40.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (11007, 29, 123.79, 10, 0.00);\nINSERT INTO `order_items` VALUES (11007, 42, 14.00, 14, 0.00);\nINSERT INTO `order_items` VALUES (11008, 28, 45.60, 70, 0.05);\nINSERT INTO `order_items` VALUES (11008, 34, 14.00, 90, 0.05);\nINSERT INTO `order_items` VALUES (11008, 71, 21.50, 21, 0.00);\nINSERT INTO `order_items` VALUES (11009, 24, 4.50, 12, 0.00);\nINSERT INTO `order_items` VALUES (11009, 36, 19.00, 18, 0.25);\nINSERT INTO `order_items` VALUES (11009, 60, 34.00, 9, 0.00);\nINSERT INTO `order_items` VALUES (11010, 7, 30.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (11010, 24, 4.50, 10, 0.00);\nINSERT INTO `order_items` VALUES (11011, 58, 13.25, 40, 0.05);\nINSERT INTO `order_items` VALUES (11011, 71, 21.50, 20, 0.00);\nINSERT INTO `order_items` VALUES (11012, 19, 9.20, 50, 0.05);\nINSERT INTO `order_items` VALUES (11012, 60, 34.00, 36, 0.05);\nINSERT INTO `order_items` VALUES (11012, 71, 21.50, 60, 0.05);\nINSERT INTO `order_items` VALUES (11013, 23, 9.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (11013, 42, 14.00, 4, 0.00);\nINSERT INTO `order_items` VALUES (11013, 45, 9.50, 20, 0.00);\nINSERT INTO `order_items` VALUES (11013, 68, 12.50, 2, 0.00);\nINSERT INTO `order_items` VALUES (11014, 41, 9.65, 28, 0.10);\nINSERT INTO `order_items` VALUES (11015, 30, 25.89, 15, 0.00);\nINSERT INTO `order_items` VALUES (11015, 77, 13.00, 18, 0.00);\nINSERT INTO `order_items` VALUES (11016, 31, 12.50, 15, 0.00);\nINSERT INTO `order_items` VALUES (11016, 36, 19.00, 16, 0.00);\nINSERT INTO `order_items` VALUES (11017, 3, 10.00, 25, 0.00);\nINSERT INTO `order_items` VALUES (11017, 59, 55.00, 110, 0.00);\nINSERT INTO `order_items` VALUES (11017, 70, 15.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (11018, 12, 38.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (11018, 18, 62.50, 10, 0.00);\nINSERT INTO `order_items` VALUES (11018, 56, 38.00, 5, 0.00);\nINSERT INTO `order_items` VALUES (11019, 46, 12.00, 3, 0.00);\nINSERT INTO `order_items` VALUES (11019, 49, 20.00, 2, 0.00);\nINSERT INTO `order_items` VALUES (11020, 10, 31.00, 24, 0.15);\nINSERT INTO `order_items` VALUES (11021, 2, 19.00, 11, 0.25);\nINSERT INTO `order_items` VALUES (11021, 20, 81.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (11021, 26, 31.23, 63, 0.00);\nINSERT INTO `order_items` VALUES (11021, 51, 53.00, 44, 0.25);\nINSERT INTO `order_items` VALUES (11021, 72, 34.80, 35, 0.00);\nINSERT INTO `order_items` VALUES (11022, 19, 9.20, 35, 0.00);\nINSERT INTO `order_items` VALUES (11022, 69, 36.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (11023, 7, 30.00, 4, 0.00);\nINSERT INTO `order_items` VALUES (11023, 43, 46.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (11024, 26, 31.23, 12, 0.00);\nINSERT INTO `order_items` VALUES (11024, 33, 2.50, 30, 0.00);\nINSERT INTO `order_items` VALUES (11024, 65, 21.05, 21, 0.00);\nINSERT INTO `order_items` VALUES (11024, 71, 21.50, 50, 0.00);\nINSERT INTO `order_items` VALUES (11025, 1, 18.00, 10, 0.10);\nINSERT INTO `order_items` VALUES (11025, 13, 6.00, 20, 0.10);\nINSERT INTO `order_items` VALUES (11026, 18, 62.50, 8, 0.00);\nINSERT INTO `order_items` VALUES (11026, 51, 53.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (11027, 24, 4.50, 30, 0.25);\nINSERT INTO `order_items` VALUES (11027, 62, 49.30, 21, 0.25);\nINSERT INTO `order_items` VALUES (11028, 55, 24.00, 35, 0.00);\nINSERT INTO `order_items` VALUES (11028, 59, 55.00, 24, 0.00);\nINSERT INTO `order_items` VALUES (11029, 56, 38.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (11029, 63, 43.90, 12, 0.00);\nINSERT INTO `order_items` VALUES (11030, 2, 19.00, 100, 0.25);\nINSERT INTO `order_items` VALUES (11030, 5, 21.35, 70, 0.00);\nINSERT INTO `order_items` VALUES (11030, 29, 123.79, 60, 0.25);\nINSERT INTO `order_items` VALUES (11030, 59, 55.00, 100, 0.25);\nINSERT INTO `order_items` VALUES (11031, 1, 18.00, 45, 0.00);\nINSERT INTO `order_items` VALUES (11031, 13, 6.00, 80, 0.00);\nINSERT INTO `order_items` VALUES (11031, 24, 4.50, 21, 0.00);\nINSERT INTO `order_items` VALUES (11031, 64, 33.25, 20, 0.00);\nINSERT INTO `order_items` VALUES (11031, 71, 21.50, 16, 0.00);\nINSERT INTO `order_items` VALUES (11032, 36, 19.00, 35, 0.00);\nINSERT INTO `order_items` VALUES (11032, 38, 263.50, 25, 0.00);\nINSERT INTO `order_items` VALUES (11032, 59, 55.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (11033, 53, 32.80, 70, 0.10);\nINSERT INTO `order_items` VALUES (11033, 69, 36.00, 36, 0.10);\nINSERT INTO `order_items` VALUES (11034, 21, 10.00, 15, 0.10);\nINSERT INTO `order_items` VALUES (11034, 44, 19.45, 12, 0.00);\nINSERT INTO `order_items` VALUES (11034, 61, 28.50, 6, 0.00);\nINSERT INTO `order_items` VALUES (11035, 1, 18.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (11035, 35, 18.00, 60, 0.00);\nINSERT INTO `order_items` VALUES (11035, 42, 14.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (11035, 54, 7.45, 10, 0.00);\nINSERT INTO `order_items` VALUES (11036, 13, 6.00, 7, 0.00);\nINSERT INTO `order_items` VALUES (11036, 59, 55.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (11037, 70, 15.00, 4, 0.00);\nINSERT INTO `order_items` VALUES (11038, 40, 18.40, 5, 0.20);\nINSERT INTO `order_items` VALUES (11038, 52, 7.00, 2, 0.00);\nINSERT INTO `order_items` VALUES (11038, 71, 21.50, 30, 0.00);\nINSERT INTO `order_items` VALUES (11039, 28, 45.60, 20, 0.00);\nINSERT INTO `order_items` VALUES (11039, 35, 18.00, 24, 0.00);\nINSERT INTO `order_items` VALUES (11039, 49, 20.00, 60, 0.00);\nINSERT INTO `order_items` VALUES (11039, 57, 19.50, 28, 0.00);\nINSERT INTO `order_items` VALUES (11040, 21, 10.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (11041, 2, 19.00, 30, 0.20);\nINSERT INTO `order_items` VALUES (11041, 63, 43.90, 30, 0.00);\nINSERT INTO `order_items` VALUES (11042, 44, 19.45, 15, 0.00);\nINSERT INTO `order_items` VALUES (11042, 61, 28.50, 4, 0.00);\nINSERT INTO `order_items` VALUES (11043, 11, 21.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (11044, 62, 49.30, 12, 0.00);\nINSERT INTO `order_items` VALUES (11045, 33, 2.50, 15, 0.00);\nINSERT INTO `order_items` VALUES (11045, 51, 53.00, 24, 0.00);\nINSERT INTO `order_items` VALUES (11046, 12, 38.00, 20, 0.05);\nINSERT INTO `order_items` VALUES (11046, 32, 32.00, 15, 0.05);\nINSERT INTO `order_items` VALUES (11046, 35, 18.00, 18, 0.05);\nINSERT INTO `order_items` VALUES (11047, 1, 18.00, 25, 0.25);\nINSERT INTO `order_items` VALUES (11047, 5, 21.35, 30, 0.25);\nINSERT INTO `order_items` VALUES (11048, 68, 12.50, 42, 0.00);\nINSERT INTO `order_items` VALUES (11049, 2, 19.00, 10, 0.20);\nINSERT INTO `order_items` VALUES (11049, 12, 38.00, 4, 0.20);\nINSERT INTO `order_items` VALUES (11050, 76, 18.00, 50, 0.10);\nINSERT INTO `order_items` VALUES (11051, 24, 4.50, 10, 0.20);\nINSERT INTO `order_items` VALUES (11052, 43, 46.00, 30, 0.20);\nINSERT INTO `order_items` VALUES (11052, 61, 28.50, 10, 0.20);\nINSERT INTO `order_items` VALUES (11053, 18, 62.50, 35, 0.20);\nINSERT INTO `order_items` VALUES (11053, 32, 32.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (11053, 64, 33.25, 25, 0.20);\nINSERT INTO `order_items` VALUES (11054, 33, 2.50, 10, 0.00);\nINSERT INTO `order_items` VALUES (11054, 67, 14.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (11055, 24, 4.50, 15, 0.00);\nINSERT INTO `order_items` VALUES (11055, 25, 14.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (11055, 51, 53.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (11055, 57, 19.50, 20, 0.00);\nINSERT INTO `order_items` VALUES (11056, 7, 30.00, 40, 0.00);\nINSERT INTO `order_items` VALUES (11056, 55, 24.00, 35, 0.00);\nINSERT INTO `order_items` VALUES (11056, 60, 34.00, 50, 0.00);\nINSERT INTO `order_items` VALUES (11057, 70, 15.00, 3, 0.00);\nINSERT INTO `order_items` VALUES (11058, 21, 10.00, 3, 0.00);\nINSERT INTO `order_items` VALUES (11058, 60, 34.00, 21, 0.00);\nINSERT INTO `order_items` VALUES (11058, 61, 28.50, 4, 0.00);\nINSERT INTO `order_items` VALUES (11059, 13, 6.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (11059, 17, 39.00, 12, 0.00);\nINSERT INTO `order_items` VALUES (11059, 60, 34.00, 35, 0.00);\nINSERT INTO `order_items` VALUES (11060, 60, 34.00, 4, 0.00);\nINSERT INTO `order_items` VALUES (11060, 77, 13.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (11061, 60, 34.00, 15, 0.00);\nINSERT INTO `order_items` VALUES (11062, 53, 32.80, 10, 0.20);\nINSERT INTO `order_items` VALUES (11062, 70, 15.00, 12, 0.20);\nINSERT INTO `order_items` VALUES (11063, 34, 14.00, 30, 0.00);\nINSERT INTO `order_items` VALUES (11063, 40, 18.40, 40, 0.10);\nINSERT INTO `order_items` VALUES (11063, 41, 9.65, 30, 0.10);\nINSERT INTO `order_items` VALUES (11064, 17, 39.00, 77, 0.10);\nINSERT INTO `order_items` VALUES (11064, 41, 9.65, 12, 0.00);\nINSERT INTO `order_items` VALUES (11064, 53, 32.80, 25, 0.10);\nINSERT INTO `order_items` VALUES (11064, 55, 24.00, 4, 0.10);\nINSERT INTO `order_items` VALUES (11064, 68, 12.50, 55, 0.00);\nINSERT INTO `order_items` VALUES (11065, 30, 25.89, 4, 0.25);\nINSERT INTO `order_items` VALUES (11065, 54, 7.45, 20, 0.25);\nINSERT INTO `order_items` VALUES (11066, 16, 17.45, 3, 0.00);\nINSERT INTO `order_items` VALUES (11066, 19, 9.20, 42, 0.00);\nINSERT INTO `order_items` VALUES (11066, 34, 14.00, 35, 0.00);\nINSERT INTO `order_items` VALUES (11067, 41, 9.65, 9, 0.00);\nINSERT INTO `order_items` VALUES (11068, 28, 45.60, 8, 0.15);\nINSERT INTO `order_items` VALUES (11068, 43, 46.00, 36, 0.15);\nINSERT INTO `order_items` VALUES (11068, 77, 13.00, 28, 0.15);\nINSERT INTO `order_items` VALUES (11069, 39, 18.00, 20, 0.00);\nINSERT INTO `order_items` VALUES (11070, 1, 18.00, 40, 0.15);\nINSERT INTO `order_items` VALUES (11070, 2, 19.00, 20, 0.15);\nINSERT INTO `order_items` VALUES (11070, 16, 17.45, 30, 0.15);\nINSERT INTO `order_items` VALUES (11070, 31, 12.50, 20, 0.00);\nINSERT INTO `order_items` VALUES (11071, 7, 30.00, 15, 0.05);\nINSERT INTO `order_items` VALUES (11071, 13, 6.00, 10, 0.05);\nINSERT INTO `order_items` VALUES (11072, 2, 19.00, 8, 0.00);\nINSERT INTO `order_items` VALUES (11072, 41, 9.65, 40, 0.00);\nINSERT INTO `order_items` VALUES (11072, 50, 16.25, 22, 0.00);\nINSERT INTO `order_items` VALUES (11072, 64, 33.25, 130, 0.00);\nINSERT INTO `order_items` VALUES (11073, 11, 21.00, 10, 0.00);\nINSERT INTO `order_items` VALUES (11073, 24, 4.50, 20, 0.00);\nINSERT INTO `order_items` VALUES (11074, 16, 17.45, 14, 0.05);\nINSERT INTO `order_items` VALUES (11075, 2, 19.00, 10, 0.15);\nINSERT INTO `order_items` VALUES (11075, 46, 12.00, 30, 0.15);\nINSERT INTO `order_items` VALUES (11075, 76, 18.00, 2, 0.15);\nINSERT INTO `order_items` VALUES (11076, 6, 25.00, 20, 0.25);\nINSERT INTO `order_items` VALUES (11076, 14, 23.25, 20, 0.25);\nINSERT INTO `order_items` VALUES (11076, 19, 9.20, 10, 0.25);\nINSERT INTO `order_items` VALUES (11077, 2, 19.00, 24, 0.20);\nINSERT INTO `order_items` VALUES (11077, 3, 10.00, 4, 0.00);\nINSERT INTO `order_items` VALUES (11077, 4, 22.00, 1, 0.00);\nINSERT INTO `order_items` VALUES (11077, 6, 25.00, 1, 0.02);\nINSERT INTO `order_items` VALUES (11077, 7, 30.00, 1, 0.05);\nINSERT INTO `order_items` VALUES (11077, 8, 40.00, 2, 0.10);\nINSERT INTO `order_items` VALUES (11077, 10, 31.00, 1, 0.00);\nINSERT INTO `order_items` VALUES (11077, 12, 38.00, 2, 0.05);\nINSERT INTO `order_items` VALUES (11077, 13, 6.00, 4, 0.00);\nINSERT INTO `order_items` VALUES (11077, 14, 23.25, 1, 0.03);\nINSERT INTO `order_items` VALUES (11077, 16, 17.45, 2, 0.03);\nINSERT INTO `order_items` VALUES (11077, 20, 81.00, 1, 0.04);\nINSERT INTO `order_items` VALUES (11077, 23, 9.00, 2, 0.00);\nINSERT INTO `order_items` VALUES (11077, 32, 32.00, 1, 0.00);\nINSERT INTO `order_items` VALUES (11077, 39, 18.00, 2, 0.05);\nINSERT INTO `order_items` VALUES (11077, 41, 9.65, 3, 0.00);\nINSERT INTO `order_items` VALUES (11077, 46, 12.00, 3, 0.02);\nINSERT INTO `order_items` VALUES (11077, 52, 7.00, 2, 0.00);\nINSERT INTO `order_items` VALUES (11077, 55, 24.00, 2, 0.00);\nINSERT INTO `order_items` VALUES (11077, 60, 34.00, 2, 0.06);\nINSERT INTO `order_items` VALUES (11077, 64, 33.25, 2, 0.03);\nINSERT INTO `order_items` VALUES (11077, 66, 17.00, 1, 0.00);\nINSERT INTO `order_items` VALUES (11077, 73, 15.00, 2, 0.01);\nINSERT INTO `order_items` VALUES (11077, 75, 7.75, 4, 0.00);\nINSERT INTO `order_items` VALUES (11077, 77, 13.00, 2, 0.00);\nCOMMIT;\n\n-- ----------------------------\n-- Table structure for orders\n-- ----------------------------\nDROP TABLE IF EXISTS `orders`;\nCREATE TABLE `orders` (\n  `order_id` int NOT NULL,\n  `customer_id` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `employee_id` int DEFAULT NULL,\n  `order_date` datetime DEFAULT NULL,\n  `shipped_date` datetime DEFAULT NULL,\n  `ship_via` int DEFAULT NULL,\n  `freight` decimal(10,2) DEFAULT NULL,\n  `ship_address` varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `ship_city` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `ship_region` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `ship_postal_code` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `ship_country` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  PRIMARY KEY (`order_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n\n-- ----------------------------\n-- Records of orders\n-- ----------------------------\nBEGIN;\nINSERT INTO `orders` VALUES (10248, 'VINET', 5, '2016-07-04 00:00:00', '2016-07-16 00:00:00', 3, 32.38, '59 rue de l\\'\\'Abbaye', 'Reims', NULL, '51100', 'France');\nINSERT INTO `orders` VALUES (10249, 'TOMSP', 6, '2016-07-05 00:00:00', '2016-07-10 00:00:00', 1, 11.61, 'Luisenstr. 48', 'Münster', NULL, '44087', 'Germany');\nINSERT INTO `orders` VALUES (10250, 'HANAR', 4, '2016-07-08 00:00:00', '2016-07-12 00:00:00', 2, 65.83, 'Rua do Paço-67', 'Rio de Janeiro', 'RJ', '05454-876', 'Brazil');\nINSERT INTO `orders` VALUES (10251, 'VICTE', 3, '2016-07-08 00:00:00', '2016-07-15 00:00:00', 1, 41.34, '2-rue du Commerce', 'Lyo', NULL, '69004', 'France');\nINSERT INTO `orders` VALUES (10252, 'SUPRD', 4, '2016-07-09 00:00:00', '2016-07-11 00:00:00', 2, 51.30, 'Boulevard Tirou-255', 'Charleroi', NULL, 'B-6000', 'Belgium');\nINSERT INTO `orders` VALUES (10253, 'HANAR', 3, '2016-07-10 00:00:00', '2016-07-16 00:00:00', 2, 58.17, 'Rua do Paço-67', 'Rio de Janeiro', 'RJ', '05454-876', 'Brazil');\nINSERT INTO `orders` VALUES (10254, 'CHOPS', 5, '2016-07-11 00:00:00', '2016-07-23 00:00:00', 2, 22.98, 'Hauptstr. 31', 'Ber', NULL, '3012', 'Switzerland');\nINSERT INTO `orders` VALUES (10255, 'RICSU', 9, '2016-07-12 00:00:00', '2016-07-15 00:00:00', 3, 148.33, 'Starenweg 5', 'Genève', NULL, '1204', 'Switzerland');\nINSERT INTO `orders` VALUES (10256, 'WELLI', 3, '2016-07-15 00:00:00', '2016-07-17 00:00:00', 2, 13.97, 'Rua do Mercado-12', 'Resende', 'SP', '08737-363', 'Brazil');\nINSERT INTO `orders` VALUES (10257, 'HILAA', 4, '2016-07-16 00:00:00', '2016-07-22 00:00:00', 3, 81.91, 'Carrera 22 con Ave. Carlos Soublette #8-35', 'San Cristóbal', 'Táchira', '5022', 'Venezuela');\nINSERT INTO `orders` VALUES (10258, 'ERNSH', 1, '2016-07-17 00:00:00', '2016-07-23 00:00:00', 1, 140.51, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10259, 'CENTC', 4, '2016-07-18 00:00:00', '2016-07-25 00:00:00', 3, 3.25, 'Sierras de Granada 9993', 'México D.F.', NULL, '05022', 'Mexico');\nINSERT INTO `orders` VALUES (10260, 'OTTIK', 4, '2016-07-19 00:00:00', '2016-07-29 00:00:00', 1, 55.09, 'Mehrheimerstr. 369', 'Köl', NULL, '50739', 'Germany');\nINSERT INTO `orders` VALUES (10261, 'QUEDE', 10, '2016-07-19 00:00:00', '2016-07-30 00:00:00', 2, 3.05, 'Rua da Panificadora-12', 'Rio de Janeiro', 'RJ', '02389-673', 'Brazil');\nINSERT INTO `orders` VALUES (10262, 'RATTC', 8, '2016-07-22 00:00:00', '2016-07-25 00:00:00', 3, 48.29, '2817 Milton Dr.', 'Albuquerque', 'NM', '87110', 'USA');\nINSERT INTO `orders` VALUES (10263, 'ERNSH', 9, '2016-07-23 00:00:00', '2016-07-31 00:00:00', 3, 146.06, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10264, 'FOLKO', 6, '2016-07-24 00:00:00', '2016-08-23 00:00:00', 3, 3.67, 'Åkergatan 24', 'Bräcke', NULL, 'S-844 67', 'Sweden');\nINSERT INTO `orders` VALUES (10265, 'BLONP', 2, '2016-07-25 00:00:00', '2016-08-12 00:00:00', 1, 55.28, '24-place Kléber', 'Strasbourg', NULL, '67000', 'France');\nINSERT INTO `orders` VALUES (10266, 'WARTH', 3, '2016-07-26 00:00:00', '2016-07-31 00:00:00', 3, 25.73, 'Torikatu 38', 'Oulu', NULL, '90110', 'Finland');\nINSERT INTO `orders` VALUES (10267, 'FRANK', 4, '2016-07-29 00:00:00', '2016-08-06 00:00:00', 1, 208.58, 'Berliner Platz 43', 'Münche', NULL, '80805', 'Germany');\nINSERT INTO `orders` VALUES (10268, 'GROSR', 8, '2016-07-30 00:00:00', '2016-08-02 00:00:00', 3, 66.29, '5ª Ave. Los Palos Grandes', 'Caracas', 'DF', '1081', 'Venezuela');\nINSERT INTO `orders` VALUES (10269, 'WHITC', 5, '2016-07-31 00:00:00', '2016-08-09 00:00:00', 1, 4.56, '1029 - 12th Ave. S.', 'Seattle', 'WA', '98124', 'USA');\nINSERT INTO `orders` VALUES (10270, 'WARTH', 1, '2016-08-01 00:00:00', '2016-08-02 00:00:00', 1, 136.54, 'Torikatu 38', 'Oulu', NULL, '90110', 'Finland');\nINSERT INTO `orders` VALUES (10271, 'SPLIR', 6, '2016-08-01 00:00:00', '2016-08-30 00:00:00', 2, 4.54, 'P.O. Box 555', 'Lander', 'WY', '82520', 'USA');\nINSERT INTO `orders` VALUES (10272, 'RATTC', 6, '2016-08-02 00:00:00', '2016-08-06 00:00:00', 2, 98.03, '2817 Milton Dr.', 'Albuquerque', 'NM', '87110', 'USA');\nINSERT INTO `orders` VALUES (10273, 'QUICK', 3, '2016-08-05 00:00:00', '2016-08-12 00:00:00', 3, 76.07, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10274, 'VINET', 6, '2016-08-06 00:00:00', '2016-08-16 00:00:00', 1, 6.01, '59 rue de l\\'\\'Abbaye', 'Reims', NULL, '51100', 'France');\nINSERT INTO `orders` VALUES (10275, 'MAGAA', 1, '2016-08-07 00:00:00', '2016-08-09 00:00:00', 1, 26.93, 'Via Ludovico il Moro 22', 'Bergamo', NULL, '24100', 'Italy');\nINSERT INTO `orders` VALUES (10276, 'TORTU', 8, '2016-08-08 00:00:00', '2016-08-14 00:00:00', 3, 13.84, 'Avda. Azteca 123', 'México D.F.', NULL, '05033', 'Mexico');\nINSERT INTO `orders` VALUES (10277, 'MORGK', 2, '2016-08-09 00:00:00', '2016-08-13 00:00:00', 3, 125.77, 'Heerstr. 22', 'Leipzig', NULL, '04179', 'Germany');\nINSERT INTO `orders` VALUES (10278, 'BERGS', 8, '2016-08-12 00:00:00', '2016-08-16 00:00:00', 2, 92.69, 'Berguvsvägen  8', 'Luleå', NULL, 'S-958 22', 'Sweden');\nINSERT INTO `orders` VALUES (10279, 'LEHMS', 8, '2016-08-13 00:00:00', '2016-08-16 00:00:00', 2, 25.83, 'Magazinweg 7', 'Frankfurt a.M.', NULL, '60528', 'Germany');\nINSERT INTO `orders` VALUES (10280, 'BERGS', 2, '2016-08-14 00:00:00', '2016-09-12 00:00:00', 1, 8.98, 'Berguvsvägen  8', 'Luleå', NULL, 'S-958 22', 'Sweden');\nINSERT INTO `orders` VALUES (10281, 'ROMEY', 4, '2016-08-14 00:00:00', '2016-08-21 00:00:00', 1, 2.94, 'Gran Vía-1', 'Madrid', NULL, '28001', 'Spain');\nINSERT INTO `orders` VALUES (10282, 'ROMEY', 4, '2016-08-15 00:00:00', '2016-08-21 00:00:00', 1, 12.69, 'Gran Vía-1', 'Madrid', NULL, '28001', 'Spain');\nINSERT INTO `orders` VALUES (10283, 'LILAS', 3, '2016-08-16 00:00:00', '2016-08-23 00:00:00', 3, 84.81, 'Carrera 52 con Ave. Bolívar #65-98 Llano Largo', 'Barquisimeto', 'Lara', '3508', 'Venezuela');\nINSERT INTO `orders` VALUES (10284, 'LEHMS', 4, '2016-08-19 00:00:00', '2016-08-27 00:00:00', 1, 76.56, 'Magazinweg 7', 'Frankfurt a.M.', NULL, '60528', 'Germany');\nINSERT INTO `orders` VALUES (10285, 'QUICK', 1, '2016-08-20 00:00:00', '2016-08-26 00:00:00', 2, 76.83, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10286, 'QUICK', 8, '2016-08-21 00:00:00', '2016-08-30 00:00:00', 3, 229.24, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10287, 'RICAR', 8, '2016-08-22 00:00:00', '2016-08-28 00:00:00', 3, 12.76, 'Av. Copacabana-267', 'Rio de Janeiro', 'RJ', '02389-890', 'Brazil');\nINSERT INTO `orders` VALUES (10288, 'REGGC', 4, '2016-08-23 00:00:00', '2016-09-03 00:00:00', 1, 7.45, 'Strada Provinciale 124', 'Reggio Emilia', NULL, '42100', 'Italy');\nINSERT INTO `orders` VALUES (10289, 'BSBEV', 7, '2016-08-26 00:00:00', '2016-08-28 00:00:00', 3, 22.77, 'Fauntleroy Circus', 'Londo', NULL, 'EC2 5NT', 'UK');\nINSERT INTO `orders` VALUES (10290, 'COMMI', 8, '2016-08-27 00:00:00', '2016-09-03 00:00:00', 1, 79.70, 'Av. dos Lusíadas-23', 'Sao Paulo', 'SP', '05432-043', 'Brazil');\nINSERT INTO `orders` VALUES (10291, 'QUEDE', 6, '2016-08-27 00:00:00', '2016-09-04 00:00:00', 2, 6.40, 'Rua da Panificadora-12', 'Rio de Janeiro', 'RJ', '02389-673', 'Brazil');\nINSERT INTO `orders` VALUES (10292, 'TRADH', 1, '2016-08-28 00:00:00', '2016-09-02 00:00:00', 2, 1.35, 'Av. Inês de Castro-414', 'Sao Paulo', 'SP', '05634-030', 'Brazil');\nINSERT INTO `orders` VALUES (10293, 'TORTU', 1, '2016-08-29 00:00:00', '2016-09-11 00:00:00', 3, 21.18, 'Avda. Azteca 123', 'México D.F.', NULL, '05033', 'Mexico');\nINSERT INTO `orders` VALUES (10294, 'RATTC', 4, '2016-08-30 00:00:00', '2016-09-05 00:00:00', 2, 147.26, '2817 Milton Dr.', 'Albuquerque', 'NM', '87110', 'USA');\nINSERT INTO `orders` VALUES (10295, 'VINET', 2, '2016-09-02 00:00:00', '2016-09-10 00:00:00', 2, 1.15, '59 rue de l\\'\\'Abbaye', 'Reims', NULL, '51100', 'France');\nINSERT INTO `orders` VALUES (10296, 'LILAS', 6, '2016-09-03 00:00:00', '2016-09-11 00:00:00', 1, 0.12, 'Carrera 52 con Ave. Bolívar #65-98 Llano Largo', 'Barquisimeto', 'Lara', '3508', 'Venezuela');\nINSERT INTO `orders` VALUES (10297, 'BLONP', 5, '2016-09-04 00:00:00', '2016-09-10 00:00:00', 2, 5.74, '24-place Kléber', 'Strasbourg', NULL, '67000', 'France');\nINSERT INTO `orders` VALUES (10298, 'HUNGO', 6, '2016-09-05 00:00:00', '2016-09-11 00:00:00', 2, 168.22, '8 Johnstown Road', 'Cork', 'Co. Cork', NULL, 'Ireland');\nINSERT INTO `orders` VALUES (10299, 'RICAR', 4, '2016-09-06 00:00:00', '2016-09-13 00:00:00', 2, 29.76, 'Av. Copacabana-267', 'Rio de Janeiro', 'RJ', '02389-890', 'Brazil');\nINSERT INTO `orders` VALUES (10300, 'MAGAA', 2, '2016-09-09 00:00:00', '2016-09-18 00:00:00', 2, 17.68, 'Via Ludovico il Moro 22', 'Bergamo', NULL, '24100', 'Italy');\nINSERT INTO `orders` VALUES (10301, 'WANDK', 8, '2016-09-09 00:00:00', '2016-09-17 00:00:00', 2, 45.08, 'Adenauerallee 900', 'Stuttgart', NULL, '70563', 'Germany');\nINSERT INTO `orders` VALUES (10302, 'SUPRD', 4, '2016-09-10 00:00:00', '2016-10-09 00:00:00', 2, 6.27, 'Boulevard Tirou-255', 'Charleroi', NULL, 'B-6000', 'Belgium');\nINSERT INTO `orders` VALUES (10303, 'GODOS', 7, '2016-09-11 00:00:00', '2016-09-18 00:00:00', 2, 107.83, 'C/ Romero-33', 'Sevilla', NULL, '41101', 'Spain');\nINSERT INTO `orders` VALUES (10304, 'TORTU', 1, '2016-09-12 00:00:00', '2016-09-17 00:00:00', 2, 63.79, 'Avda. Azteca 123', 'México D.F.', NULL, '05033', 'Mexico');\nINSERT INTO `orders` VALUES (10305, 'OLDWO', 8, '2016-09-13 00:00:00', '2016-10-09 00:00:00', 3, 257.62, '2743 Bering St.', 'Anchorage', 'AK', '99508', 'USA');\nINSERT INTO `orders` VALUES (10306, 'ROMEY', 1, '2016-09-16 00:00:00', '2016-09-23 00:00:00', 3, 7.56, 'Gran Vía-1', 'Madrid', NULL, '28001', 'Spain');\nINSERT INTO `orders` VALUES (10307, 'LONEP', 2, '2016-09-17 00:00:00', '2016-09-25 00:00:00', 2, 0.56, '89 Chiaroscuro Rd.', 'Portland', 'OR', '97219', 'USA');\nINSERT INTO `orders` VALUES (10308, 'ANATR', 7, '2016-09-18 00:00:00', '2016-09-24 00:00:00', 3, 1.61, 'Avda. de la Constitución 2222', 'México D.F.', NULL, '05021', 'Mexico');\nINSERT INTO `orders` VALUES (10309, 'HUNGO', 3, '2016-09-19 00:00:00', '2016-10-23 00:00:00', 1, 47.30, '8 Johnstown Road', 'Cork', 'Co. Cork', NULL, 'Ireland');\nINSERT INTO `orders` VALUES (10310, 'THEBI', 8, '2016-09-20 00:00:00', '2016-09-27 00:00:00', 2, 17.52, '89 Jefferson Way Suite 2', 'Portland', 'OR', '97201', 'USA');\nINSERT INTO `orders` VALUES (10311, 'DUMO', 1, '2016-09-20 00:00:00', '2016-09-26 00:00:00', 3, 24.69, '67-rue des Cinquante Otages', 'Nantes', NULL, '44000', 'France');\nINSERT INTO `orders` VALUES (10312, 'WANDK', 2, '2016-09-23 00:00:00', '2016-10-03 00:00:00', 2, 40.26, 'Adenauerallee 900', 'Stuttgart', NULL, '70563', 'Germany');\nINSERT INTO `orders` VALUES (10313, 'QUICK', 2, '2016-09-24 00:00:00', '2016-10-04 00:00:00', 2, 1.96, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10314, 'RATTC', 1, '2016-09-25 00:00:00', '2016-10-04 00:00:00', 2, 74.16, '2817 Milton Dr.', 'Albuquerque', 'NM', '87110', 'USA');\nINSERT INTO `orders` VALUES (10315, 'ISLAT', 4, '2016-09-26 00:00:00', '2016-10-03 00:00:00', 2, 41.76, 'Garden House Crowther Way', 'Cowes', 'Isle of Wight', 'PO31 7PJ', 'UK');\nINSERT INTO `orders` VALUES (10316, 'RATTC', 1, '2016-09-27 00:00:00', '2016-10-08 00:00:00', 3, 150.15, '2817 Milton Dr.', 'Albuquerque', 'NM', '87110', 'USA');\nINSERT INTO `orders` VALUES (10317, 'LONEP', 6, '2016-09-30 00:00:00', '2016-10-10 00:00:00', 1, 12.69, '89 Chiaroscuro Rd.', 'Portland', 'OR', '97219', 'USA');\nINSERT INTO `orders` VALUES (10318, 'ISLAT', 8, '2016-10-01 00:00:00', '2016-10-04 00:00:00', 2, 4.73, 'Garden House Crowther Way', 'Cowes', 'Isle of Wight', 'PO31 7PJ', 'UK');\nINSERT INTO `orders` VALUES (10319, 'TORTU', 7, '2016-10-02 00:00:00', '2016-10-11 00:00:00', 3, 64.50, 'Avda. Azteca 123', 'México D.F.', NULL, '05033', 'Mexico');\nINSERT INTO `orders` VALUES (10320, 'WARTH', 5, '2016-10-03 00:00:00', '2016-10-18 00:00:00', 3, 34.57, 'Torikatu 38', 'Oulu', NULL, '90110', 'Finland');\nINSERT INTO `orders` VALUES (10321, 'ISLAT', 3, '2016-10-03 00:00:00', '2016-10-11 00:00:00', 2, 3.43, 'Garden House Crowther Way', 'Cowes', 'Isle of Wight', 'PO31 7PJ', 'UK');\nINSERT INTO `orders` VALUES (10322, 'PERIC', 7, '2016-10-04 00:00:00', '2016-10-23 00:00:00', 3, 0.40, 'Calle Dr. Jorge Cash 321', 'México D.F.', NULL, '05033', 'Mexico');\nINSERT INTO `orders` VALUES (10323, 'KOENE', 4, '2016-10-07 00:00:00', '2016-10-14 00:00:00', 1, 4.88, 'Maubelstr. 90', 'Brandenburg', NULL, '14776', 'Germany');\nINSERT INTO `orders` VALUES (10324, 'SAVEA', 9, '2016-10-08 00:00:00', '2016-10-10 00:00:00', 1, 214.27, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10325, 'KOENE', 1, '2016-10-09 00:00:00', '2016-10-14 00:00:00', 3, 64.86, 'Maubelstr. 90', 'Brandenburg', NULL, '14776', 'Germany');\nINSERT INTO `orders` VALUES (10326, 'BOLID', 4, '2016-10-10 00:00:00', '2016-10-14 00:00:00', 2, 77.92, 'C/ Araquil-67', 'Madrid', NULL, '28023', 'Spain');\nINSERT INTO `orders` VALUES (10327, 'FOLKO', 2, '2016-10-11 00:00:00', '2016-10-14 00:00:00', 1, 63.36, 'Åkergatan 24', 'Bräcke', NULL, 'S-844 67', 'Sweden');\nINSERT INTO `orders` VALUES (10328, 'FURIB', 4, '2016-10-14 00:00:00', '2016-10-17 00:00:00', 3, 87.03, 'Jardim das rosas n. 32', 'Lisboa', NULL, '1675', 'Portugal');\nINSERT INTO `orders` VALUES (10329, 'SPLIR', 4, '2016-10-15 00:00:00', '2016-10-23 00:00:00', 2, 191.67, 'P.O. Box 555', 'Lander', 'WY', '82520', 'USA');\nINSERT INTO `orders` VALUES (10330, 'LILAS', 3, '2016-10-16 00:00:00', '2016-10-28 00:00:00', 1, 12.75, 'Carrera 52 con Ave. Bolívar #65-98 Llano Largo', 'Barquisimeto', 'Lara', '3508', 'Venezuela');\nINSERT INTO `orders` VALUES (10331, 'BONAP', 9, '2016-10-16 00:00:00', '2016-10-21 00:00:00', 1, 10.19, '12-rue des Bouchers', 'Marseille', NULL, '13008', 'France');\nINSERT INTO `orders` VALUES (10332, 'MEREP', 3, '2016-10-17 00:00:00', '2016-10-21 00:00:00', 2, 52.84, '43 rue St. Laurent', 'Montréal', 'Québec', 'H1J 1C3', 'Canada');\nINSERT INTO `orders` VALUES (10333, 'WARTH', 5, '2016-10-18 00:00:00', '2016-10-25 00:00:00', 3, 0.59, 'Torikatu 38', 'Oulu', NULL, '90110', 'Finland');\nINSERT INTO `orders` VALUES (10334, 'VICTE', 8, '2016-10-21 00:00:00', '2016-10-28 00:00:00', 2, 8.56, '2-rue du Commerce', 'Lyo', NULL, '69004', 'France');\nINSERT INTO `orders` VALUES (10335, 'HUNGO', 7, '2016-10-22 00:00:00', '2016-10-24 00:00:00', 2, 42.11, '8 Johnstown Road', 'Cork', 'Co. Cork', NULL, 'Ireland');\nINSERT INTO `orders` VALUES (10336, 'PRINI', 7, '2016-10-23 00:00:00', '2016-10-25 00:00:00', 2, 15.51, 'Estrada da saúde n. 58', 'Lisboa', NULL, '1756', 'Portugal');\nINSERT INTO `orders` VALUES (10337, 'FRANK', 4, '2016-10-24 00:00:00', '2016-10-29 00:00:00', 3, 108.26, 'Berliner Platz 43', 'Münche', NULL, '80805', 'Germany');\nINSERT INTO `orders` VALUES (10338, 'OLDWO', 4, '2016-10-25 00:00:00', '2016-10-29 00:00:00', 3, 84.21, '2743 Bering St.', 'Anchorage', 'AK', '99508', 'USA');\nINSERT INTO `orders` VALUES (10339, 'MEREP', 2, '2016-10-28 00:00:00', '2016-11-04 00:00:00', 2, 15.66, '43 rue St. Laurent', 'Montréal', 'Québec', 'H1J 1C3', 'Canada');\nINSERT INTO `orders` VALUES (10340, 'BONAP', 1, '2016-10-29 00:00:00', '2016-11-08 00:00:00', 3, 166.31, '12-rue des Bouchers', 'Marseille', NULL, '13008', 'France');\nINSERT INTO `orders` VALUES (10341, 'SIMOB', 7, '2016-10-29 00:00:00', '2016-11-05 00:00:00', 3, 26.78, 'Vinbæltet 34', 'Kobenhav', NULL, '1734', 'Denmark');\nINSERT INTO `orders` VALUES (10342, 'FRANK', 4, '2016-10-30 00:00:00', '2016-11-04 00:00:00', 2, 54.83, 'Berliner Platz 43', 'Münche', NULL, '80805', 'Germany');\nINSERT INTO `orders` VALUES (10343, 'LEHMS', 4, '2016-10-31 00:00:00', '2016-11-06 00:00:00', 1, 110.37, 'Magazinweg 7', 'Frankfurt a.M.', NULL, '60528', 'Germany');\nINSERT INTO `orders` VALUES (10344, 'WHITC', 4, '2016-11-01 00:00:00', '2016-11-05 00:00:00', 2, 23.29, '1029 - 12th Ave. S.', 'Seattle', 'WA', '98124', 'USA');\nINSERT INTO `orders` VALUES (10345, 'QUICK', 2, '2016-11-04 00:00:00', '2016-11-11 00:00:00', 2, 249.06, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10346, 'RATTC', 3, '2016-11-05 00:00:00', '2016-11-08 00:00:00', 3, 142.08, '2817 Milton Dr.', 'Albuquerque', 'NM', '87110', 'USA');\nINSERT INTO `orders` VALUES (10347, 'FAMIA', 4, '2016-11-06 00:00:00', '2016-11-08 00:00:00', 3, 3.10, 'Rua Orós-92', 'Sao Paulo', 'SP', '05442-030', 'Brazil');\nINSERT INTO `orders` VALUES (10348, 'WANDK', 4, '2016-11-07 00:00:00', '2016-11-15 00:00:00', 2, 0.78, 'Adenauerallee 900', 'Stuttgart', NULL, '70563', 'Germany');\nINSERT INTO `orders` VALUES (10349, 'SPLIR', 7, '2016-11-08 00:00:00', '2016-11-15 00:00:00', 1, 8.63, 'P.O. Box 555', 'Lander', 'WY', '82520', 'USA');\nINSERT INTO `orders` VALUES (10350, 'LAMAI', 6, '2016-11-11 00:00:00', '2016-12-03 00:00:00', 2, 64.19, '1 rue Alsace-Lorraine', 'Toulouse', NULL, '31000', 'France');\nINSERT INTO `orders` VALUES (10351, 'ERNSH', 1, '2016-11-11 00:00:00', '2016-11-20 00:00:00', 1, 162.33, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10352, 'FURIB', 3, '2016-11-12 00:00:00', '2016-11-18 00:00:00', 3, 1.30, 'Jardim das rosas n. 32', 'Lisboa', NULL, '1675', 'Portugal');\nINSERT INTO `orders` VALUES (10353, 'PICCO', 7, '2016-11-13 00:00:00', '2016-11-25 00:00:00', 3, 360.63, 'Geislweg 14', 'Salzburg', NULL, '5020', 'Austria');\nINSERT INTO `orders` VALUES (10354, 'PERIC', 8, '2016-11-14 00:00:00', '2016-11-20 00:00:00', 3, 53.80, 'Calle Dr. Jorge Cash 321', 'México D.F.', NULL, '05033', 'Mexico');\nINSERT INTO `orders` VALUES (10355, 'AROUT', 6, '2016-11-15 00:00:00', '2016-11-20 00:00:00', 1, 41.95, 'Brook Farm Stratford St. Mary', 'Colchester', 'Essex', 'CO7 6JX', 'UK');\nINSERT INTO `orders` VALUES (10356, 'WANDK', 6, '2016-11-18 00:00:00', '2016-11-27 00:00:00', 2, 36.71, 'Adenauerallee 900', 'Stuttgart', NULL, '70563', 'Germany');\nINSERT INTO `orders` VALUES (10357, 'LILAS', 1, '2016-11-19 00:00:00', '2016-12-02 00:00:00', 3, 34.88, 'Carrera 52 con Ave. Bolívar #65-98 Llano Largo', 'Barquisimeto', 'Lara', '3508', 'Venezuela');\nINSERT INTO `orders` VALUES (10358, 'LAMAI', 5, '2016-11-20 00:00:00', '2016-11-27 00:00:00', 1, 19.64, '1 rue Alsace-Lorraine', 'Toulouse', NULL, '31000', 'France');\nINSERT INTO `orders` VALUES (10359, 'SEVES', 5, '2016-11-21 00:00:00', '2016-11-26 00:00:00', 3, 288.43, '90 Wadhurst Rd.', 'Londo', NULL, 'OX15 4NB', 'UK');\nINSERT INTO `orders` VALUES (10360, 'BLONP', 4, '2016-11-22 00:00:00', '2016-12-02 00:00:00', 3, 131.70, '24-place Kléber', 'Strasbourg', NULL, '67000', 'France');\nINSERT INTO `orders` VALUES (10361, 'QUICK', 1, '2016-11-22 00:00:00', '2016-12-03 00:00:00', 2, 183.17, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10362, 'BONAP', 3, '2016-11-25 00:00:00', '2016-11-28 00:00:00', 1, 96.04, '12-rue des Bouchers', 'Marseille', NULL, '13008', 'France');\nINSERT INTO `orders` VALUES (10363, 'DRACD', 4, '2016-11-26 00:00:00', '2016-12-04 00:00:00', 3, 30.54, 'Walserweg 21', 'Aache', NULL, '52066', 'Germany');\nINSERT INTO `orders` VALUES (10364, 'EASTC', 1, '2016-11-26 00:00:00', '2016-12-04 00:00:00', 1, 71.97, '35 King George', 'Londo', NULL, 'WX3 6FW', 'UK');\nINSERT INTO `orders` VALUES (10365, 'ANTO', 3, '2016-11-27 00:00:00', '2016-12-02 00:00:00', 2, 22.00, 'Mataderos  2312', 'México D.F.', NULL, '05023', 'Mexico');\nINSERT INTO `orders` VALUES (10366, 'GALED', 8, '2016-11-28 00:00:00', '2016-12-30 00:00:00', 2, 10.14, 'Rambla de Cataluña-23', 'Barcelona', NULL, '8022', 'Spain');\nINSERT INTO `orders` VALUES (10367, 'VAFFE', 7, '2016-11-28 00:00:00', '2016-12-02 00:00:00', 3, 13.55, 'Smagsloget 45', 'Århus', NULL, '8200', 'Denmark');\nINSERT INTO `orders` VALUES (10368, 'ERNSH', 2, '2016-11-29 00:00:00', '2016-12-02 00:00:00', 2, 101.95, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10369, 'SPLIR', 8, '2016-12-02 00:00:00', '2016-12-09 00:00:00', 2, 195.68, 'P.O. Box 555', 'Lander', 'WY', '82520', 'USA');\nINSERT INTO `orders` VALUES (10370, 'CHOPS', 6, '2016-12-03 00:00:00', '2016-12-27 00:00:00', 2, 1.17, 'Hauptstr. 31', 'Ber', NULL, '3012', 'Switzerland');\nINSERT INTO `orders` VALUES (10371, 'LAMAI', 1, '2016-12-03 00:00:00', '2016-12-24 00:00:00', 1, 0.45, '1 rue Alsace-Lorraine', 'Toulouse', NULL, '31000', 'France');\nINSERT INTO `orders` VALUES (10372, 'QUEE', 5, '2016-12-04 00:00:00', '2016-12-09 00:00:00', 2, 890.78, 'Alameda dos Canàrios-891', 'Sao Paulo', 'SP', '05487-020', 'Brazil');\nINSERT INTO `orders` VALUES (10373, 'HUNGO', 4, '2016-12-05 00:00:00', '2016-12-11 00:00:00', 3, 124.12, '8 Johnstown Road', 'Cork', 'Co. Cork', NULL, 'Ireland');\nINSERT INTO `orders` VALUES (10374, 'WOLZA', 1, '2016-12-05 00:00:00', '2016-12-09 00:00:00', 3, 3.94, 'ul. Filtrowa 68', 'Warszawa', NULL, '01-012', 'Poland');\nINSERT INTO `orders` VALUES (10375, 'HUNGC', 3, '2016-12-06 00:00:00', '2016-12-09 00:00:00', 2, 20.12, 'City Center Plaza 516 Main St.', 'Elgi', 'OR', '97827', 'USA');\nINSERT INTO `orders` VALUES (10376, 'MEREP', 1, '2016-12-09 00:00:00', '2016-12-13 00:00:00', 2, 20.39, '43 rue St. Laurent', 'Montréal', 'Québec', 'H1J 1C3', 'Canada');\nINSERT INTO `orders` VALUES (10377, 'SEVES', 1, '2016-12-09 00:00:00', '2016-12-13 00:00:00', 3, 22.21, '90 Wadhurst Rd.', 'Londo', NULL, 'OX15 4NB', 'UK');\nINSERT INTO `orders` VALUES (10378, 'FOLKO', 5, '2016-12-10 00:00:00', '2016-12-19 00:00:00', 3, 5.44, 'Åkergatan 24', 'Bräcke', NULL, 'S-844 67', 'Sweden');\nINSERT INTO `orders` VALUES (10379, 'QUEDE', 2, '2016-12-11 00:00:00', '2016-12-13 00:00:00', 1, 45.03, 'Rua da Panificadora-12', 'Rio de Janeiro', 'RJ', '02389-673', 'Brazil');\nINSERT INTO `orders` VALUES (10380, 'HUNGO', 8, '2016-12-12 00:00:00', '2017-01-16 00:00:00', 3, 35.03, '8 Johnstown Road', 'Cork', 'Co. Cork', NULL, 'Ireland');\nINSERT INTO `orders` VALUES (10381, 'LILAS', 3, '2016-12-12 00:00:00', '2016-12-13 00:00:00', 3, 7.99, 'Carrera 52 con Ave. Bolívar #65-98 Llano Largo', 'Barquisimeto', 'Lara', '3508', 'Venezuela');\nINSERT INTO `orders` VALUES (10382, 'ERNSH', 4, '2016-12-13 00:00:00', '2016-12-16 00:00:00', 1, 94.77, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10383, 'AROUT', 8, '2016-12-16 00:00:00', '2016-12-18 00:00:00', 3, 34.24, 'Brook Farm Stratford St. Mary', 'Colchester', 'Essex', 'CO7 6JX', 'UK');\nINSERT INTO `orders` VALUES (10384, 'BERGS', 3, '2016-12-16 00:00:00', '2016-12-20 00:00:00', 3, 168.64, 'Berguvsvägen  8', 'Luleå', NULL, 'S-958 22', 'Sweden');\nINSERT INTO `orders` VALUES (10385, 'SPLIR', 1, '2016-12-17 00:00:00', '2016-12-23 00:00:00', 2, 30.96, 'P.O. Box 555', 'Lander', 'WY', '82520', 'USA');\nINSERT INTO `orders` VALUES (10386, 'FAMIA', 9, '2016-12-18 00:00:00', '2016-12-25 00:00:00', 3, 13.99, 'Rua Orós-92', 'Sao Paulo', 'SP', '05442-030', 'Brazil');\nINSERT INTO `orders` VALUES (10387, 'SANTG', 1, '2016-12-18 00:00:00', '2016-12-20 00:00:00', 2, 93.63, 'Erling Skakkes gate 78', 'Staver', NULL, '4110', 'Norway');\nINSERT INTO `orders` VALUES (10388, 'SEVES', 2, '2016-12-19 00:00:00', '2016-12-20 00:00:00', 1, 34.86, '90 Wadhurst Rd.', 'Londo', NULL, 'OX15 4NB', 'UK');\nINSERT INTO `orders` VALUES (10389, 'BOTTM', 4, '2016-12-20 00:00:00', '2016-12-24 00:00:00', 2, 47.42, '23 Tsawassen Blvd.', 'Tsawasse', 'BC', 'T2F 8M4', 'Canada');\nINSERT INTO `orders` VALUES (10390, 'ERNSH', 6, '2016-12-23 00:00:00', '2016-12-26 00:00:00', 1, 126.38, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10391, 'DRACD', 3, '2016-12-23 00:00:00', '2016-12-31 00:00:00', 3, 5.45, 'Walserweg 21', 'Aache', NULL, '52066', 'Germany');\nINSERT INTO `orders` VALUES (10392, 'PICCO', 2, '2016-12-24 00:00:00', '2017-01-01 00:00:00', 3, 122.46, 'Geislweg 14', 'Salzburg', NULL, '5020', 'Austria');\nINSERT INTO `orders` VALUES (10393, 'SAVEA', 1, '2016-12-25 00:00:00', '2017-01-03 00:00:00', 3, 126.56, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10394, 'HUNGC', 1, '2016-12-25 00:00:00', '2017-01-03 00:00:00', 3, 30.34, 'City Center Plaza 516 Main St.', 'Elgi', 'OR', '97827', 'USA');\nINSERT INTO `orders` VALUES (10395, 'HILAA', 6, '2016-12-26 00:00:00', '2017-01-03 00:00:00', 1, 184.41, 'Carrera 22 con Ave. Carlos Soublette #8-35', 'San Cristóbal', 'Táchira', '5022', 'Venezuela');\nINSERT INTO `orders` VALUES (10396, 'FRANK', 1, '2016-12-27 00:00:00', '2017-01-06 00:00:00', 3, 135.35, 'Berliner Platz 43', 'Münche', NULL, '80805', 'Germany');\nINSERT INTO `orders` VALUES (10397, 'PRINI', 5, '2016-12-27 00:00:00', '2017-01-02 00:00:00', 1, 60.26, 'Estrada da saúde n. 58', 'Lisboa', NULL, '1756', 'Portugal');\nINSERT INTO `orders` VALUES (10398, 'SAVEA', 2, '2016-12-30 00:00:00', '2017-01-09 00:00:00', 3, 89.16, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10399, 'VAFFE', 8, '2016-12-31 00:00:00', '2017-01-08 00:00:00', 3, 27.36, 'Smagsloget 45', 'Århus', NULL, '8200', 'Denmark');\nINSERT INTO `orders` VALUES (10400, 'EASTC', 1, '2017-01-01 00:00:00', '2017-01-16 00:00:00', 3, 83.93, '35 King George', 'Londo', NULL, 'WX3 6FW', 'UK');\nINSERT INTO `orders` VALUES (10401, 'RATTC', 1, '2017-01-01 00:00:00', '2017-01-10 00:00:00', 1, 12.51, '2817 Milton Dr.', 'Albuquerque', 'NM', '87110', 'USA');\nINSERT INTO `orders` VALUES (10402, 'ERNSH', 8, '2017-01-02 00:00:00', '2017-01-10 00:00:00', 2, 67.88, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10403, 'ERNSH', 4, '2017-01-03 00:00:00', '2017-01-09 00:00:00', 3, 73.79, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10404, 'MAGAA', 2, '2017-01-03 00:00:00', '2017-01-08 00:00:00', 1, 155.97, 'Via Ludovico il Moro 22', 'Bergamo', NULL, '24100', 'Italy');\nINSERT INTO `orders` VALUES (10405, 'LINOD', 1, '2017-01-06 00:00:00', '2017-01-22 00:00:00', 1, 34.82, 'Ave. 5 de Mayo Porlamar', 'I. de Margarita', 'Nueva Esparta', '4980', 'Venezuela');\nINSERT INTO `orders` VALUES (10406, 'QUEE', 7, '2017-01-07 00:00:00', '2017-01-13 00:00:00', 1, 108.04, 'Alameda dos Canàrios-891', 'Sao Paulo', 'SP', '05487-020', 'Brazil');\nINSERT INTO `orders` VALUES (10407, 'OTTIK', 2, '2017-01-07 00:00:00', '2017-01-30 00:00:00', 2, 91.48, 'Mehrheimerstr. 369', 'Köl', NULL, '50739', 'Germany');\nINSERT INTO `orders` VALUES (10408, 'FOLIG', 8, '2017-01-08 00:00:00', '2017-01-14 00:00:00', 1, 11.26, '184-chaussée de Tournai', 'Lille', NULL, '59000', 'France');\nINSERT INTO `orders` VALUES (10409, 'OCEA', 3, '2017-01-09 00:00:00', '2017-01-14 00:00:00', 1, 29.83, 'Ing. Gustavo Moncada 8585 Piso 20-A', 'Buenos Aires', NULL, '1010', 'Argentina');\nINSERT INTO `orders` VALUES (10410, 'BOTTM', 3, '2017-01-10 00:00:00', '2017-01-15 00:00:00', 3, 2.40, '23 Tsawassen Blvd.', 'Tsawasse', 'BC', 'T2F 8M4', 'Canada');\nINSERT INTO `orders` VALUES (10411, 'BOTTM', 9, '2017-01-10 00:00:00', '2017-01-21 00:00:00', 3, 23.65, '23 Tsawassen Blvd.', 'Tsawasse', 'BC', 'T2F 8M4', 'Canada');\nINSERT INTO `orders` VALUES (10412, 'WARTH', 8, '2017-01-13 00:00:00', '2017-01-15 00:00:00', 2, 3.77, 'Torikatu 38', 'Oulu', NULL, '90110', 'Finland');\nINSERT INTO `orders` VALUES (10413, 'LAMAI', 3, '2017-01-14 00:00:00', '2017-01-16 00:00:00', 2, 95.66, '1 rue Alsace-Lorraine', 'Toulouse', NULL, '31000', 'France');\nINSERT INTO `orders` VALUES (10414, 'FAMIA', 2, '2017-01-14 00:00:00', '2017-01-17 00:00:00', 3, 21.48, 'Rua Orós-92', 'Sao Paulo', 'SP', '05442-030', 'Brazil');\nINSERT INTO `orders` VALUES (10415, 'HUNGC', 3, '2017-01-15 00:00:00', '2017-01-24 00:00:00', 1, 0.20, 'City Center Plaza 516 Main St.', 'Elgi', 'OR', '97827', 'USA');\nINSERT INTO `orders` VALUES (10416, 'WARTH', 8, '2017-01-16 00:00:00', '2017-01-27 00:00:00', 3, 22.72, 'Torikatu 38', 'Oulu', NULL, '90110', 'Finland');\nINSERT INTO `orders` VALUES (10417, 'SIMOB', 4, '2017-01-16 00:00:00', '2017-01-28 00:00:00', 3, 70.29, 'Vinbæltet 34', 'Kobenhav', NULL, '1734', 'Denmark');\nINSERT INTO `orders` VALUES (10418, 'QUICK', 4, '2017-01-17 00:00:00', '2017-01-24 00:00:00', 1, 17.55, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10419, 'RICSU', 4, '2017-01-20 00:00:00', '2017-01-30 00:00:00', 2, 137.35, 'Starenweg 5', 'Genève', NULL, '1204', 'Switzerland');\nINSERT INTO `orders` VALUES (10420, 'WELLI', 3, '2017-01-21 00:00:00', '2017-01-27 00:00:00', 1, 44.12, 'Rua do Mercado-12', 'Resende', 'SP', '08737-363', 'Brazil');\nINSERT INTO `orders` VALUES (10421, 'QUEDE', 8, '2017-01-21 00:00:00', '2017-01-27 00:00:00', 1, 99.23, 'Rua da Panificadora-12', 'Rio de Janeiro', 'RJ', '02389-673', 'Brazil');\nINSERT INTO `orders` VALUES (10422, 'FRANS', 2, '2017-01-22 00:00:00', '2017-01-31 00:00:00', 1, 3.02, 'Via Monte Bianco 34', 'Torino', NULL, '10100', 'Italy');\nINSERT INTO `orders` VALUES (10423, 'GOURL', 6, '2017-01-23 00:00:00', '2017-02-24 00:00:00', 3, 24.50, 'Av. Brasil-442', 'Campinas', 'SP', '04876-786', 'Brazil');\nINSERT INTO `orders` VALUES (10424, 'MEREP', 7, '2017-01-23 00:00:00', '2017-01-27 00:00:00', 2, 370.61, '43 rue St. Laurent', 'Montréal', 'Québec', 'H1J 1C3', 'Canada');\nINSERT INTO `orders` VALUES (10425, 'LAMAI', 6, '2017-01-24 00:00:00', '2017-02-14 00:00:00', 2, 7.93, '1 rue Alsace-Lorraine', 'Toulouse', NULL, '31000', 'France');\nINSERT INTO `orders` VALUES (10426, 'GALED', 4, '2017-01-27 00:00:00', '2017-02-06 00:00:00', 1, 18.69, 'Rambla de Cataluña-23', 'Barcelona', NULL, '8022', 'Spain');\nINSERT INTO `orders` VALUES (10427, 'PICCO', 4, '2017-01-27 00:00:00', '2017-03-03 00:00:00', 2, 31.29, 'Geislweg 14', 'Salzburg', NULL, '5020', 'Austria');\nINSERT INTO `orders` VALUES (10428, 'REGGC', 7, '2017-01-28 00:00:00', '2017-02-04 00:00:00', 1, 11.09, 'Strada Provinciale 124', 'Reggio Emilia', NULL, '42100', 'Italy');\nINSERT INTO `orders` VALUES (10429, 'HUNGO', 3, '2017-01-29 00:00:00', '2017-02-07 00:00:00', 2, 56.63, '8 Johnstown Road', 'Cork', 'Co. Cork', NULL, 'Ireland');\nINSERT INTO `orders` VALUES (10430, 'ERNSH', 4, '2017-01-30 00:00:00', '2017-02-03 00:00:00', 1, 458.78, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10431, 'BOTTM', 4, '2017-01-30 00:00:00', '2017-02-07 00:00:00', 2, 44.17, '23 Tsawassen Blvd.', 'Tsawasse', 'BC', 'T2F 8M4', 'Canada');\nINSERT INTO `orders` VALUES (10432, 'SPLIR', 3, '2017-01-31 00:00:00', '2017-02-07 00:00:00', 2, 4.34, 'P.O. Box 555', 'Lander', 'WY', '82520', 'USA');\nINSERT INTO `orders` VALUES (10433, 'PRINI', 3, '2017-02-03 00:00:00', '2017-03-04 00:00:00', 3, 73.83, 'Estrada da saúde n. 58', 'Lisboa', NULL, '1756', 'Portugal');\nINSERT INTO `orders` VALUES (10434, 'FOLKO', 3, '2017-02-03 00:00:00', '2017-02-13 00:00:00', 2, 17.92, 'Åkergatan 24', 'Bräcke', NULL, 'S-844 67', 'Sweden');\nINSERT INTO `orders` VALUES (10435, 'CONSH', 8, '2017-02-04 00:00:00', '2017-02-07 00:00:00', 2, 9.21, 'Berkeley Gardens 12  Brewery', 'Londo', NULL, 'WX1 6LT', 'UK');\nINSERT INTO `orders` VALUES (10436, 'BLONP', 3, '2017-02-05 00:00:00', '2017-02-11 00:00:00', 2, 156.66, '24-place Kléber', 'Strasbourg', NULL, '67000', 'France');\nINSERT INTO `orders` VALUES (10437, 'WARTH', 8, '2017-02-05 00:00:00', '2017-02-12 00:00:00', 1, 19.97, 'Torikatu 38', 'Oulu', NULL, '90110', 'Finland');\nINSERT INTO `orders` VALUES (10438, 'TOMSP', 3, '2017-02-06 00:00:00', '2017-02-14 00:00:00', 2, 8.24, 'Luisenstr. 48', 'Münster', NULL, '44087', 'Germany');\nINSERT INTO `orders` VALUES (10439, 'MEREP', 6, '2017-02-07 00:00:00', '2017-02-10 00:00:00', 3, 4.07, '43 rue St. Laurent', 'Montréal', 'Québec', 'H1J 1C3', 'Canada');\nINSERT INTO `orders` VALUES (10440, 'SAVEA', 4, '2017-02-10 00:00:00', '2017-02-28 00:00:00', 2, 86.53, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10441, 'OLDWO', 3, '2017-02-10 00:00:00', '2017-03-14 00:00:00', 2, 73.02, '2743 Bering St.', 'Anchorage', 'AK', '99508', 'USA');\nINSERT INTO `orders` VALUES (10442, 'ERNSH', 3, '2017-02-11 00:00:00', '2017-02-18 00:00:00', 2, 47.94, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10443, 'REGGC', 8, '2017-02-12 00:00:00', '2017-02-14 00:00:00', 1, 13.95, 'Strada Provinciale 124', 'Reggio Emilia', NULL, '42100', 'Italy');\nINSERT INTO `orders` VALUES (10444, 'BERGS', 3, '2017-02-12 00:00:00', '2017-02-21 00:00:00', 3, 3.50, 'Berguvsvägen  8', 'Luleå', NULL, 'S-958 22', 'Sweden');\nINSERT INTO `orders` VALUES (10445, 'BERGS', 3, '2017-02-13 00:00:00', '2017-02-20 00:00:00', 1, 9.30, 'Berguvsvägen  8', 'Luleå', NULL, 'S-958 22', 'Sweden');\nINSERT INTO `orders` VALUES (10446, 'TOMSP', 6, '2017-02-14 00:00:00', '2017-02-19 00:00:00', 1, 14.68, 'Luisenstr. 48', 'Münster', NULL, '44087', 'Germany');\nINSERT INTO `orders` VALUES (10447, 'RICAR', 4, '2017-02-14 00:00:00', '2017-03-07 00:00:00', 2, 68.66, 'Av. Copacabana-267', 'Rio de Janeiro', 'RJ', '02389-890', 'Brazil');\nINSERT INTO `orders` VALUES (10448, 'RANCH', 4, '2017-02-17 00:00:00', '2017-02-24 00:00:00', 2, 38.82, 'Av. del Libertador 900', 'Buenos Aires', NULL, '1010', 'Argentina');\nINSERT INTO `orders` VALUES (10449, 'BLONP', 3, '2017-02-18 00:00:00', '2017-02-27 00:00:00', 2, 53.30, '24-place Kléber', 'Strasbourg', NULL, '67000', 'France');\nINSERT INTO `orders` VALUES (10450, 'VICTE', 8, '2017-02-19 00:00:00', '2017-03-11 00:00:00', 2, 7.23, '2-rue du Commerce', 'Lyo', NULL, '69004', 'France');\nINSERT INTO `orders` VALUES (10451, 'QUICK', 4, '2017-02-19 00:00:00', '2017-03-12 00:00:00', 3, 189.09, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10452, 'SAVEA', 8, '2017-02-20 00:00:00', '2017-02-26 00:00:00', 1, 140.26, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10453, 'AROUT', 1, '2017-02-21 00:00:00', '2017-02-26 00:00:00', 2, 25.36, 'Brook Farm Stratford St. Mary', 'Colchester', 'Essex', 'CO7 6JX', 'UK');\nINSERT INTO `orders` VALUES (10454, 'LAMAI', 4, '2017-02-21 00:00:00', '2017-02-25 00:00:00', 3, 2.74, '1 rue Alsace-Lorraine', 'Toulouse', NULL, '31000', 'France');\nINSERT INTO `orders` VALUES (10455, 'WARTH', 8, '2017-02-24 00:00:00', '2017-03-03 00:00:00', 2, 180.45, 'Torikatu 38', 'Oulu', NULL, '90110', 'Finland');\nINSERT INTO `orders` VALUES (10456, 'KOENE', 8, '2017-02-25 00:00:00', '2017-02-28 00:00:00', 2, 8.12, 'Maubelstr. 90', 'Brandenburg', NULL, '14776', 'Germany');\nINSERT INTO `orders` VALUES (10457, 'KOENE', 2, '2017-02-25 00:00:00', '2017-03-03 00:00:00', 1, 11.57, 'Maubelstr. 90', 'Brandenburg', NULL, '14776', 'Germany');\nINSERT INTO `orders` VALUES (10458, 'SUPRD', 7, '2017-02-26 00:00:00', '2017-03-04 00:00:00', 3, 147.06, 'Boulevard Tirou-255', 'Charleroi', NULL, 'B-6000', 'Belgium');\nINSERT INTO `orders` VALUES (10459, 'VICTE', 4, '2017-02-27 00:00:00', '2017-02-28 00:00:00', 2, 25.09, '2-rue du Commerce', 'Lyo', NULL, '69004', 'France');\nINSERT INTO `orders` VALUES (10460, 'FOLKO', 8, '2017-02-28 00:00:00', '2017-03-03 00:00:00', 1, 16.27, 'Åkergatan 24', 'Bräcke', NULL, 'S-844 67', 'Sweden');\nINSERT INTO `orders` VALUES (10461, 'LILAS', 1, '2017-02-28 00:00:00', '2017-03-05 00:00:00', 3, 148.61, 'Carrera 52 con Ave. Bolívar #65-98 Llano Largo', 'Barquisimeto', 'Lara', '3508', 'Venezuela');\nINSERT INTO `orders` VALUES (10462, 'CONSH', 2, '2017-03-03 00:00:00', '2017-03-18 00:00:00', 1, 6.17, 'Berkeley Gardens 12  Brewery', 'Londo', NULL, 'WX1 6LT', 'UK');\nINSERT INTO `orders` VALUES (10463, 'SUPRD', 5, '2017-03-04 00:00:00', '2017-03-06 00:00:00', 3, 14.78, 'Boulevard Tirou-255', 'Charleroi', NULL, 'B-6000', 'Belgium');\nINSERT INTO `orders` VALUES (10464, 'FURIB', 4, '2017-03-04 00:00:00', '2017-03-14 00:00:00', 2, 89.00, 'Jardim das rosas n. 32', 'Lisboa', NULL, '1675', 'Portugal');\nINSERT INTO `orders` VALUES (10465, 'VAFFE', 1, '2017-03-05 00:00:00', '2017-03-14 00:00:00', 3, 145.04, 'Smagsloget 45', 'Århus', NULL, '8200', 'Denmark');\nINSERT INTO `orders` VALUES (10466, 'COMMI', 4, '2017-03-06 00:00:00', '2017-03-13 00:00:00', 1, 11.93, 'Av. dos Lusíadas-23', 'Sao Paulo', 'SP', '05432-043', 'Brazil');\nINSERT INTO `orders` VALUES (10467, 'MAGAA', 8, '2017-03-06 00:00:00', '2017-03-11 00:00:00', 2, 4.93, 'Via Ludovico il Moro 22', 'Bergamo', NULL, '24100', 'Italy');\nINSERT INTO `orders` VALUES (10468, 'KOENE', 3, '2017-03-07 00:00:00', '2017-03-12 00:00:00', 3, 44.12, 'Maubelstr. 90', 'Brandenburg', NULL, '14776', 'Germany');\nINSERT INTO `orders` VALUES (10469, 'WHITC', 1, '2017-03-10 00:00:00', '2017-03-14 00:00:00', 1, 60.18, '1029 - 12th Ave. S.', 'Seattle', 'WA', '98124', 'USA');\nINSERT INTO `orders` VALUES (10470, 'BONAP', 4, '2017-03-11 00:00:00', '2017-03-14 00:00:00', 2, 64.56, '12-rue des Bouchers', 'Marseille', NULL, '13008', 'France');\nINSERT INTO `orders` VALUES (10471, 'BSBEV', 2, '2017-03-11 00:00:00', '2017-03-18 00:00:00', 3, 45.59, 'Fauntleroy Circus', 'Londo', NULL, 'EC2 5NT', 'UK');\nINSERT INTO `orders` VALUES (10472, 'SEVES', 8, '2017-03-12 00:00:00', '2017-03-19 00:00:00', 1, 4.20, '90 Wadhurst Rd.', 'Londo', NULL, 'OX15 4NB', 'UK');\nINSERT INTO `orders` VALUES (10473, 'ISLAT', 1, '2017-03-13 00:00:00', '2017-03-21 00:00:00', 3, 16.37, 'Garden House Crowther Way', 'Cowes', 'Isle of Wight', 'PO31 7PJ', 'UK');\nINSERT INTO `orders` VALUES (10474, 'PERIC', 5, '2017-03-13 00:00:00', '2017-03-21 00:00:00', 2, 83.49, 'Calle Dr. Jorge Cash 321', 'México D.F.', NULL, '05033', 'Mexico');\nINSERT INTO `orders` VALUES (10475, 'SUPRD', 9, '2017-03-14 00:00:00', '2017-04-04 00:00:00', 1, 68.52, 'Boulevard Tirou-255', 'Charleroi', NULL, 'B-6000', 'Belgium');\nINSERT INTO `orders` VALUES (10476, 'HILAA', 8, '2017-03-17 00:00:00', '2017-03-24 00:00:00', 3, 4.41, 'Carrera 22 con Ave. Carlos Soublette #8-35', 'San Cristóbal', 'Táchira', '5022', 'Venezuela');\nINSERT INTO `orders` VALUES (10477, 'PRINI', 5, '2017-03-17 00:00:00', '2017-03-25 00:00:00', 2, 13.02, 'Estrada da saúde n. 58', 'Lisboa', NULL, '1756', 'Portugal');\nINSERT INTO `orders` VALUES (10478, 'VICTE', 2, '2017-03-18 00:00:00', '2017-03-26 00:00:00', 3, 4.81, '2-rue du Commerce', 'Lyo', NULL, '69004', 'France');\nINSERT INTO `orders` VALUES (10479, 'RATTC', 3, '2017-03-19 00:00:00', '2017-03-21 00:00:00', 3, 708.95, '2817 Milton Dr.', 'Albuquerque', 'NM', '87110', 'USA');\nINSERT INTO `orders` VALUES (10480, 'FOLIG', 6, '2017-03-20 00:00:00', '2017-03-24 00:00:00', 2, 1.35, '184-chaussée de Tournai', 'Lille', NULL, '59000', 'France');\nINSERT INTO `orders` VALUES (10481, 'RICAR', 8, '2017-03-20 00:00:00', '2017-03-25 00:00:00', 2, 64.33, 'Av. Copacabana-267', 'Rio de Janeiro', 'RJ', '02389-890', 'Brazil');\nINSERT INTO `orders` VALUES (10482, 'LAZYK', 1, '2017-03-21 00:00:00', '2017-04-10 00:00:00', 3, 7.48, '12 Orchestra Terrace', 'Walla Walla', 'WA', '99362', 'USA');\nINSERT INTO `orders` VALUES (10483, 'WHITC', 7, '2017-03-24 00:00:00', '2017-04-25 00:00:00', 2, 15.28, '1029 - 12th Ave. S.', 'Seattle', 'WA', '98124', 'USA');\nINSERT INTO `orders` VALUES (10484, 'BSBEV', 3, '2017-03-24 00:00:00', '2017-04-01 00:00:00', 3, 6.88, 'Fauntleroy Circus', 'Londo', NULL, 'EC2 5NT', 'UK');\nINSERT INTO `orders` VALUES (10485, 'LINOD', 4, '2017-03-25 00:00:00', '2017-03-31 00:00:00', 2, 64.45, 'Ave. 5 de Mayo Porlamar', 'I. de Margarita', 'Nueva Esparta', '4980', 'Venezuela');\nINSERT INTO `orders` VALUES (10486, 'HILAA', 1, '2017-03-26 00:00:00', '2017-04-02 00:00:00', 2, 30.53, 'Carrera 22 con Ave. Carlos Soublette #8-35', 'San Cristóbal', 'Táchira', '5022', 'Venezuela');\nINSERT INTO `orders` VALUES (10487, 'QUEE', 2, '2017-03-26 00:00:00', '2017-03-28 00:00:00', 2, 71.07, 'Alameda dos Canàrios-891', 'Sao Paulo', 'SP', '05487-020', 'Brazil');\nINSERT INTO `orders` VALUES (10488, 'FRANK', 8, '2017-03-27 00:00:00', '2017-04-02 00:00:00', 2, 4.93, 'Berliner Platz 43', 'Münche', NULL, '80805', 'Germany');\nINSERT INTO `orders` VALUES (10489, 'PICCO', 6, '2017-03-28 00:00:00', '2017-04-09 00:00:00', 2, 5.29, 'Geislweg 14', 'Salzburg', NULL, '5020', 'Austria');\nINSERT INTO `orders` VALUES (10490, 'HILAA', 7, '2017-03-31 00:00:00', '2017-04-03 00:00:00', 2, 210.19, 'Carrera 22 con Ave. Carlos Soublette #8-35', 'San Cristóbal', 'Táchira', '5022', 'Venezuela');\nINSERT INTO `orders` VALUES (10491, 'FURIB', 8, '2017-03-31 00:00:00', '2017-04-08 00:00:00', 3, 16.96, 'Jardim das rosas n. 32', 'Lisboa', NULL, '1675', 'Portugal');\nINSERT INTO `orders` VALUES (10492, 'BOTTM', 3, '2017-04-01 00:00:00', '2017-04-11 00:00:00', 1, 62.89, '23 Tsawassen Blvd.', 'Tsawasse', 'BC', 'T2F 8M4', 'Canada');\nINSERT INTO `orders` VALUES (10493, 'LAMAI', 4, '2017-04-02 00:00:00', '2017-04-10 00:00:00', 3, 10.64, '1 rue Alsace-Lorraine', 'Toulouse', NULL, '31000', 'France');\nINSERT INTO `orders` VALUES (10494, 'COMMI', 4, '2017-04-02 00:00:00', '2017-04-09 00:00:00', 2, 65.99, 'Av. dos Lusíadas-23', 'Sao Paulo', 'SP', '05432-043', 'Brazil');\nINSERT INTO `orders` VALUES (10495, 'LAUGB', 3, '2017-04-03 00:00:00', '2017-04-11 00:00:00', 3, 4.65, '2319 Elm St.', 'Vancouver', 'BC', 'V3F 2K1', 'Canada');\nINSERT INTO `orders` VALUES (10496, 'TRADH', 7, '2017-04-04 00:00:00', '2017-04-07 00:00:00', 2, 46.77, 'Av. Inês de Castro-414', 'Sao Paulo', 'SP', '05634-030', 'Brazil');\nINSERT INTO `orders` VALUES (10497, 'LEHMS', 7, '2017-04-04 00:00:00', '2017-04-07 00:00:00', 1, 36.21, 'Magazinweg 7', 'Frankfurt a.M.', NULL, '60528', 'Germany');\nINSERT INTO `orders` VALUES (10498, 'HILAA', 8, '2017-04-07 00:00:00', '2017-04-11 00:00:00', 2, 29.75, 'Carrera 22 con Ave. Carlos Soublette #8-35', 'San Cristóbal', 'Táchira', '5022', 'Venezuela');\nINSERT INTO `orders` VALUES (10499, 'LILAS', 4, '2017-04-08 00:00:00', '2017-04-16 00:00:00', 2, 102.02, 'Carrera 52 con Ave. Bolívar #65-98 Llano Largo', 'Barquisimeto', 'Lara', '3508', 'Venezuela');\nINSERT INTO `orders` VALUES (10500, 'LAMAI', 6, '2017-04-09 00:00:00', '2017-04-17 00:00:00', 1, 42.68, '1 rue Alsace-Lorraine', 'Toulouse', NULL, '31000', 'France');\nINSERT INTO `orders` VALUES (10501, 'BLAUS', 9, '2017-04-09 00:00:00', '2017-04-16 00:00:00', 3, 8.85, 'Forsterstr. 57', 'Mannheim', NULL, '68306', 'Germany');\nINSERT INTO `orders` VALUES (10502, 'PERIC', 2, '2017-04-10 00:00:00', '2017-04-29 00:00:00', 1, 69.32, 'Calle Dr. Jorge Cash 321', 'México D.F.', NULL, '05033', 'Mexico');\nINSERT INTO `orders` VALUES (10503, 'HUNGO', 6, '2017-04-11 00:00:00', '2017-04-16 00:00:00', 2, 16.74, '8 Johnstown Road', 'Cork', 'Co. Cork', NULL, 'Ireland');\nINSERT INTO `orders` VALUES (10504, 'WHITC', 4, '2017-04-11 00:00:00', '2017-04-18 00:00:00', 3, 59.13, '1029 - 12th Ave. S.', 'Seattle', 'WA', '98124', 'USA');\nINSERT INTO `orders` VALUES (10505, 'MEREP', 3, '2017-04-14 00:00:00', '2017-04-21 00:00:00', 3, 7.13, '43 rue St. Laurent', 'Montréal', 'Québec', 'H1J 1C3', 'Canada');\nINSERT INTO `orders` VALUES (10506, 'KOENE', 9, '2017-04-15 00:00:00', '2017-05-02 00:00:00', 2, 21.19, 'Maubelstr. 90', 'Brandenburg', NULL, '14776', 'Germany');\nINSERT INTO `orders` VALUES (10507, 'ANTO', 7, '2017-04-15 00:00:00', '2017-04-22 00:00:00', 1, 47.45, 'Mataderos  2312', 'México D.F.', NULL, '05023', 'Mexico');\nINSERT INTO `orders` VALUES (10508, 'OTTIK', 1, '2017-04-16 00:00:00', '2017-05-13 00:00:00', 2, 4.99, 'Mehrheimerstr. 369', 'Köl', NULL, '50739', 'Germany');\nINSERT INTO `orders` VALUES (10509, 'BLAUS', 4, '2017-04-17 00:00:00', '2017-04-29 00:00:00', 1, 0.15, 'Forsterstr. 57', 'Mannheim', NULL, '68306', 'Germany');\nINSERT INTO `orders` VALUES (10510, 'SAVEA', 6, '2017-04-18 00:00:00', '2017-04-28 00:00:00', 3, 367.63, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10511, 'BONAP', 4, '2017-04-18 00:00:00', '2017-04-21 00:00:00', 3, 350.64, '12-rue des Bouchers', 'Marseille', NULL, '13008', 'France');\nINSERT INTO `orders` VALUES (10512, 'FAMIA', 7, '2017-04-21 00:00:00', '2017-04-24 00:00:00', 2, 3.53, 'Rua Orós-92', 'Sao Paulo', 'SP', '05442-030', 'Brazil');\nINSERT INTO `orders` VALUES (10513, 'WANDK', 7, '2017-04-22 00:00:00', '2017-04-28 00:00:00', 1, 105.65, 'Adenauerallee 900', 'Stuttgart', NULL, '70563', 'Germany');\nINSERT INTO `orders` VALUES (10514, 'ERNSH', 3, '2017-04-22 00:00:00', '2017-05-16 00:00:00', 2, 789.95, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10515, 'QUICK', 2, '2017-04-23 00:00:00', '2017-05-23 00:00:00', 1, 204.47, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10516, 'HUNGO', 2, '2017-04-24 00:00:00', '2017-05-01 00:00:00', 3, 62.78, '8 Johnstown Road', 'Cork', 'Co. Cork', NULL, 'Ireland');\nINSERT INTO `orders` VALUES (10517, 'NORTS', 3, '2017-04-24 00:00:00', '2017-04-29 00:00:00', 3, 32.07, 'South House 300 Queensbridge', 'Londo', NULL, 'SW7 1RZ', 'UK');\nINSERT INTO `orders` VALUES (10518, 'TORTU', 4, '2017-04-25 00:00:00', '2017-05-05 00:00:00', 2, 218.15, 'Avda. Azteca 123', 'México D.F.', NULL, '05033', 'Mexico');\nINSERT INTO `orders` VALUES (10519, 'CHOPS', 6, '2017-04-28 00:00:00', '2017-05-01 00:00:00', 3, 91.76, 'Hauptstr. 31', 'Ber', NULL, '3012', 'Switzerland');\nINSERT INTO `orders` VALUES (10520, 'SANTG', 7, '2017-04-29 00:00:00', '2017-05-01 00:00:00', 1, 13.37, 'Erling Skakkes gate 78', 'Staver', NULL, '4110', 'Norway');\nINSERT INTO `orders` VALUES (10521, 'CACTU', 8, '2017-04-29 00:00:00', '2017-05-02 00:00:00', 2, 17.22, 'Cerrito 333', 'Buenos Aires', NULL, '1010', 'Argentina');\nINSERT INTO `orders` VALUES (10522, 'LEHMS', 4, '2017-04-30 00:00:00', '2017-05-06 00:00:00', 1, 45.33, 'Magazinweg 7', 'Frankfurt a.M.', NULL, '60528', 'Germany');\nINSERT INTO `orders` VALUES (10523, 'SEVES', 7, '2017-05-01 00:00:00', '2017-05-30 00:00:00', 2, 77.63, '90 Wadhurst Rd.', 'Londo', NULL, 'OX15 4NB', 'UK');\nINSERT INTO `orders` VALUES (10524, 'BERGS', 1, '2017-05-01 00:00:00', '2017-05-07 00:00:00', 2, 244.79, 'Berguvsvägen  8', 'Luleå', NULL, 'S-958 22', 'Sweden');\nINSERT INTO `orders` VALUES (10525, 'BONAP', 1, '2017-05-02 00:00:00', '2017-05-23 00:00:00', 2, 11.06, '12-rue des Bouchers', 'Marseille', NULL, '13008', 'France');\nINSERT INTO `orders` VALUES (10526, 'WARTH', 4, '2017-05-05 00:00:00', '2017-05-15 00:00:00', 2, 58.59, 'Torikatu 38', 'Oulu', NULL, '90110', 'Finland');\nINSERT INTO `orders` VALUES (10527, 'QUICK', 7, '2017-05-05 00:00:00', '2017-05-07 00:00:00', 1, 41.90, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10528, 'GREAL', 6, '2017-05-06 00:00:00', '2017-05-09 00:00:00', 2, 3.35, '2732 Baker Blvd.', 'Eugene', 'OR', '97403', 'USA');\nINSERT INTO `orders` VALUES (10529, 'MAISD', 5, '2017-05-07 00:00:00', '2017-05-09 00:00:00', 2, 66.69, 'Rue Joseph-Bens 532', 'Bruxelles', NULL, 'B-1180', 'Belgium');\nINSERT INTO `orders` VALUES (10530, 'PICCO', 3, '2017-05-08 00:00:00', '2017-05-12 00:00:00', 2, 339.22, 'Geislweg 14', 'Salzburg', NULL, '5020', 'Austria');\nINSERT INTO `orders` VALUES (10531, 'OCEA', 7, '2017-05-08 00:00:00', '2017-05-19 00:00:00', 1, 8.12, 'Ing. Gustavo Moncada 8585 Piso 20-A', 'Buenos Aires', NULL, '1010', 'Argentina');\nINSERT INTO `orders` VALUES (10532, 'EASTC', 7, '2017-05-09 00:00:00', '2017-05-12 00:00:00', 3, 74.46, '35 King George', 'Londo', NULL, 'WX3 6FW', 'UK');\nINSERT INTO `orders` VALUES (10533, 'FOLKO', 8, '2017-05-12 00:00:00', '2017-05-22 00:00:00', 1, 188.04, 'Åkergatan 24', 'Bräcke', NULL, 'S-844 67', 'Sweden');\nINSERT INTO `orders` VALUES (10534, 'LEHMS', 8, '2017-05-12 00:00:00', '2017-05-14 00:00:00', 2, 27.94, 'Magazinweg 7', 'Frankfurt a.M.', NULL, '60528', 'Germany');\nINSERT INTO `orders` VALUES (10535, 'ANTO', 4, '2017-05-13 00:00:00', '2017-05-21 00:00:00', 1, 15.64, 'Mataderos  2312', 'México D.F.', NULL, '05023', 'Mexico');\nINSERT INTO `orders` VALUES (10536, 'LEHMS', 3, '2017-05-14 00:00:00', '2017-06-06 00:00:00', 2, 58.88, 'Magazinweg 7', 'Frankfurt a.M.', NULL, '60528', 'Germany');\nINSERT INTO `orders` VALUES (10537, 'RICSU', 1, '2017-05-14 00:00:00', '2017-05-19 00:00:00', 1, 78.85, 'Starenweg 5', 'Genève', NULL, '1204', 'Switzerland');\nINSERT INTO `orders` VALUES (10538, 'BSBEV', 9, '2017-05-15 00:00:00', '2017-05-16 00:00:00', 3, 4.87, 'Fauntleroy Circus', 'Londo', NULL, 'EC2 5NT', 'UK');\nINSERT INTO `orders` VALUES (10539, 'BSBEV', 6, '2017-05-16 00:00:00', '2017-05-23 00:00:00', 3, 12.36, 'Fauntleroy Circus', 'Londo', NULL, 'EC2 5NT', 'UK');\nINSERT INTO `orders` VALUES (10540, 'QUICK', 3, '2017-05-19 00:00:00', '2017-06-13 00:00:00', 3, 1007.64, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10541, 'HANAR', 2, '2017-05-19 00:00:00', '2017-05-29 00:00:00', 1, 68.65, 'Rua do Paço-67', 'Rio de Janeiro', 'RJ', '05454-876', 'Brazil');\nINSERT INTO `orders` VALUES (10542, 'KOENE', 1, '2017-05-20 00:00:00', '2017-05-26 00:00:00', 3, 10.95, 'Maubelstr. 90', 'Brandenburg', NULL, '14776', 'Germany');\nINSERT INTO `orders` VALUES (10543, 'LILAS', 8, '2017-05-21 00:00:00', '2017-05-23 00:00:00', 2, 48.17, 'Carrera 52 con Ave. Bolívar #65-98 Llano Largo', 'Barquisimeto', 'Lara', '3508', 'Venezuela');\nINSERT INTO `orders` VALUES (10544, 'LONEP', 4, '2017-05-21 00:00:00', '2017-05-30 00:00:00', 1, 24.91, '89 Chiaroscuro Rd.', 'Portland', 'OR', '97219', 'USA');\nINSERT INTO `orders` VALUES (10545, 'LAZYK', 8, '2017-05-22 00:00:00', '2017-06-26 00:00:00', 2, 11.92, '12 Orchestra Terrace', 'Walla Walla', 'WA', '99362', 'USA');\nINSERT INTO `orders` VALUES (10546, 'VICTE', 1, '2017-05-23 00:00:00', '2017-05-27 00:00:00', 3, 194.72, '2-rue du Commerce', 'Lyo', NULL, '69004', 'France');\nINSERT INTO `orders` VALUES (10547, 'SEVES', 3, '2017-05-23 00:00:00', '2017-06-02 00:00:00', 2, 178.43, '90 Wadhurst Rd.', 'Londo', NULL, 'OX15 4NB', 'UK');\nINSERT INTO `orders` VALUES (10548, 'TOMSP', 3, '2017-05-26 00:00:00', '2017-06-02 00:00:00', 2, 1.43, 'Luisenstr. 48', 'Münster', NULL, '44087', 'Germany');\nINSERT INTO `orders` VALUES (10549, 'QUICK', 5, '2017-05-27 00:00:00', '2017-05-30 00:00:00', 1, 171.24, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10550, 'GODOS', 7, '2017-05-28 00:00:00', '2017-06-06 00:00:00', 3, 4.32, 'C/ Romero-33', 'Sevilla', NULL, '41101', 'Spain');\nINSERT INTO `orders` VALUES (10551, 'FURIB', 4, '2017-05-28 00:00:00', '2017-06-06 00:00:00', 3, 72.95, 'Jardim das rosas n. 32', 'Lisboa', NULL, '1675', 'Portugal');\nINSERT INTO `orders` VALUES (10552, 'HILAA', 2, '2017-05-29 00:00:00', '2017-06-05 00:00:00', 1, 83.22, 'Carrera 22 con Ave. Carlos Soublette #8-35', 'San Cristóbal', 'Táchira', '5022', 'Venezuela');\nINSERT INTO `orders` VALUES (10553, 'WARTH', 2, '2017-05-30 00:00:00', '2017-06-03 00:00:00', 2, 149.49, 'Torikatu 38', 'Oulu', NULL, '90110', 'Finland');\nINSERT INTO `orders` VALUES (10554, 'OTTIK', 4, '2017-05-30 00:00:00', '2017-06-05 00:00:00', 3, 120.97, 'Mehrheimerstr. 369', 'Köl', NULL, '50739', 'Germany');\nINSERT INTO `orders` VALUES (10555, 'SAVEA', 6, '2017-06-02 00:00:00', '2017-06-04 00:00:00', 3, 252.49, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10556, 'SIMOB', 2, '2017-06-03 00:00:00', '2017-06-13 00:00:00', 1, 9.80, 'Vinbæltet 34', 'Kobenhav', NULL, '1734', 'Denmark');\nINSERT INTO `orders` VALUES (10557, 'LEHMS', 9, '2017-06-03 00:00:00', '2017-06-06 00:00:00', 2, 96.72, 'Magazinweg 7', 'Frankfurt a.M.', NULL, '60528', 'Germany');\nINSERT INTO `orders` VALUES (10558, 'AROUT', 1, '2017-06-04 00:00:00', '2017-06-10 00:00:00', 2, 72.97, 'Brook Farm Stratford St. Mary', 'Colchester', 'Essex', 'CO7 6JX', 'UK');\nINSERT INTO `orders` VALUES (10559, 'BLONP', 6, '2017-06-05 00:00:00', '2017-06-13 00:00:00', 1, 8.05, '24-place Kléber', 'Strasbourg', NULL, '67000', 'France');\nINSERT INTO `orders` VALUES (10560, 'FRANK', 8, '2017-06-06 00:00:00', '2017-06-09 00:00:00', 1, 36.65, 'Berliner Platz 43', 'Münche', NULL, '80805', 'Germany');\nINSERT INTO `orders` VALUES (10561, 'FOLKO', 2, '2017-06-06 00:00:00', '2017-06-09 00:00:00', 2, 242.21, 'Åkergatan 24', 'Bräcke', NULL, 'S-844 67', 'Sweden');\nINSERT INTO `orders` VALUES (10562, 'REGGC', 1, '2017-06-09 00:00:00', '2017-06-12 00:00:00', 1, 22.95, 'Strada Provinciale 124', 'Reggio Emilia', NULL, '42100', 'Italy');\nINSERT INTO `orders` VALUES (10563, 'RICAR', 2, '2017-06-10 00:00:00', '2017-06-24 00:00:00', 2, 60.43, 'Av. Copacabana-267', 'Rio de Janeiro', 'RJ', '02389-890', 'Brazil');\nINSERT INTO `orders` VALUES (10564, 'RATTC', 4, '2017-06-10 00:00:00', '2017-06-16 00:00:00', 3, 13.75, '2817 Milton Dr.', 'Albuquerque', 'NM', '87110', 'USA');\nINSERT INTO `orders` VALUES (10565, 'MEREP', 8, '2017-06-11 00:00:00', '2017-06-18 00:00:00', 2, 7.15, '43 rue St. Laurent', 'Montréal', 'Québec', 'H1J 1C3', 'Canada');\nINSERT INTO `orders` VALUES (10566, 'BLONP', 9, '2017-06-12 00:00:00', '2017-06-18 00:00:00', 1, 88.40, '24-place Kléber', 'Strasbourg', NULL, '67000', 'France');\nINSERT INTO `orders` VALUES (10567, 'HUNGO', 1, '2017-06-12 00:00:00', '2017-06-17 00:00:00', 1, 33.97, '8 Johnstown Road', 'Cork', 'Co. Cork', NULL, 'Ireland');\nINSERT INTO `orders` VALUES (10568, 'GALED', 3, '2017-06-13 00:00:00', '2017-07-09 00:00:00', 3, 6.54, 'Rambla de Cataluña-23', 'Barcelona', NULL, '8022', 'Spain');\nINSERT INTO `orders` VALUES (10569, 'RATTC', 5, '2017-06-16 00:00:00', '2017-07-11 00:00:00', 1, 58.98, '2817 Milton Dr.', 'Albuquerque', 'NM', '87110', 'USA');\nINSERT INTO `orders` VALUES (10570, 'MEREP', 3, '2017-06-17 00:00:00', '2017-06-19 00:00:00', 3, 188.99, '43 rue St. Laurent', 'Montréal', 'Québec', 'H1J 1C3', 'Canada');\nINSERT INTO `orders` VALUES (10571, 'ERNSH', 8, '2017-06-17 00:00:00', '2017-07-04 00:00:00', 3, 26.06, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10572, 'BERGS', 3, '2017-06-18 00:00:00', '2017-06-25 00:00:00', 2, 116.43, 'Berguvsvägen  8', 'Luleå', NULL, 'S-958 22', 'Sweden');\nINSERT INTO `orders` VALUES (10573, 'ANTO', 7, '2017-06-19 00:00:00', '2017-06-20 00:00:00', 3, 84.84, 'Mataderos  2312', 'México D.F.', NULL, '05023', 'Mexico');\nINSERT INTO `orders` VALUES (10574, 'TRAIH', 4, '2017-06-19 00:00:00', '2017-06-30 00:00:00', 2, 37.60, '722 DaVinci Blvd.', 'Kirkland', 'WA', '98034', 'USA');\nINSERT INTO `orders` VALUES (10575, 'MORGK', 5, '2017-06-20 00:00:00', '2017-06-30 00:00:00', 1, 127.34, 'Heerstr. 22', 'Leipzig', NULL, '04179', 'Germany');\nINSERT INTO `orders` VALUES (10576, 'TORTU', 3, '2017-06-23 00:00:00', '2017-06-30 00:00:00', 3, 18.56, 'Avda. Azteca 123', 'México D.F.', NULL, '05033', 'Mexico');\nINSERT INTO `orders` VALUES (10577, 'TRAIH', 9, '2017-06-23 00:00:00', '2017-06-30 00:00:00', 2, 25.41, '722 DaVinci Blvd.', 'Kirkland', 'WA', '98034', 'USA');\nINSERT INTO `orders` VALUES (10578, 'BSBEV', 4, '2017-06-24 00:00:00', '2017-07-25 00:00:00', 3, 29.60, 'Fauntleroy Circus', 'Londo', NULL, 'EC2 5NT', 'UK');\nINSERT INTO `orders` VALUES (10579, 'LETSS', 1, '2017-06-25 00:00:00', '2017-07-04 00:00:00', 2, 13.73, '87 Polk St. Suite 5', 'San Francisco', 'CA', '94117', 'USA');\nINSERT INTO `orders` VALUES (10580, 'OTTIK', 4, '2017-06-26 00:00:00', '2017-07-01 00:00:00', 3, 75.89, 'Mehrheimerstr. 369', 'Köl', NULL, '50739', 'Germany');\nINSERT INTO `orders` VALUES (10581, 'FAMIA', 3, '2017-06-26 00:00:00', '2017-07-02 00:00:00', 1, 3.01, 'Rua Orós-92', 'Sao Paulo', 'SP', '05442-030', 'Brazil');\nINSERT INTO `orders` VALUES (10582, 'BLAUS', 3, '2017-06-27 00:00:00', '2017-07-14 00:00:00', 2, 27.71, 'Forsterstr. 57', 'Mannheim', NULL, '68306', 'Germany');\nINSERT INTO `orders` VALUES (10583, 'WARTH', 2, '2017-06-30 00:00:00', '2017-07-04 00:00:00', 2, 7.28, 'Torikatu 38', 'Oulu', NULL, '90110', 'Finland');\nINSERT INTO `orders` VALUES (10584, 'BLONP', 4, '2017-06-30 00:00:00', '2017-07-04 00:00:00', 1, 59.14, '24-place Kléber', 'Strasbourg', NULL, '67000', 'France');\nINSERT INTO `orders` VALUES (10585, 'WELLI', 7, '2017-07-01 00:00:00', '2017-07-10 00:00:00', 1, 13.41, 'Rua do Mercado-12', 'Resende', 'SP', '08737-363', 'Brazil');\nINSERT INTO `orders` VALUES (10586, 'REGGC', 9, '2017-07-02 00:00:00', '2017-07-09 00:00:00', 1, 0.48, 'Strada Provinciale 124', 'Reggio Emilia', NULL, '42100', 'Italy');\nINSERT INTO `orders` VALUES (10587, 'QUEDE', 1, '2017-07-02 00:00:00', '2017-07-09 00:00:00', 1, 62.52, 'Rua da Panificadora-12', 'Rio de Janeiro', 'RJ', '02389-673', 'Brazil');\nINSERT INTO `orders` VALUES (10588, 'QUICK', 2, '2017-07-03 00:00:00', '2017-07-10 00:00:00', 3, 194.67, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10589, 'GREAL', 8, '2017-07-04 00:00:00', '2017-07-14 00:00:00', 2, 4.42, '2732 Baker Blvd.', 'Eugene', 'OR', '97403', 'USA');\nINSERT INTO `orders` VALUES (10590, 'MEREP', 4, '2017-07-07 00:00:00', '2017-07-14 00:00:00', 3, 44.77, '43 rue St. Laurent', 'Montréal', 'Québec', 'H1J 1C3', 'Canada');\nINSERT INTO `orders` VALUES (10591, 'VAFFE', 1, '2017-07-07 00:00:00', '2017-07-16 00:00:00', 1, 55.92, 'Smagsloget 45', 'Århus', NULL, '8200', 'Denmark');\nINSERT INTO `orders` VALUES (10592, 'LEHMS', 3, '2017-07-08 00:00:00', '2017-07-16 00:00:00', 1, 32.10, 'Magazinweg 7', 'Frankfurt a.M.', NULL, '60528', 'Germany');\nINSERT INTO `orders` VALUES (10593, 'LEHMS', 7, '2017-07-09 00:00:00', '2017-08-13 00:00:00', 2, 174.20, 'Magazinweg 7', 'Frankfurt a.M.', NULL, '60528', 'Germany');\nINSERT INTO `orders` VALUES (10594, 'OLDWO', 3, '2017-07-09 00:00:00', '2017-07-16 00:00:00', 2, 5.24, '2743 Bering St.', 'Anchorage', 'AK', '99508', 'USA');\nINSERT INTO `orders` VALUES (10595, 'ERNSH', 2, '2017-07-10 00:00:00', '2017-07-14 00:00:00', 1, 96.78, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10596, 'WHITC', 8, '2017-07-11 00:00:00', '2017-08-12 00:00:00', 1, 16.34, '1029 - 12th Ave. S.', 'Seattle', 'WA', '98124', 'USA');\nINSERT INTO `orders` VALUES (10597, 'PICCO', 7, '2017-07-11 00:00:00', '2017-07-18 00:00:00', 3, 35.12, 'Geislweg 14', 'Salzburg', NULL, '5020', 'Austria');\nINSERT INTO `orders` VALUES (10598, 'RATTC', 1, '2017-07-14 00:00:00', '2017-07-18 00:00:00', 3, 44.42, '2817 Milton Dr.', 'Albuquerque', 'NM', '87110', 'USA');\nINSERT INTO `orders` VALUES (10599, 'BSBEV', 6, '2017-07-15 00:00:00', '2017-07-21 00:00:00', 3, 29.98, 'Fauntleroy Circus', 'Londo', NULL, 'EC2 5NT', 'UK');\nINSERT INTO `orders` VALUES (10600, 'HUNGC', 4, '2017-07-16 00:00:00', '2017-07-21 00:00:00', 1, 45.13, 'City Center Plaza 516 Main St.', 'Elgi', 'OR', '97827', 'USA');\nINSERT INTO `orders` VALUES (10601, 'HILAA', 7, '2017-07-16 00:00:00', '2017-07-22 00:00:00', 1, 58.30, 'Carrera 22 con Ave. Carlos Soublette #8-35', 'San Cristóbal', 'Táchira', '5022', 'Venezuela');\nINSERT INTO `orders` VALUES (10602, 'VAFFE', 8, '2017-07-17 00:00:00', '2017-07-22 00:00:00', 2, 2.92, 'Smagsloget 45', 'Århus', NULL, '8200', 'Denmark');\nINSERT INTO `orders` VALUES (10603, 'SAVEA', 8, '2017-07-18 00:00:00', '2017-08-08 00:00:00', 2, 48.77, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10604, 'FURIB', 1, '2017-07-18 00:00:00', '2017-07-29 00:00:00', 1, 7.46, 'Jardim das rosas n. 32', 'Lisboa', NULL, '1675', 'Portugal');\nINSERT INTO `orders` VALUES (10605, 'MEREP', 1, '2017-07-21 00:00:00', '2017-07-29 00:00:00', 2, 379.13, '43 rue St. Laurent', 'Montréal', 'Québec', 'H1J 1C3', 'Canada');\nINSERT INTO `orders` VALUES (10606, 'TRADH', 4, '2017-07-22 00:00:00', '2017-07-31 00:00:00', 3, 79.40, 'Av. Inês de Castro-414', 'Sao Paulo', 'SP', '05634-030', 'Brazil');\nINSERT INTO `orders` VALUES (10607, 'SAVEA', 5, '2017-07-22 00:00:00', '2017-07-25 00:00:00', 1, 200.24, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10608, 'TOMSP', 4, '2017-07-23 00:00:00', '2017-08-01 00:00:00', 2, 27.79, 'Luisenstr. 48', 'Münster', NULL, '44087', 'Germany');\nINSERT INTO `orders` VALUES (10609, 'DUMO', 7, '2017-07-24 00:00:00', '2017-07-30 00:00:00', 2, 1.85, '67-rue des Cinquante Otages', 'Nantes', NULL, '44000', 'France');\nINSERT INTO `orders` VALUES (10610, 'LAMAI', 8, '2017-07-25 00:00:00', '2017-08-06 00:00:00', 1, 26.78, '1 rue Alsace-Lorraine', 'Toulouse', NULL, '31000', 'France');\nINSERT INTO `orders` VALUES (10611, 'WOLZA', 6, '2017-07-25 00:00:00', '2017-08-01 00:00:00', 2, 80.65, 'ul. Filtrowa 68', 'Warszawa', NULL, '01-012', 'Poland');\nINSERT INTO `orders` VALUES (10612, 'SAVEA', 1, '2017-07-28 00:00:00', '2017-08-01 00:00:00', 2, 544.08, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10613, 'HILAA', 4, '2017-07-29 00:00:00', '2017-08-01 00:00:00', 2, 8.11, 'Carrera 22 con Ave. Carlos Soublette #8-35', 'San Cristóbal', 'Táchira', '5022', 'Venezuela');\nINSERT INTO `orders` VALUES (10614, 'BLAUS', 8, '2017-07-29 00:00:00', '2017-08-01 00:00:00', 3, 1.93, 'Forsterstr. 57', 'Mannheim', NULL, '68306', 'Germany');\nINSERT INTO `orders` VALUES (10615, 'WILMK', 2, '2017-07-30 00:00:00', '2017-08-06 00:00:00', 3, 0.75, 'Keskuskatu 45', 'Helsinki', NULL, '21240', 'Finland');\nINSERT INTO `orders` VALUES (10616, 'GREAL', 1, '2017-07-31 00:00:00', '2017-08-05 00:00:00', 2, 116.53, '2732 Baker Blvd.', 'Eugene', 'OR', '97403', 'USA');\nINSERT INTO `orders` VALUES (10617, 'GREAL', 4, '2017-07-31 00:00:00', '2017-08-04 00:00:00', 2, 18.53, '2732 Baker Blvd.', 'Eugene', 'OR', '97403', 'USA');\nINSERT INTO `orders` VALUES (10618, 'MEREP', 1, '2017-08-01 00:00:00', '2017-08-08 00:00:00', 1, 154.68, '43 rue St. Laurent', 'Montréal', 'Québec', 'H1J 1C3', 'Canada');\nINSERT INTO `orders` VALUES (10619, 'MEREP', 3, '2017-08-04 00:00:00', '2017-08-07 00:00:00', 3, 91.05, '43 rue St. Laurent', 'Montréal', 'Québec', 'H1J 1C3', 'Canada');\nINSERT INTO `orders` VALUES (10620, 'LAUGB', 2, '2017-08-05 00:00:00', '2017-08-14 00:00:00', 3, 0.94, '2319 Elm St.', 'Vancouver', 'BC', 'V3F 2K1', 'Canada');\nINSERT INTO `orders` VALUES (10621, 'ISLAT', 4, '2017-08-05 00:00:00', '2017-08-11 00:00:00', 2, 23.73, 'Garden House Crowther Way', 'Cowes', 'Isle of Wight', 'PO31 7PJ', 'UK');\nINSERT INTO `orders` VALUES (10622, 'RICAR', 4, '2017-08-06 00:00:00', '2017-08-11 00:00:00', 3, 50.97, 'Av. Copacabana-267', 'Rio de Janeiro', 'RJ', '02389-890', 'Brazil');\nINSERT INTO `orders` VALUES (10623, 'FRANK', 8, '2017-08-07 00:00:00', '2017-08-12 00:00:00', 2, 97.18, 'Berliner Platz 43', 'Münche', NULL, '80805', 'Germany');\nINSERT INTO `orders` VALUES (10624, 'THECR', 4, '2017-08-07 00:00:00', '2017-08-19 00:00:00', 2, 94.80, '55 Grizzly Peak Rd.', 'Butte', 'MT', '59801', 'USA');\nINSERT INTO `orders` VALUES (10625, 'ANATR', 3, '2017-08-08 00:00:00', '2017-08-14 00:00:00', 1, 43.90, 'Avda. de la Constitución 2222', 'México D.F.', NULL, '05021', 'Mexico');\nINSERT INTO `orders` VALUES (10626, 'BERGS', 1, '2017-08-11 00:00:00', '2017-08-20 00:00:00', 2, 138.69, 'Berguvsvägen  8', 'Luleå', NULL, 'S-958 22', 'Sweden');\nINSERT INTO `orders` VALUES (10627, 'SAVEA', 8, '2017-08-11 00:00:00', '2017-08-21 00:00:00', 3, 107.46, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10628, 'BLONP', 4, '2017-08-12 00:00:00', '2017-08-20 00:00:00', 3, 30.36, '24-place Kléber', 'Strasbourg', NULL, '67000', 'France');\nINSERT INTO `orders` VALUES (10629, 'GODOS', 4, '2017-08-12 00:00:00', '2017-08-20 00:00:00', 3, 85.46, 'C/ Romero-33', 'Sevilla', NULL, '41101', 'Spain');\nINSERT INTO `orders` VALUES (10630, 'KOENE', 1, '2017-08-13 00:00:00', '2017-08-19 00:00:00', 2, 32.35, 'Maubelstr. 90', 'Brandenburg', NULL, '14776', 'Germany');\nINSERT INTO `orders` VALUES (10631, 'LAMAI', 8, '2017-08-14 00:00:00', '2017-08-15 00:00:00', 1, 0.87, '1 rue Alsace-Lorraine', 'Toulouse', NULL, '31000', 'France');\nINSERT INTO `orders` VALUES (10632, 'WANDK', 8, '2017-08-14 00:00:00', '2017-08-19 00:00:00', 1, 41.38, 'Adenauerallee 900', 'Stuttgart', NULL, '70563', 'Germany');\nINSERT INTO `orders` VALUES (10633, 'ERNSH', 7, '2017-08-15 00:00:00', '2017-08-18 00:00:00', 3, 477.90, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10634, 'FOLIG', 4, '2017-08-15 00:00:00', '2017-08-21 00:00:00', 3, 487.38, '184-chaussée de Tournai', 'Lille', NULL, '59000', 'France');\nINSERT INTO `orders` VALUES (10635, 'MAGAA', 8, '2017-08-18 00:00:00', '2017-08-21 00:00:00', 3, 47.46, 'Via Ludovico il Moro 22', 'Bergamo', NULL, '24100', 'Italy');\nINSERT INTO `orders` VALUES (10636, 'WARTH', 4, '2017-08-19 00:00:00', '2017-08-26 00:00:00', 1, 1.15, 'Torikatu 38', 'Oulu', NULL, '90110', 'Finland');\nINSERT INTO `orders` VALUES (10637, 'QUEE', 6, '2017-08-19 00:00:00', '2017-08-26 00:00:00', 1, 201.29, 'Alameda dos Canàrios-891', 'Sao Paulo', 'SP', '05487-020', 'Brazil');\nINSERT INTO `orders` VALUES (10638, 'LINOD', 3, '2017-08-20 00:00:00', '2017-09-01 00:00:00', 1, 158.44, 'Ave. 5 de Mayo Porlamar', 'I. de Margarita', 'Nueva Esparta', '4980', 'Venezuela');\nINSERT INTO `orders` VALUES (10639, 'SANTG', 7, '2017-08-20 00:00:00', '2017-08-27 00:00:00', 3, 38.64, 'Erling Skakkes gate 78', 'Staver', NULL, '4110', 'Norway');\nINSERT INTO `orders` VALUES (10640, 'WANDK', 4, '2017-08-21 00:00:00', '2017-08-28 00:00:00', 1, 23.55, 'Adenauerallee 900', 'Stuttgart', NULL, '70563', 'Germany');\nINSERT INTO `orders` VALUES (10641, 'HILAA', 4, '2017-08-22 00:00:00', '2017-08-26 00:00:00', 2, 179.61, 'Carrera 22 con Ave. Carlos Soublette #8-35', 'San Cristóbal', 'Táchira', '5022', 'Venezuela');\nINSERT INTO `orders` VALUES (10642, 'SIMOB', 7, '2017-08-22 00:00:00', '2017-09-05 00:00:00', 3, 41.89, 'Vinbæltet 34', 'Kobenhav', NULL, '1734', 'Denmark');\nINSERT INTO `orders` VALUES (10643, 'ALFKI', 6, '2017-08-25 00:00:00', '2017-09-02 00:00:00', 1, 29.46, 'Obere Str. 57', 'Berli', NULL, '12209', 'Germany');\nINSERT INTO `orders` VALUES (10644, 'WELLI', 3, '2017-08-25 00:00:00', '2017-09-01 00:00:00', 2, 0.14, 'Rua do Mercado-12', 'Resende', 'SP', '08737-363', 'Brazil');\nINSERT INTO `orders` VALUES (10645, 'HANAR', 4, '2017-08-26 00:00:00', '2017-09-02 00:00:00', 1, 12.41, 'Rua do Paço-67', 'Rio de Janeiro', 'RJ', '05454-876', 'Brazil');\nINSERT INTO `orders` VALUES (10646, 'HUNGO', 9, '2017-08-27 00:00:00', '2017-09-03 00:00:00', 3, 142.33, '8 Johnstown Road', 'Cork', 'Co. Cork', NULL, 'Ireland');\nINSERT INTO `orders` VALUES (10647, 'QUEDE', 4, '2017-08-27 00:00:00', '2017-09-03 00:00:00', 2, 45.54, 'Rua da Panificadora-12', 'Rio de Janeiro', 'RJ', '02389-673', 'Brazil');\nINSERT INTO `orders` VALUES (10648, 'RICAR', 5, '2017-08-28 00:00:00', '2017-09-09 00:00:00', 2, 14.25, 'Av. Copacabana-267', 'Rio de Janeiro', 'RJ', '02389-890', 'Brazil');\nINSERT INTO `orders` VALUES (10649, 'MAISD', 5, '2017-08-28 00:00:00', '2017-08-29 00:00:00', 3, 6.20, 'Rue Joseph-Bens 532', 'Bruxelles', NULL, 'B-1180', 'Belgium');\nINSERT INTO `orders` VALUES (10650, 'FAMIA', 5, '2017-08-29 00:00:00', '2017-09-03 00:00:00', 3, 176.81, 'Rua Orós-92', 'Sao Paulo', 'SP', '05442-030', 'Brazil');\nINSERT INTO `orders` VALUES (10651, 'WANDK', 8, '2017-09-01 00:00:00', '2017-09-11 00:00:00', 2, 20.60, 'Adenauerallee 900', 'Stuttgart', NULL, '70563', 'Germany');\nINSERT INTO `orders` VALUES (10652, 'GOURL', 4, '2017-09-01 00:00:00', '2017-09-08 00:00:00', 2, 7.14, 'Av. Brasil-442', 'Campinas', 'SP', '04876-786', 'Brazil');\nINSERT INTO `orders` VALUES (10653, 'FRANK', 1, '2017-09-02 00:00:00', '2017-09-19 00:00:00', 1, 93.25, 'Berliner Platz 43', 'Münche', NULL, '80805', 'Germany');\nINSERT INTO `orders` VALUES (10654, 'BERGS', 5, '2017-09-02 00:00:00', '2017-09-11 00:00:00', 1, 55.26, 'Berguvsvägen  8', 'Luleå', NULL, 'S-958 22', 'Sweden');\nINSERT INTO `orders` VALUES (10655, 'REGGC', 1, '2017-09-03 00:00:00', '2017-09-11 00:00:00', 2, 4.41, 'Strada Provinciale 124', 'Reggio Emilia', NULL, '42100', 'Italy');\nINSERT INTO `orders` VALUES (10656, 'GREAL', 6, '2017-09-04 00:00:00', '2017-09-10 00:00:00', 1, 57.15, '2732 Baker Blvd.', 'Eugene', 'OR', '97403', 'USA');\nINSERT INTO `orders` VALUES (10657, 'SAVEA', 2, '2017-09-04 00:00:00', '2017-09-15 00:00:00', 2, 352.69, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10658, 'QUICK', 4, '2017-09-05 00:00:00', '2017-09-08 00:00:00', 1, 364.15, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10659, 'QUEE', 7, '2017-09-05 00:00:00', '2017-09-10 00:00:00', 2, 105.81, 'Alameda dos Canàrios-891', 'Sao Paulo', 'SP', '05487-020', 'Brazil');\nINSERT INTO `orders` VALUES (10660, 'HUNGC', 8, '2017-09-08 00:00:00', '2017-10-15 00:00:00', 1, 111.29, 'City Center Plaza 516 Main St.', 'Elgi', 'OR', '97827', 'USA');\nINSERT INTO `orders` VALUES (10661, 'HUNGO', 7, '2017-09-09 00:00:00', '2017-09-15 00:00:00', 3, 17.55, '8 Johnstown Road', 'Cork', 'Co. Cork', NULL, 'Ireland');\nINSERT INTO `orders` VALUES (10662, 'LONEP', 3, '2017-09-09 00:00:00', '2017-09-18 00:00:00', 2, 1.28, '89 Chiaroscuro Rd.', 'Portland', 'OR', '97219', 'USA');\nINSERT INTO `orders` VALUES (10663, 'BONAP', 2, '2017-09-10 00:00:00', '2017-10-03 00:00:00', 2, 113.15, '12-rue des Bouchers', 'Marseille', NULL, '13008', 'France');\nINSERT INTO `orders` VALUES (10664, 'FURIB', 1, '2017-09-10 00:00:00', '2017-09-19 00:00:00', 3, 1.27, 'Jardim das rosas n. 32', 'Lisboa', NULL, '1675', 'Portugal');\nINSERT INTO `orders` VALUES (10665, 'LONEP', 1, '2017-09-11 00:00:00', '2017-09-17 00:00:00', 2, 26.31, '89 Chiaroscuro Rd.', 'Portland', 'OR', '97219', 'USA');\nINSERT INTO `orders` VALUES (10666, 'RICSU', 7, '2017-09-12 00:00:00', '2017-09-22 00:00:00', 2, 232.42, 'Starenweg 5', 'Genève', NULL, '1204', 'Switzerland');\nINSERT INTO `orders` VALUES (10667, 'ERNSH', 7, '2017-09-12 00:00:00', '2017-09-19 00:00:00', 1, 78.09, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10668, 'WANDK', 1, '2017-09-15 00:00:00', '2017-09-23 00:00:00', 2, 47.22, 'Adenauerallee 900', 'Stuttgart', NULL, '70563', 'Germany');\nINSERT INTO `orders` VALUES (10669, 'SIMOB', 2, '2017-09-15 00:00:00', '2017-09-22 00:00:00', 1, 24.39, 'Vinbæltet 34', 'Kobenhav', NULL, '1734', 'Denmark');\nINSERT INTO `orders` VALUES (10670, 'FRANK', 4, '2017-09-16 00:00:00', '2017-09-18 00:00:00', 1, 203.48, 'Berliner Platz 43', 'Münche', NULL, '80805', 'Germany');\nINSERT INTO `orders` VALUES (10671, 'FRANR', 1, '2017-09-17 00:00:00', '2017-09-24 00:00:00', 1, 30.34, '54-rue Royale', 'Nantes', NULL, '44000', 'France');\nINSERT INTO `orders` VALUES (10672, 'BERGS', 9, '2017-09-17 00:00:00', '2017-09-26 00:00:00', 2, 95.75, 'Berguvsvägen  8', 'Luleå', NULL, 'S-958 22', 'Sweden');\nINSERT INTO `orders` VALUES (10673, 'WILMK', 2, '2017-09-18 00:00:00', '2017-09-19 00:00:00', 1, 22.76, 'Keskuskatu 45', 'Helsinki', NULL, '21240', 'Finland');\nINSERT INTO `orders` VALUES (10674, 'ISLAT', 4, '2017-09-18 00:00:00', '2017-09-30 00:00:00', 2, 0.90, 'Garden House Crowther Way', 'Cowes', 'Isle of Wight', 'PO31 7PJ', 'UK');\nINSERT INTO `orders` VALUES (10675, 'FRANK', 5, '2017-09-19 00:00:00', '2017-09-23 00:00:00', 2, 31.85, 'Berliner Platz 43', 'Münche', NULL, '80805', 'Germany');\nINSERT INTO `orders` VALUES (10676, 'TORTU', 2, '2017-09-22 00:00:00', '2017-09-29 00:00:00', 2, 2.01, 'Avda. Azteca 123', 'México D.F.', NULL, '05033', 'Mexico');\nINSERT INTO `orders` VALUES (10677, 'ANTO', 1, '2017-09-22 00:00:00', '2017-09-26 00:00:00', 3, 4.03, 'Mataderos  2312', 'México D.F.', NULL, '05023', 'Mexico');\nINSERT INTO `orders` VALUES (10678, 'SAVEA', 7, '2017-09-23 00:00:00', '2017-10-16 00:00:00', 3, 388.98, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10679, 'BLONP', 8, '2017-09-23 00:00:00', '2017-09-30 00:00:00', 3, 27.94, '24-place Kléber', 'Strasbourg', NULL, '67000', 'France');\nINSERT INTO `orders` VALUES (10680, 'OLDWO', 1, '2017-09-24 00:00:00', '2017-09-26 00:00:00', 1, 26.61, '2743 Bering St.', 'Anchorage', 'AK', '99508', 'USA');\nINSERT INTO `orders` VALUES (10681, 'GREAL', 3, '2017-09-25 00:00:00', '2017-09-30 00:00:00', 3, 76.13, '2732 Baker Blvd.', 'Eugene', 'OR', '97403', 'USA');\nINSERT INTO `orders` VALUES (10682, 'ANTO', 3, '2017-09-25 00:00:00', '2017-10-01 00:00:00', 2, 36.13, 'Mataderos  2312', 'México D.F.', NULL, '05023', 'Mexico');\nINSERT INTO `orders` VALUES (10683, 'DUMO', 2, '2017-09-26 00:00:00', '2017-10-01 00:00:00', 1, 4.40, '67-rue des Cinquante Otages', 'Nantes', NULL, '44000', 'France');\nINSERT INTO `orders` VALUES (10684, 'OTTIK', 3, '2017-09-26 00:00:00', '2017-09-30 00:00:00', 1, 145.63, 'Mehrheimerstr. 369', 'Köl', NULL, '50739', 'Germany');\nINSERT INTO `orders` VALUES (10685, 'GOURL', 4, '2017-09-29 00:00:00', '2017-10-03 00:00:00', 2, 33.75, 'Av. Brasil-442', 'Campinas', 'SP', '04876-786', 'Brazil');\nINSERT INTO `orders` VALUES (10686, 'PICCO', 2, '2017-09-30 00:00:00', '2017-10-08 00:00:00', 1, 96.50, 'Geislweg 14', 'Salzburg', NULL, '5020', 'Austria');\nINSERT INTO `orders` VALUES (10687, 'HUNGO', 9, '2017-09-30 00:00:00', '2017-10-30 00:00:00', 2, 296.43, '8 Johnstown Road', 'Cork', 'Co. Cork', NULL, 'Ireland');\nINSERT INTO `orders` VALUES (10688, 'VAFFE', 4, '2017-10-01 00:00:00', '2017-10-07 00:00:00', 2, 299.09, 'Smagsloget 45', 'Århus', NULL, '8200', 'Denmark');\nINSERT INTO `orders` VALUES (10689, 'BERGS', 1, '2017-10-01 00:00:00', '2017-10-07 00:00:00', 2, 13.42, 'Berguvsvägen  8', 'Luleå', NULL, 'S-958 22', 'Sweden');\nINSERT INTO `orders` VALUES (10690, 'HANAR', 1, '2017-10-02 00:00:00', '2017-10-03 00:00:00', 1, 15.80, 'Rua do Paço-67', 'Rio de Janeiro', 'RJ', '05454-876', 'Brazil');\nINSERT INTO `orders` VALUES (10691, 'QUICK', 2, '2017-10-03 00:00:00', '2017-10-22 00:00:00', 2, 810.05, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10692, 'ALFKI', 4, '2017-10-03 00:00:00', '2017-10-13 00:00:00', 2, 61.02, 'Obere Str. 57', 'Berli', NULL, '12209', 'Germany');\nINSERT INTO `orders` VALUES (10693, 'WHITC', 3, '2017-10-06 00:00:00', '2017-10-10 00:00:00', 3, 139.34, '1029 - 12th Ave. S.', 'Seattle', 'WA', '98124', 'USA');\nINSERT INTO `orders` VALUES (10694, 'QUICK', 8, '2017-10-06 00:00:00', '2017-10-09 00:00:00', 3, 398.36, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10695, 'WILMK', 7, '2017-10-07 00:00:00', '2017-10-14 00:00:00', 1, 16.72, 'Keskuskatu 45', 'Helsinki', NULL, '21240', 'Finland');\nINSERT INTO `orders` VALUES (10696, 'WHITC', 8, '2017-10-08 00:00:00', '2017-10-14 00:00:00', 3, 102.55, '1029 - 12th Ave. S.', 'Seattle', 'WA', '98124', 'USA');\nINSERT INTO `orders` VALUES (10697, 'LINOD', 3, '2017-10-08 00:00:00', '2017-10-14 00:00:00', 1, 45.52, 'Ave. 5 de Mayo Porlamar', 'I. de Margarita', 'Nueva Esparta', '4980', 'Venezuela');\nINSERT INTO `orders` VALUES (10698, 'ERNSH', 4, '2017-10-09 00:00:00', '2017-10-17 00:00:00', 1, 272.47, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10699, 'MORGK', 3, '2017-10-09 00:00:00', '2017-10-13 00:00:00', 3, 0.58, 'Heerstr. 22', 'Leipzig', NULL, '04179', 'Germany');\nINSERT INTO `orders` VALUES (10700, 'SAVEA', 3, '2017-10-10 00:00:00', '2017-10-16 00:00:00', 1, 65.10, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10701, 'HUNGO', 6, '2017-10-13 00:00:00', '2017-10-15 00:00:00', 3, 220.31, '8 Johnstown Road', 'Cork', 'Co. Cork', NULL, 'Ireland');\nINSERT INTO `orders` VALUES (10702, 'ALFKI', 4, '2017-10-13 00:00:00', '2017-10-21 00:00:00', 1, 23.94, 'Obere Str. 57', 'Berli', NULL, '12209', 'Germany');\nINSERT INTO `orders` VALUES (10703, 'FOLKO', 6, '2017-10-14 00:00:00', '2017-10-20 00:00:00', 2, 152.30, 'Åkergatan 24', 'Bräcke', NULL, 'S-844 67', 'Sweden');\nINSERT INTO `orders` VALUES (10704, 'QUEE', 6, '2017-10-14 00:00:00', '2017-11-07 00:00:00', 1, 4.78, 'Alameda dos Canàrios-891', 'Sao Paulo', 'SP', '05487-020', 'Brazil');\nINSERT INTO `orders` VALUES (10705, 'HILAA', 9, '2017-10-15 00:00:00', '2017-11-18 00:00:00', 2, 3.52, 'Carrera 22 con Ave. Carlos Soublette #8-35', 'San Cristóbal', 'Táchira', '5022', 'Venezuela');\nINSERT INTO `orders` VALUES (10706, 'OLDWO', 8, '2017-10-16 00:00:00', '2017-10-21 00:00:00', 3, 135.63, '2743 Bering St.', 'Anchorage', 'AK', '99508', 'USA');\nINSERT INTO `orders` VALUES (10707, 'AROUT', 4, '2017-10-16 00:00:00', '2017-10-23 00:00:00', 3, 21.74, 'Brook Farm Stratford St. Mary', 'Colchester', 'Essex', 'CO7 6JX', 'UK');\nINSERT INTO `orders` VALUES (10708, 'THEBI', 6, '2017-10-17 00:00:00', '2017-11-05 00:00:00', 2, 2.96, '89 Jefferson Way Suite 2', 'Portland', 'OR', '97201', 'USA');\nINSERT INTO `orders` VALUES (10709, 'GOURL', 1, '2017-10-17 00:00:00', '2017-11-20 00:00:00', 3, 210.80, 'Av. Brasil-442', 'Campinas', 'SP', '04876-786', 'Brazil');\nINSERT INTO `orders` VALUES (10710, 'FRANS', 1, '2017-10-20 00:00:00', '2017-10-23 00:00:00', 1, 4.98, 'Via Monte Bianco 34', 'Torino', NULL, '10100', 'Italy');\nINSERT INTO `orders` VALUES (10711, 'SAVEA', 5, '2017-10-21 00:00:00', '2017-10-29 00:00:00', 2, 52.41, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10712, 'HUNGO', 3, '2017-10-21 00:00:00', '2017-10-31 00:00:00', 1, 89.93, '8 Johnstown Road', 'Cork', 'Co. Cork', NULL, 'Ireland');\nINSERT INTO `orders` VALUES (10713, 'SAVEA', 1, '2017-10-22 00:00:00', '2017-10-24 00:00:00', 1, 167.05, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10714, 'SAVEA', 5, '2017-10-22 00:00:00', '2017-10-27 00:00:00', 3, 24.49, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10715, 'BONAP', 3, '2017-10-23 00:00:00', '2017-10-29 00:00:00', 1, 63.20, '12-rue des Bouchers', 'Marseille', NULL, '13008', 'France');\nINSERT INTO `orders` VALUES (10716, 'RANCH', 4, '2017-10-24 00:00:00', '2017-10-27 00:00:00', 2, 22.57, 'Av. del Libertador 900', 'Buenos Aires', NULL, '1010', 'Argentina');\nINSERT INTO `orders` VALUES (10717, 'FRANK', 1, '2017-10-24 00:00:00', '2017-10-29 00:00:00', 2, 59.25, 'Berliner Platz 43', 'Münche', NULL, '80805', 'Germany');\nINSERT INTO `orders` VALUES (10718, 'KOENE', 1, '2017-10-27 00:00:00', '2017-10-29 00:00:00', 3, 170.88, 'Maubelstr. 90', 'Brandenburg', NULL, '14776', 'Germany');\nINSERT INTO `orders` VALUES (10719, 'LETSS', 8, '2017-10-27 00:00:00', '2017-11-05 00:00:00', 2, 51.44, '87 Polk St. Suite 5', 'San Francisco', 'CA', '94117', 'USA');\nINSERT INTO `orders` VALUES (10720, 'QUEDE', 8, '2017-10-28 00:00:00', '2017-11-05 00:00:00', 2, 9.53, 'Rua da Panificadora-12', 'Rio de Janeiro', 'RJ', '02389-673', 'Brazil');\nINSERT INTO `orders` VALUES (10721, 'QUICK', 5, '2017-10-29 00:00:00', '2017-10-31 00:00:00', 3, 48.92, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10722, 'SAVEA', 8, '2017-10-29 00:00:00', '2017-11-04 00:00:00', 1, 74.58, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10723, 'WHITC', 3, '2017-10-30 00:00:00', '2017-11-25 00:00:00', 1, 21.72, '1029 - 12th Ave. S.', 'Seattle', 'WA', '98124', 'USA');\nINSERT INTO `orders` VALUES (10724, 'MEREP', 8, '2017-10-30 00:00:00', '2017-11-05 00:00:00', 2, 57.75, '43 rue St. Laurent', 'Montréal', 'Québec', 'H1J 1C3', 'Canada');\nINSERT INTO `orders` VALUES (10725, 'FAMIA', 4, '2017-10-31 00:00:00', '2017-11-05 00:00:00', 3, 10.83, 'Rua Orós-92', 'Sao Paulo', 'SP', '05442-030', 'Brazil');\nINSERT INTO `orders` VALUES (10726, 'EASTC', 4, '2017-11-03 00:00:00', '2017-12-05 00:00:00', 1, 16.56, '35 King George', 'Londo', NULL, 'WX3 6FW', 'UK');\nINSERT INTO `orders` VALUES (10727, 'REGGC', 2, '2017-11-03 00:00:00', '2017-12-05 00:00:00', 1, 89.90, 'Strada Provinciale 124', 'Reggio Emilia', NULL, '42100', 'Italy');\nINSERT INTO `orders` VALUES (10728, 'QUEE', 4, '2017-11-04 00:00:00', '2017-11-11 00:00:00', 2, 58.33, 'Alameda dos Canàrios-891', 'Sao Paulo', 'SP', '05487-020', 'Brazil');\nINSERT INTO `orders` VALUES (10729, 'LINOD', 8, '2017-11-04 00:00:00', '2017-11-14 00:00:00', 3, 141.06, 'Ave. 5 de Mayo Porlamar', 'I. de Margarita', 'Nueva Esparta', '4980', 'Venezuela');\nINSERT INTO `orders` VALUES (10730, 'BONAP', 5, '2017-11-05 00:00:00', '2017-11-14 00:00:00', 1, 20.12, '12-rue des Bouchers', 'Marseille', NULL, '13008', 'France');\nINSERT INTO `orders` VALUES (10731, 'CHOPS', 7, '2017-11-06 00:00:00', '2017-11-14 00:00:00', 1, 96.65, 'Hauptstr. 31', 'Ber', NULL, '3012', 'Switzerland');\nINSERT INTO `orders` VALUES (10732, 'BONAP', 3, '2017-11-06 00:00:00', '2017-11-07 00:00:00', 1, 16.97, '12-rue des Bouchers', 'Marseille', NULL, '13008', 'France');\nINSERT INTO `orders` VALUES (10733, 'BERGS', 1, '2017-11-07 00:00:00', '2017-11-10 00:00:00', 3, 110.11, 'Berguvsvägen  8', 'Luleå', NULL, 'S-958 22', 'Sweden');\nINSERT INTO `orders` VALUES (10734, 'GOURL', 2, '2017-11-07 00:00:00', '2017-11-12 00:00:00', 3, 1.63, 'Av. Brasil-442', 'Campinas', 'SP', '04876-786', 'Brazil');\nINSERT INTO `orders` VALUES (10735, 'LETSS', 6, '2017-11-10 00:00:00', '2017-11-21 00:00:00', 2, 45.97, '87 Polk St. Suite 5', 'San Francisco', 'CA', '94117', 'USA');\nINSERT INTO `orders` VALUES (10736, 'HUNGO', 9, '2017-11-11 00:00:00', '2017-11-21 00:00:00', 2, 44.10, '8 Johnstown Road', 'Cork', 'Co. Cork', NULL, 'Ireland');\nINSERT INTO `orders` VALUES (10737, 'VINET', 2, '2017-11-11 00:00:00', '2017-11-18 00:00:00', 2, 7.79, '59 rue de l\\'\\'Abbaye', 'Reims', NULL, '51100', 'France');\nINSERT INTO `orders` VALUES (10738, 'SPECD', 2, '2017-11-12 00:00:00', '2017-11-18 00:00:00', 1, 2.91, '25-rue Lauristo', 'Paris', NULL, '75016', 'France');\nINSERT INTO `orders` VALUES (10739, 'VINET', 3, '2017-11-12 00:00:00', '2017-11-17 00:00:00', 3, 11.08, '59 rue de l\\'\\'Abbaye', 'Reims', NULL, '51100', 'France');\nINSERT INTO `orders` VALUES (10740, 'WHITC', 4, '2017-11-13 00:00:00', '2017-11-25 00:00:00', 2, 81.88, '1029 - 12th Ave. S.', 'Seattle', 'WA', '98124', 'USA');\nINSERT INTO `orders` VALUES (10741, 'AROUT', 4, '2017-11-14 00:00:00', '2017-11-18 00:00:00', 3, 10.96, 'Brook Farm Stratford St. Mary', 'Colchester', 'Essex', 'CO7 6JX', 'UK');\nINSERT INTO `orders` VALUES (10742, 'BOTTM', 3, '2017-11-14 00:00:00', '2017-11-18 00:00:00', 3, 243.73, '23 Tsawassen Blvd.', 'Tsawasse', 'BC', 'T2F 8M4', 'Canada');\nINSERT INTO `orders` VALUES (10743, 'AROUT', 1, '2017-11-17 00:00:00', '2017-11-21 00:00:00', 2, 23.72, 'Brook Farm Stratford St. Mary', 'Colchester', 'Essex', 'CO7 6JX', 'UK');\nINSERT INTO `orders` VALUES (10744, 'VAFFE', 6, '2017-11-17 00:00:00', '2017-11-24 00:00:00', 1, 69.19, 'Smagsloget 45', 'Århus', NULL, '8200', 'Denmark');\nINSERT INTO `orders` VALUES (10745, 'QUICK', 9, '2017-11-18 00:00:00', '2017-11-27 00:00:00', 1, 3.52, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10746, 'CHOPS', 1, '2017-11-19 00:00:00', '2017-11-21 00:00:00', 3, 31.43, 'Hauptstr. 31', 'Ber', NULL, '3012', 'Switzerland');\nINSERT INTO `orders` VALUES (10747, 'PICCO', 6, '2017-11-19 00:00:00', '2017-11-26 00:00:00', 1, 117.33, 'Geislweg 14', 'Salzburg', NULL, '5020', 'Austria');\nINSERT INTO `orders` VALUES (10748, 'SAVEA', 3, '2017-11-20 00:00:00', '2017-11-28 00:00:00', 1, 232.55, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10749, 'ISLAT', 4, '2017-11-20 00:00:00', '2017-12-19 00:00:00', 2, 61.53, 'Garden House Crowther Way', 'Cowes', 'Isle of Wight', 'PO31 7PJ', 'UK');\nINSERT INTO `orders` VALUES (10750, 'WARTH', 9, '2017-11-21 00:00:00', '2017-11-24 00:00:00', 1, 79.30, 'Torikatu 38', 'Oulu', NULL, '90110', 'Finland');\nINSERT INTO `orders` VALUES (10751, 'RICSU', 3, '2017-11-24 00:00:00', '2017-12-03 00:00:00', 3, 130.79, 'Starenweg 5', 'Genève', NULL, '1204', 'Switzerland');\nINSERT INTO `orders` VALUES (10752, 'NORTS', 2, '2017-11-24 00:00:00', '2017-11-28 00:00:00', 3, 1.39, 'South House 300 Queensbridge', 'Londo', NULL, 'SW7 1RZ', 'UK');\nINSERT INTO `orders` VALUES (10753, 'FRANS', 3, '2017-11-25 00:00:00', '2017-11-27 00:00:00', 1, 7.70, 'Via Monte Bianco 34', 'Torino', NULL, '10100', 'Italy');\nINSERT INTO `orders` VALUES (10754, 'MAGAA', 6, '2017-11-25 00:00:00', '2017-11-27 00:00:00', 3, 2.38, 'Via Ludovico il Moro 22', 'Bergamo', NULL, '24100', 'Italy');\nINSERT INTO `orders` VALUES (10755, 'BONAP', 4, '2017-11-26 00:00:00', '2017-11-28 00:00:00', 2, 16.71, '12-rue des Bouchers', 'Marseille', NULL, '13008', 'France');\nINSERT INTO `orders` VALUES (10756, 'SPLIR', 8, '2017-11-27 00:00:00', '2017-12-02 00:00:00', 2, 73.21, 'P.O. Box 555', 'Lander', 'WY', '82520', 'USA');\nINSERT INTO `orders` VALUES (10757, 'SAVEA', 6, '2017-11-27 00:00:00', '2017-12-15 00:00:00', 1, 8.19, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10758, 'RICSU', 3, '2017-11-28 00:00:00', '2017-12-04 00:00:00', 3, 138.17, 'Starenweg 5', 'Genève', NULL, '1204', 'Switzerland');\nINSERT INTO `orders` VALUES (10759, 'ANATR', 3, '2017-11-28 00:00:00', '2017-12-12 00:00:00', 3, 11.99, 'Avda. de la Constitución 2222', 'México D.F.', NULL, '05021', 'Mexico');\nINSERT INTO `orders` VALUES (10760, 'MAISD', 4, '2017-12-01 00:00:00', '2017-12-10 00:00:00', 1, 155.64, 'Rue Joseph-Bens 532', 'Bruxelles', NULL, 'B-1180', 'Belgium');\nINSERT INTO `orders` VALUES (10761, 'RATTC', 5, '2017-12-02 00:00:00', '2017-12-08 00:00:00', 2, 18.66, '2817 Milton Dr.', 'Albuquerque', 'NM', '87110', 'USA');\nINSERT INTO `orders` VALUES (10762, 'FOLKO', 3, '2017-12-02 00:00:00', '2017-12-09 00:00:00', 1, 328.74, 'Åkergatan 24', 'Bräcke', NULL, 'S-844 67', 'Sweden');\nINSERT INTO `orders` VALUES (10763, 'FOLIG', 3, '2017-12-03 00:00:00', '2017-12-08 00:00:00', 3, 37.35, '184-chaussée de Tournai', 'Lille', NULL, '59000', 'France');\nINSERT INTO `orders` VALUES (10764, 'ERNSH', 6, '2017-12-03 00:00:00', '2017-12-08 00:00:00', 3, 145.45, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10765, 'QUICK', 3, '2017-12-04 00:00:00', '2017-12-09 00:00:00', 3, 42.74, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10766, 'OTTIK', 4, '2017-12-05 00:00:00', '2017-12-09 00:00:00', 1, 157.55, 'Mehrheimerstr. 369', 'Köl', NULL, '50739', 'Germany');\nINSERT INTO `orders` VALUES (10767, 'SUPRD', 4, '2017-12-05 00:00:00', '2017-12-15 00:00:00', 3, 1.59, 'Boulevard Tirou-255', 'Charleroi', NULL, 'B-6000', 'Belgium');\nINSERT INTO `orders` VALUES (10768, 'AROUT', 3, '2017-12-08 00:00:00', '2017-12-15 00:00:00', 2, 146.32, 'Brook Farm Stratford St. Mary', 'Colchester', 'Essex', 'CO7 6JX', 'UK');\nINSERT INTO `orders` VALUES (10769, 'VAFFE', 3, '2017-12-08 00:00:00', '2017-12-12 00:00:00', 1, 65.06, 'Smagsloget 45', 'Århus', NULL, '8200', 'Denmark');\nINSERT INTO `orders` VALUES (10770, 'HANAR', 8, '2017-12-09 00:00:00', '2017-12-17 00:00:00', 3, 5.32, 'Rua do Paço-67', 'Rio de Janeiro', 'RJ', '05454-876', 'Brazil');\nINSERT INTO `orders` VALUES (10771, 'ERNSH', 9, '2017-12-10 00:00:00', '2018-01-02 00:00:00', 2, 11.19, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10772, 'LEHMS', 3, '2017-12-10 00:00:00', '2017-12-19 00:00:00', 2, 91.28, 'Magazinweg 7', 'Frankfurt a.M.', NULL, '60528', 'Germany');\nINSERT INTO `orders` VALUES (10773, 'ERNSH', 1, '2017-12-11 00:00:00', '2017-12-16 00:00:00', 3, 96.43, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10774, 'FOLKO', 4, '2017-12-11 00:00:00', '2017-12-12 00:00:00', 1, 48.20, 'Åkergatan 24', 'Bräcke', NULL, 'S-844 67', 'Sweden');\nINSERT INTO `orders` VALUES (10775, 'THECR', 7, '2017-12-12 00:00:00', '2017-12-26 00:00:00', 1, 20.25, '55 Grizzly Peak Rd.', 'Butte', 'MT', '59801', 'USA');\nINSERT INTO `orders` VALUES (10776, 'ERNSH', 1, '2017-12-15 00:00:00', '2017-12-18 00:00:00', 3, 351.53, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10777, 'GOURL', 7, '2017-12-15 00:00:00', '2018-01-21 00:00:00', 2, 3.01, 'Av. Brasil-442', 'Campinas', 'SP', '04876-786', 'Brazil');\nINSERT INTO `orders` VALUES (10778, 'BERGS', 3, '2017-12-16 00:00:00', '2017-12-24 00:00:00', 1, 6.79, 'Berguvsvägen  8', 'Luleå', NULL, 'S-958 22', 'Sweden');\nINSERT INTO `orders` VALUES (10779, 'MORGK', 3, '2017-12-16 00:00:00', '2018-01-14 00:00:00', 2, 58.13, 'Heerstr. 22', 'Leipzig', NULL, '04179', 'Germany');\nINSERT INTO `orders` VALUES (10780, 'LILAS', 2, '2017-12-16 00:00:00', '2017-12-25 00:00:00', 1, 42.13, 'Carrera 52 con Ave. Bolívar #65-98 Llano Largo', 'Barquisimeto', 'Lara', '3508', 'Venezuela');\nINSERT INTO `orders` VALUES (10781, 'WARTH', 2, '2017-12-17 00:00:00', '2017-12-19 00:00:00', 3, 73.16, 'Torikatu 38', 'Oulu', NULL, '90110', 'Finland');\nINSERT INTO `orders` VALUES (10782, 'CACTU', 9, '2017-12-17 00:00:00', '2017-12-22 00:00:00', 3, 1.10, 'Cerrito 333', 'Buenos Aires', NULL, '1010', 'Argentina');\nINSERT INTO `orders` VALUES (10783, 'HANAR', 4, '2017-12-18 00:00:00', '2017-12-19 00:00:00', 2, 124.98, 'Rua do Paço-67', 'Rio de Janeiro', 'RJ', '05454-876', 'Brazil');\nINSERT INTO `orders` VALUES (10784, 'MAGAA', 4, '2017-12-18 00:00:00', '2017-12-22 00:00:00', 3, 70.09, 'Via Ludovico il Moro 22', 'Bergamo', NULL, '24100', 'Italy');\nINSERT INTO `orders` VALUES (10785, 'GROSR', 1, '2017-12-18 00:00:00', '2017-12-24 00:00:00', 3, 1.51, '5ª Ave. Los Palos Grandes', 'Caracas', 'DF', '1081', 'Venezuela');\nINSERT INTO `orders` VALUES (10786, 'QUEE', 8, '2017-12-19 00:00:00', '2017-12-23 00:00:00', 1, 110.87, 'Alameda dos Canàrios-891', 'Sao Paulo', 'SP', '05487-020', 'Brazil');\nINSERT INTO `orders` VALUES (10787, 'LAMAI', 2, '2017-12-19 00:00:00', '2017-12-26 00:00:00', 1, 249.93, '1 rue Alsace-Lorraine', 'Toulouse', NULL, '31000', 'France');\nINSERT INTO `orders` VALUES (10788, 'QUICK', 1, '2017-12-22 00:00:00', '2018-01-19 00:00:00', 2, 42.70, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10789, 'FOLIG', 1, '2017-12-22 00:00:00', '2017-12-31 00:00:00', 2, 100.60, '184-chaussée de Tournai', 'Lille', NULL, '59000', 'France');\nINSERT INTO `orders` VALUES (10790, 'GOURL', 6, '2017-12-22 00:00:00', '2017-12-26 00:00:00', 1, 28.23, 'Av. Brasil-442', 'Campinas', 'SP', '04876-786', 'Brazil');\nINSERT INTO `orders` VALUES (10791, 'FRANK', 6, '2017-12-23 00:00:00', '2018-01-01 00:00:00', 2, 16.85, 'Berliner Platz 43', 'Münche', NULL, '80805', 'Germany');\nINSERT INTO `orders` VALUES (10792, 'WOLZA', 1, '2017-12-23 00:00:00', '2017-12-31 00:00:00', 3, 23.79, 'ul. Filtrowa 68', 'Warszawa', NULL, '01-012', 'Poland');\nINSERT INTO `orders` VALUES (10793, 'AROUT', 3, '2017-12-24 00:00:00', '2018-01-08 00:00:00', 3, 4.52, 'Brook Farm Stratford St. Mary', 'Colchester', 'Essex', 'CO7 6JX', 'UK');\nINSERT INTO `orders` VALUES (10794, 'QUEDE', 6, '2017-12-24 00:00:00', '2018-01-02 00:00:00', 1, 21.49, 'Rua da Panificadora-12', 'Rio de Janeiro', 'RJ', '02389-673', 'Brazil');\nINSERT INTO `orders` VALUES (10795, 'ERNSH', 8, '2017-12-24 00:00:00', '2018-01-20 00:00:00', 2, 126.66, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10796, 'HILAA', 3, '2017-12-25 00:00:00', '2018-01-14 00:00:00', 1, 26.52, 'Carrera 22 con Ave. Carlos Soublette #8-35', 'San Cristóbal', 'Táchira', '5022', 'Venezuela');\nINSERT INTO `orders` VALUES (10797, 'DRACD', 7, '2017-12-25 00:00:00', '2018-01-05 00:00:00', 2, 33.35, 'Walserweg 21', 'Aache', NULL, '52066', 'Germany');\nINSERT INTO `orders` VALUES (10798, 'ISLAT', 2, '2017-12-26 00:00:00', '2018-01-05 00:00:00', 1, 2.33, 'Garden House Crowther Way', 'Cowes', 'Isle of Wight', 'PO31 7PJ', 'UK');\nINSERT INTO `orders` VALUES (10799, 'KOENE', 9, '2017-12-26 00:00:00', '2018-01-05 00:00:00', 3, 30.76, 'Maubelstr. 90', 'Brandenburg', NULL, '14776', 'Germany');\nINSERT INTO `orders` VALUES (10800, 'SEVES', 1, '2017-12-26 00:00:00', '2018-01-05 00:00:00', 3, 137.44, '90 Wadhurst Rd.', 'Londo', NULL, 'OX15 4NB', 'UK');\nINSERT INTO `orders` VALUES (10801, 'BOLID', 4, '2017-12-29 00:00:00', '2017-12-31 00:00:00', 2, 97.09, 'C/ Araquil-67', 'Madrid', NULL, '28023', 'Spain');\nINSERT INTO `orders` VALUES (10802, 'SIMOB', 4, '2017-12-29 00:00:00', '2018-01-02 00:00:00', 2, 257.26, 'Vinbæltet 34', 'Kobenhav', NULL, '1734', 'Denmark');\nINSERT INTO `orders` VALUES (10803, 'WELLI', 4, '2017-12-30 00:00:00', '2018-01-06 00:00:00', 1, 55.23, 'Rua do Mercado-12', 'Resende', 'SP', '08737-363', 'Brazil');\nINSERT INTO `orders` VALUES (10804, 'SEVES', 6, '2017-12-30 00:00:00', '2018-01-07 00:00:00', 2, 27.33, '90 Wadhurst Rd.', 'Londo', NULL, 'OX15 4NB', 'UK');\nINSERT INTO `orders` VALUES (10805, 'THEBI', 2, '2017-12-30 00:00:00', '2018-01-09 00:00:00', 3, 237.34, '89 Jefferson Way Suite 2', 'Portland', 'OR', '97201', 'USA');\nINSERT INTO `orders` VALUES (10806, 'VICTE', 3, '2017-12-31 00:00:00', '2018-01-05 00:00:00', 2, 22.11, '2-rue du Commerce', 'Lyo', NULL, '69004', 'France');\nINSERT INTO `orders` VALUES (10807, 'FRANS', 4, '2017-12-31 00:00:00', '2018-01-30 00:00:00', 1, 1.36, 'Via Monte Bianco 34', 'Torino', NULL, '10100', 'Italy');\nINSERT INTO `orders` VALUES (10808, 'OLDWO', 2, '2018-01-01 00:00:00', '2018-01-09 00:00:00', 3, 45.53, '2743 Bering St.', 'Anchorage', 'AK', '99508', 'USA');\nINSERT INTO `orders` VALUES (10809, 'WELLI', 7, '2018-01-01 00:00:00', '2018-01-07 00:00:00', 1, 4.87, 'Rua do Mercado-12', 'Resende', 'SP', '08737-363', 'Brazil');\nINSERT INTO `orders` VALUES (10810, 'LAUGB', 2, '2018-01-01 00:00:00', '2018-01-07 00:00:00', 3, 4.33, '2319 Elm St.', 'Vancouver', 'BC', 'V3F 2K1', 'Canada');\nINSERT INTO `orders` VALUES (10811, 'LINOD', 8, '2018-01-02 00:00:00', '2018-01-08 00:00:00', 1, 31.22, 'Ave. 5 de Mayo Porlamar', 'I. de Margarita', 'Nueva Esparta', '4980', 'Venezuela');\nINSERT INTO `orders` VALUES (10812, 'REGGC', 5, '2018-01-02 00:00:00', '2018-01-12 00:00:00', 1, 59.78, 'Strada Provinciale 124', 'Reggio Emilia', NULL, '42100', 'Italy');\nINSERT INTO `orders` VALUES (10813, 'RICAR', 1, '2018-01-05 00:00:00', '2018-01-09 00:00:00', 1, 47.38, 'Av. Copacabana-267', 'Rio de Janeiro', 'RJ', '02389-890', 'Brazil');\nINSERT INTO `orders` VALUES (10814, 'VICTE', 3, '2018-01-05 00:00:00', '2018-01-14 00:00:00', 3, 130.94, '2-rue du Commerce', 'Lyo', NULL, '69004', 'France');\nINSERT INTO `orders` VALUES (10815, 'SAVEA', 2, '2018-01-05 00:00:00', '2018-01-14 00:00:00', 3, 14.62, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10816, 'GREAL', 4, '2018-01-06 00:00:00', '2018-02-04 00:00:00', 2, 719.78, '2732 Baker Blvd.', 'Eugene', 'OR', '97403', 'USA');\nINSERT INTO `orders` VALUES (10817, 'KOENE', 3, '2018-01-06 00:00:00', '2018-01-13 00:00:00', 2, 306.07, 'Maubelstr. 90', 'Brandenburg', NULL, '14776', 'Germany');\nINSERT INTO `orders` VALUES (10818, 'MAGAA', 7, '2018-01-07 00:00:00', '2018-01-12 00:00:00', 3, 65.48, 'Via Ludovico il Moro 22', 'Bergamo', NULL, '24100', 'Italy');\nINSERT INTO `orders` VALUES (10819, 'CACTU', 2, '2018-01-07 00:00:00', '2018-01-16 00:00:00', 3, 19.76, 'Cerrito 333', 'Buenos Aires', NULL, '1010', 'Argentina');\nINSERT INTO `orders` VALUES (10820, 'RATTC', 3, '2018-01-07 00:00:00', '2018-01-13 00:00:00', 2, 37.52, '2817 Milton Dr.', 'Albuquerque', 'NM', '87110', 'USA');\nINSERT INTO `orders` VALUES (10821, 'SPLIR', 1, '2018-01-08 00:00:00', '2018-01-15 00:00:00', 1, 36.68, 'P.O. Box 555', 'Lander', 'WY', '82520', 'USA');\nINSERT INTO `orders` VALUES (10822, 'TRAIH', 6, '2018-01-08 00:00:00', '2018-01-16 00:00:00', 3, 7.00, '722 DaVinci Blvd.', 'Kirkland', 'WA', '98034', 'USA');\nINSERT INTO `orders` VALUES (10823, 'LILAS', 5, '2018-01-09 00:00:00', '2018-01-13 00:00:00', 2, 163.97, 'Carrera 52 con Ave. Bolívar #65-98 Llano Largo', 'Barquisimeto', 'Lara', '3508', 'Venezuela');\nINSERT INTO `orders` VALUES (10824, 'FOLKO', 8, '2018-01-09 00:00:00', '2018-01-30 00:00:00', 1, 1.23, 'Åkergatan 24', 'Bräcke', NULL, 'S-844 67', 'Sweden');\nINSERT INTO `orders` VALUES (10825, 'DRACD', 1, '2018-01-09 00:00:00', '2018-01-14 00:00:00', 1, 79.25, 'Walserweg 21', 'Aache', NULL, '52066', 'Germany');\nINSERT INTO `orders` VALUES (10826, 'BLONP', 6, '2018-01-12 00:00:00', '2018-02-06 00:00:00', 1, 7.09, '24-place Kléber', 'Strasbourg', NULL, '67000', 'France');\nINSERT INTO `orders` VALUES (10827, 'BONAP', 1, '2018-01-12 00:00:00', '2018-02-06 00:00:00', 2, 63.54, '12-rue des Bouchers', 'Marseille', NULL, '13008', 'France');\nINSERT INTO `orders` VALUES (10828, 'RANCH', 9, '2018-01-13 00:00:00', '2018-02-04 00:00:00', 1, 90.85, 'Av. del Libertador 900', 'Buenos Aires', NULL, '1010', 'Argentina');\nINSERT INTO `orders` VALUES (10829, 'ISLAT', 9, '2018-01-13 00:00:00', '2018-01-23 00:00:00', 1, 154.72, 'Garden House Crowther Way', 'Cowes', 'Isle of Wight', 'PO31 7PJ', 'UK');\nINSERT INTO `orders` VALUES (10830, 'TRADH', 4, '2018-01-13 00:00:00', '2018-01-21 00:00:00', 2, 81.83, 'Av. Inês de Castro-414', 'Sao Paulo', 'SP', '05634-030', 'Brazil');\nINSERT INTO `orders` VALUES (10831, 'SANTG', 3, '2018-01-14 00:00:00', '2018-01-23 00:00:00', 2, 72.19, 'Erling Skakkes gate 78', 'Staver', NULL, '4110', 'Norway');\nINSERT INTO `orders` VALUES (10832, 'LAMAI', 2, '2018-01-14 00:00:00', '2018-01-19 00:00:00', 2, 43.26, '1 rue Alsace-Lorraine', 'Toulouse', NULL, '31000', 'France');\nINSERT INTO `orders` VALUES (10833, 'OTTIK', 6, '2018-01-15 00:00:00', '2018-01-23 00:00:00', 2, 71.49, 'Mehrheimerstr. 369', 'Köl', NULL, '50739', 'Germany');\nINSERT INTO `orders` VALUES (10834, 'TRADH', 1, '2018-01-15 00:00:00', '2018-01-19 00:00:00', 3, 29.78, 'Av. Inês de Castro-414', 'Sao Paulo', 'SP', '05634-030', 'Brazil');\nINSERT INTO `orders` VALUES (10835, 'ALFKI', 1, '2018-01-15 00:00:00', '2018-01-21 00:00:00', 3, 69.53, 'Obere Str. 57', 'Berli', NULL, '12209', 'Germany');\nINSERT INTO `orders` VALUES (10836, 'ERNSH', 7, '2018-01-16 00:00:00', '2018-01-21 00:00:00', 1, 411.88, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10837, 'BERGS', 9, '2018-01-16 00:00:00', '2018-01-23 00:00:00', 3, 13.32, 'Berguvsvägen  8', 'Luleå', NULL, 'S-958 22', 'Sweden');\nINSERT INTO `orders` VALUES (10838, 'LINOD', 3, '2018-01-19 00:00:00', '2018-01-23 00:00:00', 3, 59.28, 'Ave. 5 de Mayo Porlamar', 'I. de Margarita', 'Nueva Esparta', '4980', 'Venezuela');\nINSERT INTO `orders` VALUES (10839, 'TRADH', 3, '2018-01-19 00:00:00', '2018-01-22 00:00:00', 3, 35.43, 'Av. Inês de Castro-414', 'Sao Paulo', 'SP', '05634-030', 'Brazil');\nINSERT INTO `orders` VALUES (10840, 'LINOD', 4, '2018-01-19 00:00:00', '2018-02-16 00:00:00', 2, 2.71, 'Ave. 5 de Mayo Porlamar', 'I. de Margarita', 'Nueva Esparta', '4980', 'Venezuela');\nINSERT INTO `orders` VALUES (10841, 'SUPRD', 5, '2018-01-20 00:00:00', '2018-01-29 00:00:00', 2, 424.30, 'Boulevard Tirou-255', 'Charleroi', NULL, 'B-6000', 'Belgium');\nINSERT INTO `orders` VALUES (10842, 'TORTU', 1, '2018-01-20 00:00:00', '2018-01-29 00:00:00', 3, 54.42, 'Avda. Azteca 123', 'México D.F.', NULL, '05033', 'Mexico');\nINSERT INTO `orders` VALUES (10843, 'VICTE', 4, '2018-01-21 00:00:00', '2018-01-26 00:00:00', 2, 9.26, '2-rue du Commerce', 'Lyo', NULL, '69004', 'France');\nINSERT INTO `orders` VALUES (10844, 'PICCO', 8, '2018-01-21 00:00:00', '2018-01-26 00:00:00', 2, 25.22, 'Geislweg 14', 'Salzburg', NULL, '5020', 'Austria');\nINSERT INTO `orders` VALUES (10845, 'QUICK', 8, '2018-01-21 00:00:00', '2018-01-30 00:00:00', 1, 212.98, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10846, 'SUPRD', 2, '2018-01-22 00:00:00', '2018-01-23 00:00:00', 3, 56.46, 'Boulevard Tirou-255', 'Charleroi', NULL, 'B-6000', 'Belgium');\nINSERT INTO `orders` VALUES (10847, 'SAVEA', 4, '2018-01-22 00:00:00', '2018-02-10 00:00:00', 3, 487.57, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10848, 'CONSH', 7, '2018-01-23 00:00:00', '2018-01-29 00:00:00', 2, 38.24, 'Berkeley Gardens 12  Brewery', 'Londo', NULL, 'WX1 6LT', 'UK');\nINSERT INTO `orders` VALUES (10849, 'KOENE', 9, '2018-01-23 00:00:00', '2018-01-30 00:00:00', 2, 0.56, 'Maubelstr. 90', 'Brandenburg', NULL, '14776', 'Germany');\nINSERT INTO `orders` VALUES (10850, 'VICTE', 1, '2018-01-23 00:00:00', '2018-01-30 00:00:00', 1, 49.19, '2-rue du Commerce', 'Lyo', NULL, '69004', 'France');\nINSERT INTO `orders` VALUES (10851, 'RICAR', 5, '2018-01-26 00:00:00', '2018-02-02 00:00:00', 1, 160.55, 'Av. Copacabana-267', 'Rio de Janeiro', 'RJ', '02389-890', 'Brazil');\nINSERT INTO `orders` VALUES (10852, 'RATTC', 8, '2018-01-26 00:00:00', '2018-01-30 00:00:00', 1, 174.05, '2817 Milton Dr.', 'Albuquerque', 'NM', '87110', 'USA');\nINSERT INTO `orders` VALUES (10853, 'BLAUS', 9, '2018-01-27 00:00:00', '2018-02-03 00:00:00', 2, 53.83, 'Forsterstr. 57', 'Mannheim', NULL, '68306', 'Germany');\nINSERT INTO `orders` VALUES (10854, 'ERNSH', 3, '2018-01-27 00:00:00', '2018-02-05 00:00:00', 2, 100.22, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10855, 'OLDWO', 3, '2018-01-27 00:00:00', '2018-02-04 00:00:00', 1, 170.97, '2743 Bering St.', 'Anchorage', 'AK', '99508', 'USA');\nINSERT INTO `orders` VALUES (10856, 'ANTO', 3, '2018-01-28 00:00:00', '2018-02-10 00:00:00', 2, 58.43, 'Mataderos  2312', 'México D.F.', NULL, '05023', 'Mexico');\nINSERT INTO `orders` VALUES (10857, 'BERGS', 8, '2018-01-28 00:00:00', '2018-02-06 00:00:00', 2, 188.85, 'Berguvsvägen  8', 'Luleå', NULL, 'S-958 22', 'Sweden');\nINSERT INTO `orders` VALUES (10858, 'LACOR', 2, '2018-01-29 00:00:00', '2018-02-03 00:00:00', 1, 52.51, '67-avenue de l\\'\\'Europe', 'Versailles', NULL, '78000', 'France');\nINSERT INTO `orders` VALUES (10859, 'FRANK', 1, '2018-01-29 00:00:00', '2018-02-02 00:00:00', 2, 76.10, 'Berliner Platz 43', 'Münche', NULL, '80805', 'Germany');\nINSERT INTO `orders` VALUES (10860, 'FRANR', 3, '2018-01-29 00:00:00', '2018-02-04 00:00:00', 3, 19.26, '54-rue Royale', 'Nantes', NULL, '44000', 'France');\nINSERT INTO `orders` VALUES (10861, 'WHITC', 4, '2018-01-30 00:00:00', '2018-02-17 00:00:00', 2, 14.93, '1029 - 12th Ave. S.', 'Seattle', 'WA', '98124', 'USA');\nINSERT INTO `orders` VALUES (10862, 'LEHMS', 8, '2018-01-30 00:00:00', '2018-02-02 00:00:00', 2, 53.23, 'Magazinweg 7', 'Frankfurt a.M.', NULL, '60528', 'Germany');\nINSERT INTO `orders` VALUES (10863, 'HILAA', 4, '2018-02-02 00:00:00', '2018-02-17 00:00:00', 2, 30.26, 'Carrera 22 con Ave. Carlos Soublette #8-35', 'San Cristóbal', 'Táchira', '5022', 'Venezuela');\nINSERT INTO `orders` VALUES (10864, 'AROUT', 4, '2018-02-02 00:00:00', '2018-02-09 00:00:00', 2, 3.04, 'Brook Farm Stratford St. Mary', 'Colchester', 'Essex', 'CO7 6JX', 'UK');\nINSERT INTO `orders` VALUES (10865, 'QUICK', 2, '2018-02-02 00:00:00', '2018-02-12 00:00:00', 1, 348.14, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10866, 'BERGS', 5, '2018-02-03 00:00:00', '2018-02-12 00:00:00', 1, 109.11, 'Berguvsvägen  8', 'Luleå', NULL, 'S-958 22', 'Sweden');\nINSERT INTO `orders` VALUES (10867, 'LONEP', 6, '2018-02-03 00:00:00', '2018-02-11 00:00:00', 1, 1.93, '89 Chiaroscuro Rd.', 'Portland', 'OR', '97219', 'USA');\nINSERT INTO `orders` VALUES (10868, 'QUEE', 7, '2018-02-04 00:00:00', '2018-02-23 00:00:00', 2, 191.27, 'Alameda dos Canàrios-891', 'Sao Paulo', 'SP', '05487-020', 'Brazil');\nINSERT INTO `orders` VALUES (10869, 'SEVES', 5, '2018-02-04 00:00:00', '2018-02-09 00:00:00', 1, 143.28, '90 Wadhurst Rd.', 'Londo', NULL, 'OX15 4NB', 'UK');\nINSERT INTO `orders` VALUES (10870, 'WOLZA', 5, '2018-02-04 00:00:00', '2018-02-13 00:00:00', 3, 12.04, 'ul. Filtrowa 68', 'Warszawa', NULL, '01-012', 'Poland');\nINSERT INTO `orders` VALUES (10871, 'BONAP', 9, '2018-02-05 00:00:00', '2018-02-10 00:00:00', 2, 112.27, '12-rue des Bouchers', 'Marseille', NULL, '13008', 'France');\nINSERT INTO `orders` VALUES (10872, 'GODOS', 5, '2018-02-05 00:00:00', '2018-02-09 00:00:00', 2, 175.32, 'C/ Romero-33', 'Sevilla', NULL, '41101', 'Spain');\nINSERT INTO `orders` VALUES (10873, 'WILMK', 4, '2018-02-06 00:00:00', '2018-02-09 00:00:00', 1, 0.82, 'Keskuskatu 45', 'Helsinki', NULL, '21240', 'Finland');\nINSERT INTO `orders` VALUES (10874, 'GODOS', 5, '2018-02-06 00:00:00', '2018-02-11 00:00:00', 2, 19.58, 'C/ Romero-33', 'Sevilla', NULL, '41101', 'Spain');\nINSERT INTO `orders` VALUES (10875, 'BERGS', 4, '2018-02-06 00:00:00', '2018-03-03 00:00:00', 2, 32.37, 'Berguvsvägen  8', 'Luleå', NULL, 'S-958 22', 'Sweden');\nINSERT INTO `orders` VALUES (10876, 'BONAP', 7, '2018-02-09 00:00:00', '2018-02-12 00:00:00', 3, 60.42, '12-rue des Bouchers', 'Marseille', NULL, '13008', 'France');\nINSERT INTO `orders` VALUES (10877, 'RICAR', 1, '2018-02-09 00:00:00', '2018-02-19 00:00:00', 1, 38.06, 'Av. Copacabana-267', 'Rio de Janeiro', 'RJ', '02389-890', 'Brazil');\nINSERT INTO `orders` VALUES (10878, 'QUICK', 4, '2018-02-10 00:00:00', '2018-02-12 00:00:00', 1, 46.69, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10879, 'WILMK', 3, '2018-02-10 00:00:00', '2018-02-12 00:00:00', 3, 8.50, 'Keskuskatu 45', 'Helsinki', NULL, '21240', 'Finland');\nINSERT INTO `orders` VALUES (10880, 'FOLKO', 7, '2018-02-10 00:00:00', '2018-02-18 00:00:00', 1, 88.01, 'Åkergatan 24', 'Bräcke', NULL, 'S-844 67', 'Sweden');\nINSERT INTO `orders` VALUES (10881, 'CACTU', 4, '2018-02-11 00:00:00', '2018-02-18 00:00:00', 1, 2.84, 'Cerrito 333', 'Buenos Aires', NULL, '1010', 'Argentina');\nINSERT INTO `orders` VALUES (10882, 'SAVEA', 4, '2018-02-11 00:00:00', '2018-02-20 00:00:00', 3, 23.10, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10883, 'LONEP', 8, '2018-02-12 00:00:00', '2018-02-20 00:00:00', 3, 0.53, '89 Chiaroscuro Rd.', 'Portland', 'OR', '97219', 'USA');\nINSERT INTO `orders` VALUES (10884, 'LETSS', 4, '2018-02-12 00:00:00', '2018-02-13 00:00:00', 2, 90.97, '87 Polk St. Suite 5', 'San Francisco', 'CA', '94117', 'USA');\nINSERT INTO `orders` VALUES (10885, 'SUPRD', 6, '2018-02-12 00:00:00', '2018-02-18 00:00:00', 3, 5.64, 'Boulevard Tirou-255', 'Charleroi', NULL, 'B-6000', 'Belgium');\nINSERT INTO `orders` VALUES (10886, 'HANAR', 1, '2018-02-13 00:00:00', '2018-03-02 00:00:00', 1, 4.99, 'Rua do Paço-67', 'Rio de Janeiro', 'RJ', '05454-876', 'Brazil');\nINSERT INTO `orders` VALUES (10887, 'GALED', 8, '2018-02-13 00:00:00', '2018-02-16 00:00:00', 3, 1.25, 'Rambla de Cataluña-23', 'Barcelona', NULL, '8022', 'Spain');\nINSERT INTO `orders` VALUES (10888, 'GODOS', 1, '2018-02-16 00:00:00', '2018-02-23 00:00:00', 2, 51.87, 'C/ Romero-33', 'Sevilla', NULL, '41101', 'Spain');\nINSERT INTO `orders` VALUES (10889, 'RATTC', 9, '2018-02-16 00:00:00', '2018-02-23 00:00:00', 3, 280.61, '2817 Milton Dr.', 'Albuquerque', 'NM', '87110', 'USA');\nINSERT INTO `orders` VALUES (10890, 'DUMO', 7, '2018-02-16 00:00:00', '2018-02-18 00:00:00', 1, 32.76, '67-rue des Cinquante Otages', 'Nantes', NULL, '44000', 'France');\nINSERT INTO `orders` VALUES (10891, 'LEHMS', 7, '2018-02-17 00:00:00', '2018-02-19 00:00:00', 2, 20.37, 'Magazinweg 7', 'Frankfurt a.M.', NULL, '60528', 'Germany');\nINSERT INTO `orders` VALUES (10892, 'MAISD', 4, '2018-02-17 00:00:00', '2018-02-19 00:00:00', 2, 120.27, 'Rue Joseph-Bens 532', 'Bruxelles', NULL, 'B-1180', 'Belgium');\nINSERT INTO `orders` VALUES (10893, 'KOENE', 9, '2018-02-18 00:00:00', '2018-02-20 00:00:00', 2, 77.78, 'Maubelstr. 90', 'Brandenburg', NULL, '14776', 'Germany');\nINSERT INTO `orders` VALUES (10894, 'SAVEA', 1, '2018-02-18 00:00:00', '2018-02-20 00:00:00', 1, 116.13, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10895, 'ERNSH', 3, '2018-02-18 00:00:00', '2018-02-23 00:00:00', 1, 162.75, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10896, 'MAISD', 7, '2018-02-19 00:00:00', '2018-02-27 00:00:00', 3, 32.45, 'Rue Joseph-Bens 532', 'Bruxelles', NULL, 'B-1180', 'Belgium');\nINSERT INTO `orders` VALUES (10897, 'HUNGO', 3, '2018-02-19 00:00:00', '2018-02-25 00:00:00', 2, 603.54, '8 Johnstown Road', 'Cork', 'Co. Cork', NULL, 'Ireland');\nINSERT INTO `orders` VALUES (10898, 'OCEA', 4, '2018-02-20 00:00:00', '2018-03-06 00:00:00', 2, 1.27, 'Ing. Gustavo Moncada 8585 Piso 20-A', 'Buenos Aires', NULL, '1010', 'Argentina');\nINSERT INTO `orders` VALUES (10899, 'LILAS', 5, '2018-02-20 00:00:00', '2018-02-26 00:00:00', 3, 1.21, 'Carrera 52 con Ave. Bolívar #65-98 Llano Largo', 'Barquisimeto', 'Lara', '3508', 'Venezuela');\nINSERT INTO `orders` VALUES (10900, 'WELLI', 1, '2018-02-20 00:00:00', '2018-03-04 00:00:00', 2, 1.66, 'Rua do Mercado-12', 'Resende', 'SP', '08737-363', 'Brazil');\nINSERT INTO `orders` VALUES (10901, 'HILAA', 4, '2018-02-23 00:00:00', '2018-02-26 00:00:00', 1, 62.09, 'Carrera 22 con Ave. Carlos Soublette #8-35', 'San Cristóbal', 'Táchira', '5022', 'Venezuela');\nINSERT INTO `orders` VALUES (10902, 'FOLKO', 1, '2018-02-23 00:00:00', '2018-03-03 00:00:00', 1, 44.15, 'Åkergatan 24', 'Bräcke', NULL, 'S-844 67', 'Sweden');\nINSERT INTO `orders` VALUES (10903, 'HANAR', 3, '2018-02-24 00:00:00', '2018-03-04 00:00:00', 3, 36.71, 'Rua do Paço-67', 'Rio de Janeiro', 'RJ', '05454-876', 'Brazil');\nINSERT INTO `orders` VALUES (10904, 'WHITC', 3, '2018-02-24 00:00:00', '2018-02-27 00:00:00', 3, 162.95, '1029 - 12th Ave. S.', 'Seattle', 'WA', '98124', 'USA');\nINSERT INTO `orders` VALUES (10905, 'WELLI', 9, '2018-02-24 00:00:00', '2018-03-06 00:00:00', 2, 13.72, 'Rua do Mercado-12', 'Resende', 'SP', '08737-363', 'Brazil');\nINSERT INTO `orders` VALUES (10906, 'WOLZA', 4, '2018-02-25 00:00:00', '2018-03-03 00:00:00', 3, 26.29, 'ul. Filtrowa 68', 'Warszawa', NULL, '01-012', 'Poland');\nINSERT INTO `orders` VALUES (10907, 'SPECD', 6, '2018-02-25 00:00:00', '2018-02-27 00:00:00', 3, 9.19, '25-rue Lauristo', 'Paris', NULL, '75016', 'France');\nINSERT INTO `orders` VALUES (10908, 'REGGC', 4, '2018-02-26 00:00:00', '2018-03-06 00:00:00', 2, 32.96, 'Strada Provinciale 124', 'Reggio Emilia', NULL, '42100', 'Italy');\nINSERT INTO `orders` VALUES (10909, 'SANTG', 1, '2018-02-26 00:00:00', '2018-03-10 00:00:00', 2, 53.05, 'Erling Skakkes gate 78', 'Staver', NULL, '4110', 'Norway');\nINSERT INTO `orders` VALUES (10910, 'WILMK', 1, '2018-02-26 00:00:00', '2018-03-04 00:00:00', 3, 38.11, 'Keskuskatu 45', 'Helsinki', NULL, '21240', 'Finland');\nINSERT INTO `orders` VALUES (10911, 'GODOS', 3, '2018-02-26 00:00:00', '2018-03-05 00:00:00', 1, 38.19, 'C/ Romero-33', 'Sevilla', NULL, '41101', 'Spain');\nINSERT INTO `orders` VALUES (10912, 'HUNGO', 2, '2018-02-26 00:00:00', '2018-03-18 00:00:00', 2, 580.91, '8 Johnstown Road', 'Cork', 'Co. Cork', NULL, 'Ireland');\nINSERT INTO `orders` VALUES (10913, 'QUEE', 4, '2018-02-26 00:00:00', '2018-03-04 00:00:00', 1, 33.05, 'Alameda dos Canàrios-891', 'Sao Paulo', 'SP', '05487-020', 'Brazil');\nINSERT INTO `orders` VALUES (10914, 'QUEE', 6, '2018-02-27 00:00:00', '2018-03-02 00:00:00', 1, 21.19, 'Alameda dos Canàrios-891', 'Sao Paulo', 'SP', '05487-020', 'Brazil');\nINSERT INTO `orders` VALUES (10915, 'TORTU', 2, '2018-02-27 00:00:00', '2018-03-02 00:00:00', 2, 3.51, 'Avda. Azteca 123', 'México D.F.', NULL, '05033', 'Mexico');\nINSERT INTO `orders` VALUES (10916, 'RANCH', 1, '2018-02-27 00:00:00', '2018-03-09 00:00:00', 2, 63.77, 'Av. del Libertador 900', 'Buenos Aires', NULL, '1010', 'Argentina');\nINSERT INTO `orders` VALUES (10917, 'ROMEY', 4, '2018-03-02 00:00:00', '2018-03-11 00:00:00', 2, 8.29, 'Gran Vía-1', 'Madrid', NULL, '28001', 'Spain');\nINSERT INTO `orders` VALUES (10918, 'BOTTM', 3, '2018-03-02 00:00:00', '2018-03-11 00:00:00', 3, 48.83, '23 Tsawassen Blvd.', 'Tsawasse', 'BC', 'T2F 8M4', 'Canada');\nINSERT INTO `orders` VALUES (10919, 'LINOD', 2, '2018-03-02 00:00:00', '2018-03-04 00:00:00', 2, 19.80, 'Ave. 5 de Mayo Porlamar', 'I. de Margarita', 'Nueva Esparta', '4980', 'Venezuela');\nINSERT INTO `orders` VALUES (10920, 'AROUT', 4, '2018-03-03 00:00:00', '2018-03-09 00:00:00', 2, 29.61, 'Brook Farm Stratford St. Mary', 'Colchester', 'Essex', 'CO7 6JX', 'UK');\nINSERT INTO `orders` VALUES (10921, 'VAFFE', 1, '2018-03-03 00:00:00', '2018-03-09 00:00:00', 1, 176.48, 'Smagsloget 45', 'Århus', NULL, '8200', 'Denmark');\nINSERT INTO `orders` VALUES (10922, 'HANAR', 5, '2018-03-03 00:00:00', '2018-03-05 00:00:00', 3, 62.74, 'Rua do Paço-67', 'Rio de Janeiro', 'RJ', '05454-876', 'Brazil');\nINSERT INTO `orders` VALUES (10923, 'LAMAI', 7, '2018-03-03 00:00:00', '2018-03-13 00:00:00', 3, 68.26, '1 rue Alsace-Lorraine', 'Toulouse', NULL, '31000', 'France');\nINSERT INTO `orders` VALUES (10924, 'BERGS', 3, '2018-03-04 00:00:00', '2018-04-08 00:00:00', 2, 151.52, 'Berguvsvägen  8', 'Luleå', NULL, 'S-958 22', 'Sweden');\nINSERT INTO `orders` VALUES (10925, 'HANAR', 3, '2018-03-04 00:00:00', '2018-03-13 00:00:00', 1, 2.27, 'Rua do Paço-67', 'Rio de Janeiro', 'RJ', '05454-876', 'Brazil');\nINSERT INTO `orders` VALUES (10926, 'ANATR', 4, '2018-03-04 00:00:00', '2018-03-11 00:00:00', 3, 39.92, 'Avda. de la Constitución 2222', 'México D.F.', NULL, '05021', 'Mexico');\nINSERT INTO `orders` VALUES (10927, 'LACOR', 4, '2018-03-05 00:00:00', '2018-04-08 00:00:00', 1, 19.79, '67-avenue de l\\'\\'Europe', 'Versailles', NULL, '78000', 'France');\nINSERT INTO `orders` VALUES (10928, 'GALED', 1, '2018-03-05 00:00:00', '2018-03-18 00:00:00', 1, 1.36, 'Rambla de Cataluña-23', 'Barcelona', NULL, '8022', 'Spain');\nINSERT INTO `orders` VALUES (10929, 'FRANK', 6, '2018-03-05 00:00:00', '2018-03-12 00:00:00', 1, 33.93, 'Berliner Platz 43', 'Münche', NULL, '80805', 'Germany');\nINSERT INTO `orders` VALUES (10930, 'SUPRD', 4, '2018-03-06 00:00:00', '2018-03-18 00:00:00', 3, 15.55, 'Boulevard Tirou-255', 'Charleroi', NULL, 'B-6000', 'Belgium');\nINSERT INTO `orders` VALUES (10931, 'RICSU', 4, '2018-03-06 00:00:00', '2018-03-19 00:00:00', 2, 13.60, 'Starenweg 5', 'Genève', NULL, '1204', 'Switzerland');\nINSERT INTO `orders` VALUES (10932, 'BONAP', 8, '2018-03-06 00:00:00', '2018-03-24 00:00:00', 1, 134.64, '12-rue des Bouchers', 'Marseille', NULL, '13008', 'France');\nINSERT INTO `orders` VALUES (10933, 'ISLAT', 6, '2018-03-06 00:00:00', '2018-03-16 00:00:00', 3, 54.15, 'Garden House Crowther Way', 'Cowes', 'Isle of Wight', 'PO31 7PJ', 'UK');\nINSERT INTO `orders` VALUES (10934, 'LEHMS', 3, '2018-03-09 00:00:00', '2018-03-12 00:00:00', 3, 32.01, 'Magazinweg 7', 'Frankfurt a.M.', NULL, '60528', 'Germany');\nINSERT INTO `orders` VALUES (10935, 'WELLI', 4, '2018-03-09 00:00:00', '2018-03-18 00:00:00', 3, 47.59, 'Rua do Mercado-12', 'Resende', 'SP', '08737-363', 'Brazil');\nINSERT INTO `orders` VALUES (10936, 'GREAL', 3, '2018-03-09 00:00:00', '2018-03-18 00:00:00', 2, 33.68, '2732 Baker Blvd.', 'Eugene', 'OR', '97403', 'USA');\nINSERT INTO `orders` VALUES (10937, 'CACTU', 7, '2018-03-10 00:00:00', '2018-03-13 00:00:00', 3, 31.51, 'Cerrito 333', 'Buenos Aires', NULL, '1010', 'Argentina');\nINSERT INTO `orders` VALUES (10938, 'QUICK', 3, '2018-03-10 00:00:00', '2018-03-16 00:00:00', 2, 31.89, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10939, 'MAGAA', 2, '2018-03-10 00:00:00', '2018-03-13 00:00:00', 2, 76.33, 'Via Ludovico il Moro 22', 'Bergamo', NULL, '24100', 'Italy');\nINSERT INTO `orders` VALUES (10940, 'BONAP', 8, '2018-03-11 00:00:00', '2018-03-23 00:00:00', 3, 19.77, '12-rue des Bouchers', 'Marseille', NULL, '13008', 'France');\nINSERT INTO `orders` VALUES (10941, 'SAVEA', 7, '2018-03-11 00:00:00', '2018-03-20 00:00:00', 2, 400.81, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10942, 'REGGC', 9, '2018-03-11 00:00:00', '2018-03-18 00:00:00', 3, 17.95, 'Strada Provinciale 124', 'Reggio Emilia', NULL, '42100', 'Italy');\nINSERT INTO `orders` VALUES (10943, 'BSBEV', 4, '2018-03-11 00:00:00', '2018-03-19 00:00:00', 2, 2.17, 'Fauntleroy Circus', 'Londo', NULL, 'EC2 5NT', 'UK');\nINSERT INTO `orders` VALUES (10944, 'BOTTM', 6, '2018-03-12 00:00:00', '2018-03-13 00:00:00', 3, 52.92, '23 Tsawassen Blvd.', 'Tsawasse', 'BC', 'T2F 8M4', 'Canada');\nINSERT INTO `orders` VALUES (10945, 'MORGK', 4, '2018-03-12 00:00:00', '2018-03-18 00:00:00', 1, 10.22, 'Heerstr. 22', 'Leipzig', NULL, '04179', 'Germany');\nINSERT INTO `orders` VALUES (10946, 'VAFFE', 1, '2018-03-12 00:00:00', '2018-03-19 00:00:00', 2, 27.20, 'Smagsloget 45', 'Århus', NULL, '8200', 'Denmark');\nINSERT INTO `orders` VALUES (10947, 'BSBEV', 3, '2018-03-13 00:00:00', '2018-03-16 00:00:00', 2, 3.26, 'Fauntleroy Circus', 'Londo', NULL, 'EC2 5NT', 'UK');\nINSERT INTO `orders` VALUES (10948, 'GODOS', 3, '2018-03-13 00:00:00', '2018-03-19 00:00:00', 3, 23.39, 'C/ Romero-33', 'Sevilla', NULL, '41101', 'Spain');\nINSERT INTO `orders` VALUES (10949, 'BOTTM', 2, '2018-03-13 00:00:00', '2018-03-17 00:00:00', 3, 74.44, '23 Tsawassen Blvd.', 'Tsawasse', 'BC', 'T2F 8M4', 'Canada');\nINSERT INTO `orders` VALUES (10950, 'MAGAA', 1, '2018-03-16 00:00:00', '2018-03-23 00:00:00', 2, 2.50, 'Via Ludovico il Moro 22', 'Bergamo', NULL, '24100', 'Italy');\nINSERT INTO `orders` VALUES (10951, 'RICSU', 9, '2018-03-16 00:00:00', '2018-04-07 00:00:00', 2, 30.85, 'Starenweg 5', 'Genève', NULL, '1204', 'Switzerland');\nINSERT INTO `orders` VALUES (10952, 'ALFKI', 1, '2018-03-16 00:00:00', '2018-03-24 00:00:00', 1, 40.42, 'Obere Str. 57', 'Berli', NULL, '12209', 'Germany');\nINSERT INTO `orders` VALUES (10953, 'AROUT', 9, '2018-03-16 00:00:00', '2018-03-25 00:00:00', 2, 23.72, 'Brook Farm Stratford St. Mary', 'Colchester', 'Essex', 'CO7 6JX', 'UK');\nINSERT INTO `orders` VALUES (10954, 'LINOD', 5, '2018-03-17 00:00:00', '2018-03-20 00:00:00', 1, 27.91, 'Ave. 5 de Mayo Porlamar', 'I. de Margarita', 'Nueva Esparta', '4980', 'Venezuela');\nINSERT INTO `orders` VALUES (10955, 'FOLKO', 8, '2018-03-17 00:00:00', '2018-03-20 00:00:00', 2, 3.26, 'Åkergatan 24', 'Bräcke', NULL, 'S-844 67', 'Sweden');\nINSERT INTO `orders` VALUES (10956, 'BLAUS', 6, '2018-03-17 00:00:00', '2018-03-20 00:00:00', 2, 44.65, 'Forsterstr. 57', 'Mannheim', NULL, '68306', 'Germany');\nINSERT INTO `orders` VALUES (10957, 'HILAA', 8, '2018-03-18 00:00:00', '2018-03-27 00:00:00', 3, 105.36, 'Carrera 22 con Ave. Carlos Soublette #8-35', 'San Cristóbal', 'Táchira', '5022', 'Venezuela');\nINSERT INTO `orders` VALUES (10958, 'OCEA', 7, '2018-03-18 00:00:00', '2018-03-27 00:00:00', 2, 49.56, 'Ing. Gustavo Moncada 8585 Piso 20-A', 'Buenos Aires', NULL, '1010', 'Argentina');\nINSERT INTO `orders` VALUES (10959, 'GOURL', 6, '2018-03-18 00:00:00', '2018-03-23 00:00:00', 2, 4.98, 'Av. Brasil-442', 'Campinas', 'SP', '04876-786', 'Brazil');\nINSERT INTO `orders` VALUES (10960, 'HILAA', 3, '2018-03-19 00:00:00', '2018-04-08 00:00:00', 1, 2.08, 'Carrera 22 con Ave. Carlos Soublette #8-35', 'San Cristóbal', 'Táchira', '5022', 'Venezuela');\nINSERT INTO `orders` VALUES (10961, 'QUEE', 8, '2018-03-19 00:00:00', '2018-03-30 00:00:00', 1, 104.47, 'Alameda dos Canàrios-891', 'Sao Paulo', 'SP', '05487-020', 'Brazil');\nINSERT INTO `orders` VALUES (10962, 'QUICK', 8, '2018-03-19 00:00:00', '2018-03-23 00:00:00', 2, 275.79, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10963, 'FURIB', 9, '2018-03-19 00:00:00', '2018-03-26 00:00:00', 3, 2.70, 'Jardim das rosas n. 32', 'Lisboa', NULL, '1675', 'Portugal');\nINSERT INTO `orders` VALUES (10964, 'SPECD', 3, '2018-03-20 00:00:00', '2018-03-24 00:00:00', 2, 87.38, '25-rue Lauristo', 'Paris', NULL, '75016', 'France');\nINSERT INTO `orders` VALUES (10965, 'OLDWO', 6, '2018-03-20 00:00:00', '2018-03-30 00:00:00', 3, 144.38, '2743 Bering St.', 'Anchorage', 'AK', '99508', 'USA');\nINSERT INTO `orders` VALUES (10966, 'CHOPS', 4, '2018-03-20 00:00:00', '2018-04-08 00:00:00', 1, 27.19, 'Hauptstr. 31', 'Ber', NULL, '3012', 'Switzerland');\nINSERT INTO `orders` VALUES (10967, 'TOMSP', 2, '2018-03-23 00:00:00', '2018-04-02 00:00:00', 2, 62.22, 'Luisenstr. 48', 'Münster', NULL, '44087', 'Germany');\nINSERT INTO `orders` VALUES (10968, 'ERNSH', 1, '2018-03-23 00:00:00', '2018-04-01 00:00:00', 3, 74.60, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10969, 'COMMI', 1, '2018-03-23 00:00:00', '2018-03-30 00:00:00', 2, 0.21, 'Av. dos Lusíadas-23', 'Sao Paulo', 'SP', '05432-043', 'Brazil');\nINSERT INTO `orders` VALUES (10970, 'BOLID', 9, '2018-03-24 00:00:00', '2018-04-24 00:00:00', 1, 16.16, 'C/ Araquil-67', 'Madrid', NULL, '28023', 'Spain');\nINSERT INTO `orders` VALUES (10971, 'FRANR', 2, '2018-03-24 00:00:00', '2018-04-02 00:00:00', 2, 121.82, '54-rue Royale', 'Nantes', NULL, '44000', 'France');\nINSERT INTO `orders` VALUES (10972, 'LACOR', 4, '2018-03-24 00:00:00', '2018-03-26 00:00:00', 2, 0.02, '67-avenue de l\\'\\'Europe', 'Versailles', NULL, '78000', 'France');\nINSERT INTO `orders` VALUES (10973, 'LACOR', 6, '2018-03-24 00:00:00', '2018-03-27 00:00:00', 2, 15.17, '67-avenue de l\\'\\'Europe', 'Versailles', NULL, '78000', 'France');\nINSERT INTO `orders` VALUES (10974, 'SPLIR', 3, '2018-03-25 00:00:00', '2018-04-03 00:00:00', 3, 12.96, 'P.O. Box 555', 'Lander', 'WY', '82520', 'USA');\nINSERT INTO `orders` VALUES (10975, 'BOTTM', 1, '2018-03-25 00:00:00', '2018-03-27 00:00:00', 3, 32.27, '23 Tsawassen Blvd.', 'Tsawasse', 'BC', 'T2F 8M4', 'Canada');\nINSERT INTO `orders` VALUES (10976, 'HILAA', 1, '2018-03-25 00:00:00', '2018-04-03 00:00:00', 1, 37.97, 'Carrera 22 con Ave. Carlos Soublette #8-35', 'San Cristóbal', 'Táchira', '5022', 'Venezuela');\nINSERT INTO `orders` VALUES (10977, 'FOLKO', 8, '2018-03-26 00:00:00', '2018-04-10 00:00:00', 3, 208.50, 'Åkergatan 24', 'Bräcke', NULL, 'S-844 67', 'Sweden');\nINSERT INTO `orders` VALUES (10978, 'MAISD', 9, '2018-03-26 00:00:00', '2018-04-23 00:00:00', 2, 32.82, 'Rue Joseph-Bens 532', 'Bruxelles', NULL, 'B-1180', 'Belgium');\nINSERT INTO `orders` VALUES (10979, 'ERNSH', 8, '2018-03-26 00:00:00', '2018-03-31 00:00:00', 2, 353.07, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10980, 'FOLKO', 4, '2018-03-27 00:00:00', '2018-04-17 00:00:00', 1, 1.26, 'Åkergatan 24', 'Bräcke', NULL, 'S-844 67', 'Sweden');\nINSERT INTO `orders` VALUES (10981, 'HANAR', 1, '2018-03-27 00:00:00', '2018-04-02 00:00:00', 2, 193.37, 'Rua do Paço-67', 'Rio de Janeiro', 'RJ', '05454-876', 'Brazil');\nINSERT INTO `orders` VALUES (10982, 'BOTTM', 2, '2018-03-27 00:00:00', '2018-04-08 00:00:00', 1, 14.01, '23 Tsawassen Blvd.', 'Tsawasse', 'BC', 'T2F 8M4', 'Canada');\nINSERT INTO `orders` VALUES (10983, 'SAVEA', 2, '2018-03-27 00:00:00', '2018-04-06 00:00:00', 2, 657.54, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10984, 'SAVEA', 1, '2018-03-30 00:00:00', '2018-04-03 00:00:00', 3, 211.22, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (10985, 'HUNGO', 2, '2018-03-30 00:00:00', '2018-04-02 00:00:00', 1, 91.51, '8 Johnstown Road', 'Cork', 'Co. Cork', NULL, 'Ireland');\nINSERT INTO `orders` VALUES (10986, 'OCEA', 8, '2018-03-30 00:00:00', '2018-04-21 00:00:00', 2, 217.86, 'Ing. Gustavo Moncada 8585 Piso 20-A', 'Buenos Aires', NULL, '1010', 'Argentina');\nINSERT INTO `orders` VALUES (10987, 'EASTC', 8, '2018-03-31 00:00:00', '2018-04-06 00:00:00', 1, 185.48, '35 King George', 'Londo', NULL, 'WX3 6FW', 'UK');\nINSERT INTO `orders` VALUES (10988, 'RATTC', 3, '2018-03-31 00:00:00', '2018-04-10 00:00:00', 2, 61.14, '2817 Milton Dr.', 'Albuquerque', 'NM', '87110', 'USA');\nINSERT INTO `orders` VALUES (10989, 'QUEDE', 2, '2018-03-31 00:00:00', '2018-04-02 00:00:00', 1, 34.76, 'Rua da Panificadora-12', 'Rio de Janeiro', 'RJ', '02389-673', 'Brazil');\nINSERT INTO `orders` VALUES (10990, 'ERNSH', 2, '2018-04-01 00:00:00', '2018-04-07 00:00:00', 3, 117.61, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (10991, 'QUICK', 1, '2018-04-01 00:00:00', '2018-04-07 00:00:00', 1, 38.51, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10992, 'THEBI', 1, '2018-04-01 00:00:00', '2018-04-03 00:00:00', 3, 4.27, '89 Jefferson Way Suite 2', 'Portland', 'OR', '97201', 'USA');\nINSERT INTO `orders` VALUES (10993, 'FOLKO', 7, '2018-04-01 00:00:00', '2018-04-10 00:00:00', 3, 8.81, 'Åkergatan 24', 'Bräcke', NULL, 'S-844 67', 'Sweden');\nINSERT INTO `orders` VALUES (10994, 'VAFFE', 2, '2018-04-02 00:00:00', '2018-04-09 00:00:00', 3, 65.53, 'Smagsloget 45', 'Århus', NULL, '8200', 'Denmark');\nINSERT INTO `orders` VALUES (10995, 'PERIC', 1, '2018-04-02 00:00:00', '2018-04-06 00:00:00', 3, 46.00, 'Calle Dr. Jorge Cash 321', 'México D.F.', NULL, '05033', 'Mexico');\nINSERT INTO `orders` VALUES (10996, 'QUICK', 4, '2018-04-02 00:00:00', '2018-04-10 00:00:00', 2, 1.12, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (10997, 'LILAS', 8, '2018-04-03 00:00:00', '2018-04-13 00:00:00', 2, 73.91, 'Carrera 52 con Ave. Bolívar #65-98 Llano Largo', 'Barquisimeto', 'Lara', '3508', 'Venezuela');\nINSERT INTO `orders` VALUES (10998, 'WOLZA', 8, '2018-04-03 00:00:00', '2018-04-17 00:00:00', 2, 20.31, 'ul. Filtrowa 68', 'Warszawa', NULL, '01-012', 'Poland');\nINSERT INTO `orders` VALUES (10999, 'OTTIK', 6, '2018-04-03 00:00:00', '2018-04-10 00:00:00', 2, 96.35, 'Mehrheimerstr. 369', 'Köl', NULL, '50739', 'Germany');\nINSERT INTO `orders` VALUES (11000, 'RATTC', 2, '2018-04-06 00:00:00', '2018-04-14 00:00:00', 3, 55.12, '2817 Milton Dr.', 'Albuquerque', 'NM', '87110', 'USA');\nINSERT INTO `orders` VALUES (11001, 'FOLKO', 2, '2018-04-06 00:00:00', '2018-04-14 00:00:00', 2, 197.30, 'Åkergatan 24', 'Bräcke', NULL, 'S-844 67', 'Sweden');\nINSERT INTO `orders` VALUES (11002, 'SAVEA', 4, '2018-04-06 00:00:00', '2018-04-16 00:00:00', 1, 141.16, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (11003, 'THECR', 3, '2018-04-06 00:00:00', '2018-04-08 00:00:00', 3, 14.91, '55 Grizzly Peak Rd.', 'Butte', 'MT', '59801', 'USA');\nINSERT INTO `orders` VALUES (11004, 'MAISD', 3, '2018-04-07 00:00:00', '2018-04-20 00:00:00', 1, 44.84, 'Rue Joseph-Bens 532', 'Bruxelles', NULL, 'B-1180', 'Belgium');\nINSERT INTO `orders` VALUES (11005, 'WILMK', 2, '2018-04-07 00:00:00', '2018-04-10 00:00:00', 1, 0.75, 'Keskuskatu 45', 'Helsinki', NULL, '21240', 'Finland');\nINSERT INTO `orders` VALUES (11006, 'GREAL', 3, '2018-04-07 00:00:00', '2018-04-15 00:00:00', 2, 25.19, '2732 Baker Blvd.', 'Eugene', 'OR', '97403', 'USA');\nINSERT INTO `orders` VALUES (11007, 'PRINI', 8, '2018-04-08 00:00:00', '2018-04-13 00:00:00', 2, 202.24, 'Estrada da saúde n. 58', 'Lisboa', NULL, '1756', 'Portugal');\nINSERT INTO `orders` VALUES (11008, 'ERNSH', 7, '2018-04-08 00:00:00', NULL, 3, 79.46, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (11009, 'GODOS', 2, '2018-04-08 00:00:00', '2018-04-10 00:00:00', 1, 59.11, 'C/ Romero-33', 'Sevilla', NULL, '41101', 'Spain');\nINSERT INTO `orders` VALUES (11010, 'REGGC', 2, '2018-04-09 00:00:00', '2018-04-21 00:00:00', 2, 28.71, 'Strada Provinciale 124', 'Reggio Emilia', NULL, '42100', 'Italy');\nINSERT INTO `orders` VALUES (11011, 'ALFKI', 3, '2018-04-09 00:00:00', '2018-04-13 00:00:00', 1, 1.21, 'Obere Str. 57', 'Berli', NULL, '12209', 'Germany');\nINSERT INTO `orders` VALUES (11012, 'FRANK', 1, '2018-04-09 00:00:00', '2018-04-17 00:00:00', 3, 242.95, 'Berliner Platz 43', 'Münche', NULL, '80805', 'Germany');\nINSERT INTO `orders` VALUES (11013, 'ROMEY', 2, '2018-04-09 00:00:00', '2018-04-10 00:00:00', 1, 32.99, 'Gran Vía-1', 'Madrid', NULL, '28001', 'Spain');\nINSERT INTO `orders` VALUES (11014, 'LINOD', 2, '2018-04-10 00:00:00', '2018-04-15 00:00:00', 3, 23.60, 'Ave. 5 de Mayo Porlamar', 'I. de Margarita', 'Nueva Esparta', '4980', 'Venezuela');\nINSERT INTO `orders` VALUES (11015, 'SANTG', 2, '2018-04-10 00:00:00', '2018-04-20 00:00:00', 2, 4.62, 'Erling Skakkes gate 78', 'Staver', NULL, '4110', 'Norway');\nINSERT INTO `orders` VALUES (11016, 'AROUT', 9, '2018-04-10 00:00:00', '2018-04-13 00:00:00', 2, 33.80, 'Brook Farm Stratford St. Mary', 'Colchester', 'Essex', 'CO7 6JX', 'UK');\nINSERT INTO `orders` VALUES (11017, 'ERNSH', 9, '2018-04-13 00:00:00', '2018-04-20 00:00:00', 2, 754.26, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (11018, 'LONEP', 4, '2018-04-13 00:00:00', '2018-04-16 00:00:00', 2, 11.65, '89 Chiaroscuro Rd.', 'Portland', 'OR', '97219', 'USA');\nINSERT INTO `orders` VALUES (11019, 'RANCH', 6, '2018-04-13 00:00:00', NULL, 3, 3.17, 'Av. del Libertador 900', 'Buenos Aires', NULL, '1010', 'Argentina');\nINSERT INTO `orders` VALUES (11020, 'OTTIK', 2, '2018-04-14 00:00:00', '2018-04-16 00:00:00', 2, 43.30, 'Mehrheimerstr. 369', 'Köl', NULL, '50739', 'Germany');\nINSERT INTO `orders` VALUES (11021, 'QUICK', 3, '2018-04-14 00:00:00', '2018-04-21 00:00:00', 1, 297.18, 'Taucherstraße 10', 'Cunewalde', NULL, '01307', 'Germany');\nINSERT INTO `orders` VALUES (11022, 'HANAR', 9, '2018-04-14 00:00:00', '2018-05-04 00:00:00', 2, 6.27, 'Rua do Paço-67', 'Rio de Janeiro', 'RJ', '05454-876', 'Brazil');\nINSERT INTO `orders` VALUES (11023, 'BSBEV', 1, '2018-04-14 00:00:00', '2018-04-24 00:00:00', 2, 123.83, 'Fauntleroy Circus', 'Londo', NULL, 'EC2 5NT', 'UK');\nINSERT INTO `orders` VALUES (11024, 'EASTC', 4, '2018-04-15 00:00:00', '2018-04-20 00:00:00', 1, 74.36, '35 King George', 'Londo', NULL, 'WX3 6FW', 'UK');\nINSERT INTO `orders` VALUES (11025, 'WARTH', 6, '2018-04-15 00:00:00', '2018-04-24 00:00:00', 3, 29.17, 'Torikatu 38', 'Oulu', NULL, '90110', 'Finland');\nINSERT INTO `orders` VALUES (11026, 'FRANS', 4, '2018-04-15 00:00:00', '2018-04-28 00:00:00', 1, 47.09, 'Via Monte Bianco 34', 'Torino', NULL, '10100', 'Italy');\nINSERT INTO `orders` VALUES (11027, 'BOTTM', 1, '2018-04-16 00:00:00', '2018-04-20 00:00:00', 1, 52.52, '23 Tsawassen Blvd.', 'Tsawasse', 'BC', 'T2F 8M4', 'Canada');\nINSERT INTO `orders` VALUES (11028, 'KOENE', 2, '2018-04-16 00:00:00', '2018-04-22 00:00:00', 1, 29.59, 'Maubelstr. 90', 'Brandenburg', NULL, '14776', 'Germany');\nINSERT INTO `orders` VALUES (11029, 'CHOPS', 4, '2018-04-16 00:00:00', '2018-04-27 00:00:00', 1, 47.84, 'Hauptstr. 31', 'Ber', NULL, '3012', 'Switzerland');\nINSERT INTO `orders` VALUES (11030, 'SAVEA', 7, '2018-04-17 00:00:00', '2018-04-27 00:00:00', 2, 830.75, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (11031, 'SAVEA', 6, '2018-04-17 00:00:00', '2018-04-24 00:00:00', 2, 227.22, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (11032, 'WHITC', 2, '2018-04-17 00:00:00', '2018-04-23 00:00:00', 3, 606.19, '1029 - 12th Ave. S.', 'Seattle', 'WA', '98124', 'USA');\nINSERT INTO `orders` VALUES (11033, 'RICSU', 7, '2018-04-17 00:00:00', '2018-04-23 00:00:00', 3, 84.74, 'Starenweg 5', 'Genève', NULL, '1204', 'Switzerland');\nINSERT INTO `orders` VALUES (11034, 'OLDWO', 8, '2018-04-20 00:00:00', '2018-04-27 00:00:00', 1, 40.32, '2743 Bering St.', 'Anchorage', 'AK', '99508', 'USA');\nINSERT INTO `orders` VALUES (11035, 'SUPRD', 2, '2018-04-20 00:00:00', '2018-04-24 00:00:00', 2, 0.17, 'Boulevard Tirou-255', 'Charleroi', NULL, 'B-6000', 'Belgium');\nINSERT INTO `orders` VALUES (11036, 'DRACD', 8, '2018-04-20 00:00:00', '2018-04-22 00:00:00', 3, 149.47, 'Walserweg 21', 'Aache', NULL, '52066', 'Germany');\nINSERT INTO `orders` VALUES (11037, 'GODOS', 7, '2018-04-21 00:00:00', '2018-04-27 00:00:00', 1, 3.20, 'C/ Romero-33', 'Sevilla', NULL, '41101', 'Spain');\nINSERT INTO `orders` VALUES (11038, 'SUPRD', 1, '2018-04-21 00:00:00', '2018-04-30 00:00:00', 2, 29.59, 'Boulevard Tirou-255', 'Charleroi', NULL, 'B-6000', 'Belgium');\nINSERT INTO `orders` VALUES (11039, 'LINOD', 1, '2018-04-21 00:00:00', NULL, 2, 65.00, 'Ave. 5 de Mayo Porlamar', 'I. de Margarita', 'Nueva Esparta', '4980', 'Venezuela');\nINSERT INTO `orders` VALUES (11040, 'GREAL', 4, '2018-04-22 00:00:00', NULL, 3, 18.84, '2732 Baker Blvd.', 'Eugene', 'OR', '97403', 'USA');\nINSERT INTO `orders` VALUES (11041, 'CHOPS', 3, '2018-04-22 00:00:00', '2018-04-28 00:00:00', 2, 48.22, 'Hauptstr. 31', 'Ber', NULL, '3012', 'Switzerland');\nINSERT INTO `orders` VALUES (11042, 'COMMI', 2, '2018-04-22 00:00:00', '2018-05-01 00:00:00', 1, 29.99, 'Av. dos Lusíadas-23', 'Sao Paulo', 'SP', '05432-043', 'Brazil');\nINSERT INTO `orders` VALUES (11043, 'SPECD', 5, '2018-04-22 00:00:00', '2018-04-29 00:00:00', 2, 8.80, '25-rue Lauristo', 'Paris', NULL, '75016', 'France');\nINSERT INTO `orders` VALUES (11044, 'WOLZA', 4, '2018-04-23 00:00:00', '2018-05-01 00:00:00', 1, 8.72, 'ul. Filtrowa 68', 'Warszawa', NULL, '01-012', 'Poland');\nINSERT INTO `orders` VALUES (11045, 'BOTTM', 6, '2018-04-23 00:00:00', NULL, 2, 70.58, '23 Tsawassen Blvd.', 'Tsawasse', 'BC', 'T2F 8M4', 'Canada');\nINSERT INTO `orders` VALUES (11046, 'WANDK', 8, '2018-04-23 00:00:00', '2018-04-24 00:00:00', 2, 71.64, 'Adenauerallee 900', 'Stuttgart', NULL, '70563', 'Germany');\nINSERT INTO `orders` VALUES (11047, 'EASTC', 7, '2018-04-24 00:00:00', '2018-05-01 00:00:00', 3, 46.62, '35 King George', 'Londo', NULL, 'WX3 6FW', 'UK');\nINSERT INTO `orders` VALUES (11048, 'BOTTM', 7, '2018-04-24 00:00:00', '2018-04-30 00:00:00', 3, 24.12, '23 Tsawassen Blvd.', 'Tsawasse', 'BC', 'T2F 8M4', 'Canada');\nINSERT INTO `orders` VALUES (11049, 'GOURL', 3, '2018-04-24 00:00:00', '2018-05-04 00:00:00', 1, 8.34, 'Av. Brasil-442', 'Campinas', 'SP', '04876-786', 'Brazil');\nINSERT INTO `orders` VALUES (11050, 'FOLKO', 8, '2018-04-27 00:00:00', '2018-05-05 00:00:00', 2, 59.41, 'Åkergatan 24', 'Bräcke', NULL, 'S-844 67', 'Sweden');\nINSERT INTO `orders` VALUES (11051, 'LAMAI', 7, '2018-04-27 00:00:00', NULL, 3, 2.79, '1 rue Alsace-Lorraine', 'Toulouse', NULL, '31000', 'France');\nINSERT INTO `orders` VALUES (11052, 'HANAR', 3, '2018-04-27 00:00:00', '2018-05-01 00:00:00', 1, 67.26, 'Rua do Paço-67', 'Rio de Janeiro', 'RJ', '05454-876', 'Brazil');\nINSERT INTO `orders` VALUES (11053, 'PICCO', 2, '2018-04-27 00:00:00', '2018-04-29 00:00:00', 2, 53.05, 'Geislweg 14', 'Salzburg', NULL, '5020', 'Austria');\nINSERT INTO `orders` VALUES (11054, 'CACTU', 8, '2018-04-28 00:00:00', NULL, 1, 0.33, 'Cerrito 333', 'Buenos Aires', NULL, '1010', 'Argentina');\nINSERT INTO `orders` VALUES (11055, 'HILAA', 7, '2018-04-28 00:00:00', '2018-05-05 00:00:00', 2, 120.92, 'Carrera 22 con Ave. Carlos Soublette #8-35', 'San Cristóbal', 'Táchira', '5022', 'Venezuela');\nINSERT INTO `orders` VALUES (11056, 'EASTC', 8, '2018-04-28 00:00:00', '2018-05-01 00:00:00', 2, 278.96, '35 King George', 'Londo', NULL, 'WX3 6FW', 'UK');\nINSERT INTO `orders` VALUES (11057, 'NORTS', 3, '2018-04-29 00:00:00', '2018-05-01 00:00:00', 3, 4.13, 'South House 300 Queensbridge', 'Londo', NULL, 'SW7 1RZ', 'UK');\nINSERT INTO `orders` VALUES (11058, 'BLAUS', 9, '2018-04-29 00:00:00', NULL, 3, 31.14, 'Forsterstr. 57', 'Mannheim', NULL, '68306', 'Germany');\nINSERT INTO `orders` VALUES (11059, 'RICAR', 2, '2018-04-29 00:00:00', NULL, 2, 85.80, 'Av. Copacabana-267', 'Rio de Janeiro', 'RJ', '02389-890', 'Brazil');\nINSERT INTO `orders` VALUES (11060, 'FRANS', 2, '2018-04-30 00:00:00', '2018-05-04 00:00:00', 2, 10.98, 'Via Monte Bianco 34', 'Torino', NULL, '10100', 'Italy');\nINSERT INTO `orders` VALUES (11061, 'GREAL', 4, '2018-04-30 00:00:00', NULL, 3, 14.01, '2732 Baker Blvd.', 'Eugene', 'OR', '97403', 'USA');\nINSERT INTO `orders` VALUES (11062, 'REGGC', 4, '2018-04-30 00:00:00', NULL, 2, 29.93, 'Strada Provinciale 124', 'Reggio Emilia', NULL, '42100', 'Italy');\nINSERT INTO `orders` VALUES (11063, 'HUNGO', 3, '2018-04-30 00:00:00', '2018-05-06 00:00:00', 2, 81.73, '8 Johnstown Road', 'Cork', 'Co. Cork', NULL, 'Ireland');\nINSERT INTO `orders` VALUES (11064, 'SAVEA', 1, '2018-05-01 00:00:00', '2018-05-04 00:00:00', 1, 30.09, '187 Suffolk Ln.', 'Boise', 'ID', '83720', 'USA');\nINSERT INTO `orders` VALUES (11065, 'LILAS', 8, '2018-05-01 00:00:00', NULL, 1, 12.91, 'Carrera 52 con Ave. Bolívar #65-98 Llano Largo', 'Barquisimeto', 'Lara', '3508', 'Venezuela');\nINSERT INTO `orders` VALUES (11066, 'WHITC', 7, '2018-05-01 00:00:00', '2018-05-04 00:00:00', 2, 44.72, '1029 - 12th Ave. S.', 'Seattle', 'WA', '98124', 'USA');\nINSERT INTO `orders` VALUES (11067, 'DRACD', 1, '2018-05-04 00:00:00', '2018-05-06 00:00:00', 2, 7.98, 'Walserweg 21', 'Aache', NULL, '52066', 'Germany');\nINSERT INTO `orders` VALUES (11068, 'QUEE', 8, '2018-05-04 00:00:00', NULL, 2, 81.75, 'Alameda dos Canàrios-891', 'Sao Paulo', 'SP', '05487-020', 'Brazil');\nINSERT INTO `orders` VALUES (11069, 'TORTU', 1, '2018-05-04 00:00:00', '2018-05-06 00:00:00', 2, 15.67, 'Avda. Azteca 123', 'México D.F.', NULL, '05033', 'Mexico');\nINSERT INTO `orders` VALUES (11070, 'LEHMS', 2, '2018-05-05 00:00:00', NULL, 1, 136.00, 'Magazinweg 7', 'Frankfurt a.M.', NULL, '60528', 'Germany');\nINSERT INTO `orders` VALUES (11071, 'LILAS', 1, '2018-05-05 00:00:00', NULL, 1, 0.93, 'Carrera 52 con Ave. Bolívar #65-98 Llano Largo', 'Barquisimeto', 'Lara', '3508', 'Venezuela');\nINSERT INTO `orders` VALUES (11072, 'ERNSH', 4, '2018-05-05 00:00:00', NULL, 2, 258.64, 'Kirchgasse 6', 'Graz', NULL, '8010', 'Austria');\nINSERT INTO `orders` VALUES (11073, 'PERIC', 2, '2018-05-05 00:00:00', NULL, 2, 24.95, 'Calle Dr. Jorge Cash 321', 'México D.F.', NULL, '05033', 'Mexico');\nINSERT INTO `orders` VALUES (11074, 'SIMOB', 7, '2018-05-06 00:00:00', NULL, 2, 18.44, 'Vinbæltet 34', 'Kobenhav', NULL, '1734', 'Denmark');\nINSERT INTO `orders` VALUES (11075, 'RICSU', 8, '2018-05-06 00:00:00', NULL, 2, 6.19, 'Starenweg 5', 'Genève', NULL, '1204', 'Switzerland');\nINSERT INTO `orders` VALUES (11076, 'BONAP', 4, '2018-05-06 00:00:00', NULL, 2, 38.28, '12-rue des Bouchers', 'Marseille', NULL, '13008', 'France');\nINSERT INTO `orders` VALUES (11077, 'RATTC', 1, '2018-05-06 00:00:00', NULL, 2, 8.53, '2817 Milton Dr.', 'Albuquerque', 'NM', '87110', 'USA');\nCOMMIT;\n\n-- ----------------------------\n-- Table structure for products\n-- ----------------------------\nDROP TABLE IF EXISTS `products`;\nCREATE TABLE `products` (\n  `product_id` int NOT NULL,\n  `product_name` varchar(40) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `supplier_id` int DEFAULT NULL,\n  `category_id` int DEFAULT NULL,\n  `quantity_per_unit` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `unit_price` decimal(10,2) DEFAULT NULL,\n  `units_in_stock` smallint DEFAULT NULL,\n  `units_on_order` smallint DEFAULT NULL,\n  `discontinued` bit(1) DEFAULT NULL,\n  PRIMARY KEY (`product_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n\n-- ----------------------------\n-- Records of products\n-- ----------------------------\nBEGIN;\nINSERT INTO `products` VALUES (1, 'Chai', 1, 1, '10 boxes x 20 bags', 18.00, 39, 0, b'0');\nINSERT INTO `products` VALUES (2, 'Chang', 1, 1, '24 - 12 oz bottles', 19.00, 17, 40, b'0');\nINSERT INTO `products` VALUES (3, 'Aniseed Syrup', 1, 2, '12 - 550 ml bottles', 10.00, 13, 70, b'0');\nINSERT INTO `products` VALUES (4, 'Chef Anton\\'s Cajun Seasoning', 2, 2, '48 - 6 oz jars', 22.00, 53, 0, b'0');\nINSERT INTO `products` VALUES (5, 'Chef Anton\\'s Gumbo Mix', 2, 2, '36 boxes', 21.35, 0, 0, b'1');\nINSERT INTO `products` VALUES (6, 'Grandma\\'s Boysenberry Spread', 3, 2, '12 - 8 oz jars', 25.00, 120, 0, b'0');\nINSERT INTO `products` VALUES (7, 'Uncle Bob\\'s Organic Dried Pears', 3, 7, '12 - 1 lb pkgs.', 30.00, 15, 0, b'0');\nINSERT INTO `products` VALUES (8, 'Northwoods Cranberry Sauce', 3, 2, '12 - 12 oz jars', 40.00, 6, 0, b'0');\nINSERT INTO `products` VALUES (9, 'Mishi Kobe Niku', 4, 6, '18 - 500 g pkgs.', 97.00, 29, 0, b'1');\nINSERT INTO `products` VALUES (10, 'Ikura', 4, 8, '12 - 200 ml jars', 31.00, 31, 0, b'0');\nINSERT INTO `products` VALUES (11, 'Queso Cabrales', 5, 4, '1 kg pkg.', 21.00, 22, 30, b'0');\nINSERT INTO `products` VALUES (12, 'Queso Manchego La Pastora', 5, 4, '10 - 500 g pkgs.', 38.00, 86, 0, b'0');\nINSERT INTO `products` VALUES (13, 'Konbu', 6, 8, '2 kg box', 6.00, 24, 0, b'0');\nINSERT INTO `products` VALUES (14, 'Tofu', 6, 7, '40 - 100 g pkgs.', 23.25, 35, 0, b'0');\nINSERT INTO `products` VALUES (15, 'Genen Shouyu', 6, 2, '24 - 250 ml bottles', 15.50, 39, 0, b'0');\nINSERT INTO `products` VALUES (16, 'Pavlova', 7, 3, '32 - 500 g boxes', 17.45, 29, 0, b'0');\nINSERT INTO `products` VALUES (17, 'Alice Mutton', 7, 6, '20 - 1 kg tins', 39.00, 0, 0, b'1');\nINSERT INTO `products` VALUES (18, 'Carnarvon Tigers', 7, 8, '16 kg pkg.', 62.50, 42, 0, b'0');\nINSERT INTO `products` VALUES (19, 'Teatime Chocolate Biscuits', 8, 3, '10 boxes x 12 pieces', 9.20, 25, 0, b'0');\nINSERT INTO `products` VALUES (20, 'Sir Rodney\\'s Marmalade', 8, 3, '30 gift boxes', 81.00, 40, 0, b'0');\nINSERT INTO `products` VALUES (21, 'Sir Rodney\\'s Scones', 8, 3, '24 pkgs. x 4 pieces', 10.00, 3, 40, b'0');\nINSERT INTO `products` VALUES (22, 'Gustaf\\'s Knäckebröd', 9, 5, '24 - 500 g pkgs.', 21.00, 104, 0, b'0');\nINSERT INTO `products` VALUES (23, 'Tunnbröd', 9, 5, '12 - 250 g pkgs.', 9.00, 61, 0, b'0');\nINSERT INTO `products` VALUES (24, 'Guaraná Fantástica', 10, 1, '12 - 355 ml cans', 4.50, 20, 0, b'1');\nINSERT INTO `products` VALUES (25, 'NuNuCa Nuß-Nougat-Creme', 11, 3, '20 - 450 g glasses', 14.00, 76, 0, b'0');\nINSERT INTO `products` VALUES (26, 'Gumbär Gummibärchen', 11, 3, '100 - 250 g bags', 31.23, 15, 0, b'0');\nINSERT INTO `products` VALUES (27, 'Schoggi Schokolade', 11, 3, '100 - 100 g pieces', 43.90, 49, 0, b'0');\nINSERT INTO `products` VALUES (28, 'Rössle Sauerkraut', 12, 7, '25 - 825 g cans', 45.60, 26, 0, b'1');\nINSERT INTO `products` VALUES (29, 'Thüringer Rostbratwurst', 12, 6, '50 bags x 30 sausgs.', 123.79, 0, 0, b'1');\nINSERT INTO `products` VALUES (30, 'Nord-Ost Matjeshering', 13, 8, '10 - 200 g glasses', 25.89, 10, 0, b'0');\nINSERT INTO `products` VALUES (31, 'Gorgonzola Telino', 14, 4, '12 - 100 g pkgs', 12.50, 0, 70, b'0');\nINSERT INTO `products` VALUES (32, 'Mascarpone Fabioli', 14, 4, '24 - 200 g pkgs.', 32.00, 9, 40, b'0');\nINSERT INTO `products` VALUES (33, 'Geitost', 16, 4, '500 g', 2.50, 112, 0, b'0');\nINSERT INTO `products` VALUES (34, 'Sasquatch Ale', 16, 1, '24 - 12 oz bottles', 14.00, 111, 0, b'0');\nINSERT INTO `products` VALUES (35, 'Steeleye Stout', 16, 1, '24 - 12 oz bottles', 18.00, 20, 0, b'0');\nINSERT INTO `products` VALUES (36, 'Inlagd Sill', 17, 8, '24 - 250 g jars', 19.00, 112, 0, b'0');\nINSERT INTO `products` VALUES (37, 'Gravad lax', 17, 8, '12 - 500 g pkgs.', 26.00, 11, 50, b'0');\nINSERT INTO `products` VALUES (38, 'Côte de Blaye', 18, 1, '12 - 75 cl bottles', 263.50, 17, 0, b'0');\nINSERT INTO `products` VALUES (39, 'Chartreuse verte', 18, 1, '750 cc per bottle', 18.00, 69, 0, b'0');\nINSERT INTO `products` VALUES (40, 'Boston Crab Meat', 19, 8, '24 - 4 oz tins', 18.40, 123, 0, b'0');\nINSERT INTO `products` VALUES (41, 'Jack\\'s New England Clam Chowder', 19, 8, '12 - 12 oz cans', 9.65, 85, 0, b'0');\nINSERT INTO `products` VALUES (42, 'Singaporean Hokkien Fried Mee', 20, 5, '32 - 1 kg pkgs.', 14.00, 26, 0, b'1');\nINSERT INTO `products` VALUES (43, 'Ipoh Coffee', 20, 1, '16 - 500 g tins', 46.00, 17, 10, b'0');\nINSERT INTO `products` VALUES (44, 'Gula Malacca', 20, 2, '20 - 2 kg bags', 19.45, 27, 0, b'0');\nINSERT INTO `products` VALUES (45, 'Rogede sild', 21, 8, '1k pkg.', 9.50, 5, 70, b'0');\nINSERT INTO `products` VALUES (46, 'Spegesild', 21, 8, '4 - 450 g glasses', 12.00, 95, 0, b'0');\nINSERT INTO `products` VALUES (47, 'Zaanse koeken', 22, 3, '10 - 4 oz boxes', 9.50, 36, 0, b'0');\nINSERT INTO `products` VALUES (48, 'Chocolade', 22, 3, '10 pkgs.', 12.75, 15, 70, b'0');\nINSERT INTO `products` VALUES (49, 'Maxilaku', 23, 3, '24 - 50 g pkgs.', 20.00, 10, 60, b'0');\nINSERT INTO `products` VALUES (50, 'Valkoinen suklaa', 23, 3, '12 - 100 g bars', 16.25, 65, 0, b'0');\nINSERT INTO `products` VALUES (51, 'Manjimup Dried Apples', 24, 7, '50 - 300 g pkgs.', 53.00, 20, 0, b'0');\nINSERT INTO `products` VALUES (52, 'Filo Mix', 24, 5, '16 - 2 kg boxes', 7.00, 38, 0, b'0');\nINSERT INTO `products` VALUES (53, 'Perth Pasties', 24, 6, '48 pieces', 32.80, 0, 0, b'1');\nINSERT INTO `products` VALUES (54, 'Tourtière', 25, 6, '16 pies', 7.45, 21, 0, b'0');\nINSERT INTO `products` VALUES (55, 'Pâté chinois', 25, 6, '24 boxes x 2 pies', 24.00, 115, 0, b'0');\nINSERT INTO `products` VALUES (56, 'Gnocchi di nonna Alice', 26, 5, '24 - 250 g pkgs.', 38.00, 21, 10, b'0');\nINSERT INTO `products` VALUES (57, 'Ravioli Angelo', 26, 5, '24 - 250 g pkgs.', 19.50, 36, 0, b'0');\nINSERT INTO `products` VALUES (58, 'Escargots de Bourgogne', 27, 8, '24 pieces', 13.25, 62, 0, b'0');\nINSERT INTO `products` VALUES (59, 'Raclette Courdavault', 28, 4, '5 kg pkg.', 55.00, 79, 0, b'0');\nINSERT INTO `products` VALUES (60, 'Camembert Pierrot', 28, 4, '15 - 300 g rounds', 34.00, 19, 0, b'0');\nINSERT INTO `products` VALUES (61, 'Sirop d\\'érable', 29, 2, '24 - 500 ml bottles', 28.50, 113, 0, b'0');\nINSERT INTO `products` VALUES (62, 'Tarte au sucre', 29, 3, '48 pies', 49.30, 17, 0, b'0');\nINSERT INTO `products` VALUES (63, 'Vegie-spread', 7, 2, '15 - 625 g jars', 43.90, 24, 0, b'0');\nINSERT INTO `products` VALUES (64, 'Wimmers gute Semmelknödel', 12, 5, '20 bags x 4 pieces', 33.25, 22, 80, b'0');\nINSERT INTO `products` VALUES (65, 'Louisiana Fiery Hot Pepper Sauce', 2, 2, '32 - 8 oz bottles', 21.05, 76, 0, b'0');\nINSERT INTO `products` VALUES (66, 'Louisiana Hot Spiced Okra', 2, 2, '24 - 8 oz jars', 17.00, 4, 100, b'0');\nINSERT INTO `products` VALUES (67, 'Laughing Lumberjack Lager', 16, 1, '24 - 12 oz bottles', 14.00, 52, 0, b'0');\nINSERT INTO `products` VALUES (68, 'Scottish Longbreads', 8, 3, '10 boxes x 8 pieces', 12.50, 6, 10, b'0');\nINSERT INTO `products` VALUES (69, 'Gudbrandsdalsost', 16, 4, '10 kg pkg.', 36.00, 26, 0, b'0');\nINSERT INTO `products` VALUES (70, 'Outback Lager', 7, 1, '24 - 355 ml bottles', 15.00, 15, 10, b'0');\nINSERT INTO `products` VALUES (71, 'Flotemysost', 16, 4, '10 - 500 g pkgs.', 21.50, 26, 0, b'0');\nINSERT INTO `products` VALUES (72, 'Mozzarella di Giovanni', 14, 4, '24 - 200 g pkgs.', 34.80, 14, 0, b'0');\nINSERT INTO `products` VALUES (73, 'Röd Kaviar', 17, 8, '24 - 150 g jars', 15.00, 101, 0, b'0');\nINSERT INTO `products` VALUES (74, 'Longlife Tofu', 4, 7, '5 kg pkg.', 10.00, 4, 20, b'0');\nINSERT INTO `products` VALUES (75, 'Rhönbräu Klosterbier', 12, 1, '24 - 0.5 l bottles', 7.75, 125, 0, b'0');\nINSERT INTO `products` VALUES (76, 'Lakkalikööri', 23, 1, '500 ml', 18.00, 57, 0, b'0');\nINSERT INTO `products` VALUES (77, 'Original Frankfurter grüne Soße', 12, 2, '12 boxes', 13.00, 32, 0, b'0');\nCOMMIT;\n\n-- ----------------------------\n-- Table structure for suppliers\n-- ----------------------------\nDROP TABLE IF EXISTS `suppliers`;\nCREATE TABLE `suppliers` (\n  `supplier_id` int NOT NULL,\n  `company_name` varchar(40) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `address` varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `city` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `region` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `postal_code` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  `country` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,\n  PRIMARY KEY (`supplier_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n\n-- ----------------------------\n-- Records of suppliers\n-- ----------------------------\nBEGIN;\nINSERT INTO `suppliers` VALUES (1, 'Exotic Liquids', '49 Gilbert St.', 'London', NULL, 'EC1 4SD', 'UK');\nINSERT INTO `suppliers` VALUES (2, 'New Orleans Cajun Delights', 'P.O. Box 78934', 'New Orleans', 'LA', '70117', 'USA');\nINSERT INTO `suppliers` VALUES (3, 'Grandma Kelly\\'s Homestead', '707 Oxford Rd.', 'Ann Arbor', 'MI', '48104', 'USA');\nINSERT INTO `suppliers` VALUES (4, 'Tokyo Traders', '9-8 Sekimai Musashino-shi', 'Tokyo', NULL, '100', 'Japan');\nINSERT INTO `suppliers` VALUES (5, 'Cooperativa de Quesos \\'Las Cabras\\'', 'Calle del Rosal 4', 'Oviedo', 'Asturias', '33007', 'Spain');\nINSERT INTO `suppliers` VALUES (6, 'Mayumi\\'s', '92 Setsuko Chuo-ku', 'Osaka', NULL, '545', 'Japan');\nINSERT INTO `suppliers` VALUES (7, 'Pavlova, Ltd.', '74 Rose St. Moonie Ponds', 'Melbourne', 'Victoria', '3058', 'Australia');\nINSERT INTO `suppliers` VALUES (8, 'Specialty Biscuits, Ltd.', '29 King\\'s Way', 'Manchester', NULL, 'M14 GSD', 'UK');\nINSERT INTO `suppliers` VALUES (9, 'PB Knäckebröd AB', 'Kaloadagatan 13', 'Göteborg', NULL, 'S-345 67', 'Sweden');\nINSERT INTO `suppliers` VALUES (10, 'Refrescos Americanas LTDA', 'Av. das Americanas 12.890', 'Sao Paulo', NULL, '5442', 'Brazil');\nINSERT INTO `suppliers` VALUES (11, 'Heli Süßwaren GmbH & Co. KG', 'Tiergartenstraße 5', 'Berlin', NULL, '10785', 'Germany');\nINSERT INTO `suppliers` VALUES (12, 'Plutzer Lebensmittelgroßmärkte AG', 'Bogenallee 51', 'Frankfurt', NULL, '60439', 'Germany');\nINSERT INTO `suppliers` VALUES (13, 'Nord-Ost-Fisch Handelsgesellschaft mbH', 'Frahmredder 112a', 'Cuxhaven', NULL, '27478', 'Germany');\nINSERT INTO `suppliers` VALUES (14, 'Formaggi Fortini s.r.l.', 'Viale Dante, 75', 'Ravenna', NULL, '48100', 'Italy');\nINSERT INTO `suppliers` VALUES (15, 'Norske Meierier', 'Hatlevegen 5', 'Sandvika', NULL, '1320', 'Norway');\nINSERT INTO `suppliers` VALUES (16, 'Bigfoot Breweries', '3400 - 8th Avenue Suite 210', 'Bend', 'OR', '97101', 'USA');\nINSERT INTO `suppliers` VALUES (17, 'Svensk Sjöföda AB', 'Brovallavägen 231', 'Stockholm', NULL, 'S-123 45', 'Sweden');\nINSERT INTO `suppliers` VALUES (18, 'Aux joyeux ecclésiastiques', '203, Rue des Francs-Bourgeois', 'Paris', NULL, '75004', 'France');\nINSERT INTO `suppliers` VALUES (19, 'New England Seafood Cannery', 'Order Processing Dept. 2100 Paul Revere Blvd.', 'Boston', 'MA', '2134', 'USA');\nINSERT INTO `suppliers` VALUES (20, 'Leka Trading', '471 Serangoon Loop, Suite #402', 'Singapore', NULL, '512', 'Singapore');\nINSERT INTO `suppliers` VALUES (21, 'Lyngbysild', 'Lyngbysild Fiskebakken 10', 'Lyngby', NULL, '2800', 'Denmark');\nINSERT INTO `suppliers` VALUES (22, 'Zaanse Snoepfabriek', 'Verkoop Rijnweg 22', 'Zaandam', NULL, '9999 ZZ', 'Netherlands');\nINSERT INTO `suppliers` VALUES (23, 'Karkki Oy', 'Valtakatu 12', 'Lappeenranta', NULL, '53120', 'Finland');\nINSERT INTO `suppliers` VALUES (24, 'G\\'day, Mate', '170 Prince Edward Parade Hunter\\'s Hill', 'Sydney', 'NSW', '2042', 'Australia');\nINSERT INTO `suppliers` VALUES (25, 'Ma Maison', '2960 Rue St. Laurent', 'Montréal', 'Québec', 'H1J 1C3', 'Canada');\nINSERT INTO `suppliers` VALUES (26, 'Pasta Buttini s.r.l.', 'Via dei Gelsomini, 153', 'Salerno', NULL, '84100', 'Italy');\nINSERT INTO `suppliers` VALUES (27, 'Escargots Nouveaux', '22, rue H. Voiron', 'Montceau', NULL, '71300', 'France');\nINSERT INTO `suppliers` VALUES (28, 'Gai pâturage', 'Bat. B 3, rue des Alpes', 'Annecy', NULL, '74000', 'France');\nINSERT INTO `suppliers` VALUES (29, 'Forêts d\\'érables', '148 rue Chasseur', 'Ste-Hyacinthe', 'Québec', 'J2S 7S8', 'Canada');\nCOMMIT;\n\nSET FOREIGN_KEY_CHECKS = 1;\n\n```\n\n## 十三、总结\n![数据库.png](https://s2.loli.net/2024/03/15/gaYtT2urKIR4yHL.png)\n![SQL基础内容.png](https://s2.loli.net/2024/03/15/ylTcCPkJtwmxoVY.png)","tags":["数据操作","SQL","数据库"],"categories":["大数据"]},{"title":"Typecho创建","url":"/post/typechocreate.html","content":"在写完Halo博客搭建后，决定再记录一下主站typecho博客的搭建过程。typecho是一款轻量化博客程序，系统内存占用少，性能良好，搭建方便，操作简单。在多年前就是口碑良好的博客程序。~~遗憾的是在2017年就已经停止更新了~~（似乎又恢复更新了），并且缺点是所有插件需要自己安装，主题切换不保存设置数据，且不支持在博客页面编辑主题信息，编写文章时没有预览功能等。但是非常节省内存资源，加上宝塔面板占用才200-300M，相比之下Halo就需要800M左右的空间来保证运行，在[Haxio][1]白嫖的Kvm的机器内存非常(~~没~~)好用(~~钱~~)，只是内存只有可怜的450M，用来做typecho再合适不过（随便玩玩，随时寄），毕竟是原生IP，只是用来做节点有点浪费。\n注意，虚拟化方式为Openvz的vps**建议**先开启tun，以hax为例（*hax账号注册需要tg账号，搜索HAX_bot得到id，在登录页面输入id后，bot会发送一串校验码，复制到登录页内重置密码即可，这里不过多赘述*），登录后点击**Poweroff & Restart VPS**\n![tun.png][2]\n点击Enable TUN，然后在终端输入 cat /dev/net/tun，显示in bad state或者Finalshell显示文件处于错误的描述阶段就表示开启成功（halo博客文中已提及）\n# 安装宝塔面板\n请保证是纯净的系统，未安装任何环境\n```\nyum install -y wget && wget -O install.sh http://download.bt.cn/install/install_6.0.sh && sh install.sh\n```\ntypecho博客之所以简单在于基本只需要这一行代码即可完成博客部署\n具体步骤[Halo文中已经写过][3]\n安装LNMP套件，PHP版本请选择7.2（typecho最高支持7.2）![LNMP套件.png][4]\n# 一键部署\n在软件商店-宝塔插件内安装宝塔一键部署源码\n![一键部署源码.png][5]\n点击设置，选择博客，点击typecho一键部署\n![一键部署源码设置.png][6]\n输入域名之后很快，会弹出MySQL的账号和密码,复制好保存备用（halo博客使用的是H2 Database，所以LNMP套件可以不安装MySQL及其相关）\n![域名部署.png][7]\n点击网站，在创建好的域名后点击设置，设置伪静态，选择typecho模板并保存\n![伪静态.png][8]\n# 主题和插件上传\n保存完点击网站目录-usr-themes，上传自己喜欢的主题，网站目录-usr-plugins上传插件。这里提供两个typecho主题和插件的下载网站[1站][10]和[2站][11]，建议上传压缩包上传后解压，不然上传速度很慢\n![主题上传.png][9]\n使用域名访问博客并进行初始化，输入之前保存的数据库信息，设置后台访问的账号密码，安装成功\n![typecho初始化.png][12]\n![安装成功.png][13]\n进入主页即可撰写文章，更换主题，安装插件\n![博客主页.png][14]\n这里提供一个有众多[live2d看板娘][15]模型的网站，推荐的其他插件有代码高亮，动态线条聚合等，需要数学公式的请在footer.php中手动添加mathjax（或Katex），具体方式自行搜索\n```\n<script type=\"text/x-mathjax-config\">\n    MathJax.Hub.Config({\n      extensions: [\"tex2jax.js\"],\n      jax: [\"input/TeX\", \"output/HTML-CSS\"],\n      tex2jax: {\n        inlineMath:  [ [\"$\", \"$\"],  [\"\\(\",\"\\)\"] ],\n        displayMath: [ [\"$$\",\"$$\"], [\"\\[\",\"\\]\"] ],\n        processEscapes: true\n      },\n      \"HTML-CSS\": { availableFonts: [\"TeX\"] }\n    });\n  </script>\n  <script type=\"text/javascript\"\n     src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\">\n  </script>\n```\n# 开启ssl\n详情请见[Halo][17]\nlets encrypt申请失败的话可以自行去阿里云/腾讯云申请后粘贴到其他证书内\n# 关于开启代理后的问题\n开启cf代理的目的是使只有IPv6地址的服务器能够被纯IPv4访问\n[cf代理开启方式][16]\ntypecho在开启代理后请不要在宝塔面板打开强制https，第二点是打开代理后博客后台可能会出现无法登录的情况，点登录后仍然返回登录界面，因为本地没有开启强制https导致cf cdn重定向错误无法登录typecho后台\n这时候需要在网站目录的config.inc.php的代码注释过后（大约第9-10行）加入\n```\ndefine('__TYPECHO_SECURE__',true);\n```\n\n</br>\n更多功能还请读者自行探索，文章若有错误还望大佬评论区告知谢谢\n\n[1]:https://hax.co.id/create-vps/\n[2]: https://s2.loli.net/2024/03/15/Y5mX6WuEOMt8cF4.png\n[3]:https://blog.icjlu.eu.org/post/halocreate.html\n[4]:https://s2.loli.net/2024/03/15/cUGb2MkhZoiVSQO.png\n[5]:https://s2.loli.net/2024/03/15/ok3buY2rLvtScU5.png\n[6]:https://s2.loli.net/2024/03/15/UKMGBaCTe6osJqb.png\n[7]:https://s2.loli.net/2024/03/15/TumMf3S7k1qYNIh.png\n[8]:https://s2.loli.net/2024/03/15/XPSMFwkOfZzxjHT.png\n[9]:https://s2.loli.net/2024/03/15/hfqKUeFMlJQi84s.png\n[10]:https://typecho.me/page-2.html\n[11]:https://store.ijkxs.com/ztmb/typecho/typecho_themes/page/4?price_type=1\n[12]:https://s2.loli.net/2024/03/15/j39DozG1sYJX7fO.png\n[13]:https://s2.loli.net/2024/03/15/qslgN8OuyZh7Sow.png\n[14]:https://s2.loli.net/2024/03/15/8w1dAiehEN4ORzU.png\n[15]:https://mx.paul.ren\n[16]:https://blog.icjlu.eu.org/post/halocreate.html\n[17]:https://blog.icjlu.eu.org/post/halocreate.html","tags":["blog","nginx","vps"],"categories":["旧日"]},{"title":"Halo创建","url":"/post/halocreate.html","content":"\n本文将对VPS使用Docker容器搭建Halo博客的一般方式作简述（小白的逐步操作），大致分为\n\n1. 安装Docker引擎\n2.  创建容器\n3.  拉取Halo镜像\n4.  安装nginx并配置反向代理\n5.  开启SSL\n6.  创建，美化博客页面\n\n \n\n搭建Halo博客需要VPS服务器一台（最低配置要求1C1G，docker本身占用就接近400M的Ram，至于核心一般来说1核就够了），域名1个，~~搭建完就吃灰的决心~~。\n\n~~如果购买的是虚拟化方式为Openvz的服务器请先前往运营商处开启tun，然后在终端输入 cat /dev/net/tun，显示in bad state或者Finalshell显示文件处于错误的描述阶段就表示开启成功了，不过应该没人买Ovz的机器，除了像我这样从Hax白嫖的~~\n\n首先使用Finalshell/Xshell或者命令行（ssh root@）连接上购买服务器的IP地址\n\n# 依赖安装与配置\n\n## 安装Docker引擎\n\n参考：[Docker官方文档][2]\n\n![docker官方文档][1]\n\n*常见系统的安装都有，本文只介绍最简单的安装过程，可选步骤请移步官方文档*\n\n1.安装utils包\n\n```\nyum install -y yum-utils\n```\n\n2.设置仓库\n\n```\nyum-config-manager \\\n\n    --add-repo \\\n\n    https://download.docker.com/linux/centos/docker-ce.repo\n```\n\n3.安装docker引擎\n\n```\nyum install docker-ce docker-ce-cli containerd.io\n```\n\n4.启动docker\n\nsystemctl start docker\n\nsystemctl enable docker.service//设置docker开机自启动\n\ndocker自启动的设置可选择不执行，博主的服务器在执行自启动后nginx会出现异常导致网站无法正常访问，如果执行后无法使用域名访问博客可以关闭自启动（enable改为disable)reboot可解决\n\n*5.拉取测试镜像(可选)\n\n```\ndocker run hello-world//拉取hello-world测试docker是否正常运行，一般都是正常，可以不用操作\n```\n\n安装过程出现的询问操作输入y即可，第三步安装引擎时有个指纹校对可以对比一下，一般都是吻合的\n\n```\n060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35\n```\n\n## 使用 Docker 部署 Halo\n\n参考：[官方文档][3]\n\n安装完毕就可以使用docker部署halo了，按照官方文档操作\n\n1.创建工作目录\n\n```\nmkdir ~/.halo && cd ~/.halo\n```\n\n2.下载示例配置文件到工作目录\n\n```\nwget https://dl.halo.run/config/application-template.yaml -O ./application.yaml\n```\n\n*3.编辑配置文件，配置数据库或者端口等，如需配置请参考官方文档(可选)\n\n```\nvim application.yaml\n```\n\n4.拉取最新的 Halo 镜像\n\n```\ndocker pull halohub/halo:1.4.17//截至本文发布halo的最新版本为1.4.17，访客可自行前往官网查询最新版本或者将版本号改为latest\n```\n\n\n\n```\n纯IPv6机器请先修改DNS否则无法解析\n\necho \"nameserver 2a00:1098:2b::1\" > /etc/resolv.conf\n```\n\n\n\n5.创建容器\n\n```\ndocker run -it -d --name halo -p 8090:8090 -v ~/.halo:/root/.halo --restart=unless-stopped halohub/halo:1.4.17//注意版本号\n```\n\n*对创建容器的部分代码作解释*\n\n第一个8090表示本地的端口映射到第二个halo上的8090端口，第一个可以更改为任意没有被占用的端口，第二个不可更改。更改端口可以在一台服务器上安装多个halo博客，阿里云/腾讯云等开启了安全组的云服务器商请先在服务商控制面板处开启端口放行80，443等常用端口以及halo映射的端口\n\n```\n-it： 开启输入功能并连接伪终端\n\n-d： 后台运行容器\n\n-name： 为容器指定一个名称\n\n-p： 端口映射，格式为 主机(宿主)端口:容器端口 ，可在 application.yaml 配置。\n\n-v： 工作目录映射。形式为：-v 宿主机路径:/root/.halo，后者不能修改。\n\n-restart： 建议设置为 unless-stopped，在 Docker 启动的时候自动启动 Halo 容器。其它设置：\n\n no\t       不自动重启容器. (默认value)\n\n on-failure    容器发生error而退出(容器退出状态不为0)重启容器\n\n unless-stopped \t在容器已经stop掉或Docker stoped/restarted的时候才重启容器\n\n always     在容器已经stop掉或Docker stoped/restarted的时候才重启容器\n\n完成后等待片刻（finalshell中cpu占有降低时），halo博客就部署完成了，此时就可以使用http://ip:端口号 的形式即可看到安装引导界面，不过建议配置好反向代理后再初始化博客。\n```\n\n \n\n# 安装nginx并配置反向代理\n\n## 源码安装\n\n方法1使用的是源码安装nginx，目录/etc/nginx如果有需要LNMP套件的可以使用以下代码安装\n\n```\nwget http://soft.vpser.net/lnmp/lnmp1.8.tar.gz -cO lnmp1.8.tar.gz && tar zxf lnmp1.8.tar.gz && cd lnmp1.8 && ./install.sh lnmp\n```\n\n```\n安装目录\n\nNginx 目录: /usr/local/nginx/\n\nMySQL 目录 : /usr/local/mysql/\n\nMySQL数据库所在目录：/usr/local/mysql/var/\n\nPHP目录 : /usr/local/php/\n\n默认网站目录 : /home/wwwroot/default/\n\nNginx日志目录：/home/wwwlogs/\n\nLNMP软件配置文件路径\n\nNginx主配置(默认虚拟主机)文件：/usr/local/nginx/conf/nginx.conf\n\n添加的虚拟主机配置文件：/usr/local/nginx/conf/vhost/域名.conf\n\nMySQL配置文件：/etc/my.cnf\n\nPHP配置文件：/usr/local/php/etc/php.ini\n\nphp-fpm配置文件：/usr/local/php/etc/php-fpm.conf\n\n\\#重启服务让配置生效\n\nlnmp {nginx|mysql|mariadb|php-fpm|pureftpd} restart\n\n\\#或者直接重启LNMP：\n\nlnmp restart\n```\n\n1.添加 Nginx 源\n\n```\nrpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n```\n\n2.安装 Nginx（CentOS）\n\n```\nyum install -y nginx\n```\n\n3.启动 Nginx\n\n```\nsystemctl start nginx.service\n```\n\n4.设置开机自启 Nginx\n\n```\nsystemctl enable nginx.service\n```\n\nUbuntu系统nginx安装方式\n\n```\nsudo update\n\nsudo apt install nginx\n```\n\n5.下载 Halo 官方的 Nginx 配置模板到本地\n\n```\ncurl -o /etc/nginx/conf.d/halo.conf --create-dirs https://dl.halo.run/config/nginx.conf\n```\n\nnginx若出现启动失败，通常是80端口被占用，查看与80相关的端口\n\n```\nnetstat -lnp|grep 80\n\n\\# 命令无法使用请先输入下面代码安装\n\nyum -y install net-tools\n```\n\n在找到80端口的占用后杀死对应的进程号，如果仍然启动失败可尝试多杀几次\n\n```\nkill -9 进程号\n\nsystemctl restart nginx//重启nginx\n```\n\n\n\n如果使用yum拉取镜像安装nginx，nginx一般安装在/usr/local/nginx/conf/nginx.conf文件夹中，宝塔面板则是在/www/server/panel/vhost/nginx/conf/nginx.conf使用下面的代码无法直接配置nginx，而是会创建一个新的目录存放halo.conf，需要建立软连接（请自行搜索方法）或在nginx安装目录中找到nginx.conf，在http{}中添加\n\n```\ninclude /etc/nginx/conf.d/halo.conf\n```\n\n或者其他自定义的路径，保证正确即可\n\n6.使用vi/vim编辑halo.conf应用nginx配置，或者使用finalshell等其他工具对文件进行编辑\n\n```\nvim /etc/nginx/conf.d/halo.conf//如果vim提示命令不存在可使用vi,配置完毕后按下esc键输入 :wq 退出并保存\n```\n\n模板文件打开后格式为\n\n```\nupstream halo {\n\n  server 127.0.0.1:8090;//更改为你的服务器ip以及设置的端口\n\n}\n\nserver {\n\n  listen 80;\n\n  listen [::]:80;\n\n  server_name xxx.xx;//你的域名\n\n  client_max_body_size 1024m;\n\n  location / {\n\n    proxy_pass http://halo;\n\n    proxy_set_header HOST $host;\n\n    proxy_set_header X-Forwarded-Proto $scheme;\n\n    proxy_set_header X-Real-IP $remote_addr;\n\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n  }\n\n}\n```\n\n \n\n配置完后使用nginx检查是否含有错误\n\n```\nnginx -t\n```\n\n出现successfully时，表示配置文件无误，重新载入nginx即可使用域名访问博客\n\n```\nnginx -s reload\n```\n\n至此，源码安装的方式部署完成。\n\n## 使用宝塔面板安装nginx\n\n方法2是使用宝塔帮助安装web服务器，优点是可视化，操作简单，首先安装宝塔面板\n\n```\nyum install -y wget && wget -O install.sh http://download.bt.cn/install/install_6.0.sh && sh install.sh\n```\n\n期间出现的询问都输入y\n\n安装完毕后会提示默认端口8888和用户名密码，没有弹出的话输入bt default\n\n```\n外网面板地址: http://*****:****/*****\n\n内网面板地址: http://***.**.**.**:****/*****\n\n*以下仅为初始默认账户密码，若无法登录请执行bt命令重置账户/密码登录\n\nusername: ******\n\npassword: ****\n```\n\n \n\n此时访问外网面板登录会提示绑定宝塔账号，博主个人不太接受这种强制绑定的方式（不介意的跳过下面这步），~~所以在网上搜集了解除的方法。目前宝塔面板最新版为7.8，暂时还没有破解方式，现在的思路是降级到7.7。~~\n\n**最新消息，使用破解版宝塔面板7.8的服务器都将被查封，并且拉黑IP，即该服务器将永远无法安装宝塔面板，读者请量力而行，7.7暂时安全**\n\n```\ncurl -sSO https://raw.githubusercontent.com/zhucaidan/btpanel-v7.7.0/main/install/install_panel.sh && bash install_panel.sh\n\nsed -i \"s|bind_user == 'True'|bind_user == 'XXXX'|\"/www/server/panel/BTPanel/static/js/index.js\n\nrm -f /www/server/panel/data/bind.pl\n```\n\n此时访问已不再提示登录，并在首页弹出Linux套件安装，选择LNMP推荐的（nginx-php-mysql-apache）一键安装即可，经过漫长的等待（约20-30min）依赖环境都安装完毕。\n\n\n\n点击网站添加站点，填上主域名（不可泛解析），次域名（选填），网站备注\n\n![bt][4]\n\n然后点击设置，选择反向代理，根据面板的提示键入信息即可完成反向代理\n\n![创建反向代理][5]\n\n或者选择配置文件，按照方法1中配置的方式，在配置文件49-61使用ctrl+/注释掉，然后在62行{}添加相应的信息（使用面板的反向代理只能反代一个halo博客，添加新的反向代理会覆盖之前的配置--貌似）\n\n使用宝塔辅助nginx反代配置完成\n\n```\n location / {\n\n  proxy_pass http://127.0.0.1:8090/;\n\n  rewrite ^/(.*)$ /$1 break;\n\n  proxy_redirect off;\n\n  proxy_set_header Host $host;\n\n  proxy_set_header X-Forwarded-Proto $scheme;\n\n  proxy_set_header X-Real-IP $remote_addr;\n\n  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n  proxy_set_header Upgrade-Insecure-Requests 1;\n\n  proxy_set_header X-Forwarded-Proto https;\n\n}\n```\n\n# 开启SSL，启用https访问\n\n配置完反向代理后，已经可以使用域名访问博客，但浏览器显示的是网站不安全，因为没有受信任的证书，此时是http明文与主机传输数据，需要申请ssl证书上传并验证通过才能启用https。\n\nssl证书可以在阿里云、腾讯云，Cloudflare，acme.sh、certbot申请，\n\n其中阿里云和腾讯云免费申请的是1年有效的亚洲诚信颁发的证书，Cloudflare免费申请的是一年有效的边缘证书或最高15年有效的cf自签名证书，acme.sh和certbot免费申请的是3个月Let's Encrypt证书（可自动续期，但可能失败），有需要也可以在这些平台购买付费证书，安全性更高，并且有专人帮你安装（价格不菲）\n\n\n\n如果上一步使用的是宝塔面板辅助安装的，可以直接在网站页面点击ssl部署，选中域名一键申请，宝塔就会自动申请证书并帮你完成部署，再点击右上角的强制https就实现了https访问，此时网站已变成受信任状态（如果在DNS服务商处已经开启了强制https请不要点击，会导致重定向次数过多无法正常访问），或者已经拥有其他平台的证书，点击其他证书，把公钥和私钥内容粘贴进去即可\n\n![lets-encrypt][6]\n\n阿里云和腾讯云请在控制台搜索ssl申请证书，关于其他平台证书的申请方式请自行搜索，本文只介绍证书的导入和安装，其中cf的自签名证书只会显示一次，没有保存就找不到了，证书的格式为.pem，腾讯云的为.crt（貌似也有pem），密钥格式为.key\n\n证书下载到本地后，使用FTP上传到服务器（不知道怎么使用的自行搜索）或者使用Finalshell进行上传，上传完成后打开之前配置的halo.conf，启用ssl，打开443端口监听\n\n```\nupstream halo {\n\n  server 127.0.0.1:8090;\n\n}\n\nserver {\n\n  listen 80;\n\n  listen [::]:80;\n\n  listen 443 ssl;\n\n  server_name ****.**;//多个域名请加 , 后继续输入\n\n  client_max_body_size 1024m;\n\nssl_certificate /crt/certificate.pem;//证书上传的存放路径\n\nssl_certificate_key /crt/privatekey.key;//密钥上传的存放路径\n\nssl_session_timeout 5m;\n\nssl_protocols TLSv1 TLSv1.1 TLSv1.2;//启用的tls版本，建议不要开启tls v1，存在漏洞，最新版本为v1.3\n\nssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;//加密方式\n\nssl_prefer_server_ciphers on;//开启加密\n\n  location / {\n\n     proxy_pass http://halo;\n\n     proxy_set_header HOST $host;\n\n     proxy_set_header X-Forwarded-Proto $scheme;\n\n     proxy_set_header X-Real-IP $remote_addr;\n\n     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n  }\n\n}\n```\n\n检查规则，重新加载nginx\n\n```\nnginx -t\n\nnginx -s reload\n```\n\n检查ssl是否正常开启，出现ssl xxx的就代表开启成功\n\n```\necho|openssl s_client -connect 127.0.0.1:443 -servername sslconfigure.certqa.cn 2>/dev/null\n```\n\n如果没有请检查防火墙是否拦截，宝塔面板用户请进入安全页面放行443端口\n\n```\nfirewall-cmd --state//检查防火墙开启状态\n\nfirewall-cmd –zone=public –add-port=443/tcp –permanent//放行443端口\n```\n\n完成以上步骤，就可以使用https访问博客了\n\n### *IPV6 Only的服务器如何能让IPV4 Only的网络访问\n\n一些廉价服务器只提供IPV6的公网地址（IPV4公网地址太少了得加钱），导致只有IPV4网络的用户无法访问。而IPV 4 to 6的隧道部署又相对较为繁琐，这里博主采用cf的CDN代理来解决\n\n![cf代理][7]\n\n打开[cloudflare][8]，添加站点,将cf提供的两个地址填入域名注册商的名称服务器，等待生效后打开添加的站点，点击DNS输入IP地址以及解析形式，小云朵代理状态选择开启\n\n![cf ssl证书设置][9]\n\n打开始终使用https（宝塔面板的记得关闭），最低tls版本选择1.1，打开随机加密，此时只有IPV4的网络经过cf代理也能成功访问博客（貌似不上传证书和配置ssl，只打开代理也能实现https访问，感兴趣的读者可自行尝试），但服务器仍然无法访问仅IPV4的资源，需要IPV 6 to 4隧道/NAT地址转换或者安装warp以实现，这里不再赘述。\n\n \n\n# 博客美化\n\n使用 域名/admin 访问博客，完成初始化操作并登录后台\n\n![halo登录][10]\n\n![halo面板][11]\n\n打开面板后可以看到各种博客数据，非常简洁，而且面板样式也很简约但又没有过分固化，个人是挺喜欢的，非常适合只想安心写博客的朋友，不过默认的网站外观不太好看，可以前往Halo官方的[主题仓库][12]选择自己喜欢的外观，点击面板的外观页面，点击安装选择安装包安装或远程安装（推荐安装包安装），~~本人使用的是大佬移植Wordpress的Sakura主题，如有使用该主题的，~~博客外观设置可以参考[LIlGG的操作指南][13]\n\n![halo外观][14]\n\n外观设置完毕后可以在页面栏选择新建页面用于在博客内分栏展示，在外观的菜单栏中可以添加独立页面的小图标，Sakura主题支持Font Awesome图标，各图标样式可以[点击查看][17]和[Font Awesome v6][19]，另外可以对图标增加的动态效果代码可以[查看][18]。具体使用方法实示例\n\n```\nfa fa-bank faa-tada//银行图标，放大旋转特效\n```\n\n ![font awesome动态特效][15]\n\n然后点击用户栏，设置个人资料包括用户名，昵称，邮箱，以及更改密码都在这个页面\n\n最后点击系统栏-博客设置添加网站的logo和favicon（浏览器标签页图标）还有页脚信息，可用于添加统计代码（访客数量，网站运行时间等，但貌似只能添加一个）如有需要添加api服务的可以点击高级选项进行设置\n\n[自建的一言api][20]\n\n![博客设置][16]\n\n仍然有改造主题需要的可以点击外观栏的主题编辑进行修改][16]\n\n 一般对footer和header进行更改即可，具体方式和更多有趣的内容还请自行探索\n\n\n\n以上就是halo博客从创建到美化的全过程了，本人小白，折腾这个博客也是花了不少时间，故理清流程后将其记录，如本文有错漏之处，还请大佬可以在评论区留言谢谢!\n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n[1]: https://s2.loli.net/2024/03/15/3imgwh74HxETj6S.png\n[2]: https://docs.docker.com/engine/install/centos/\n[3]: https://docs.halo.run/getting-started/install/docker/\n[4]: https://s2.loli.net/2024/03/15/LcqzPkjlWD8Zar9.png\n[5]: https://s2.loli.net/2024/03/15/3kX45sWq7IEU82N.png\n[6]: https://s2.loli.net/2024/03/15/kizmlBZqnUHN6Qw.png\n[7]: https://s2.loli.net/2024/03/15/pgVao6rilPOYvsQ.png\n[8]: https://dash.cloudflare.com/\n[9]: https://s2.loli.net/2024/03/15/QMOJte7yj5NCUgh.png\n[10]: https://s2.loli.net/2024/03/15/dXnB4ATQacojS9P.png\n[11]: https://s2.loli.net/2024/03/15/wmrUS2CTIuYJb1H.png\n[12]: https://halo.run/themes.html\n[13]: https://lixingyong.com/2021/01/05/halo%E4%B8%BB%E9%A2%98sakura%E9%A3%9F%E7%94%A8%E8%AF%B4%E6%98%8E\n[14]: https://s2.loli.net/2024/03/15/3iA95eEzjRyISfW.png\n[15]: https://s2.loli.net/2024/03/15/bIpgQX286mKCeV3.png\n[16]: https://s2.loli.net/2024/03/15/ZqfTQiO8H29pwjA.png\n[17]: https://www.runoob.com/font-awesome/fontawesome-reference.html\n[18]: https://www.51qianduan.com/article/view/4111.html\n\n[19]: https://fontawesome.com/icons\n[20]: https://weus.cjlus.eu.org/hitokoto-api/?format=js&amp;amp;charset=utf-8\n\n","tags":["blog","nginx","vps"],"categories":["旧日"]},{"title":"数字跑表","url":"/post/4a12443.html","content":"\n# 一、课程设计的地位与任务\n《系统设计与仿真课程设计》是电子信息、通信工程专业安排的必修的一门电子电路综合技能训练课程。通过本课程的学习，使同学们掌握常用电子元器件的应用，熟练掌握模拟集成电路、数字集成电路、单片机集成电路的设计方法与应用；理解中规模、大规模集成电路的可靠性设计的概念和方法，学会电子产品的系统设计方法，为学习智能仪器等后续课程和专业技术工作打下良好的基础。\n# 二、课程设计的基本内容和要求\n## 第一部分： EDA技术仿真\n用Verilog HDL语言设计如下数字电路，并仿真验证：\n### 1. 多人表决器\n设计1个多人表决器，同意为1，不同意为0，同意者过半则表决通过，指示灯亮，否则指示灯灭。表决人数和描述方式自行选择。\n```properties\nmodule vote7(\ninput [7:1] vote,\noutput reg pass);\nreg [2:0] sum;\ninteger i;\nalways@(vote)\nbegin sum=0;\nfor(i=1;i<=7;i=i+1)\nif(vote[i]) sum=sum+1;\nif(sum[2]) pass=1;\nelse pass=0;\nend\nendmodule\n```\n7人表决器，大于4人通过(0100)\n激励文件\n```scala\nmodule tb_vote7();\nreg [7:1] vote;\nwire pass;\nvote7 i1(\n.pass(pass),\n.vote(vote));\ninitial begin\nvote=7'b1110001;\n#50 vote=7'b1100000;\n#50 vote=7'b1101101;  \n#50 $finish;\nend\nendmodule\n```\n\n\n### 2. 流水灯控制器\n流水灯控制器包含三个输入端口：时钟端，使能端和清零端。\n采用有限状态机实现流水灯控制器，控制LED灯实现多种花型.\n1. 从左到右依次逐个点亮，全灭；\n2. 从两边往中间逐个亮，全灭；\n3. 循环执行上诉过程。\n4. 学生选定题目后，查找相关资料，熟悉课程题目的方向和设计要求与具体基本指标，确定可行的方案。首先进行在仿真软件，得出正确合理的仿真结果；然后进行下载和调试，最后运行其实现的功能。在基本的功能上，学生可以自我扩展电路功能，创新设计效果，完善电路实现功能。\n```properties\nmodule flow(clk,clr,led,rst);\ninput clk,clr,rst;\noutput reg [7:0] led;\ninteger i;\nalways@(posedge clk)\nbegin \nif(!rst) begin led<=8'h00;end\nif(!clr) begin led<=8'h80;i<=4'b0000;end\nelse\nbegin case(i)\n4'b0000:begin led<=8'h80;i=4'b0001;end\n4'b0001:begin led<=8'h40;i=4'b0010;end\n4'b0010:begin led<=8'h20;i=4'b0011;end\n4'b0011:begin led<=8'h10;i=4'b0100;end\n4'b0100:begin led<=8'h08;i=4'b0101;end\n4'b0101:begin led<=8'h04;i=4'b0110;end\n4'b0110:begin led<=8'h02;i=4'b0111;end\n4'b0111:begin led<=8'h01;i=4'b1000;end\n4'b1000:begin led<=8'h00;i=4'b1001;end\n4'b1001:begin led<=8'h81;i=4'b1010;end\n4'b1010:begin led<=8'h42;i=4'b1011;end\n4'b1011:begin led<=8'h24;i=4'b1100;end\n4'b1100:begin led<=8'h18;i=4'b1101;end\n4'b1101:begin led<=8'h00;i=4'b0000;end\nendcase\nend\nend\nendmodule\n```\n这里使用16进制表示灯的花型，使用顺序编码编号状态，状态编码也可采用格雷码等实现，花型可采用一位热码编码、约翰逊编码，8421BCD等实现\n激励文件\n```scala\nmodule tb_flow();\nparameter DELY=20;\nreg clk;\nreg clr;\nreg rst;\nwire[7:0] led;\nflow i1(\n    .clk(clk),\n    .clr(clr),\n    .rst(rst),\n    .led(led));\ninitial begin\nclk=1'b0;\nclr=1'b0;\nrst=1'b1;\n#(DELY*2) clr=1'b1;\nend\nalways begin\n#(DELY/2) clk=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\x7eclk;\nend\nendmodule\n```\n## 第二部分：综合设计\n综合设计分二部分的内容：CPLD/FPGA仿真设计。综合题目有5个，学生可以自行选择其中一个题目进行，也可以自己拟订题目，但必须征得指导老师的同意方能进行。学生选定题目后，查找相关资料，熟悉课程题目的方向和设计要求与具体基本指标，确定可行的方案。在基本的功能上，学生可以自我扩展电路功能，创新设计效果，完善电路实现功能。\n### 1、 基于Verilog HDL数字频率计的设计\n**技术要求：**\n1) 频率测量范围：     10hz—1Mhz\n2) 测量分辨率：       1hz\n3) 测量误差：         ±1\n4) 测量显示：         6位数码管显示\n   **设计任务：**\n1) 说明设计具体思路。\n2) 画出系统模块框图。\n3) 画出系统顶层原理图。\n4) 按设计技术要求编写程序。\n5) 画出系统功能仿真波形图。\n6) 设计出硬件实现电路图，下载测试。\n完成课程设计报告一份。\n### 2、 基于Verilog HDL数字交通灯的设计\n**技术要求：**\n交通灯的基本工作状态：\n1) (主干道)绿灯：车辆前行；\n2)  (次干道）红灯：禁止通行；\n3)  (主干道)黄灯：过渡状态；\n4)  (主干道)红灯：禁止车辆通行；\n5) (次干道)绿灯：车辆前行。\n● 注：红黄绿等均为前行方向的信号指示灯。\n    **设计任务：**\n1) 说明设计具体思路。\n2) 画出系统模块框图。\n3) 画出系统顶层原理图。\n4) 按设计技术要求编写程序。\n5) 画出系统功能仿真波形图。\n6) 设计出硬件实现电路图，下载测试。\n完成课程设计报告一份。\n### 3、 基于Verilog HDL数字钟的设计\n**技术要求：**\n1) 该时钟具有校准时间、闹铃、整点报时等功能。\n2) 秒表至少有3个输入端，分别为时钟输入、校准信号、复位按键，也可以考虑一些扩展功能。\n3) 秒、分钟信号、小时采用BCD码计数方式。\n    **设计任务：**\n1) 说明设计具体思路。\n2) 画出系统模块框图。\n3) 画出系统顶层原理图。\n4) 按设计技术要求编写程序。\n5) 画出系统功能仿真波形图。\n6) 设计出硬件实现电路图，下载测试。\n完成课程设计报告一份。\n### 4、 基于Verilog HDL数字跑表的设计\n设计任务：设计一个以0.01s为基准计时信号的实用数字式跑表\n**技术要求：**\n1) 跑表计时显示范围0.01s-59min59.99s，计时精度为10ms。\n2) 具有清零、启动计时、暂停计时功能。\n3) 时钟源误差不超过0.01s。\n    **设计任务：**\n1) 说明设计具体思路。\n2) 画出系统模块框图。\n3) 画出系统顶层原理图。\n4) 按设计技术要求编写程序。\n5) 画出系统功能仿真波形图。\n6) 设计出硬件实现电路图，下载测试。\n完成课程设计报告一份。\n### 5、 基于Verilog HDL 汽车尾灯控制器的设计\n设计任务：汽车尾灯控制器\n**技术要求：**\n1) 正常行驶时，指示灯不亮；\n2) 刹车时，指示灯亮；\n3) 左转时，左侧的一盏灯闪烁，亮1s，灭1s；\n4) 右转时，右侧的一盏灯闪烁，亮1s，灭1s；\n5) 发生故障和事故时，双侧的灯都闪烁，亮0.5s，灭0.5s；\n**设计任务：**\n1) 说明设计具体思路。\n2) 画出系统模块框图。\n3) 画出系统顶层原理图。\n4) 按设计技术要求编写程序。\n5) 画出系统功能仿真波形图。\n6) 设计出硬件实现电路图，下载测试。\n完成课程设计报告一份。\n</br>\n这里我选择的是数字跑表设计\n在完成基本功能后添加了从当前时间开始倒计时，60秒倒计时，每计时1分钟短暂蜂鸣，倒计时结束持续蜂鸣功能\n\n```properties\n\n`timescale 1ns / 1ps\n//////////////////////////////////////////////////////////////////////////////////\n\nmodule chronograph(\ninput   clk,pause,reset,reversal,cnt,\n    output  reg[3:0] bai1,bai2,miao1,miao2,fen1,fen2,buzzer=0);//buzzer蜂鸣不用4位寄存器，懒得另外写了  \nalways @(posedge clk, posedge reset)//百分秒计时\nif(!reversal)\n    begin\n        if(reset)begin bai1<=0;bai2<=0; end  //复位信号               //else if(pause);//begin bai1<=bai1;a<=bai1;end\n        else if(!pause)\n            begin   if(bai2==9&&bai1==9) begin bai2<=0;bai1<=0;miao1<=miao1+1; end   //百分秒计满后秒进位\n                    else begin\n                        if(bai1==9) begin bai1<=0;bai2<=bai2+1;end  //百分秒第一位进位\n                        else begin bai1<=bai1+1;end                     \n                        end\n            end\n    end\nelse if(reversal)  //倒计时\nbegin\n        if(reset)begin bai1<=0;bai2<=0; end//复位\n        else if(!pause&&cnt==0)//从当前时间倒计时\n            begin   if(bai2==0&&bai1==0&&miao1>0) begin bai2<=9;bai1<=9;miao1<=miao1-1; end\n                     else if(bai2==0&&bai1==0&&miao1==0&&miao2>0)begin miao1<=9;bai1<=9;bai2<=9;miao2<=miao2-1;end//代码有瑕疵，其实还有别的情况，但是懒得改了，功能基本完成\n                    else begin//同正常计时的逆向\n                        if(bai1==0&&bai2>0) begin bai1<=9;bai2<=bai2-1;end\n                        else if(bai2==0&&bai1==0&&miao1==0);\n                        else begin bai1<=bai1-1;end                     \n                        end\n            end   \n            else if(!pause&&cnt)\n            begin fen2<=0;fen1<=0;miao2<=6;miao1<=0;bai2<=0;bai1<=0;end\nend\nelse if(reset)begin bai1<=0;bai2<=0; end\nalways @(bai1,bai2,pause,reset)//秒计时，基本和百分秒相同\nif(!reversal)                           \n    begin\n        if(reset)begin miao1<=0;miao2<=0;end                        //else if(pause);//begin miao1<=miao1;end\n        else if(!pause)\n            begin   if(miao2==5&&miao1>9) begin miao2<=0;miao1<=0;fen1<=fen1+1;  end\n                    else begin\n                        if(miao1>9) begin miao1<=0;miao2<=miao2+1;end\n                        end\n                        if(miao1==9&&miao2==5&&bai1==9&&bai2==9) buzzer<=1;//在每次计时到59秒99时短暂蜂鸣\n                        else buzzer<=0;\n            end           \n    end\nelse if(reversal)                           \n    begin\n        if(reset)begin miao1<=0;miao2<=0;end\n        else if(!pause&&cnt==0)\n            begin   if(miao2==0&&miao1==0&&(fen1>0||fen2>0)) begin miao2<=5;miao1<=9; bai2<=9;bai1<=9;fen1<=fen1-1;  end\n                    else begin\n                        if(miao1==0&&miao2>0) begin miao1<=9;miao2<=miao2-1;end\n                        if(miao1==0&&miao2==0&&bai1==0&&bai2==0) buzzer<=1;//倒计时结束后持续蜂鸣，可能还要加上分也等于0？\n                        else buzzer<=0;\n                        end\n            end\n            else if(!pause&&cnt)\n            begin fen2<=0;fen1<=0;miao2<=6;miao1<=0;bai2<=0;bai1<=0;end//cnt信号表示进行60秒倒计时\n    end \nelse if(reset)begin miao1<=0;miao2<=0;end\nalways @(miao1,miao2,pause,reset)//分计时\nif(!reversal)     \n    begin\n        if(reset)\n            begin fen1<=0;fen2<=0;end                                    //else if(pause);//begin fen1<=fen1;end\n        else if(!pause)\n            begin   if(fen2==5&&fen1>9)begin fen2<=0;fen1<=0;end\n                    else begin\n                        if(fen1>9)begin  fen1<=0; fen2<=fen2+1;end\n                        end\n            end\n    end\nelse if(reversal)   \n    begin\n        if(reset)begin fen1<=0;fen2<=0;end\n        else if(!pause&&cnt==0)\n            begin if(fen1==0&&fen2>0)begin  fen1<=9;miao2<=5;miao1<=9; bai2<=9;bai1<=9;fen2<=fen2-1;end                       \n            end\n    end\n    else if(!pause&&cnt)\n            begin fen2<=0;fen1<=0;miao2<=6;miao1<=0;bai2<=0;bai1<=0;end\nelse if(reset) begin fen1<=0;fen2<=0;end\nendmodule\n```\n激励文件\n```scala\n\n`timescale 1ns / 1ps\n//////////////////////////////////////////////////////////////////////////////////\n\nmodule tb_chronograph();\nreg clk,pause,reset,reversal,cnt;\nwire [3:0] bai1,bai2,miao1,miao2,fen1,fen2,buzzer;\nchronograph i1(\n        .clk(clk),\n        .pause(pause),\n        .reset(reset),\n        .bai1(bai1),\n        .bai2(bai2),\n        .miao1(miao1),\n        .miao2(miao2),\n        .fen1(fen1),\n        .fen2(fen2),\n        .reversal(reversal),\n        .cnt(cnt),\n        .buzzer(buzzer)\n        );\ninitial begin\n    clk = 1;reset = 1;pause = 0;reversal=0;cnt=0;\n#1;reset = 0;\n#5;pause = \\x7epause;//时延可以设置为相同，之前以为这个数字是连续的正常时间才把间隔越搞越大，实际上就是时间间隔\n#10;pause = \\x7epause;\n#15;pause = \\x7epause;\n#20;pause = \\x7epause;\n#3000;reset=0;reversal=1;\n#7000;reversal=0;\n#15000;reset=0;reversal=1;cnt=1;\n#15010;cnt=0;\nend\nalways begin\n    #1 clk=\\x7eclk;end\nendmodule\n```\n# 仿真波形图\n![基础计时 重置时间和暂停功能.png](https://s2.loli.net/2024/03/14/ibQhaA9zUZkmWvM.png)\n<center>基础计时 重置时间和暂停功能</center>\n\n![从当前时间倒计时.png](https://s2.loli.net/2024/03/14/WDcRoqsUp28yhSX.png)\n<center>从当前时间倒计时</center>\n\n![正常计时至59秒99时短暂蜂鸣.png](https://s2.loli.net/2024/03/14/agVpfnDhKreTN9d.png)\n<center>正常计时至59秒99时短暂蜂鸣</center>\n\n![倒计时状态下计时结束持续蜂鸣.png](https://s2.loli.net/2024/03/14/thYGd2mrEgvyRaq.png)\n<center>倒计时状态下计时结束持续蜂鸣</center>\n\n![60秒信号停止输入且倒计时信号继续输入开始从60秒倒计时.png](https://s2.loli.net/2024/03/14/E51xcfZLkOpzla4.png)\n<center>60秒信号停止输入且倒计时信号继续输入开始从60秒倒计时</center>\n\n![取消倒计时后正常计时停止蜂鸣.png](https://s2.loli.net/2024/03/14/8gxTL1Q45qydCsj.png)\n<center>取消倒计时后正常计时停止蜂鸣</center>\n\n![倒计时和60秒信号同时触发60秒倒计时_未设置上升沿触发导致不同步_.png](https://s2.loli.net/2024/03/14/LwbBEJiGO5gYlX4.png)\n<center>倒计时和60秒信号同时触发60秒倒计时未设置上升沿触发导致不同步</center>\n\n![整体情况.png](https://s2.loli.net/2024/03/14/c5ZiM1tvTLnGbUP.png)\n<center>整体情况</center>\n\n一次比较简单的课程设计，主要考察Verilog HDL的基础运用，时间原因未设计编译码模块并连接开发板测试实际效果，文章如有错误还望指出！","tags":["电子","Verilog"],"categories":["旧日"]},{"title":"小记数字图像处理","url":"/post/fbbe638c.html","content":"\n# 数字图像处理第3章图像增强\n~~若数学公式加载失败，请移步[主站](https://yxcnb.ml/index.php/archives/77/)~~\n\n## γ校正\n非线性部件的输人-输出特性，都是一个能够反映各自特性的幂函数，即如果输人的光信号强度为L,输出的电信号强度为I,则输入、输出之间的关系满足\n\n$I = c · L^γ$\n\n\nc为放大倍数（常数），γ为幂函数的指数，用于衡量非线性部件的转换特性，称为**幂律转换特性**，又称γ特性，对非线性关系的校正称为**γ校正**\n<br/>\n*对比度计算公式*\n\n\n\n$C=\\sum_{\\delta}\\delta(i,j)^2P_\\delta(i,j)$\n\n\n计算方式有四近邻或八近邻，略\n\n## 线性对比度展宽\n线性对比度展宽处理，实际上是图像灰度值的线性映射。假设处理后图像与处理前图像的量化级数相同，即处理前后图像的灰度分布范围均为[0,255],则如果需要进行对比度展宽,从原理上说，只能通过抑制非重要信息的对比度来腾出空间给重要信息进行对比度的展宽。\n设原图像的灰度为 f(i,j),处理后图像的灰度为g(i, j),设原图重要景物灰度在[fa，fb]范围内，处理后灰度分布在[ga，gb]内，α<1,γ<1,表示对非重要景物的抑制，β>1表示重要景物的对比度展宽增强。\n对比度线性展宽计算公式\n\n$$\ng(i,j) =\n\\begin{cases}\n\\alpha f(i,j),  & 0\\le f(i,j)\\lt f_a \\\\[2ex]\n\\beta(f(i,j)-f_a)+g_a, & f_a\\le f(i,j)\\lt f_b \\\\[2ex]\n\\gamma(f(i,j)-f_b)+g_b, &f_b\\le f(i,j)\\lt 255\n\\end{cases}\n$$\n\n(i=1,2,…,m;j=1,2,…,n)\n其中，$\\alpha =\\frac{g_a}{f_a},\\beta =\\frac{g_b-g_a}{f_b-f_a},\\gamma =\\frac{255-g_b}{255-g_b}$，图像的大小为m*n\n\n当得到一张矩阵形式的灰度图像时，若要进行线性对比度展宽，需先画出灰度直方图，确认原图重要景物的灰度分布范围fa，fb，根据需要确认处理后的灰度范围ga，gb，代入公式进行计算\n\n## 灰级窗与灰级窗切片\n灰级窗是将灰度值在一定范围内的目标进行对比度增强，使范围内像素映射到另一范围，使其达到分离图像区域（切片）以及高亮（映射）的效果，灰级窗映射计算公式\n\n\n$$\ng(i,j) =\n\\begin{cases}\n0,  & 0\\le f(i,j)\\lt f_a \\\\[2ex]\n\\beta(f(i,j)-f_a), & f_b\\le f(i,j)\\lt f_a \\\\[2ex]\n0, &f_b\\le f(i,j)\\lt 255\n\\end{cases}\n$$\n\n\n(i=1,2,…,m;j=1,2,…,n)\n其中，$\\beta =\\frac{255}{f_b-f_a}$，图像的大小为m*n\n灰级窗切片计算公式\n\n\n$$\ng(i,j) =\n\\begin{cases}\n0,  & 0\\le f(i,j)\\lt f_a \\\\[2ex]\n255, & f_a\\le f(i,j)\\lt f_b \\\\[2ex]\n0, &f_b\\le f(i,j)\\lt 255\n\\end{cases}\n$$\n\n\n(i=1,2,…,m;j=1,2,…,n)，图像的大小为m*n\n## 动态范围调整\n\n### 线性动态范围调整\n线性动态范围是先进行亮暗限幅，即将图像中黑的像素值调大,由0调整到a，白的像素值调小，由255调整到b。然后将区域[a,b]进行线性映射到[0,255]范围内。使一部分较暗的像素点以及较亮的像素点进入饱和，中间部分的像素值因为可以进行对比度扩展，而使得其细节部分看的更加清楚，结果是目标区域的像素得到增强，两边区域的细节丢失。线性动态范围调整公式\n\n\n$$\ng(i,j) =\n\\begin{cases}\n0,  & f(i,j)\\lt f_a \\\\[2ex]\n\\frac{255}{b-a}[f(i,j)-a], & f_a\\le f(i,j)\\lt f_b \\\\[2ex]\n255, &f(i,j)\\gt f_b\n\\end{cases}\n$$\n\n\n(i=1,2,…,m;j=1,2,…,n)，图像的大小为m*n,[a,b]为灰度变化范围\n### 非线性动态范围调整\n非线性动态范围调整的作用是抑制高亮度区域，扩展低亮度区域，一定程度解决了景物中高亮度区的信号掩盖暗区信号问题。\n非线性动态范围调整的计算公式\ng(i,j)=c · lg(1+f(i,j))&emsp;(i=1,2,…,m;j=1,2,…,n)\n首先计算$\\frac{灰度变化范围}{lg(灰度变化范围+1)}$，再计算g(i,j)\n## 直方图均衡化\n对图像中像素个数多的灰度值进行展宽，对像素个数多的灰度值进行进行归并，设f(i,j),g(i,j)(i=1,2,…,M;j=1,2,…,N)分别为原图像和处理后图像图像的灰度变化范围为[0，255]，方法如下\n①求原图$[f(i,j)]_{M*N}$的灰度直方图，设用256维的向量$h_f$表示\n②由$h_f$求原图的灰度分布概率，记作$p_f$,则\n\n\n$$\np_f(i)=\\frac{1}{N_f} · h_f(i), i=0,1,2,…,255\n$$\n\n\n$N_f$=M*N,为图像的总像素个数\n③计算图像各个灰度值的累计分布概率，记作$p_a$，则\n\n\n$$\np_a(i)=\\sum_{k=0}^i p_f(k), i=0,1,2,…,255\np_a(0)=0\n$$\n\n\n④进行直方图均衡化计算处理后像素值g(i,j)=255 · $p_a$(k)\n\n## 同态滤波\nf(x,y)=i(x,y) · r(x,y)\n两边取对数得lnf(x,y)=lni(x,y)+lnr(x,y)\n两边进行傅里叶变换得F(u,v)=I(u,v)+R(u,v)\n用频域滤波函数H(u,v)进行滤波得H(u,v)F(u,v)=H(u,v)I(u,v)+H(u,v)R(u,v)，$H_f(u,v)=H_i(u,v)+H_r(u,v)$\n反变换到空域得$h_f(x,y)=h_i(x,y)+h_r(x,y)$\n取指数得同态滤波图像\ng(x,y)=exp|$h_f(x,y)$|=exp|$h_i(x,y)$|=exp|$h_r(x,y)$|\n## [伪彩色](https://baike.baidu.com/item/%E4%BC%AA%E5%BD%A9%E8%89%B2/3429626)\n以上为数字图像处理（科学出版社）第3章给出的图像增强方法，附习题\n![数字图像处理例题.png](https://s2.loli.net/2024/03/14/NyVFMt3L1jJ8OkS.png)","tags":["图像处理","电子"],"categories":["旧日"]},{"title":"以太网和IP","url":"/post/ab626e9a.html","content":"摘要：局域网技术的概述，IP基本原理以及IP子网划分\n\n> 本期内容较为杂乱且基础，故列出以下大致目录 \n>  - 早期以太网技术\n>   - 全双工与半双工\n>   - MDI与MDIX\n>   - CSMA/CD\n>   - 以太网流量控制\n>  - 现代以太网技术\n>   - WLAN技术\n>   - CSMA/CA\n>  - 广域网基本原理\n>   - 常见接口\n>  - IP基本原理\n\n![局域网技术 目前仅以太网仍在使用][1]\n**早期以太网技术**\n\n|   名称   |   速率  |  介质类型  | 最大线缆长度 |\n|:--------:|:-------:|:----------:|:------------:|\n|  10BASE5 | 10 Mbps | 粗同轴电缆 |     500m     |\n|  10BASE2 | 10 Mbps | 细同轴电缆 |     200m     |\n| 10BASE-T | 10 Mbps |   双绞线   |     100m     |\n\n以10BASE5为例，10表示传输速率最高为10Mbps，5表示最大线缆长度为500m，仍可使用中继器将其延长，但最大长度不超过2000m。*10BASE-T为常见的网线*\n![RJ-45接头即水晶头][2]\n集线器和中继器的工作方式都为[半双工][3]\n光纤的工作方式为[全双工][4]\n半双工指在同一时间两端只能发送或接受信号，全双工则能同时收发信号并且不会产生冲突。\n[**MDI和MDIX**][5]\n\n|                           | 主机网卡(MDI) | 路由器以太口(MDI) | 交换机/集线器接入口(MDIX) | 交换机/集线器级连口（MDI） |\n|:-------------------------:|:-------------:|:-----------------:|:-------------------------:|:--------------------------:|\n|       主机网卡(MDI)       |     交叉线    |       交叉线      |           直连线          |             N/A            |\n|     路由器以太口(MDI)     |     交叉线    |       交叉线      |           直连线          |             N/A            |\n| 交换机/集线器接入口(MDIX) |     直连线    |       直连线      |           交叉线          |           直连线           |\n| 交换机/集线器级连口(MDI)  |      N/A      |        N/A        |           直连线          |           交叉线           |\n同类接口互连用交叉线，异类接口互连用直连线\n\n[**CSMA/CD**][6]\n目的：解决总线型拓扑结构中半双工的收发冲突\n工作机制：载波侦听->空闲->抢占->检测冲突->随即退避->退避期满，继续发送\n缺点：延迟高\n\n----------\n数据的发送方式：[单播][7]，[组播][8]，广播\n数据链路层的以太网流量控制（防止传输速率太快导致数据丢失）方式：在半双工线路上采用**背压式流控**，接收方反向发送电压信号制造冲突，使发送方停止发送：在全双工线路上采用**802.3 PAUSE流控**接收方向保留组播地址01-80-C2-00-00-01发送PAUSE帧，通知发送方停止发送![流控][9]\n\n----------\n## 现代以太网技术 ##\n现代以太网采用交换机取代了中继器和集线器进行以太网拓扑，隔离冲突域，避免冲突域过大，进一步扩大物理连接范围，提高以太网带宽利用率，增加吞吐量，适应不同的速率和不同的双工状况。\n**WLAN技术**![802.11b/g工作频段划分图][10]\n无线覆盖原则：蜂窝式覆盖。任意相邻区域使用无频率交叉的频道，如1、6、11频道；适当调整发射功率，避免跨区域同频干扰；蜂窝式无线覆盖实现无交叉频率重复使用\n<br />\n[CSMA/CA][11]（载波侦听多点接入／避让机制）\n![CSMA/CA][12]\n无线网络典型部署：热点覆盖、办公地点无线互联\n\n----------\n\n## 广域网基本原理 ##\n目的：局域网主要完成工作站、终端、服务器等在较小物理范围内的互联，只能解决局部的资源共享；广域网可以使相距遥远的局域网互相连接起来，远距离传输数据、语音、视频等，实现大范围的资源共享\n<br />\n广域网连接方式：专线方式、电路交换方式、分组交换方式\n**接口线缆**\nV.24和V.35均为串行接口\nG口（以太网口）默认数据链路层协议802.3，S口（串口）默认数据链路层协议PPP。根据不同物理层介质，数据链路层选择不同的协议。\n*以下接口线缆非仅广域网中使用*\n![V.24接口线缆（支持同/异步）][13]\n![V.35接口线缆（支持同步）][14]\n![其他常见接口线缆][15]\n\n----------\n\n----------\n\n----------\n## IP基本原理 ##\n\n**IP相关协议（网络层）**：[ICMP][16]、[IGMP][17]、[***ARP***][18]、[***RARP***][19]\nIP的作用：标识节点和链路 ①用唯一的IP地址标识每一个节点②用唯一的IP网络号标识每一个链路；\n寻址和转发①确定节点所在网络的位置，进而确定节点所在的位置②IP路由器选择适当的路径将IP包转发到目的节点；\n适应各种数据链路 ①根据链路的MTU对IP包进行分片和重组 ②为了通过实际的数据链路传递信息，须建立IP地 址到数据链路层地址的映射\n<br />\nIP网络由多个网段构成，每个网段对应一个链路 ，路由器负责将网段连接起来，适配链路层 协议，在网络之间转发数据包\n<br />\n网络号用于区分不同的IP网络、主机号用于标识该网络内的一个IP节点\n![IP头格式][20]\n版本（Version）：用于标识封装是IPv4/IPv6\n头长度（Internet Header Length,IHL）：描述数据包头的内容长度\n总长度（Total Length）：数据包总长度，字段长16Bit，数据包最长为65535B\n标识（Identification）：标识某个分片来自于哪个数据包\n标志（Flags）：标识数据包是否允许分片\nFragment Offset：分片偏移，用于描述分片在数据包中的位置\n生存时间（Time to Live,TTL）：该数据包允许经过的最多路由器数量（每经过一个路由器值-1，0时丢弃）\n协议（Protocol）：标识上层协议TCP,6/UDP,17（协议号）\n头校验和（Header Checksum）：用于检查包头完整性\n源地址Source Address和目的地址Destination Address：标识数据包的源节点和目的节点IP地址\n![IP地址自然分类][21]\nA类IP地址：1.0.0.0~126.255.255.255（127为回环测试，127.0.0.1通常表示本机，0.0.0.0通常用于路由器指定默认路由），每个A类网络有2^24个A类IP地址，2^24-2个可用主机数\nB类IP地址：128.0.0.0~191.255.255.255，每个B类网络有2^16个B类IP地址，2^16-2个可用主机数\nC类IP地址：192.0.0.0~223.255.255.255，每个C类网络有2^8个C类IP地址，2^8-2个可用主机数\nD类IP地址：第一个八位段1110开头，取值224~239，通常为组播地址\nE类IP地址：11110开头，保留用于研究\n网段（网络地址）：主机号全为0；网段广播（广播地址）：主机号全为1\nARP：将IP解析为MAC，RARP为反向ARP解析\n![主机单播IP包发送][22]\n若目的地址所处网络号与本机所处网络司号相同，则目的处于直连网段；\n①处于同一网段，主机可以与其直接通信，此时主机首先解析目的主机IP地址所对应的硬件地址，随即将IP包以此硬件地址为目的地址封装成帧，由直接连结此网段的接口发送给目的主机\n②如果属于不同网段，则主机需要将IP包交给网关去处理，此时主机根据网关的IP地址解析其物理地址，随即将IP包以此硬件地址为目的地址封装成帧，由直连此网段的接口发送给网关\n![路由器单播IP包转发][23]\n路由器收到IP包首先检查IP包的目的地址是不是自己，是的话就接收此包并将其解封装所得数据交给上层协议处理，如果目的IP不是自己\n①处于同一个直连网段，可以与其直接通信，此时路由器首先解析目的IP地址所对应的硬件地址，随即将IP包以此硬件地址为目的地址封装成帧，由此直接连接此网段的接口发给目的主机\n②如果处于不同网段，则需要交给下一跳路由器处理，此时根据路由器上面的路由表查出下一跳的IP地址，解析出一下跳的硬件地址，随即将IP包以此硬件地址为目的地址封装成帧，由此直接连接此网段的接口发给下一跳的路由器\n![主机接收IP包][24]\n\n----------\n\nIP子网划分\n------\n子网划分方法：在主机号中划分出子网号，达到在自然分类中再次划分主机的目的\n![IP地址与子网掩码][25]\n得到一个IP地址首先判断在自然分类中他的网络号的位数，再通过给出的位数相减得到子网号位数；得到一个16进制子网掩码首先将其转换为二进制，再判断子网号位数，用自然分类得出网络地址和广播地址的方式就能得出子网划分后的地址的网络地址/广播地址。\n![根据主机地址数划分子网][26]\n可用主机数：2^（主机位数）-2  *//此时的主机位数同自然分类中的主机位数-子网号位数*（在告知主机数和IP时，用2^（主机位数）-2>=主机数，来算出主机位数和子网位数即可得出子网掩码）\n![根据子网掩码数计算子网数][27]\n![根据子网数划分子网][28]\n可用子网数：2^（子网位数）（在告知子网数和IP时，用2^（子网位数）>=子网数，来算出子网位数即可得出子网掩码）\n可用主机范围：网络地址+1~广播地址-1\n**VLSM和CIDR**\n子网划分的局限性 ：无法实现把网络划分为不同大小的子网，常常会浪费许多主机地址 ，使用VLSM(Variable Length Subnet Mask，可变长子网掩码）可以允许使用多个子网掩码划分子网，使组织的IP地址空间得到更有效的利用\nCIDR(Classless Inter-Domain Routing, 无类域间路由） 消除了自然分类地址和子网划分的界限、将网络前缀相同的连续IP地址组成CIDR地址块、支持强化地址汇聚\n*题目示例*\n***基于CIDR划分子网***\n 1. 请根据10.0.0.0/8划分4个子网，并给出每个子网的网络地址、广播地址、可用IP地址范围和子网掩码。 \n    2^M>=4,M>=2\n    8+2=10位，255.192.0.0\n    10.0.0.0  10.63.255.255   10.0.0.1~10.63.255.254\n    10.64.0.0  10.127.255.255   10.64.0.1~10.127.255.254\n    10.128.0.0  10.191.255.255   10.128.0.1~10.191.255.254\n    10.192.0.0  10.255.255.255   10.192.0.1~10.255.255.254\n<br />\n 2. 请根据172.16.96.0/19划分4个子网，并给出每个子网的网络地址、广播地址、可用IP地址范围和子网掩码。 \n    2^M>=4,M>=2\n    子网掩码：19+2=21；255.255.248.0\n    172.16.96.0  172.16.103.255  172.16.96.1~172.16.103.254\n    172.16.104.0  172.16.111.255  172.16.104.1~172.16.111.254\n    172.16.112.0  172.16.119.255   172.16.112.1~172.16.119.254\n    172.16.120.0  172.16.127.255   172.16.120.1~172.16.127.254\n<br />\n 3. 请根据IP地址为100.100.100.100/11，计算该IP地址所属网段的网络地址、广播地址、可用IP地址范围和子网掩码。\n    100.011 00000.0.0=100.96.0.0\n    100.011 11111.255.255=100.127.255.255 \n    可用IP地址范围：100.96.0.1~100.127.255.254\n    255.224.0.0\n<br />\n 4. 请根据IP地址为200.200.200.200/27，计算该IP地址所属网段的网络地址、广播地址、可用IP地址范围和子网掩码。\n    200.200.200.110 11111\n    200.200.200.192  200.200.200.223\n    200.200.200.193~200.200.200.222\n    255.255.255.224\n\n----------\n\n----------\n\n----------\n***基于VLSM划分子网***\n\n 1. 某公司有A、B、C、D四个部门，计算机数量分别是100台、55台、29台、20台。该公司拟通过192.168.1.0/24划分子网，请给出每个子网的网络地址、广播地址、可用IP地址范围和子网掩码。\n    A：2^n-2>=100,n>=7,32-7=25  \n    192.168.1.0 0000000:\n    192.168.1.0  192.168.1.127   192.168.1.1~192.168.1.126 \n    B；2^n-2>=55,n>=6;32-6=26\n    192.168.1.1 0 000000:\n    192.168.1.128  192.168.1.191  192.168.1.129~192.168.1.190 \n    C:2^n-2>=29,n>=5;32-5=27\n    192.168.1.110 00000:\n    192.168.1.192 192.168.1.223  192.168.1.193~192.168.1.222 \n    D:2^n-2>=20,n>=5;32-5=27\n    192.168.1.111 00000:\n    192.168.1.224  192.168.1.255  192.168.1.225~192.168.1.254\n<br />\n 2. 某公司向运营商（ISP）申请到200.200.200.160/27的网络地址，数据中心有10台服务器，5个公网IP用作NAT（网络地址转换），其他IP用作网络设备之间提供点对点服务。请划分子网，并给出每个子网的网络地址、广播地址、可用IP地址范围和子网掩码。\n\n----------\n***地址聚合***\n\n 1. 某企业分配给产品部的IP地址块为192.168.31.192/26，分配给市场部的IP地址块为192.168.31.160/27，分配给财务部的IP地址块为192.168.31.128/27，那么这三个地址块经过聚合后的地址为（C  ）   \n    A、192.168.31.0/25                B、192.168.31.0/26 \n    C、192.168.31.128/25              D、192.168.31.128/26\n    比较，相同的部分均为192.168.31，总共24位相同，最后一组换成二进制再比较：  \n    192.168.31.11000000\n    192.168.31.10100000\n    192.168.31.10000000 \n    比较得出，总共25位相同，那么，聚合后的IP（网络前缀）就为192.168.31.10000000，将10000000转为十进制为128，聚合后的IP就是192.168.31.128。可直接写成192.168.31.128/25。\n    因为有25位相同，也以，子网掩码网络号就是25位，主机号剩下7位，网络号全为1，主机号全为0，即11111111.11111111.11111111.10000000，转换为十进制，255.255.255.128。\n<br />\n 2. 有４条路由：172.18.129.0/24, 172.18.130.0/24, 172.18.132.0/24, 172.18.133.0/24,如果进行路由会聚，能覆盖这４条路由的地址是（A ）。  \n    A．172.18.128.0/21                B. 172.18.128.0/22  \n    C.172.18.130.0/22                 D. 172.18.132.0/23 \n    首先从左到右开始，把不同的那个ip数字换算成二进制，\n    即 129 二进制 1000 0001 130 二进制 1000 0010 132 二进制 1000 0100 133 二进制 1000 0101\n    这四个数的前五位相同都是10000，所以加上前面的172.18这两部分相同的位数，网络号就是8+8+5=21。把共同的保留下来，其他全部为0，就是路由汇聚的地址。10000000转换回十进制就是128。所以，路由汇聚的ip地址就是172.18.128.0，最终就是172.18.128.0/21。\n<br />\n 3. 为缩小路由表，请根据192.168.20.0/24、192.168.21.0/24、192.168.22.0/24、192.168.23.0/24等4个子网进行地址聚合，求出超网地址。（不同的号位为0）\n    192.168.20.0/24 192.168.00010100.0\n    192.168.21.0/24 192.168.00010101.0\n    192.168.22.0/24 192.168.00010110.0\n    192.168.23.0/24 192.168.00010111.0 \n    故可得超网地址为：192.168.20.0/22\n\n[1]: https://s2.loli.net/2024/03/15/QA6kdFPHURLEpw1.png\n[2]: https://s2.loli.net/2024/03/15/5k69vt18PcbzTLu.png\n[3]: https://baike.baidu.com/item/%E5%8D%8A%E5%8F%8C%E5%B7%A5/309852?fr=aladdin\n[4]: https://baike.baidu.com/item/%E5%85%A8%E5%8F%8C%E5%B7%A5/310007?fr=aladdin\n[5]: https://zh.wikipedia.org/wiki/%E4%BB%8B%E8%B4%A8%E7%9B%B8%E5%85%B3%E6%8E%A5%E5%8F%A3\n[6]: https://baike.baidu.com/item/CSMA/CD/986847\n[7]: https://baike.baidu.com/item/%E5%8D%95%E6%92%AD/8946201?fr=aladdin\n[8]: https://baike.baidu.com/item/%E7%BB%84%E6%92%AD/8946116?fr=aladdin\n[9]: https://s2.loli.net/2024/03/15/VUwd6M7lOAPzQNx.png\n[10]: https://s2.loli.net/2024/03/15/Ep1SsxglMiZ3bvf.png\n[11]: https://baike.baidu.com/item/CSMA%2FCA/10898090?fr=aladdin\n[12]: https://s2.loli.net/2024/03/15/cgqF2HTuWoKdUmw.png\n[13]: https://s2.loli.net/2024/03/15/G4lXMKjag2I5bTP.png\n[14]: https://s2.loli.net/2024/03/15/xiZEnrW5FvDdKJM.png\n[15]: https://s2.loli.net/2024/03/15/nu9rX3L2bfESsKN.png\n[16]: https://baike.baidu.com/item/ICMP/572452\n[17]: https://baike.baidu.com/item/Internet%E7%BB%84%E7%AE%A1%E7%90%86%E5%8D%8F%E8%AE%AE?fromtitle=IGMP&fromid=610474\n[18]: https://baike.baidu.com/item/ARP/609343\n[19]: https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2%E5%8D%8F%E8%AE%AE?fromtitle=RARP&fromid=610685\n[20]: https://s2.loli.net/2024/03/15/J5VUdthC73kMlHg.png\n[21]: https://s2.loli.net/2024/03/15/7qtn8lPuw3EyXHx.png\n[22]: https://s2.loli.net/2024/03/15/CSRKGJdz4IDWhVZ.png\n[23]: https://s2.loli.net/2024/03/15/tEMpceUq2XKVkxL.png\n[24]: https://s2.loli.net/2024/03/15/9yquQawFd5AULfR.png\n[25]: https://s2.loli.net/2024/03/15/FV7hIClTjxiDwYs.png\n[26]: https://s2.loli.net/2024/03/15/AOdpElL56UzW8eb.png\n[27]: https://s2.loli.net/2024/03/15/r2gmklVTa9wfWpi.png\n[28]: https://s2.loli.net/2024/03/15/gOEQTU4ycXpdisJ.png","tags":["通信","IP","路由"],"categories":["旧日"]},{"title":"OSI和TCPIP","url":"/post/b66e59b1.html","content":"摘要：OSI模型的7层结构及对应功能，TCP/IP模型的分层结构和OSI模型的对比\n\n> *开放式系统互联模型（Open System Interconnection Model，缩写：OSI；简称为OSI模型）是一种概念模型，由国际标准化组织（ISO）提出，一个试图使各种计算机在世界范围内互连为网络的标准框架。定义于ISO/IEC 7498-1。*\n> *该模型将通信系统中的数据流划分为七个层，从分布式应用程序数据的最高层表示到跨通信介质传输数据的物理实现。每个中间层为其上一层提供功能，其自身功能则由其下一层提供。功能的类别通过标准的通信协议在软件中实现。*\n> *开放式系统互联模型的开发始于上世纪70年代后期，用以支持各种计算机联网方法的出现。在上世纪80年代，该模型成为国际标准化组织（ISO）开放系统互连小组的工作产品。-------------------------维基百科*\n\n\n</br>\n\n\n**OSI七层参考模型有以下优点**\n\n 1. 开放的标准化接口\n 2. 多厂商兼容性\n 3. 易于理解、学习和更新协议标准\n 4. 实现模块化工程，降低开发实现的复杂度\n 5. 便于故障排除\n\nOSI参考模型\n7    应用层：(*数据名*)应用层协议数据单元APDU（Application Protocol Data Unit）\n6    表示层：表示层协议数据单元PPDU（Presentation Protocol Data Unit）\n5    会话层：会话层协议数据单元SPDU（Session Protocol Data Unit）\n4    传输层：      段  Segment\n3    网络层：      数据包 Packet\n2    数据链路层：  帧 Frame\n1    物理层：      比特流 Bit\n\n## 物理层 ##\n介质：同轴电缆，双绞线，光纤，串行电缆，电磁波等\n局域网接口线缆标准：10Base-T、100Base-Tx/Fx、1000Base-T、1000Base-Sx/Lx\n广域网接口线缆标准：RS-232(EIA/TIA-232)、V.24、V.35\n常见设备：中继器（局域网），集线器（局域网），调制解调器（广域网）\n\n## 数据链路层 ##\n主要功能：①帧同步（编帧和识别帧）②数据链路的建立，维持和释放③传输资源控制④流量控制⑤差错控制⑥寻址⑦标识上层数据\nIEEE 802标准：\n\n - 802.1描述局域网需要解决的问题（802.1d描述生成树协议）\n - 802.2 LLC子层标准制定\n - 802.3 MAC子层标准制定（如解决总线型拓扑的半双工单点故障的技术CSMA/CD）\n - 802.4 令牌总线标准制定\n - 802.5 令牌环网标准制定\n - 802.11 无线局域网标准制定\n*我国应用最广的LAN标准是基于IEEE802.3的以太网标准*\n广域网数据链路层标准：HDLC（高级数据链路控制）、PPP（点到点协议）、X.25、帧中继协议等\n常见设备：交换机\n\n## 网络层 ##\n主要功能：编址、路由选择、拥塞控制、异种网络互连\n主要协议：路由协议（RIP，OSPF，IS-IS，IGRP，EIGRP，BGP协议等）和可路由协议（IP，IPX协议等）\n![路由协议和可路由协议][1]\n\n\n面向连接的服务：适合可靠性要求高的应用。特点①通信前建立连接，通信完成后断开连接②有序传递③应答确认④差错重传\n无连接的服务：适合对延迟敏感的应用。特点①尽力而为的服务②无需建立连接③无序列号机制，无确认机制，无重传机制\n## 传输层 ##\n主要功能：负责创建端到端的通信连接、差错校验和重传、流量控制。\n主要协议：TCP、UDP、SPX协议等。\n## 会话层 ##\n利用传输层提供的端到端服务，向表示层或会话用户提供会话服务。\n## 表示层 ##\n转换应用层的信息，对数据进行加密和压缩。\n## 应用层 ##\n对软件提供接口，实现用户与应用程序交互。\n\n----------\n## TCP/IP模型 ##\n\n> *TCP/IP参考模型是一个抽象的分层模型，这个模型中，所有的TCP/IP系列网络协议都归类到4个抽象的“层”中。每一抽象层创建在低一层提供的服务上，并且为高一层提供服务。 完成一些特定的任务需要众多的协议协同工作，这些协议分布在参考模型的不同层中的，因此有时称它们为一个协议栈。 TCP/IP参考模型为TCP/IP协议栈订身制作。其中IP协议只关心如何使得数据能够跨越本地网络边界的问题，而不关心如何利用传输媒体，数据如何传输。整个TCP/IP协议栈则负责解决数据如何通过许许多多个点对点通路（一个点对点通路，也称为一“跳”, 1 hop）顺利传输，由此不同的网络成员能够在许多“跳”的基础上创建相互的数据通路。 如想分析更普遍的网络通信问题，ISO的OSI模型也能起更好的帮助作用。---------------------维基百科*\nTCP/IP模型\n4 应用层：融合了会话层和表示层---主要协议：Telnet，FTP，TFTP，SMTP，SNMP，HTTP等\n3 传输层：提供端到端连接---主要协议：TCP，UDP\n2 网络层：使主机能正确将信息发送至任何网络的目标---主要协议：IP，ICMP，IGMP\n1 网络接口层：主要技术：以太网，FDDI，令牌环，SLIP，HDLC，PPP，X.25，帧中继，ATM\n其中传输层协议的主要作用：\n\n 1. 提供面向连接和无连接的服务\n 2. 维护连接状态\n 3. 对应用层数据进行分段和封装\n 4. 实现多路复用\n 5. 可靠的传输数据\n 6. 执行流量控制\n![][2]\n##OSI参考模型和TCP/IP模型对比##\n![][3]\n\n*以上为个人的粗浅认识，如有不正确之处，还望大佬指正谢谢*\n\n\n[1]: https://s2.loli.net/2024/03/15/XHkK6Bo1iIUASxe.png\n[2]: https://s2.loli.net/2024/03/15/E8cdIkbzGlrq3j7.gif\n[3]: https://s2.loli.net/2024/03/15/2iA4PEJKao9cUgR.jpg\n","tags":["网络模型","通信"],"categories":["旧日"]},{"title":"5G网络架构和组网部署","url":"/post/7570f815.html","content":"## 5G网络架构的演进趋势 ##\n\n> 5G移动通信系统包括5GC（5G Core Network，5G核心网）和NG-RAN（Next Generation Radio Access Network，5G无线接入网）。\n> 5G核心网与5G接入网通过NG接口连接，实现控制面和用户面功能;\n> 5G无线接入网之间通过Xn接口连接，实现控制面和用户面功能。\n\n![5G移动通信系统整体架构][1]\n图中gNB为5G基站的名称，g代表generation，NB代表NodeB，so gNB is （next）generation NodeB。\n5G NR：New Radio，指5G的无线空口技术\nng-eNB：next generation eNodeB。在option4系列非独立组网架构下（NSA），4G基站必须升级支持eLTE，和5G核心网对接，这种升级后的4G基站就叫ng-eNB。\n<br />\nEvolved Node B，即演进型Node B简称eNB，LTE中基站的名称，相比现有3G中的Node B，集成了部分RNC的功能，减少了通信时协议的层次。\neNB的功能包括：RRM功能；IP头压缩及用户数据流加密；UE附着时的MME选择；寻呼信息的调度传输；广播信息的调度传输；以及设置和提供eNB的测量等。\n<br />\nNode B是3G移动基站的称呼，它是通过标准的Iub接口与RNC互连，通过Uu接口与UE进行通信，主要完成Uu接口物理层协议和Iub接口协议的处理，相当于一个无线收发信器。\n一般，Node B主要由控制子系统、传输子系统、射频子系统、中频/基带子系统、天馈子系统等部分组成。\n<br />\n**网元**\n[UPF][2]：用户面功能，实现用户数据处理\n[SMF][3]/[AMF][4]：控制面功能，实现接入管理\n\n\n  [1]: https://s2.loli.net/2024/03/15/fC2xwoZENAIPU95.png\n  [2]: https://baike.baidu.com/item/UPF/13973820?fr=aladdin\n  [3]: https://baike.baidu.com/item/smf/22360829#viewPageContent\n  [4]: https://baike.baidu.com/item/AMF/3337707","tags":["基站","网络基础"],"categories":["旧日"]}]