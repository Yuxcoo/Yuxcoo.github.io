[{"title":"CatBoost内容补充","url":"/post/CatBoost.html","content":"CatBoost内容补充\n1. CatBoost (Categorical Boosting)\nCatBoost (Categorical Boosting) 是俄罗斯搜索巨头 Yandex 开发的一个开源梯度提升框架。它在 GBDT 的基础上进行了优化，尤其擅长处理类别特征，并且在训练过程中引入了独特的机制来缓解预测偏移 (Prediction Shift) 问题，提高了模型的鲁棒性和泛化能力。\n\n核心思想: CatBoost 延续了梯度提升框架，迭代地构建决策树来优化目标函数。其最大的特点和创新在于其针对类别特征的处理方式以及有序提升 (Ordered Boosting) 算法。\n与 XGBoost / LightGBM 的主要区别和改进 (重点内容):\n\n类别特征处理 (Categorical Feature Handling): 这是 CatBoost 的核心优势。它使用了一种被称为有序目标编码 (Ordered Target Encoding) 或 “Middles” 的方法，结合特征组合来有效地处理类别特征，避免了传统方法（如 One-Hot 或标准目标编码）可能带来的问题（维度爆炸、信息丢失、预测偏移）。\n预测偏移问题与有序提升 (Prediction Shift &amp; Ordered Boosting): 标准的 Boosting 算法在计算梯度时使用了基于整个数据集的模型，这可能导致训练和预测分布不一致（预测偏移）。CatBoost 引入了有序提升，在计算每个样本的梯度时，仅使用基于该样本之前的数据子集训练的模型，从而缓解了这个问题。\n决策树结构 (Tree Structure): CatBoost 默认使用对称的决策树 (Symmetric Trees)。在构建树时，同一深度的节点都使用相同的特征和分裂阈值进行分裂。这使得树结构更加规则，预测速度快，并且有一定的正则化效果。\n基于直方图的数值特征处理 (Histogram-based Numerical Feature Handling): 对于数值特征，CatBoost 也采用了类似于 LightGBM 的直方图算法，将连续值离散化，提高了分裂点查找的效率。\n更少的参数调优 (Less Parameter Tuning): 相比 XGBoost 和 LightGBM，CatBoost 在许多数据集上使用默认参数就能获得不错的效果，减少了调参的复杂性（尽管依然有很多参数可供调整）。\n支持 GPU 训练: 对 GPU 的支持良好，可以显著加速训练过程。\n\n\n\n1.1 类别特征处理 (Categorical Feature Handling)\n标准的处理类别特征的方法有 One-Hot Encoding 和 Target Encoding。\n\nOne-Hot Encoding (独热编码): 对于高基数（类别数量多）的类别特征，One-Hot Encoding 会产生大量的稀疏特征，增加模型复杂度和内存消耗。\nTarget Encoding (目标编码): 将类别特征的值替换为该类别对应目标变量的统计量（如均值）。例如，对于分类问题，可以将类别替换为该类别下样本属于正类的比例 E[y∣category]E[y | \\text{category}]E[y∣category]. 这种方法虽然有效，但在标准的 Boosting 框架下，容易导致信息泄露 (Data Leakage) 或预测偏移 (Prediction Shift)：在训练时，计算目标编码使用了整个数据集的信息，包括当前样本的目标值，这使得模型在训练集上表现很好，但在未见过的数据（测试集）上性能下降。\n\nCatBoost 针对这些问题提出了解决方案：\n\n\n有序目标编码 (Ordered Target Encoding) / “Middles”:\n\n\n为了避免信息泄露，CatBoost 在计算类别特征的目标编码时，采用了一种基于随机排列的方法。\n\n\n对于训练集的一个随机排列，当计算样本 iii 的某个类别特征的目标编码时，只使用在该排列中位于样本 iii 之前的样本来计算统计量。\n\n\n具体公式通常为：\nEncodedValuei=∑j=1i−1[categoryj=categoryi]⋅targetj+prior⋅weight∑j=1i−1[categoryj=categoryi]⋅weight+prior\\text{EncodedValue}_i = \\frac{\\sum_{j=1}^{i-1} [\\text{category}_j = \\text{category}_i] \\cdot \\text{target}_j + \\text{prior} \\cdot \\text{weight}}{\\sum_{j=1}^{i-1} [\\text{category}_j = \\text{category}_i] \\cdot \\text{weight} + \\text{prior}}\nEncodedValuei​=∑j=1i−1​[categoryj​=categoryi​]⋅weight+prior∑j=1i−1​[categoryj​=categoryi​]⋅targetj​+prior⋅weight​\n其中，[⋅][\\cdot][⋅] 是指示函数，prior\\text{prior}prior 是一个先验值（如整个数据集的目标均值），weight\\text{weight}weight 是先验的权重。使用先验可以减少低频类别带来的噪声。\n\n\nCatBoost 可以使用多个随机排列来计算不同的编码，增加鲁棒性。\n\n\n优点: 有效地处理了类别特征，避免了信息泄露和预测偏移，无需手动进行 One-Hot 或目标编码。\n\n\n缺点: 需要对数据进行排序和多次统计计算，增加了训练时间。\n\n\n\n\n特征组合 (Feature Combinations):\n\nCatBoost 可以在训练过程中自动地将某些类别特征进行组合，生成新的组合特征（例如，将 Country=USA 和 City=NewYork 组合成 Country=USA_City=NewYork）。\n这些组合特征也使用有序目标编码进行处理。\n优点: 可以发现特征之间的交互作用，提高模型的表达能力。\n\n\n\n1.2 预测偏移与有序提升 (Prediction Shift &amp; Ordered Boosting)\n\n预测偏移问题: 在标准的梯度提升算法中，训练第 ttt 棵树时计算的梯度是基于前 t−1t-1t−1 棵树的模型对整个训练集的预测误差。这个模型是使用整个训练集的信息构建的。这意味着，当前用来计算梯度的模型，包含了未来将被用来训练第 ttt 棵树的数据的信息。这导致训练过程中使用的预测分布与最终模型在全新数据上的预测分布之间存在差异，即预测偏移。这个问题在使用基于目标统计量的特征（如目标编码）时尤其突出。\n有序提升 (Ordered Boosting):\n\nCatBoost 提出有序提升来解决预测偏移问题。\n在训练第 ttt 棵树时，它使用两个不同的模型：一个用于计算梯度和 Hessian（基于随机子集训练），一个用于构建当前的树。\n更直观地理解：对于一个随机排列的训练集，当训练用于预测样本 iii 的模型时，只使用该排列中位于样本 iii 之前的样本来构建这棵树。然后用这棵树在样本 iii 上计算梯度。\n实际上，为了效率，CatBoost 通常会使用多组随机排列，并对每个排列独立地训练一个模型来计算梯度。\n优点: 显著减轻了预测偏移问题，提高了模型的泛化能力和鲁棒性。\n缺点: 相比标准提升（Plain Boosting），计算成本更高，训练时间可能更长。\n\n\n\n1.3 对称树结构 (Symmetric Tree Structure)\n\n策略: CatBoost 默认构建对称树。在每一层，它找到一个最佳的分裂 (特征 + 阈值)，然后将该分裂应用到该层的所有叶子节点上。\n优点:\n\n预测速度快: 由于结构规则，可以高效地进行矢量化计算。\n防止过拟合: 对称结构限制了树的灵活性，起到一定的正则化作用。\n\n\n缺点:\n\n可能不如非对称树（如 Leaf-wise）灵活，在某些问题上可能无法达到理论上的最优解。\n可以通过 grow_policy 参数切换到非对称结构（Lossguide）。\n\n\n\n1.4 LightGBM 的目标函数与优化\nCatBoost 基于 GBDT 框架，目标函数与 XGBoost 类似，也是最小化损失函数加上正则化项。虽然它也使用了二阶泰勒展开来近似损失函数，但在有序提升框架下，计算梯度 gig_igi​ 和 Hessian hih_ihi​ 的模型是不同的。\n假设要优化的简化目标函数（类似 XGBoost）：\nObj(t)≈∑i=1n[giht(xi)+12hiht(xi)2]+Ω(ht)\\text{Obj}^{(t)} \\approx \\sum_{i=1}^n \\left[ g_i h_t(x_i) + \\frac{1}{2} h_i h_t(x_i)^2 \\right] + \\Omega(h_t)\nObj(t)≈i=1∑n​[gi​ht​(xi​)+21​hi​ht​(xi​)2]+Ω(ht​)\n在有序提升中，计算 gig_igi​ 和 hih_ihi​ 时，y^i(t−1)\\hat{y}_i^{(t-1)}y^​i(t−1)​ 是由一个只训练到样本 iii 之前的数据的模型产生的预测。\n1.5 CatBoost 参数解释 (部分关键参数)\nCatBoost 也有很多参数，许多与 XGBoost 和 LightGBM 类似，但处理类别特征和有序提升相关的参数是其特色。\n\n\n\n参数/属性\n描述\n默认值\n类型/选项\n重要性级别\n与XGBoost/LightGBM对比\n\n\n\n\nloss_function / objective\n定义学习任务及损失函数。类似 XGBoost/LightGBM。支持多种损失函数。\n'RMSE' (回归), 'Logloss' (二分类)\nstring\n高\n类似\n\n\neval_metric\n评估指标。类似 XGBoost/LightGBM 的 eval_metric/metric。\n根据 loss_function\nstring or list of strings\n高 (用于评估)\n类似\n\n\niterations / n_estimators\nBoosting 迭代次数，即树的数量。\n100\nint\n高\n类似\n\n\nlearning_rate\n学习率 (Learning Rate)。 缩放每棵树的贡献。\n0.03\nfloat\n高\n默认值通常较低\n\n\ndepth\n树的深度。 对于默认的对称树结构，这是严格的最大深度。\n6\nint\n高\n类似 XGBoost 的 max_depth，但针对对称树结构\n\n\nl2_leaf_reg\nL2 正则化系数。 叶子节点权重的 L2 正则化。与 XGBoost 的 reg_lambda 类似。\n3\nfloat\n高\n类似\n\n\nmodel_shrink_rate\n[仅用于 Ordered Boosting] 模型收缩率。 影响 Leaf Estimation 计算过程。\n0\nfloat\n中\nCatBoost 独有 (Ordered Boosting)\n\n\nrandom_seed\n随机种子。用于数据采样、排列等随机过程，确保结果可复现。\n0\nint\n实用\n类似\n\n\ncat_features\n指定哪些特征是类别特征。 可以是特征索引列表或特征名称列表。非常重要！\nNone\nlist of int or list of str\n高 (处理类别特征时)\nCatBoost 核心参数\n\n\nverbose\n控制训练过程输出信息的详细程度。可以指定整数（如 0, 100 表示每 100 轮打印一次）或布尔值。\nTrue\nbool or int\n实用\n类似\n\n\nearly_stopping_rounds\n[fit 方法参数] 早期停止轮数。 在 fit 方法中指定。如果在验证集上经过 early_stopping_rounds 轮迭代后，评估指标没有提升，训练就会停止。需要同时提供验证集和 eval_metric。非常重要！\nN/A\nint\n高 (用于早期停止)\n类似\n\n\nborder_count\n[数值特征参数] 用于构建数值特征直方图的桶的数量。 值越大，分裂点选择越精确，但训练越慢。\n254\nint\n实用\n类似 LightGBM\n\n\ngrow_policy\n树的生长策略。 'SymmetricTrees' (默认，对称生长)，'Depthwise' (按层生长)，'Lossguide' (按损失最佳优先生长，类似 LightGBM 的 Leaf-wise)。\n'SymmetricTrees'\n'SymmetricTrees', 'Depthwise', 'Lossguide'\n高\n控制树结构，与 XGBoost/LightGBM 策略对应\n\n\nmin_data_in_leaf\n叶子节点中所需的最小样本数。 与 LightGBM 的 min_child_samples 类似。\n1\nint\n中\n类似 LightGBM 的 min_child_samples\n\n\nboosting_type\nBoosting 类型。 'Ordered' (有序提升，默认), 'Plain' (标准提升)。使用 Ordered 可以缓解预测偏移，但训练较慢。\n'Ordered'\n'Ordered', 'Plain'\n高\nCatBoost 核心参数\n\n\nallow_writing_files\n是否允许 CatBoost 在训练期间创建临时文件（用于存储中间计算结果，如有序统计量）。禁用可以避免生成文件，但在处理大规模数据时可能需要更多内存。\nTrue\nbool\n实用\nCatBoost 相关\n\n\nfeature_importances_\n[属性] 特征重要性。 拟合后可用。CatBoost 支持多种计算方式。\nN/A\narray\nN/A\n类似\n\n\n\n1.6 Scikit-learn API 示例 (CatBoost)\nCatBoost 也提供了与 scikit-learn 兼容的 API (CatBoostClassifier 和 CatBoostRegressor)。\n# 导入 CatBoost 的 Scikit-learn APIfrom catboost import CatBoostClassifier, Poolfrom sklearn.model_selection import train_test_splitfrom sklearn.metrics import accuracy_score, classification_reportfrom sklearn.datasets import load_iris # 使用一个简单数据集import pandas as pd # 方便处理数据和指定类别特征# 加载数据集iris = load_iris()X, y = iris.data, iris.targetfeature_names = iris.feature_namestarget_names = iris.target_names# 转换为 Pandas DataFrame，并添加一个模拟的类别特征X_df = pd.DataFrame(X, columns=feature_names)# 假设第一个特征（sepal length）根据某个阈值（例如 5.5）分为两类X_df[&#x27;sepal length category&#x27;] = X_df[&#x27;sepal length (cm)&#x27;].apply(lambda x: &#x27;long&#x27; if x &gt; 5.5 else &#x27;short&#x27;)# 确保类别特征的 dtype 是 &#x27;category&#x27; 或 &#x27;object&#x27;X_df[&#x27;sepal length category&#x27;] = X_df[&#x27;sepal length category&#x27;].astype(&#x27;category&#x27;)y_series = pd.Series(y)# 分割数据集X_train, X_test, y_train, y_test = train_test_split(X_df, y_series, test_size=0.3, random_state=42, stratify=y_series)print(&quot;\\n--- CatBoost Classifier 示例 ---&quot;)# 初始化 CatBoost 分类器# loss_function=&#x27;MultiClass&#x27; 用于多分类# eval_metric=&#x27;MultiClass&#x27; 或 &#x27;MultiLogloss&#x27;# cat_features 指定类别特征列的索引或名称# CatBoost 默认使用有序提升和对称树catb_clf = CatBoostClassifier(iterations=500, # 迭代次数，配合 early stopping                              learning_rate=0.1,                              depth=6, # 树的深度                              l2_leaf_reg=3, # L2 正则化                              loss_function=&#x27;MultiClass&#x27;, # 损失函数                              eval_metric=&#x27;MultiClass&#x27;, # 评估指标                              random_seed=42,                              verbose=100, # 每100轮打印一次信息                              # cat_features=[4] # 如果指定列索引，这里是新加的类别列索引                              cat_features=[&#x27;sepal length category&#x27;], # 指定列名称更直观                              early_stopping_rounds=10, # 早期停止轮数                              # boosting_type=&#x27;Ordered&#x27; # 默认就是Ordered，也可以显式指定                              # grow_policy=&#x27;SymmetricTrees&#x27; # 默认就是SymmetricTrees                              # allow_writing_files=False # 如果不希望生成文件，可以设为False                              )# CatBoost 的 fit 方法可以直接传入类别特征信息# eval_set 参数用于指定验证集catb_clf.fit(X_train, y_train,             eval_set=(X_test, y_test), # 验证集             # cat_features 指定类别特征列的索引或名称 (也可以在这里指定)             # cat_features=[&#x27;sepal length category&#x27;]             )# 预测y_pred_catb = catb_clf.predict(X_test)# CatBoost predict 默认返回原始预测结果（类别索引或回归值），对于分类问题通常需要 predict_proba 获取概率# y_pred_proba_catb = catb_clf.predict_proba(X_test)# 如果是多分类且 loss_function 为 MultiClass，predict 返回的是类别索引# 如果是二分类且 loss_function 为 Logloss，predict 返回的是原始预测值，需要 sigmoid 转换为概率或使用 predict_probaaccuracy_catb = accuracy_score(y_test, y_pred_catb)print(f&quot;\\n准确率: &#123;accuracy_catb:.4f&#125;&quot;)# print(&quot;分类报告:\\n&quot;, classification_report(y_test, y_pred_catb, target_names=target_names))# 打印实际训练的树数量print(f&quot;实际训练的树数量: &#123;catb_clf.get_best_iteration() + 1 if catb_clf.get_best_iteration() else catb_clf.get_params()[&#x27;iterations&#x27;]&#125;&quot;)# 打印特征重要性 (默认是基于分裂次数)print(&quot;特征重要性 (CatBoost - Default):&quot;)feature_names_with_cat = feature_names + [&#x27;sepal length category&#x27;]importances = catb_clf.get_feature_importance()for name, importance in zip(feature_names_with_cat, importances):     print(f&quot;  &#123;name&#125;: &#123;importance:.4f&#125;&quot;)# 也可以获取基于增益的特征重要性# print(&quot;\\n特征重要性 (CatBoost - Gain):&quot;)# importances_gain = catb_clf.get_feature_importance(prettified=True, importance_type=&#x27;Gain&#x27;)# print(importances_gain) # prettified=True 返回DataFrame\n1.7 CatBoost 的优点和缺点\n\n优点:\n\n强大的类别特征处理能力: 内置的有序目标编码和特征组合，无需复杂的预处理。\n缓解预测偏移: 有序提升算法提高了模型的鲁棒性和泛化能力。\n较少的参数调优: 通常使用默认参数就能获得不错的效果。\n预测速度快: 默认的对称树结构有助于加速预测。\n支持 GPU: 可以利用 GPU 加速训练。\n鲁棒性: 对异常值和缺失值不敏感（部分程度上）。\n\n\n缺点:\n\n训练速度可能不如 LightGBM (特别是Plain模式下): 有序提升增加了计算复杂度。\n内存消耗相对较高: 特别是 Ordered 模式和处理大量类别特征时，需要存储中间统计信息。\n默认对称树的限制: 在某些问题上可能限制了模型的灵活性，不如 Leaf-wise 策略能更快地逼近最优解。\n模型大小: 模型文件可能较大。\n需要显式指定类别特征: 必须通过 cat_features 参数告知 CatBoost 哪些列是类别特征。\n\n\n\n1.8 小结\nCatBoost 是一个专注于类别特征处理和缓解预测偏移的梯度提升框架。它通过独特的有序目标编码和有序提升算法，解决了传统方法在处理类别特征时遇到的问题。其默认的对称树结构提供了快速预测和一定的正则化效果。尽管在训练速度上可能不如 LightGBM，但其在处理类别特征时的便利性和由此带来的模型鲁棒性，使其成为许多实际应用中的有力选择，尤其当数据包含大量类别特征时。相比 XGBoost 和 LightGBM，CatBoost 的默认参数往往更“开箱即用”。\n","categories":["机器学习"],"tags":["python","决策树"]},{"title":"5G网络架构和组网部署","url":"/post/7570f815.html","content":"5G网络架构的演进趋势\n\n5G移动通信系统包括5GC（5G Core Network，5G核心网）和NG-RAN（Next Generation Radio Access Network，5G无线接入网）。\n5G核心网与5G接入网通过NG接口连接，实现控制面和用户面功能;\n5G无线接入网之间通过Xn接口连接，实现控制面和用户面功能。\n\n\n图中gNB为5G基站的名称，g代表generation，NB代表NodeB，so gNB is （next）generation NodeB。\n5G NR：New Radio，指5G的无线空口技术\nng-eNB：next generation eNodeB。在option4系列非独立组网架构下（NSA），4G基站必须升级支持eLTE，和5G核心网对接，这种升级后的4G基站就叫ng-eNB。\n\nEvolved Node B，即演进型Node B简称eNB，LTE中基站的名称，相比现有3G中的Node B，集成了部分RNC的功能，减少了通信时协议的层次。\neNB的功能包括：RRM功能；IP头压缩及用户数据流加密；UE附着时的MME选择；寻呼信息的调度传输；广播信息的调度传输；以及设置和提供eNB的测量等。\n\nNode B是3G移动基站的称呼，它是通过标准的Iub接口与RNC互连，通过Uu接口与UE进行通信，主要完成Uu接口物理层协议和Iub接口协议的处理，相当于一个无线收发信器。\n一般，Node B主要由控制子系统、传输子系统、射频子系统、中频/基带子系统、天馈子系统等部分组成。\n\n网元\nUPF：用户面功能，实现用户数据处理\nSMF/AMF：控制面功能，实现接入管理\n","categories":["旧日"],"tags":["基站","网络基础"]},{"title":"Excel函数使用与周报开发","url":"/post/excelfunc.html","content":"Excel 知识笔记\n本文主要介绍 Excel 中的一些高级知识和常用函数，重点涵盖数据透视表、常用函数（SUM、SUMIF、SUMIFS、SUBTOTAL、IF、VLOOKUP、XLOOKUP、INDEX、MATCH）以及周报开发的相关内容。\n\n1. 📊 数据透视表（Pivot Table）\n1.1. 数据透视表简介\n数据透视表是 Excel 中用于快速汇总、分析和展示大量数据的工具。它能够根据用户的需求动态调整数据的展示形式，例如按类别汇总、计算总和或平均值等。\n1.2. 创建数据透视表\n\n\n选择数据区域（确保数据有表头）。\n\n\n进入“插入”选项卡，点击“数据透视表”按钮。\n\n\n在弹出的对话框中，选择新建工作表或现有工作表。\n\n\n\n在数据透视表字段窗格中拖拽字段至行、列、数值和筛选区域。\n\n\n将文本型拖拽至行，数值型拖拽至值，可以实现sum+group by的效果\n\n\n\n双击字段可以对其进行重命名\n\n\n\n在字段、项目和集中可以插入自定义计算字段，输入完成后修改名称点击修改即可添加，添加完成后会出现在数据透视表字段中，勾选后即可添加到数据透视表中\n\n\n\n1.3. 数据透视表技巧\n\n\n字段筛选和排序：利用字段列表中的筛选按钮对数据进行快速筛选和排序。\n\n\n分组数据：右击行/列标签，选择“分组”，例如按日期分组按月或季度统计。\n\n\n数据格式化：右键单击数据区域，选择“值字段设置”，自定义数据汇总方式和数字格式。\n\n\n拖拽字段到对应区域：\n\n\n行/列：分组维度（时间等）\n\n\n值：计算指标（求和/计数/平均值/占比）\n\n\n筛选器：数据过滤，直接拖拽字段即可在数据透视表增加筛选项\n\n\n插入切片器：可视化联动筛选，点击不同的筛选项，数据透视表会自动更新表内数值，同时，切片器处于当前工作表外的工作表时点击，同样可以筛选当前表的内容，而筛选器只能在当前数据透视表内使用\n\n\n\n刷新数据：右键 → 刷新\n\n\n\n\n点击数据透视表，插入数据透视图，右键可以更改图表类型，可以插入多张数据透视图，图表也会根据切片器内容进行变换\n\n\n\n\n\n插入组合图可以将多种图表混合展示\n\n\n\n2.📈 进阶数据透视表技巧\n1. 计算字段与计算项\n\n\n计算字段：在值区域添加自定义公式\n分析 → 字段、项目和集 → 计算字段\n示例：利润率 = (销售额 - 成本)/销售额\n\n\n时间智能计算（结合Power Pivot）\nMTD销售额 := TOTALMTD(SUM(数据[销售额]), 数据[日期])\n\n\n2. 动态数据源\n\n超级表（Ctrl+T）\n将数据区域转换为表 → 透视表自动扩展范围\n连接Power Query\n通过ETL清洗后的数据自动更新透视表\n\n\n3. 常用函数详解\n2.1. SUM\n\n\n功能：对一组数值求和。\n\n\n语法： =SUM(number1, [number2], …)\n\n\n示例：\n=SUM(A1:A10)\n\n\n2.2. SUMIF\n\n\n功能：根据单一条件对范围内符合条件的数值求和。\n\n\n语法： =SUMIF(range, criteria, [sum_range])\n\n\n示例：\n=SUMIF(B1:B10, &quot;&gt;100&quot;, C1:C10)\n\n\n2.3. SUMIFS\n\n\n功能：根据多个条件对范围内符合条件的数值求和。\n\n\n语法： =SUMIFS(sum_range, criteria_range1, criteria1, [criteria_range2, criteria2], …)\n\n\nsumifs(要返回的值所在列, 查找条件1所在列, 查找限定条件1, 查找条件2所在列, 查找限定条件2……)\n\n\n示例：\n=SUMIFS(C1:C10, A1:A10, &quot;产品A&quot;, B1:B10, &quot;&gt;100&quot;)\n\n\n通常会设计计算月总和，环比等数值，因此需要计算上个月的这一天用来作为被减项用于筛选时间范围，Excel中，日期表示的是从1900.01.01到今天的天数，有以下几种方法可以计算上个月\n\nEDATE(start_date，months)返回一串日期，指示起始日期之前/之后的月数，如EDATE(A1，-1)表示这天的前一个月，7月31日会返回6月30日\nEOMONTH(start_date，months)返回一串日期，表示指定月数之前或之后的月份的最后一天（只针对月份操作）如EOMONTH(A1,-1)+1表示这个时间月份的第一天，比如8月（无论几号）会返回8月1日，不+1则会返回7月31日\nDATE(YEAR(A1),MONTH(A1),1)返回本月的第一天，最直观的形式，在date函数外再-1即可返回上月的最后一天\n\n\n\n2.4. SUBTOTAL\n\n\n功能：返回数据列表或数据库中的分类汇总。subtotal值会根据字段筛选而变化。\n\n\n语法： =SUBTOTAL(function_num, ref1, [ref2], …)\n\n\n常用 function_num：\n\n9：求和\n1：求平均值\n\n\n\n示例：\n=SUBTOTAL(9, A1:A10)\n\n\n2.5. IF\n\n\n功能：根据条件返回不同的结果，一般需要多层嵌套使用。\n\n\n语法： =IF(logical_test, value_if_true, value_if_false)\n\n\n示例：\n=IF(A1&gt;100, &quot;大于100&quot;, &quot;小于等于100&quot;)\n\n\n2.6. VLOOKUP\n\n\n功能：在数据区域的首列中搜索指定值，并返回该值所在行中指定列的内容。\n\n\n语法： =VLOOKUP(lookup_value, table_array, col_index_num, [range_lookup])\n\n\nVLOOKUP(查找值, 查找区域(要查找的必须在第一列), 返回第几列, 0)\n\n\n示例：\n=VLOOKUP(&quot;产品A&quot;, A1:D10, 3, FALSE)\n\n\n2.7. XLOOKUP\n\n\n功能：现代化的查找函数，能够向任意方向查找数据，取代 VLOOKUP/HLOOKUP。\n\n\n语法： =XLOOKUP(lookup_value, lookup_array, return_array, [if_not_found], [match_mode], [search_mode])\n\n\nXLOOKUP(查找值, 查找值所在列, 返回列, 未找到返回值(可选), 匹配模式(可选), 搜索模式(可选))\n\n\n示例：\n=XLOOKUP(&quot;产品A&quot;, A1:A10, C1:C10, &quot;未找到&quot;)\n\n\n2.8. INDEX 和 MATCH\n\n\nINDEX\n\n功能：返回数组中指定位置的值。\n语法： =INDEX(array, row_num, [column_num])\nINDEX(区域, 行号, 列号)：根据行号从某列中返回对应的值\n\n\n\nMATCH\n\n功能：返回指定值在一维数组中的相对位置。\n语法： =MATCH(lookup_value, lookup_array, [match_type])\nMATCH(查找值, 区域, 0)：在某行/列中查找指定的值，并返回其列/行号\n\n\n\n组合使用示例：\n=INDEX(C1:C10, MATCH(&quot;产品A&quot;, A1:A10, 0))index(数据区域,match(行查找顶,index数据区域的相对区域,0),match(列查找项,indexB数据区域的相对区域,0))\n\n\n同时使用xlookup和index+match实现的相同功能\n\n当函数不清晰时，可以先把要实现的函数单独写好，再复制进完整的表达式，同时可以配合ALT+ENTER在函数中换行避免混淆\n4.🔢 常用函数总结\n基础聚合\n\n\n\n函数\n语法\n说明\n周报应用示例\n\n\n\n\nSUM\n=SUM(range)\n基础求和\n=SUM(C2:C100) → 周总销售额\n\n\nSUMIF\n=SUMIF(range, criteria, [sum_range])\n单条件求和\n=SUMIF(A2:A100, &quot;华东&quot;, C2:C100) → 华东区销售总额\n\n\nSUMIFS\n=SUMIFS(sum_range, criteria_range1, criteria1, ...)\n多条件求和\n=SUMIFS(C2:C100, A2:A100, &quot;华东&quot;, B2:B100, &quot;&gt;2023-01-01&quot;)\n\n\nSUBTOTAL\n=SUBTOTAL(function_num, range)\n分类汇总（支持筛选）\n=SUBTOTAL(9, C2:C100) → 筛选后可见数据求和\n\n\n\n逻辑判断\n\n\n\nIF\n=IF(logical_test, [value_if_true], [value_if_false])\n\n\n\n\n示例\n=IF(C2&gt;10000, &quot;达标&quot;, &quot;未达标&quot;) → 销售目标判断\n\n\n\n查找匹配\n\n\n\n函数\n语法\n特点\n\n\n\n\nVLOOKUP\n=VLOOKUP(lookup_value, table_array, col_index_num, [range_lookup])\n纵向查找，需注意首列匹配和列索引号\n\n\nXLOOKUP\n=XLOOKUP(lookup_value, lookup_array, return_array, [if_not_found], [match_mode], [search_mode])\n支持双向查找、错误处理，更灵活\n\n\nINDEX+MATCH\n=INDEX(return_range, MATCH(lookup_value, lookup_range, 0))\n灵活组合，支持多维度查找\n\n\n\n\n\n\n\n\n5.🔍 高阶函数扩展\n动态数组函数（Excel 365+）\n\n\n\n函数\n作用\n周报应用\n\n\n\n\nFILTER\n条件筛选数据区域\n=FILTER(订单表, (销售额&gt;10000)*(区域=&quot;华东&quot;))\n\n\nSORT\n动态排序\n=SORT(UNIQUE(产品列表),,-1)\n\n\nUNIQUE\n去重提取\n=UNIQUE(销售大区)\n\n\n\n时间处理函数\n=WEEKNUM(A2)  // 返回日期所属周数（周报核心函数）=EDATE(A2,3)  // 计算3个月后的日期（常用于滚动预测）=TEXT(A2,&quot;YYYY-MMM&quot;)  // 日期转&quot;2023-Jul&quot;格式\n错误处理\n=IFERROR(VLOOKUP(...), &quot;未找到&quot;)  // 屏蔽#N/A错误=AGGREGATE(9,6,C2:C100)  // 忽略隐藏行和错误值的求和\n6.周报开发\n\n[ ] 掌握数据引用、公式填写和自动化拖拽等基本功能\n[ ] 理解数据美化、数据计算与逻辑结构的构建\n\n整体流程建议：\n\n先搭建框架： 建立好各区域结构及基本引用和公式\n再填数据： 在框架内填充各项指标数据和日期\n最后美化： 格式设置、风格统一等作为最后一步处理，避免中途美化造成数据修改的不便\n\n6.1 周报框架搭建\n1. 周报结构\n\n\n四大区域：\n\n标题（包含时间范围）\n目标看板（单独区域展示周报的目标内容，如累计值，环比，同比等，同时包含筛选器）\n结果指标（GMV、商家实收、到手率等）\n过程指标（曝光人数、转化率等）\n\n\n小看板区域（3、4）显示关键指标的概览，通常包括目标、区域、过程指标和结果指标。\n\n\n\n2. 基础设置\n\n\n标题：A2单元格填写2020年8月第二周\n\n\n日期列：\n\n输入起始日期（如在A13输入2020-08-10）\n后续日期使用公式=A13+1并拖动填充（需从第二个单元格开始拖动）向下拖动填充至 A19，生成 8 月 10 日 - 16 日的日期。\n\n\n\n\n星期列：\n\n右键单元格 → 设置单元格格式 → 数字 → 日期 → 选择 “周几” 格式（如 “周三”）\n\n\n\n\n日期联动：\n\n所有与日期相关的操作都建议使用引用方式，这样如果改变某个日期数据，其他依赖数据也会自动更新，极大地提升工作效率\n使用公式动态引用日期，避免手动修改（选中 A13:A19，根据需要设置为 “短日期” 格式，如=TEXT(A2, &quot;m月d日&quot;)）\n\n\n\n3.  指标体系构建\n\n结果指标（核心数据）\n\n\n\n\n指标\n说明\n计算公式\n\n\n\n\nGMV\n总成交额\n直接引用原数据或通过 SUMIFS 计算\n\n\n商家实收\n商家实际收入\n同上\n\n\n到手率\n实收 / GMV，反映收入转化率\n=商家实收/GMV\n\n\n有效订单\n有效订单数\n直接引用\n\n\n无效订单\n无效订单数\n直接引用\n\n\n客单价\nGMV / 有效订单，反映平均消费金额\n=GMV/有效订单\n\n\n\n\n过程指标（流量漏斗）\n\n\n\n\n指标\n说明\n计算公式\n\n\n\n\n曝光人数\n店铺曝光次数\n直接引用\n\n\n进店人数\n点击进入店铺的人数\n直接引用\n\n\n进店转化率\n进店人数 / 曝光人数，反映流量承接能力\n=进店人数/曝光人数\n\n\n下单人数\n实际下单的人数\n直接引用\n\n\n下单转化率\n下单人数 / 进店人数，反映转化效率\n=下单人数/进店人数\n\n\n营销占比\ncpc总费用 / GMV，反映投放效果\n=cpc总费用 / GMV\n\n\n\n\n6.2 核心函数与数据引用\n1. 数据验证（筛选器）\n\n\n步骤：\n\n选择目标单元格（如平台筛选器）\n数据 → 数据验证 → 允许“序列”\n输入选项：全部,美团,饿了么（英文逗号分隔）\n点击确定，生成下拉菜单\n\n\n\n作用：通过选择平台（全部 / 美团 / 饿了么），动态筛选对应数据。\n\n\n\n2. 动态条件求和（SUMIFS）\n\n\n配合筛选器的公式逻辑：\n=IF(  平台单元格=&quot;全部&quot;,  SUMIF(日期列, 当前日期, GMV列),  SUMIFS(GMV列, 日期列, 当前日期, 平台列, 平台单元格))\n\n\n绝对引用与相对引用：\n\n固定不变的列或单元格使用绝对引用，例如: H$5, A:A\n需要随拖拽变化的行或列使用相对引用，例如: A13\n混合引用用于锁定列或行，例如: A$13\n锁定区域：$A$2:$X$1000\n锁定条件单元格：$H$5（平台筛选器）\n\n\n\n3. 动态列引用（INDEX+MATCH）\n目标：让函数自动识别表头列，提高灵活性（如 GMV 列、商家实收列可动态切换），因此需要先写出日期列，平台列（筛选器），求和列的公式\n\n\n查找列名位置：\n使用MATCH 找到目标列在表头中的位置，再使用INDEX 根据列位置提取数据\n=INDEX(原表数据区域, 0, MATCH(列名标题, 表头行, 0))\n\n\n示例（日期列动态引用）：\n=INDEX($A:$X, 0, MATCH(&quot;日期&quot;, $A$1:$X$1, 0))\n\n\n示例（动态求和 GMV 列）：\n=SUMIFS(INDEX(数据区域, , MATCH(&quot;GMV&quot;, 表头, 0)), 日期列, 当天日期, 平台列, H5)\n\n\n拖拽填充：\n\n从第二个有公式的单元格开始拖拽，确保公式自动更新。\n如果直接从第一个单元格拖拽，可能会只是简单的序列填充，而没有公式。\n例如，若第一个单元格手动修改为“9”，则后续单元格不会自动更新公式中的逻辑。\n\n\n注意:\n使用INDEX和MATCH组合动态获取日期列、GMV列和平台列，替换SUMIF和SUMIFS公式中对应的部分\n替换后的公式会变得很长，要仔细核对括号和参数。\n\n6.3 关键指标计算\n1. 计算型指标\n\n\n到手率：=商家实收/GMV\n\n注意：结果设为百分比格式（保留 2 位小数）\n\n=IF($H$5=&quot;全部&quot;,SUMIF(INDEX(&#x27;拌客源数据1-8月&#x27;!$A:$X,0,MATCH($A$12,&#x27;拌客源数据1-8月&#x27;!$A$1:$X$1,0)),$A13,INDEX(&#x27;拌客源数据1-8月&#x27;!$A:$X,0,MATCH(C$12,&#x27;拌客源数据1-8月&#x27;!$A$1:$X$1,0))),SUMIFS(INDEX(&#x27;拌客源数据1-8月&#x27;!$A:$X,0,MATCH(C$12,&#x27;拌客源数据1-8月&#x27;!$A$1:$X$1,0)),INDEX(&#x27;拌客源数据1-8月&#x27;!$A:$X,0,MATCH($A$12,&#x27;拌客源数据1-8月&#x27;!$A$1:$X$1,0)),$A13,INDEX(&#x27;拌客源数据1-8月&#x27;!$A:$X,0,MATCH(&quot;平台i&quot;,&#x27;拌客源数据1-8月&#x27;!$A$1:$X$1,0)),$H$5))\n逻辑在2中已经陈述\n\n\n客单价：=GMV/有效订单\n\n\n转化率（进店 / 下单）：\n\n进店转化率：=进店人数/曝光人数\n下单转化率：=下单人数/进店人数\n\n\n\n营销占比：=CPC总费用 / GMV\n=IF($H$5=&quot;全部&quot;,SUMIF(INDEX(&#x27;拌客源数据1-8月&#x27;!$A:$X,0,MATCH($A$12,&#x27;拌客源数据1-8月&#x27;!$A$1:$X$1,0)),$A13,INDEX(&#x27;拌客源数据1-8月&#x27;!$A:$X,0,MATCH(&quot;cpc总费用&quot;,&#x27;拌客源数据1-8月&#x27;!$A$1:$X$1,0))),SUMIFS(INDEX(&#x27;拌客源数据1-8月&#x27;!$A:$X,0,MATCH(&quot;cpc总费用&quot;,&#x27;拌客源数据1-8月&#x27;!$A$1:$X$1,0)),INDEX(&#x27;拌客源数据1-8月&#x27;!$A:$X,0,MATCH($A$12,&#x27;拌客源数据1-8月&#x27;!$A$1:$X$1,0)),$A13,INDEX(&#x27;拌客源数据1-8月&#x27;!$A:$X,0,MATCH(&quot;平台i&quot;,&#x27;拌客源数据1-8月&#x27;!$A$1:$X$1,0)),$H$5))/$C13\n\n\n2. 周累计与周环比（时间维度分析）\n\n\n周累计（当周总和）\n\n方法：对当周 7 天的数据求和（使用SUM函数或快捷键Alt+=）\n例：曝光人数周累计：=SUM(H13:H19)（H13-H19 为每天曝光人数）\n\n\n\n周环比（与上周对比）\n\n公式：=(本周数据/上周数据)-1（结果为百分比，正增长为绿色，负增长为红色）\n将日期范围向前偏移 7 天（如本周第一天为 A13，上周第一天为A13-7）\n上周GMV数据公式：\n\n=SUMIFS(  数值列,  日期列, &quot;&gt;=&quot;&amp;起始日期-7,  日期列, &quot;&lt;=&quot;&amp;结束日期-7(或&lt;当前日期),  平台列, 平台筛选器)\n\n\n例：有效订单周环比\n=A9/IF($H$5=&quot;全部&quot;,SUMIFS(INDEX(&#x27;拌客源数据1-8月&#x27;!$A:$X,0,MATCH(F$12,&#x27;拌客源数据1-8月&#x27;!$A$1:$X$1,0)),INDEX(&#x27;拌客源数据1-8月&#x27;!$A:$X,0,MATCH($A$12,&#x27;拌客源数据1-8月&#x27;!$A$1:$X$1,0)),&quot;&gt;=&quot;&amp;$A13-7,INDEX(&#x27;拌客源数据1-8月&#x27;!$A:$X,0,MATCH($A$12,&#x27;拌客源数据1-8月&#x27;!$A$1:$X$1,0)),&quot;&lt;&quot;&amp;$A13),SUMIFS(INDEX(&#x27;拌客源数据1-8月&#x27;!$A:$X,0,MATCH(F$12,&#x27;拌客源数据1-8月&#x27;!$A$1:$X$1,0)),INDEX(&#x27;拌客源数据1-8月&#x27;!$A:$X,0,MATCH($A$12,&#x27;拌客源数据1-8月&#x27;!$A$1:$X$1,0)),&quot;&gt;=&quot;&amp;$A13-7,INDEX(&#x27;拌客源数据1-8月&#x27;!$A:$X,0,MATCH($A$12,&#x27;拌客源数据1-8月&#x27;!$A$1:$X$1,0)),&quot;&lt;&quot;&amp;$A13,INDEX(&#x27;拌客源数据1-8月&#x27;!$A:$X,0,MATCH(&quot;平台i&quot;,&#x27;拌客源数据1-8月&#x27;!$A$1:$X$1,0)),$H$5))-1\n其中A9为本周有效订单\n3. 业务进度计算\n\n\n当月GMV总和：日期条件为大于等于本月第一天（在SUMIFS中介绍了3种实现方式）\n=SUMIFS(GMV列, 日期列, &quot;&gt;=&quot;&amp;EOMONTH(TODAY(),-1)+1)\n\n\n进度公式：=当月累计GMV/目标值目标值的设置使用IF嵌套，将在6.5中提到\n=IF($H$5=&quot;全部&quot;,SUMIFS(INDEX(&#x27;拌客源数据1-8月&#x27;!$A:$X,0,MATCH(C$12,&#x27;拌客源数据1-8月&#x27;!$A$1:$X$1,0)),INDEX(&#x27;拌客源数据1-8月&#x27;!$A:$X,0,MATCH($A$12,&#x27;拌客源数据1-8月&#x27;!$A$1:$X$1,0)),&quot;&gt;=&quot;&amp;EOMONTH(A13,-1)+1,INDEX(&#x27;拌客源数据1-8月&#x27;!$A:$X,0,MATCH($A$12,&#x27;拌客源数据1-8月&#x27;!$A$1:$X$1,0)),&quot;&lt;=&quot;&amp;$A19),SUMIFS(INDEX(&#x27;拌客源数据1-8月&#x27;!$A:$X,0,MATCH(C$12,&#x27;拌客源数据1-8月&#x27;!$A$1:$X$1,0)),INDEX(&#x27;拌客源数据1-8月&#x27;!$A:$X,0,MATCH($A$12,&#x27;拌客源数据1-8月&#x27;!$A$1:$X$1,0)),&quot;&gt;=&quot;&amp;DATE(YEAR(A13),MONTH(A13),1),INDEX(&#x27;拌客源数据1-8月&#x27;!$A:$X,0,MATCH($A$12,&#x27;拌客源数据1-8月&#x27;!$A$1:$X$1,0)),&quot;&lt;=&quot;&amp;$A19,INDEX(&#x27;拌客源数据1-8月&#x27;!$A:$X,0,MATCH(&quot;平台i&quot;,&#x27;拌客源数据1-8月&#x27;!$A$1:$X$1,0)),$H$5))/$H$8\n逻辑：判断筛选器是否为全部，是则使用sumifs计算要求的值，条件设置大于本月第一天，小于本周的最后一天，否则多使用sumifs增加一个判断平台的条件，其余相同。\n\n\n6.4 可视化与格式优化\n1. 数值格式\n\n\n百分比：选中转化率、到手率等单元格，按Ctrl+Shift+%。\n\n\n保留小数：右键→设置单元格格式→数值→小数位数（如 2 位）/直接在开始菜单点击。\n\n\n\n2. 条件格式\n\n\n数据条：可视化进度（如业务进度）\n操作：选中单元格 →【开始】→【条件格式】→【新建规则】→【基于各自值设置所有单元格的格式】→【格式样式：数据条】→【选择类型】\n如：选中数值区域 → 条件格式 → 数据条 → 类型选择数字 → 最大值设置为1 → 设置颜色 → 渐变填充\n\n\n\n颜色标记：标记正负值（如周环比）\n操作：新建规则 → 只为包含以下内容的单元格设置格式 → “单元格值&gt; 0” 设为绿色，“≤0” 设为红色（设置两次）。\n\n\n\n图标集：显示趋势（上升 / 下降箭头）\n操作：条件格式 → 新建规则 → 基于各自值设置所有单元格的格式 → 图标集 → 选择 “三向箭头”或自定义中间值（0）为横线 → 分别设置&gt;0, =0, &lt;0的图标 → 类型设置为数字\n\n大于0：绿色字体 + ↑图标\n等于0：红色字体 + -图标\n小于0：红色字体 + ↓图标\n\n\n\n\n低于GMV平均值标记：(注意混合引用)\n\n标记低于周平均值的GMV数值\n选中结果指标区域 →  条件格式 →  新建规则  →  使用公式确定要设置格式的单元格\n\n=$C13 &lt; AVERAGE($C$13:$C$19)\n\n格式 →  下划线 →  加粗\n\n\n\n\n格式刷\n\n单击格式刷：复制格式到单个单元格\n双击格式刷：复制格式到多个单元格\n\n点击管理自定义规则即可查看、修改设置的规则\n\n\n\n3. 迷你图制作\n\n\n步骤：\n\n\n选中数据区域（如一周的曝光人数）\n\n\n【插入】 → 【迷你图 】→ 折线图\n\n\n\n指定放置单元格，设置标记（显示数据点）和高点颜色\n\n\n\n\n\n4. 美化技巧\n\n\n格式优先：先确保数据计算正确，在数据与公式全部建立后，最后进行整体的美化设计\n\n\n**隐藏网格线：**视图 → 取消勾选“网格线”\n\n\n合并单元格：合并标题单元格并居中，标题和列名加粗、放大\n\n\n**添加主题色：**给结果指标和过程指标的表头（列名）添加主题色\n\n\n\n边框与字体：给小看板、指标表格添加外边框，统一字体（推荐微软雅黑），调整字体、对齐方式等\n\n\n\n6.5 目标看板与业务进度\n1. 目标设置\n\n按平台设定 GMV 目标（如全部 = 20 万，美团 = 15 万，饿了么 = 5 万）。\n示例：在 H8 单元格输入公式\n=IF(H5=&quot;全部&quot;,200000,IF(H5=&quot;美团&quot;,150000,50000))。\n\n2. 业务进度\n\n\n公式：=截至目前GMV/目标（如 =SUMIFS(GMV列, 日期列, &quot;&gt;=&quot;&amp;DATE(YEAR(A13),MONTH(A13),1))表示大于当月第一天）。\n\n已在6.3.3中做出陈述\n\n\n\n进度条：通过条件格式→数据条可视化，最大值设为 1（100%）。\n\n\n\n6.6 自动化维护\n\n日期联动：所有日期、星期、平台筛选均通过引用和公式实现，修改A13单元格日期（初始设置日期的单元格）后，所有关联数据自动更新\n数据扩展：新增数据时，调整公式引用范围（如$A:$X改为$A:$Z）\n模板复用：保存为模板文件（.xltx），每周复制使用\n\n\n提示\n\n所有公式中的区域引用需根据实际表格调整（如A:X为示例列范围）\n建议逐步测试每个函数模块，使用F9键分解验证公式逻辑\n格式美化可最后进行，避免干扰数据处理\n\n\n\n\n最终效果\n\n\n\n","categories":["数据分析"],"tags":["数据操作","可视化","看板与报表"]},{"title":"AI是“万知之知”吗？","url":"/post/is-AI-Omniscience.html","content":"看了罗翔老师的最新视频，从苏格拉底哲学的角度反思AI的“认知边界”，我们会发现一个有趣的悖论——AI越是“无所不知”（基于数据堆叠的知识库）时，越凸显出它根本不是“万知之知”（Omniscience）。它揭示了机器智能与人类智慧的本质差异，也印证了苏格拉底“自知无知”的永恒价值。\n\n一、知识的边界\n罗翔老师指出，《卡尔米德篇》中苏格拉底与三位年轻人的对话层层推进，从追问“名字是否包含美德”到质疑“关于知识的知识是否存在”，最终指向一个困境：\n\nAI看似掌握“万知之知”，实则被困在数据洞穴中：它通过模式匹配“学习”的《理想国》，永远无法理解洞穴寓言背后的哲学叩问——“我们是否也活在更大的洞穴中？”。\n正如苏格拉底通过辩证法揭示“名字的美德不等于美德本身”，AI对“正义”“善”的理解仅停留在文本表层，无法追问“正义的本质是否需要超越法律条文”，这与文科教育培养的批判性思维形成鲜明对比。\n\n\nAI像《卡尔米德》中自信能定义“节制”的年轻人，用精准词汇掩盖认知的虚空；而文科教育教会我们像苏格拉底一样，承认“知道何为节制远比说出节制的定义更难”。\n\n\n二、“知无知”\n苏格拉底通过《申辩篇》中“我唯一知道的就是我一无所知”，颠覆了古希腊人对“智慧”的朴素认知。他否定智者派（Sophists）宣称的“知识权威”，强调：\n\n认知的谦逊：承认有限性是求知的前提；\n对话的开放性：真理需通过辩证过程不断逼近；\n无知的认知价值：自省与质疑比确定性答案更重要。\n\n这种智慧观本质上是一种元认知能力——对自身知识状态的监控与批判。在《美诺篇》中，苏格拉底通过助产术（Maieutics）引导奴隶男孩发现几何定理，揭示真正的知识需要通过内在觉醒而非外部灌输。\n\n三、AI的“知识幻觉”与认知盲区\n现代AI（如大语言模型）的“知识”具有三个根本局限，苏格拉底在《卡尔米德》中强调的“明智”（σωφροσύνη），恰是AI最难企及的智慧：\n1. 训练数据的“已知黑箱”\n\nAI的知识完全来自人类输入的文本数据，其“知识库”本质是人类已有认知的统计压缩（如维基百科、学术论文的集合）。\n例：当AI回答量子物理问题时，它实际上是在重复训练数据中出现的表述模式，而非理解波函数坍缩的哲学意义。\n苏格拉底式诘问：如果AI不能超越数据提出根本性问题（如“芝诺悖论是否真的被数学解决？”），它的知识只是“正确的话语”而非“真理的探求”。\n\n2. 无法意识“无知”状态\n\nAI没有元认知能力，无法像苏格拉底那样说出“我不知道”。它对错误答案的自信程度与正确答案无异，甚至会编造合理话语掩盖无知。\n讽刺实验：当询问LLM“如何用五维几何体解决黎曼假设？”时，它会构造出符合语法但逻辑牵强的伪推理——这恰好印证了苏格拉底的警言：“自以为知道实际上不知道的事，是灵魂的毒药。”\n\n3. 辩证思维的缺席\n\n苏格拉底在《理想国》中用洞穴比喻说明认知需要挣脱枷锁、转身看见火光乃至走出洞穴。而AI始终被困在由人类预设的“数据洞穴”中：\n\n它能复述柏拉图和康德对正义的定义，但无法像苏格拉底那样追问：“我们为何需要正义？”\n它可以解析康德伦理学公式，但无法像苏格拉底在《格里底亚篇》中追问：“如果‘善’是知识，为何人类依旧作恶？”。\n它能生成关于存在主义的文本，却无法像克尔凯郭尔那样质问：“存在的本质是焦虑”是否正确。\n\n\n文科教育提供的“意义之网”（如对《安提戈涅》悲剧冲突的解读），是AI无法模拟的人性共鸣。\n\n\n四、AI时代的认知伦理\n苏格拉底的智慧观可以为AI伦理提供三个视角：\n\n\n\n视角\n苏格拉底主张\n我们应该认识到的AI\n\n\n\n\n知识观\n“知的边界在于意识到非知”（Plato, Philebus）\n需警惕AI制造“知识幻觉”：用户可能误将模型输出等价于真理\n\n\n教学法\n“教育非灌输，而是点燃火焰”（Diogenes Laertius）\n应将AI定位为认知工具（如助产术中的问题引导者），而非真理代言人\n\n\n伦理学\n“未经省察的人生不值得过”（Apology）\n需求人类保持对AI辅助认知的批判性反思，避免思维懒惰化\n\n\n\n\n“苏格拉底之镜”\nAI的局限性恰恰反衬出人类智慧的不可替代性。当机器擅长提供“标准答案”时，人类比任何时候都更需要像苏格拉底那样提问：\n\n“为什么这个问题的答案可能存在矛盾？”\n“数据背后的假设是否应该被质疑？”\n“这个模型无法处理的领域，恰恰是我们认知的突破点？”\n\n正如海德格尔所言：“技术的本质不是机器，而是对存在的解蔽方式。”在这个意义上，AI不是“万知之知”的威胁，而是帮助人类重拾“知无知”这一古老智慧的现代镜子。\n“关于知识的知识是否可能？”\n我想大家都明白现阶段的LLM无法成为‘万知之知’，因为它从未真正“思考”，只是在复现人类思维的碎片，但它教会我们以怀疑为刃，用提问刺破认知的牢笼，用自知之明对抗技术的傲慢。\n在AI加速解构人文价值的今天，保持对数据偏见的警惕、对权力话语的解构、对价值空心化的抵抗，才是对知识狂妄的最有力回应。\n","categories":["日常"],"tags":["随笔","AI"]},{"title":"Halo创建","url":"/post/halocreate.html","content":"本文将对VPS使用Docker容器搭建Halo博客的一般方式作简述（小白的逐步操作），大致分为\n\n安装Docker引擎\n创建容器\n拉取Halo镜像\n安装nginx并配置反向代理\n开启SSL\n创建，美化博客页面\n\n搭建Halo博客需要VPS服务器一台（最低配置要求1C1G，docker本身占用就接近400M的Ram，至于核心一般来说1核就够了），域名1个，搭建完就吃灰的决心。\n如果购买的是虚拟化方式为Openvz的服务器请先前往运营商处开启tun，然后在终端输入 cat /dev/net/tun，显示in bad state或者Finalshell显示文件处于错误的描述阶段就表示开启成功了，不过应该没人买Ovz的机器，除了像我这样从Hax白嫖的\n首先使用Finalshell/Xshell或者命令行（ssh root@）连接上购买服务器的IP地址\n依赖安装与配置\n安装Docker引擎\n参考：Docker官方文档\n\n常见系统的安装都有，本文只介绍最简单的安装过程，可选步骤请移步官方文档\n1.安装utils包\nyum install -y yum-utils\n2.设置仓库\nyum-config-manager \\    --add-repo \\    https://download.docker.com/linux/centos/docker-ce.repo\n3.安装docker引擎\nyum install docker-ce docker-ce-cli containerd.io\n4.启动docker\nsystemctl start docker\nsystemctl enable docker.service//设置docker开机自启动\ndocker自启动的设置可选择不执行，博主的服务器在执行自启动后nginx会出现异常导致网站无法正常访问，如果执行后无法使用域名访问博客可以关闭自启动（enable改为disable)reboot可解决\n*5.拉取测试镜像(可选)\ndocker run hello-world//拉取hello-world测试docker是否正常运行，一般都是正常，可以不用操作\n安装过程出现的询问操作输入y即可，第三步安装引擎时有个指纹校对可以对比一下，一般都是吻合的\n060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35\n使用 Docker 部署 Halo\n参考：官方文档\n安装完毕就可以使用docker部署halo了，按照官方文档操作\n1.创建工作目录\nmkdir ~/.halo &amp;&amp; cd ~/.halo\n2.下载示例配置文件到工作目录\nwget https://dl.halo.run/config/application-template.yaml -O ./application.yaml\n*3.编辑配置文件，配置数据库或者端口等，如需配置请参考官方文档(可选)\nvim application.yaml\n4.拉取最新的 Halo 镜像\ndocker pull halohub/halo:1.4.17//截至本文发布halo的最新版本为1.4.17，访客可自行前往官网查询最新版本或者将版本号改为latest\n纯IPv6机器请先修改DNS否则无法解析echo &quot;nameserver 2a00:1098:2b::1&quot; &gt; /etc/resolv.conf\n5.创建容器\ndocker run -it -d --name halo -p 8090:8090 -v ~/.halo:/root/.halo --restart=unless-stopped halohub/halo:1.4.17//注意版本号\n对创建容器的部分代码作解释\n第一个8090表示本地的端口映射到第二个halo上的8090端口，第一个可以更改为任意没有被占用的端口，第二个不可更改。更改端口可以在一台服务器上安装多个halo博客，阿里云/腾讯云等开启了安全组的云服务器商请先在服务商控制面板处开启端口放行80，443等常用端口以及halo映射的端口\n-it： 开启输入功能并连接伪终端-d： 后台运行容器-name： 为容器指定一个名称-p： 端口映射，格式为 主机(宿主)端口:容器端口 ，可在 application.yaml 配置。-v： 工作目录映射。形式为：-v 宿主机路径:/root/.halo，后者不能修改。-restart： 建议设置为 unless-stopped，在 Docker 启动的时候自动启动 Halo 容器。其它设置： no\t       不自动重启容器. (默认value) on-failure    容器发生error而退出(容器退出状态不为0)重启容器 unless-stopped \t在容器已经stop掉或Docker stoped/restarted的时候才重启容器 always     在容器已经stop掉或Docker stoped/restarted的时候才重启容器完成后等待片刻（finalshell中cpu占有降低时），halo博客就部署完成了，此时就可以使用http://ip:端口号 的形式即可看到安装引导界面，不过建议配置好反向代理后再初始化博客。\n安装nginx并配置反向代理\n源码安装\n方法1使用的是源码安装nginx，目录/etc/nginx如果有需要LNMP套件的可以使用以下代码安装\nwget http://soft.vpser.net/lnmp/lnmp1.8.tar.gz -cO lnmp1.8.tar.gz &amp;&amp; tar zxf lnmp1.8.tar.gz &amp;&amp; cd lnmp1.8 &amp;&amp; ./install.sh lnmp\n安装目录Nginx 目录: /usr/local/nginx/MySQL 目录 : /usr/local/mysql/MySQL数据库所在目录：/usr/local/mysql/var/PHP目录 : /usr/local/php/默认网站目录 : /home/wwwroot/default/Nginx日志目录：/home/wwwlogs/LNMP软件配置文件路径Nginx主配置(默认虚拟主机)文件：/usr/local/nginx/conf/nginx.conf添加的虚拟主机配置文件：/usr/local/nginx/conf/vhost/域名.confMySQL配置文件：/etc/my.cnfPHP配置文件：/usr/local/php/etc/php.iniphp-fpm配置文件：/usr/local/php/etc/php-fpm.conf\\#重启服务让配置生效lnmp &#123;nginx|mysql|mariadb|php-fpm|pureftpd&#125; restart\\#或者直接重启LNMP：lnmp restart\n1.添加 Nginx 源\nrpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n2.安装 Nginx（CentOS）\nyum install -y nginx\n3.启动 Nginx\nsystemctl start nginx.service\n4.设置开机自启 Nginx\nsystemctl enable nginx.service\nUbuntu系统nginx安装方式\nsudo updatesudo apt install nginx\n5.下载 Halo 官方的 Nginx 配置模板到本地\ncurl -o /etc/nginx/conf.d/halo.conf --create-dirs https://dl.halo.run/config/nginx.conf\nnginx若出现启动失败，通常是80端口被占用，查看与80相关的端口\nnetstat -lnp|grep 80\\# 命令无法使用请先输入下面代码安装yum -y install net-tools\n在找到80端口的占用后杀死对应的进程号，如果仍然启动失败可尝试多杀几次\nkill -9 进程号systemctl restart nginx//重启nginx\n如果使用yum拉取镜像安装nginx，nginx一般安装在/usr/local/nginx/conf/nginx.conf文件夹中，宝塔面板则是在/www/server/panel/vhost/nginx/conf/nginx.conf使用下面的代码无法直接配置nginx，而是会创建一个新的目录存放halo.conf，需要建立软连接（请自行搜索方法）或在nginx安装目录中找到nginx.conf，在http{}中添加\ninclude /etc/nginx/conf.d/halo.conf\n或者其他自定义的路径，保证正确即可\n6.使用vi/vim编辑halo.conf应用nginx配置，或者使用finalshell等其他工具对文件进行编辑\nvim /etc/nginx/conf.d/halo.conf//如果vim提示命令不存在可使用vi,配置完毕后按下esc键输入 :wq 退出并保存\n模板文件打开后格式为\nupstream halo &#123;  server 127.0.0.1:8090;//更改为你的服务器ip以及设置的端口&#125;server &#123;  listen 80;  listen [::]:80;  server_name xxx.xx;//你的域名  client_max_body_size 1024m;  location / &#123;    proxy_pass http://halo;    proxy_set_header HOST $host;    proxy_set_header X-Forwarded-Proto $scheme;    proxy_set_header X-Real-IP $remote_addr;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  &#125;&#125;\n配置完后使用nginx检查是否含有错误\nnginx -t\n出现successfully时，表示配置文件无误，重新载入nginx即可使用域名访问博客\nnginx -s reload\n至此，源码安装的方式部署完成。\n使用宝塔面板安装nginx\n方法2是使用宝塔帮助安装web服务器，优点是可视化，操作简单，首先安装宝塔面板\nyum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh\n期间出现的询问都输入y\n安装完毕后会提示默认端口8888和用户名密码，没有弹出的话输入bt default\n外网面板地址: http://*****:****/*****内网面板地址: http://***.**.**.**:****/******以下仅为初始默认账户密码，若无法登录请执行bt命令重置账户/密码登录username: ******password: ****\n此时访问外网面板登录会提示绑定宝塔账号，博主个人不太接受这种强制绑定的方式（不介意的跳过下面这步），所以在网上搜集了解除的方法。目前宝塔面板最新版为7.8，暂时还没有破解方式，现在的思路是降级到7.7。\n最新消息，使用破解版宝塔面板7.8的服务器都将被查封，并且拉黑IP，即该服务器将永远无法安装宝塔面板，读者请量力而行，7.7暂时安全\ncurl -sSO https://raw.githubusercontent.com/zhucaidan/btpanel-v7.7.0/main/install/install_panel.sh &amp;&amp; bash install_panel.shsed -i &quot;s|bind_user == &#x27;True&#x27;|bind_user == &#x27;XXXX&#x27;|&quot;/www/server/panel/BTPanel/static/js/index.jsrm -f /www/server/panel/data/bind.pl\n此时访问已不再提示登录，并在首页弹出Linux套件安装，选择LNMP推荐的（nginx-php-mysql-apache）一键安装即可，经过漫长的等待（约20-30min）依赖环境都安装完毕。\n点击网站添加站点，填上主域名（不可泛解析），次域名（选填），网站备注\n\n然后点击设置，选择反向代理，根据面板的提示键入信息即可完成反向代理\n\n或者选择配置文件，按照方法1中配置的方式，在配置文件49-61使用ctrl+/注释掉，然后在62行{}添加相应的信息（使用面板的反向代理只能反代一个halo博客，添加新的反向代理会覆盖之前的配置–貌似）\n使用宝塔辅助nginx反代配置完成\n location / &#123;  proxy_pass http://127.0.0.1:8090/;  rewrite ^/(.*)$ /$1 break;  proxy_redirect off;  proxy_set_header Host $host;  proxy_set_header X-Forwarded-Proto $scheme;  proxy_set_header X-Real-IP $remote_addr;  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  proxy_set_header Upgrade-Insecure-Requests 1;  proxy_set_header X-Forwarded-Proto https;&#125;\n开启SSL，启用https访问\n配置完反向代理后，已经可以使用域名访问博客，但浏览器显示的是网站不安全，因为没有受信任的证书，此时是http明文与主机传输数据，需要申请ssl证书上传并验证通过才能启用https。\nssl证书可以在阿里云、腾讯云，Cloudflare，acme.sh、certbot申请，\n其中阿里云和腾讯云免费申请的是1年有效的亚洲诚信颁发的证书，Cloudflare免费申请的是一年有效的边缘证书或最高15年有效的cf自签名证书，acme.sh和certbot免费申请的是3个月Let’s Encrypt证书（可自动续期，但可能失败），有需要也可以在这些平台购买付费证书，安全性更高，并且有专人帮你安装（价格不菲）\n如果上一步使用的是宝塔面板辅助安装的，可以直接在网站页面点击ssl部署，选中域名一键申请，宝塔就会自动申请证书并帮你完成部署，再点击右上角的强制https就实现了https访问，此时网站已变成受信任状态（如果在DNS服务商处已经开启了强制https请不要点击，会导致重定向次数过多无法正常访问），或者已经拥有其他平台的证书，点击其他证书，把公钥和私钥内容粘贴进去即可\n\n阿里云和腾讯云请在控制台搜索ssl申请证书，关于其他平台证书的申请方式请自行搜索，本文只介绍证书的导入和安装，其中cf的自签名证书只会显示一次，没有保存就找不到了，证书的格式为.pem，腾讯云的为.crt（貌似也有pem），密钥格式为.key\n证书下载到本地后，使用FTP上传到服务器（不知道怎么使用的自行搜索）或者使用Finalshell进行上传，上传完成后打开之前配置的halo.conf，启用ssl，打开443端口监听\nupstream halo &#123;  server 127.0.0.1:8090;&#125;server &#123;  listen 80;  listen [::]:80;  listen 443 ssl;  server_name ****.**;//多个域名请加 , 后继续输入  client_max_body_size 1024m;ssl_certificate /crt/certificate.pem;//证书上传的存放路径ssl_certificate_key /crt/privatekey.key;//密钥上传的存放路径ssl_session_timeout 5m;ssl_protocols TLSv1 TLSv1.1 TLSv1.2;//启用的tls版本，建议不要开启tls v1，存在漏洞，最新版本为v1.3ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;//加密方式ssl_prefer_server_ciphers on;//开启加密  location / &#123;     proxy_pass http://halo;     proxy_set_header HOST $host;     proxy_set_header X-Forwarded-Proto $scheme;     proxy_set_header X-Real-IP $remote_addr;     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  &#125;&#125;\n检查规则，重新加载nginx\nnginx -tnginx -s reload\n检查ssl是否正常开启，出现ssl xxx的就代表开启成功\necho|openssl s_client -connect 127.0.0.1:443 -servername sslconfigure.certqa.cn 2&gt;/dev/null\n如果没有请检查防火墙是否拦截，宝塔面板用户请进入安全页面放行443端口\nfirewall-cmd --state//检查防火墙开启状态firewall-cmd –zone=public –add-port=443/tcp –permanent//放行443端口\n完成以上步骤，就可以使用https访问博客了\n*IPV6 Only的服务器如何能让IPV4 Only的网络访问\n一些廉价服务器只提供IPV6的公网地址（IPV4公网地址太少了得加钱），导致只有IPV4网络的用户无法访问。而IPV 4 to 6的隧道部署又相对较为繁琐，这里博主采用cf的CDN代理来解决\n\n打开cloudflare，添加站点,将cf提供的两个地址填入域名注册商的名称服务器，等待生效后打开添加的站点，点击DNS输入IP地址以及解析形式，小云朵代理状态选择开启\n\n打开始终使用https（宝塔面板的记得关闭），最低tls版本选择1.1，打开随机加密，此时只有IPV4的网络经过cf代理也能成功访问博客（貌似不上传证书和配置ssl，只打开代理也能实现https访问，感兴趣的读者可自行尝试），但服务器仍然无法访问仅IPV4的资源，需要IPV 6 to 4隧道/NAT地址转换或者安装warp以实现，这里不再赘述。\n博客美化\n使用 域名/admin 访问博客，完成初始化操作并登录后台\n\n\n打开面板后可以看到各种博客数据，非常简洁，而且面板样式也很简约但又没有过分固化，个人是挺喜欢的，非常适合只想安心写博客的朋友，不过默认的网站外观不太好看，可以前往Halo官方的主题仓库选择自己喜欢的外观，点击面板的外观页面，点击安装选择安装包安装或远程安装（推荐安装包安装），~~本人使用的是大佬移植Wordpress的Sakura主题，如有使用该主题的，~~博客外观设置可以参考LIlGG的操作指南\n\n外观设置完毕后可以在页面栏选择新建页面用于在博客内分栏展示，在外观的菜单栏中可以添加独立页面的小图标，Sakura主题支持Font Awesome图标，各图标样式可以点击查看和Font Awesome v6，另外可以对图标增加的动态效果代码可以查看。具体使用方法实示例\nfa fa-bank faa-tada//银行图标，放大旋转特效\n\n然后点击用户栏，设置个人资料包括用户名，昵称，邮箱，以及更改密码都在这个页面\n最后点击系统栏-博客设置添加网站的logo和favicon（浏览器标签页图标）还有页脚信息，可用于添加统计代码（访客数量，网站运行时间等，但貌似只能添加一个）如有需要添加api服务的可以点击高级选项进行设置\n自建的一言api\n\n仍然有改造主题需要的可以点击外观栏的主题编辑进行修改]16\n一般对footer和header进行更改即可，具体方式和更多有趣的内容还请自行探索\n以上就是halo博客从创建到美化的全过程了，本人小白，折腾这个博客也是花了不少时间，故理清流程后将其记录，如本文有错漏之处，还请大佬可以在评论区留言谢谢!\n","categories":["旧日"],"tags":["blog","nginx","vps"]},{"title":"LeetCode每日一题2025.04.11","url":"/post/countSymmetricIntegers.html","content":"2843. 统计对称整数的数目 E\n给你两个正整数 low 和 high 。\n对于一个由 2 * n 位数字组成的整数 x ，如果其前 n 位数字之和与后 n 位数字之和相等，则认为这个数字是一个对称整数。\n返回在 [low, high] 范围内的 对称整数的数目 。\n示例 1：\n输入：low = 1, high = 100输出：9解释：在 1 到 100 范围内共有 9 个对称整数：11、22、33、44、55、66、77、88 和 99 。\n示例 2：\n输入：low = 1200, high = 1230输出：4解释：在 1200 到 1230 范围内共有 4 个对称整数：1203、1212、1221 和 1230 。\n\n提示：1&lt;=low&lt;=high&lt;=1041 &lt;= low &lt;= high &lt;= 10^41&lt;=low&lt;=high&lt;=104\n\n题目需要找出在给定范围内满足特定数字对称条件的所有整数的数量。\n\n检查位数是否为偶数：只有当数字的位数是偶数时才有可能成为对称整数，否则直接跳过。\n分割数字前后半部分：对于一个 2*n 位数字，将该数字转换为字符串，然后将其前 n 位数字和后 n 位数字分别累加求和，判断两部分是否相等。两者之和相等，则该数字符合条件。\n遍历范围： low 和 high 的范围较小（最高 10410^4104），可以直接遍历 [low, high] 区间内的所有数字，对符合条件的数字进行计数。\n\n代码如下：\nclass Solution:    def countSymmetricIntegers(self, low: int, high: int) -&gt; int:        count = 0        for num in range(low, high + 1):            num_str = str(num)            # 数字必须为偶数位，才能分成两部分比较            if len(num_str) % 2 == 0:                half = len(num_str) // 2                # 将前一半和后一半的各个数字相加                left_sum = sum(int(digit) for digit in num_str[:half])                right_sum = sum(int(digit) for digit in num_str[half:])                if left_sum == right_sum:                    count += 1        return count\n\n首先通过 str(num) 将整数转换为字符串，以便判断数字的位数是否为偶数。\n如果是偶数位，则将字符串分为前后两部分，分别计算各自数字的和。\n如果两部分的和相等，则计数器 count 累加。\n\n通过遍历 [𝑙𝑜𝑤,ℎ𝑖𝑔ℎ]范围内的每个整数，对于每个数字：\n\n将数字转换为字符串：复杂度 O(d)O(d)O(d)（其中 ddd 为数字的位数）。\n对前半部分和后半部分求和，各需要 O(d/2)O(d/2)O(d/2)，加起来也是 O(d)O(d)O(d)。\n\n总体时间复杂度大致为 O(N×d)O(N×d)O(N×d)，其中 N=high−low+1N=high−low+1N=high−low+1，ddd通常为常数\n","categories":["算法"],"tags":["Algorithm","暴力搜索","数位处理","字符串处理","简单"]},{"title":"LeetCode每日一题2025-04-12","url":"/post/countGoodIntegers.html","content":"3272. 统计好整数的数目 H\n给你两个 正 整数 n 和 k 。\n如果一个整数 x 满足以下条件，那么它被称为 k 回文 整数 。\n\nx 是一个 回文整数 。\nx 能被 k 整除。\n\n如果一个整数的数位重新排列后能得到一个 k 回文整数 ，那么我们称这个整数为 好 整数。比方说，k = 2 ，那么 2020 可以重新排列得到 2002 ，2002 是一个 k 回文串，所以 2020 是一个好整数。而 1010 无法重新排列数位得到一个 k 回文整数。\n请你返回 n 个数位的整数中，有多少个 好 整数。\n注意 ，任何整数在重新排列数位之前或者之后 都不能 有前导 0 。比方说 1010 不能重排列得到 101 。\n示例 1：\n\n输入： n = 3, k = 5\n输出： 27\n解释：\n部分好整数如下：\n\n551 ，因为它可以重排列得到 515 。\n525 ，因为它已经是一个 k 回文整数。\n\n\n示例 2：\n\n输入： n = 1, k = 4\n输出： 2\n解释：\n两个好整数分别是 4 和 8 。\n\n示例 3：\n\n输入： n = 5, k = 6\n输出： 2468\n\n提示：\n\n1 &lt;= n &lt;= 10\n1 &lt;= k &lt;= 9\n\n分析思路\n我们可以把问题拆分为两个部分：\n\n判断数位集合是否有回文排列\n一个数的数位可以重新排列成回文数当且仅当：\n\n当 n 为偶数：所有数字出现次数均为偶数。\n当 n 为奇数：最多只有一个数字出现次数为奇数，其余为偶数。\n\n\n存在回文排列且该排列满足被 k 整除\n\n由于我们要求构造的回文排列不能有前导 0，所以构造时需要保证最左位数字不为 0。\n对于一个给定的符合“回文排列”条件的数位集合，若存在一种排列构成的回文数能被 k 整除，则我们将此多重集认为是合格的。\n注意：一个 n 位整数只要其数位集合满足条件（存在至少一种排列构成合格的 k 回文数），那么所有拥有相同数位多重集的 n 位整数都是好整数。\n\n\n\n构造方案\n由于 n 的范围最多为 10，因此直接枚举所有 n 位回文数来检查被 k 整除的条件是可行的。根据 n 的奇偶性，我们可以分为两种情况：\n\n\nn 为偶数：\n设 m = n/2，回文数为：\nhalf + reverse(half)\n枚举长度为 m 的数字串，其中第一个字符（对应整体最高位）不为 0。\n\n\nn 为奇数：\n设 m = n//2，则回文数为：\nhalf + mid + reverse(half)\n其中 half 枚举同上（第一个字符非 0），mid 为 0～9 均可。\n\n\n对于每个构造出来的回文数，如果它满足能被 k 整除的条件，则提取其“数字多重集”（即各个数字出现的次数），并存入一个集合中，确保对于同一多重集只记录一次。\n计数方法\n对于一个记录下来的数字多重集（长度为 n），所有的排列数为\ntotal=n!∏d=09(count[d]!)\\text{total} = \\frac{n!}{\\prod_{d=0}^{9} (\\text{count}[d]!)}\ntotal=∏d=09​(count[d]!)n!​\n但由于存在前导 0 的问题，对于包含 0 的情况，我们需要剔除那些首位为 0 的排列。\n\n若多重集中 0 出现次数为 c0 &gt; 0，则固定首位为 0后，剩余排列数为\n\ninvalid=(n−1)!(c0−1)!∏d=19(count[d]!)\\text{invalid} = \\frac{(n-1)!}{(c_0-1)! \\prod_{d=1}^{9} (\\text{count}[d]!)}\ninvalid=(c0​−1)!∏d=19​(count[d]!)(n−1)!​\n\n故该多重集对应的合法 n 位数字数为valid=total−invalid(当 c0&gt;0)\\text{valid} = \\text{total} - \\text{invalid} \\quad \\left( \\text{当}\\ c_0 &gt; 0 \\right)\nvalid=total−invalid(当 c0​&gt;0)\n或者当 c0=0，则 valid = total。\n\n对所有满足条件的多重集，将其合法排列数累加即为答案。\n算法时间复杂度分析\n\n\n枚举回文数\n\n对于 n 为偶数：需要枚举 10n2−1∗910^{\\frac{n}{2}-1} * 9102n​−1∗9 个数，最多约O(10n2)O(10^\\frac{n}{2})O(102n​)；\n对于 n 为奇数：乘上 10 种中间数字情况，依然是 O(10n2)O(10^\\frac{n}2)O(102n​)。\n\n由于 n ≤ 10，最坏情形枚举数量不会超过 10510^5105，计算量是可接受的。\n\n\n多重集计数\n对于每个多重集，计算排列数的时间复杂度为 O(10)（数字个数恒定），因此总体时间复杂度主要取决于回文数枚举部分，为 O(10n2)O(10^\\frac{n}2)O(102n​)。\n\n\n总结\n\n枚举所有符合 n 位、无前导 0 的回文数；\n检查该回文数能否被 k 整除；\n对满足条件的回文数，提取其数字多重集，并保证每个多重集只计入一次；\n对每个多重集，计算所有排列中首位不为 0 的排列数，并累加结果。\n\n代码实现：\nfrom math import factorialclass Solution:    def countGoodIntegers(self, n: int, k: int) -&gt; int:        &quot;&quot;&quot;        统计 n 位整数中好整数的数量。        好整数定义为：其数位重新排列后可以得到一个回文且能被 k 整除，        且排列后不能有前导 0。        &quot;&quot;&quot;        # 对 n==1 情况单独处理        if n == 1:            count = 0            for d in range(1, 10):                if d % k == 0:                    count += 1            return count                good_multisets = set()  # 存储符合条件的多重集（以元组形式存储 0~9 的数字出现次数）                if n % 2 == 0:            # n 为偶数，回文数由半边构造            half_len = n // 2            start = 10 ** (half_len - 1)            end = 10 ** half_len            for num in range(start, end):                half_str = str(num)                pal_str = half_str + half_str[::-1]  # 构造回文数                # 已经保证 half_str 的首位不为 &#x27;0&#x27;                pal_num = int(pal_str)                if pal_num % k == 0:                    counts = [0] * 10                    for ch in pal_str:                        counts[int(ch)] += 1                    good_multisets.add(tuple(counts))        else:            # n 为奇数，多一位中间数字            half_len = n // 2            # 当 n&gt;=3 时，half_len&gt;=1，此时可以按原逻辑构造            start = 10 ** (half_len - 1)            end = 10 ** half_len            for num in range(start, end):                half_str = str(num)                for mid in range(10):                    pal_str = half_str + str(mid) + half_str[::-1]                    # half_str 保证首位不为 &#x27;0&#x27;                    pal_num = int(pal_str)                    if pal_num % k == 0:                        counts = [0] * 10                        for ch in pal_str:                            counts[int(ch)] += 1                        good_multisets.add(tuple(counts))                # 预计算阶乘        fact = [1] * (n + 1)        for i in range(1, n + 1):            fact[i] = fact[i - 1] * i                total_good = 0        # 对每个符合条件的数字多重集，计算满足无前导0限制的排列数        for counts in good_multisets:            # 计算该多重集所有排列数： n! / (c0! * c1! * ... * c9!)            total_perm = fact[n]            for c in counts:                total_perm //= fact[c]                        # 如果该多重集中包含0，需要排除首位为0的排列            if counts[0] &gt; 0:                # 固定首位为0，剩余的排列数为 (n-1)! / ((c0-1)! * (c1)! ... (c9)!)                prod_nonzero = 1                for d in range(1, 10):                    prod_nonzero *= fact[counts[d]]                invalid = fact[n - 1] // (fact[counts[0] - 1] * prod_nonzero)                valid_perm = total_perm - invalid            else:                valid_perm = total_perm                        total_good += valid_perm                return total_good\n\n注意：需要对 n==1 的情况进行单独处理。由于一位数的重排列只能为其本身，所以对于一位数，只需要统计 1 到 9 中能被 k 整除的数字即可。\n\n\n\n对 n==1 的处理\n直接遍历 1～9 的单个数字，检查每个数字是否能被 k 整除，若能则计数。\n\n\n回文数生成\n\n\n\n\n当 n 为偶数时，构造回文数格式为 half + reverse(half)。\n\n\n当 n 为奇数时，遍历中间数字 mid，构造回文数格式为 half + mid + reverse(half)。\n\n注：此处保证 half 的首位非 0。\n\n\n\n\n多重集记录与排列数计算\n\n\n将符合条件的回文数的数字多重集（各个数字出现的次数）存入集合避免重复计入。\n利用阶乘及组合公式计算总排列数，再剔除那些首位为 0 的排列（当数字 0 存在时）。\n\n","categories":["算法"],"tags":["Algorithm","排列组合","回文数构造","枚举与剪枝","困难"]},{"title":"LeetCode每日一题2025-04-14","url":"/post/countGoodTriplets.html","content":"1534. 统计好三元组 E\n给你一个整数数组 arr ，以及 a、b 、c 三个整数。请你统计其中好三元组的数量。\n如果三元组 (arr[i], arr[j], arr[k]) 满足下列全部条件，则认为它是一个 好三元组 。\n\n0 &lt;= i &lt; j &lt; k &lt; arr.length\n|arr[i] - arr[j]| &lt;= a\n|arr[j] - arr[k]| &lt;= b\n|arr[i] - arr[k]| &lt;= c\n\n其中 |x| 表示 x 的绝对值。\n返回 好三元组的数量 。\n示例 1：\n\n输入： arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3\n输出： 4\n解释： 一共有 4 个好三元组：[(3,0,1), (3,0,1), (3,1,1), (0,1,1)] 。\n\n示例 2：\n\n输入： arr = [1,1,2,2,3], a = 0, b = 0, c = 1\n输出： 0\n解释： 不存在满足所有条件的三元组。\n\n提示：\n\n3 &lt;= arr.length &lt;= 100\n0 &lt;= arr[i] &lt;= 1000\n0 &lt;= a, b, c &lt;= 1000\n\n问题分析\n给定数组 arr，以及三个整数 a、b、c，需要统计满足以下三个条件的三元组 (arr[i], arr[j], arr[k]) 的数量（其中 0 &lt;= i &lt; j &lt; k &lt; len(arr)）：\n\n|arr[i] - arr[j]| &lt;= a\n|arr[j] - arr[k]| &lt;= b\n|arr[i] - arr[k]| &lt;= c\n\n算法思路\n\n暴力枚举：直接使用三重循环枚举所有可能的三元组，然后检查是否满足条件。\n提前剪枝：在第二层循环中，若abs(arr[i] - arr[j]) &gt; a则直接跳过第三层循环（k），减少无效计算。\n\n时间复杂度\n\n\n对于数组长度 n，每个三元组枚举的时间复杂度为 O(n³)。由于题目约束 3 &lt;= n &lt;= 100，当 n = 100 时，最多循环大约 161700 次，在可接受的范围内。\n\n\n除了输入数组与常数级变量外，未使用额外数据结构，因此空间复杂度为 O(1)。\n\n\n代码实现\nfrom typing import Listclass Solution:    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -&gt; int:        count = 0        n = len(arr)        for i in range(n):            for j in range(i + 1, n):                if abs(arr[i] - arr[j]) &gt; a:                    continue  # 提前剪枝，不满足a条件则跳过后续k的判断                for k in range(j + 1, n):                    # 同时检查b和c的条件                    if (abs(arr[j] - arr[k]) &lt;= b) and (abs(arr[i] - arr[k]) &lt;= c):                        count += 1        return count\n","categories":["算法"],"tags":["Algorithm","暴力搜索","简单","枚举与剪枝"]},{"title":"LeetCode每日一题2025-04-13","url":"/post/countGoodNumbers.html","content":"1922. 统计好数字的数目 M\n我们称一个数字字符串是 好数字 当它满足（下标从 0 开始）偶数 下标处的数字为 偶数 且 奇数 下标处的数字为 质数 （2，3，5 或 7）。\n\n比方说，&quot;2582&quot; 是好数字，因为偶数下标处的数字（2 和 8）是偶数且奇数下标处的数字（5 和 2）为质数。但 &quot;3245&quot; 不是 好数字，因为 3 在偶数下标处但不是偶数。\n\n给你一个整数 n ，请你返回长度为 n 且为好数字的数字字符串 总数 。由于答案可能会很大，请你将它对 109 + 7 取余后返回 。\n一个 数字字符串 是每一位都由 0 到 9 组成的字符串，且可能包含前导 0 。\n示例 1：\n\n输入：n = 1\n输出：5\n解释：长度为 1 的好数字包括 “0”，“2”，“4”，“6”，“8” 。\n\n示例 2：\n\n输入：n = 4\n输出：400\n\n示例 3：\n\n输入：n = 50\n输出：564908303\n\n提示：\n\n1 &lt;= n &lt;= 101510^{15}1015\n\n分析题意：\n\n数字字符串为好数字需满足：偶数下标（0、2、4…）处的数字为偶数（0、2、4、6、8），共有 5 个选择；奇数下标（1、3、5…）处的数字为质数（只允许 2、3、5、7），共有 4 个选择。\n偶数位的数量 k 为 (n + 1) // 2, 奇数位的数量为 n - k\n对于长度为 nnn 的数字字符串，偶数下标的数量为 ⌈n/2⌉=n+12⌈n/2⌉ = \\frac{n+1}{2}⌈n/2⌉=2n+1​ 向下取整, 因此总共有 5k5^k5k 种可能，奇数下标的数量为 ⌊n/2⌋⌊n/2⌋⌊n/2⌋（由于数组下标从 0 开始），因此总共有 4(n−k)4^{(n-k)}4(n−k) 种可能。\n\n构造方案：\n因此，好数字的总数量可表示为：\nans=5k×4n−kmod  (109+7)\\text{ans} = 5^{ k } \\times 4^{ n-k } \\mod (10^9+7)\nans=5k×4n−kmod(109+7)\n给定 nnn 可能高达 101510^{15}1015，直接计算大数幂需要使用快速幂算法（快速指数求幂），Python 内置的 pow 函数可以直接接受第三个参数来进行模运算并实现快速幂。\n时间复杂度：\n\n\n使用快速幂算法对大指数进行求幂取模，保证运算效率且不溢出。利用指数二进制分解实现指数运算，快速幂算法的时间复杂度为 O(log⁡n)O(\\log n)O(logn)，即使 nnn 高达 101510^{15}1015 也可以在极短时间内求出结果。\n\n\n使用乘法原理，将两个独立的选择相乘，即可得到所有可能性的乘积。\n\n\n代码实现：\nclass Solution:    def countGoodNumbers(self, n: int) -&gt; int:        MOD = 10**9 + 7        # 计算偶数下标的数量：        k = (n + 1) // 2        part5 = pow(5, k, MOD)    # 偶数下标：0, 2, 4, ...，利用内置的 pow 函数进行快速幂取模计算        part4 = pow(4, n - k, MOD)# 奇数下标：1, 3, 5, ...        return (part5 * part4) % MOD\n","categories":["算法"],"tags":["Algorithm","组合数学","快速幂","乘法","中等"]},{"title":"LeetCode每日一题2025-04-15","url":"/post/goodTriplets.html","content":"2179. 统计数组中好三元组数目 H\n给你两个下标从 0 开始且长度为 n 的整数数组 nums1 和 nums2 ，两者都是 [0, 1, ..., n - 1] 的 排列 。\n好三元组 指的是 3 个 互不相同 的值，且它们在数组 nums1 和 nums2 中出现顺序保持一致。换句话说，如果我们将 pos1v1_v1v​ 记为值 v 在 nums1 中出现的位置，pos2v2_v2v​ 为值 v 在 nums2 中的位置，那么一个好三元组定义为 0 &lt;= x, y, z &lt;= n - 1 ，且 pos1x1_x1x​ &lt; pos1y1_y1y​ &lt; pos1z1_z1z​ 和 pos2x2_x2x​ &lt; pos2y2_y2y​ &lt; pos2z2_z2z​ 都成立的 (x, y, z) 。\n请你返回好三元组的 总数目 。\n示例 1：\n\n输入：nums1 = [2,0,1,3], nums2 = [0,1,2,3]\n输出：1\n解释：\n总共有 4 个三元组 (x,y,z) 满足 pos1x1_x1x​ &lt; pos1y1_y1y​ &lt; pos1z1_z1z​ ，分别是 (2,0,1) ，(2,0,3) ，(2,1,3) 和 (0,1,3) 。\n这些三元组中，只有 (0,1,3) 满足 pos2x2_x2x​ &lt; pos2y2_y2y​ &lt; pos2z2_z2z​ 。所以只有 1 个好三元组。\n\n示例 2：\n\n输入：nums1 = [4,0,1,3,2], nums2 = [4,1,0,2,3]\n输出：4\n解释：总共有 4 个好三元组 (4,0,3) ，(4,0,2) ，(4,1,3) 和 (4,1,2) 。\n\n提示：\n\nn == nums1.length == nums2.length\n3 &lt;= n &lt;= 10510^5105\n0 &lt;= nums1[i], nums2[i] &lt;= n - 1\nnums1 和 nums2 是 [0, 1, ..., n - 1] 的排列。\n\n问题分析\n题目给定两个长度为n且下标从0开始的整数数组nums1和nums2，这两个数组都是[0,1,...,n−1]的排列。定义了好三元组为3个互不相同的值，且它们在数组nums1和nums2中出现顺序保持一致，\n即若pos1v为值v在nums1中出现的位置，pos2v为值v在nums2中出现的位置，\n好三元组需满足0 &lt;= x, y, z &lt;= n−1，且pos1x &lt; pos1y &lt; pos1z和pos2x &lt; pos2y &lt; pos2z都成立的(x,y,z) ，要求返回好三元组的总数目。\n算法思路\n由于两个数组都是 0 到 n - 1 的排列，考虑以下转换：\n\n\n构造新数组\n我们先建立一个数组 p，其中\np[i]=pos2[nums1[i]]p[i]=\\text{pos2}[\\text{nums1}[i]]\np[i]=pos2[nums1[i]]\n这里的 pos2[v]\\text{pos2}[v]pos2[v] 表示值 vvv 在 nums2 中的位置。\n由于 nums1 本身已经按其在原数组中的顺序排序，因此原题中要求 “pos1xxx &lt; pos1yyy &lt; pos1zzz” 已自动满足。问题就转化为：在数组 p 中计数满足\np[i]&lt;p[j]&lt;p[k]p[i]&lt;p[j]&lt;p[k]\np[i]&lt;p[j]&lt;p[k]\n且满足 i&lt;j&lt;ki&lt;j&lt;ki&lt;j&lt;k 的三元组。\n\n\n双遍扫描计数\n对于数组中的每个中间元素 p[j]p[j]p[j]，设：\n\nLjL_jLj​：在 jjj 之前（即 i&lt;ji&lt;ji&lt;j）满足 p[i]&lt;p[j]p[i] &lt; p[j]p[i]&lt;p[j] 的数量；\nRjR_jRj​：在 jjj 之后（即 k&gt;jk&gt;jk&gt;j）满足 p[k]&gt;p[j]p[k] &gt; p[j]p[k]&gt;p[j] 的数量；\n\n则以 p[j]p[j]p[j] 为中间元素的有效三元组数量为 Lj×RjL_j \\times R_jLj​×Rj​。整个三元组数量为所有 jjj 上的累加和。\n\n\n树状数组（Fenwick Tree）的作用\n由于 nnn 可能达到 10510^5105 级别，直接遍历统计 LjL_jLj​​ 和 RjR_jRj​​ 是 O(n2)O(n^2)O(n2) 的效率。借助树状数组，我们可以在 O(log⁡n)O(\\log n)O(logn) 内查询某个前缀的值，从而：\n\n正向遍历计算每个位置 jjj 的 LjL_jLj​；\n逆向遍历计算每个位置 jjj 的 RjR_jRj​。\n\n\n\n时间复杂度\n\n\n构造映射与数组转换：O(n)O(n)O(n)\n\n\n正序与逆序遍历树状数组操作：使用两个树状数组分别进行两次扫描(每个元素需要正向逆向各一次)，每个查询和更新均为 O(log⁡nO(\\log nO(logn，共计 O(nlog⁡n)O(n \\log n)O(nlogn)\n\n\n总体时间复杂度：O(nlog⁡n)O(n \\log n)O(nlogn)\n\n\n空间复杂度：O(n)O(n)O(n), 用于存储两个计数数组及树状数组的结构\n\n\n代码分解\nFenwickTree 类\n负责单点更新和区间查询，从而在 O(log⁡n)O(\\log n)O(logn) 时间内计算前缀和。\n构造映射与数组转换\n将 nums2 中每个数值映射到对应的位置，构造数组 p 后，数组 p 就是按照 nums1 顺序排列的 nums2 中的下标，即 p[i] 是 nums1 的第 i 个元素在 nums2 中的位置。\n左侧计数（L[j]）\n使用树状数组，从左到右扫描数组 p，对于每个位置 j，查询 p[j] 之前比它小的数字个数，并更新树状数组，通过遍历 p 数组并动态查询当前值之前的前缀和实现。\n右侧计数（R[j]）\n使用另一个树状数组，从右到左扫描数组 p，对于每个位置 j，查询已经处理的右侧元素中比 p[j] 大的数量，通过总已处理元素数减去小于等于 p[j] 的数目得到。\n三元组数量累加\n对每个中间位置 j，三元组数量为 L[j]×R[j]L[j] \\times R[j]L[j]×R[j]，对所有可能的中间位置累加即为最终答案。\n代码实现\nclass FenwickTree:    def __init__(self, size: int):        self.size = size        self.tree = [0] * (size + 1)        def update(self, index: int, delta: int):        # index 从 0 开始转换到 1-based        index += 1        while index &lt;= self.size:            self.tree[index] += delta            index += index &amp; -index    def query(self, index: int) -&gt; int:        # 查询前缀和 [0, index]，index 为 0-based        index += 1        res = 0        while index:            res += self.tree[index]            index -= index &amp; -index        return resclass Solution:    @staticmethod    def goodTriplets(nums1: list, nums2: list) -&gt; int:        n = len(nums1)                # 建立 nums2 中值 -&gt; 位置 的映射        pos2 = [0] * n        for idx, num in enumerate(nums2):            pos2[num] = idx                # 构造数组 p，其中 p[i] = pos2[nums1[i]]        p = [pos2[num] for num in nums1]                # 第一步：正序遍历，计算每个 j 左侧比 p[j] 小的数量 L[j]        left_count = [0] * n        fenwick_left = FenwickTree(n)        for j in range(n):            # p[j] 前有多少数比它小            left_count[j] = fenwick_left.query(p[j] - 1)            fenwick_left.update(p[j], 1)                # 第二步：逆序遍历，计算每个 j 右侧比 p[j] 大的数量 R[j]        right_count = [0] * n        fenwick_right = FenwickTree(n)        for j in range(n - 1, -1, -1):            # 右侧比 p[j] 大的数量 = 当前已处理的个数中 p 值大于 p[j] 的数量            # 先查询 p[j] 的前缀和，已加入的元素总数为 (n-1 - j)            right_count[j] = fenwick_right.query(n - 1) - fenwick_right.query(p[j])            fenwick_right.update(p[j], 1)                # 三元组数量：对每个 j 中间元素，累加 L[j] * R[j]        result = 0        for j in range(n):            result += left_count[j] * right_count[j]        return result\n","categories":["算法"],"tags":["Algorithm","困难","组合数学","树状数组","数据结构","逆序对计数"]},{"title":"LeetCode每日一题2025-04-16","url":"/post/countGoodsubarrays.html","content":"2537. 统计好子数组的数目 M\n给你一个整数数组 nums 和一个整数 k ，请你返回 nums 中 好 子数组的数目。\n一个子数组 arr 如果有 至少 k 对下标 (i, j) 满足 i &lt; j 且 arr[i] == arr[j] ，那么称它是一个 好 子数组。\n子数组 是原数组中一段连续 非空 的元素序列。\n示例 1：\n\n输入：nums = [1,1,1,1,1], k = 10\n输出：1\n解释：唯一的好子数组是这个数组本身。\n\n示例 2：\n\n输入：nums = [3,1,4,3,2,2,4], k = 2\n输出：4\n解释：总共有 4 个不同的好子数组：\n\n[3,1,4,3,2,2] 有 2 对。\n[3,1,4,3,2,2,4] 有 3 对。\n[1,4,3,2,2,4] 有 2 对。\n[4,3,2,2,4] 有 2 对。\n\n\n提示：\n\n1 &lt;= nums.length &lt;= 10510^5105\n1 &lt;= nums[i], k &lt;= 10910^9109\n\n问题分析\n给定一个整数数组 nums 和一个整数 k，要求返回数组中好子数组的数目。题目中“好子数组”的定义为：子数组中存在至少 k 对下标 (i, j) 满足 i &lt; j 且 arr[i] == arr[j]，也就是我们需要找出数组中所有满足至少有 k 对下标 (i, j)（其中 i &lt; j 且元素相同）的子数组的数量。\n算法思路\n\n当一个元素 x 在窗口中出现了 c 次时，它贡献的配对数量为组合数 C(c,2)=c(c−1)2C(c,2)=\\frac{c(c−1)} 2C(c,2)=2c(c−1)​，但动态调整更高效的方式是通过增量/减量来维护总数。\n使用双指针（滑动窗口）技术来遍历所有连续子数组。\n维护一个窗口 [l, r]，以及窗口中每个数字出现的频数 freq。\n同时在每一步更新窗口内的成对数字数量 count。当我们向窗口中添加新元素 x 时，窗口中原先 x 出现的次数为 freq[x]，那么新增的对数为 freq[x]（每个已有的 x 和新加入的 x 都可以构成一对）。因此更新 count += freq[x]，然后 freq[x] 加 1。\n对于每个左边界 l，利用右指针 r 尽可能扩展窗口，直到 count &gt;= k。设当窗口达到条件时，当前的 r 满足条件，则对于定左边界 l，所有右边界 r' 属于 [r, n-1] 的窗口均满足条件，因此可以直接将 n - r 加入答案。\n随后移动左边界 l，同时更新 count。在移除窗口最左边元素时，假设其值为 x，此时删除该元素会导致窗口中 x 的出现次数减少，进而需要减少的对数为 freq[x] - 1（因为该 x 和其它 x 形成的对数就少了）。\n\n时间复杂度\n每个元素最多被右指针和左指针访问（加入和移除窗口）各一次，因此双指针方法整体时间复杂度为 O(n)O(n)O(n)，其中 n 是数组的长度。\n代码分解\n窗口扩展：\n对于每个窗口左边界 l，通过右指针 r向右扩展窗口，直到窗口内满足 count &gt;= k。在扩展过程中使用频次统计更新 count。\n直接计数：\n一旦找到最小的右边界 r 使得 [l, r] 满足条件，则所有 [l, r], [l, r+1], …, [l, n-1] 的子数组也均满足条件，因此可以直接加上 n - r。\n滑动窗口收缩：\n移动左边界 l时，需要将 nums[l] 从窗口中移除，同时调整 freq 和 count。移除时由于原先 x 出现次数为 freq[x]，其对对数贡献为 freq[x] - 1（移除后剩余的配对数为 freq[x] - 1，因此减少 freq[x] - 1）。\n代码实现\nfrom collections import defaultdictclass Solution:    def countGood(self, nums, k: int) -&gt; int:        n = len(nums)        # 字典存储每个数字的频次        freq = &#123;&#125;        count = 0  # 当前窗口中满足条件的对数数量        res = 0    # 结果计数        r = 0                # 遍历左边界        for l in range(n):            # 不断扩展右边界，使窗口对数数量至少为 k            while r &lt; n and count &lt; k:                x = nums[r]                # 在添加前，x已有 freq.get(x, 0) 次，新增的对数即为这个频次                count += freq.get(x, 0)                freq[x] = freq.get(x, 0) + 1                r += 1                        # 如果当前窗口 [l, r-1] 的配对数量至少为 k，则右边所有扩展窗口都满足条件            if count &gt;= k:                res += (n - r + 1)                        # 在将 l 右移前需要移除 nums[l] 对 count 的贡献            x = nums[l]            freq[x] -= 1            # 当移除一个 x 时，其对配对数的贡献为移除前该 x 与其它相同元素之间的对数数目，即 freq[x]（因为移除后，剩余的 x 数量为 freq[x]）            count -= freq[x]                    return res\n","categories":["算法"],"tags":["Algorithm","组合数学","中等","数据结构","滑动窗口"]},{"title":"LeetCode每日一题2025-04-17","url":"/post/count-equal-and-divisible-pairs.html","content":"2176. 统计数组中相等且可以被整除的数对 E\n给你一个下标从 0 开始长度为 n 的整数数组 nums 和一个整数 k ，请你返回满足 0 &lt;= i &lt; j &lt; n ，nums[i] == nums[j] 且 (i * j) 能被 k 整除的数对 (i, j) 的 数目 。\n示例 1：\n\n输入：nums = [3,1,2,2,2,1,3], k = 2\n输出：4\n解释：\n总共有 4 对数符合所有要求：\n\nnums[0] == nums[6] 且 0 * 6 == 0 ，能被 2 整除。\nnums[2] == nums[3] 且 2 * 3 == 6 ，能被 2 整除。\nnums[2] == nums[4] 且 2 * 4 == 8 ，能被 2 整除。\nnums[3] == nums[4] 且 3 * 4 == 12 ，能被 2 整除。\n\n\n示例 2：\n\n输入：nums = [1,2,3,4], k = 1\n输出：0\n解释：由于数组中没有重复数值，所以没有数对 (i,j) 符合所有要求。\n\n提示：\n\n1 &lt;= nums.length &lt;= 100\n1 &lt;= nums[i], k &lt;= 100\n\n问题分析\n统计所有满足\n\n索引约束：0 ≤ i &lt; j &lt; n\n数值相等：nums[i] == nums[j]\n整除性：(i * j) % k == 0\n\n的数对数量。\n算法思路\n对数组nums中相同数值的下标进行分组（哈希表分组），然后在各组内部枚举下标对并检查乘积能否被 k 整除。\n对于每个数值对应的索引列表：\n\n若长度小于2，则跳过（无有效对）。\n否则，遍历所有可能的数对(i, j)（i &lt; j），检查i * j % k == 0是否成立，若成立则计数加1。\n\n时间复杂度\n\n预处理时间：O(n)O(n)O(n)，遍历数组一次存储索引。\n最坏情况下所有元素都相同(每个元素形成一组)，枚举组内所有 (n2)\\binom{n}{2}(2n​) 对，复杂度 O(n2)O(n^2)O(n2)。由于n的最大为100，总计算量约为5000次，在可行范围内。\n空间复杂度：O(n)O(n)O(n)，用于存储分组字典。\n\n代码实现\nfrom collections import defaultdictfrom typing import Listclass Solution:    def countPairs(self, nums: List[int], k: int) -&gt; int:        &quot;&quot;&quot;        返回满足 nums[i] == nums[j] 且 (i * j) 能被 k 整除的 (i, j) 对数。        &quot;&quot;&quot;        num_indices = defaultdict(list)        for idx, num in enumerate(nums):            num_indices[num].append(idx)                count = 0        for indices_list in num_indices.values():            n = len(indices_list)            if n &lt; 2:                continue            # 遍历所有i&lt;j的组合            for i in range(n):                for j in range(i + 1, n):                    a = indices_list[i]                    b = indices_list[j]                    product = a * b                    if product % k == 0:                        count += 1        return count\n用单次遍历 + 边加边算的方式可以稍微降低常数，只遍历一遍 nums，每遇到一个新下标就与之前同值下标配对判定，复杂度仍为O(n2)O(n^2)O(n2)，但常数略优\nclass Solution:    def countPairs(self, nums: List[int], k: int) -&gt; int:        index_map = defaultdict(list)        ans = 0        for i, v in enumerate(nums):            for j in index_map[v]:                if (i * j) % k == 0:                    ans += 1            index_map[v].append(i)        return ans\n","categories":["算法"],"tags":["Algorithm","暴力搜索","简单","枚举与剪枝","数据结构","哈希表"]},{"title":"LeetCode每日一题2025-04-21","url":"/post/count-the-hidden-sequences.html","content":"2145. 统计隐藏数组数目 M\n给你一个下标从 0 开始且长度为 n 的整数数组 differences ，它表示一个长度为 n + 1 的 隐藏 数组 相邻 元素之间的 差值 。更正式的表述为：我们将隐藏数组记作 hidden ，那么 differences[i] = hidden[i + 1] - hidden[i] 。\n同时给你两个整数 lower 和 upper ，它们表示隐藏数组中所有数字的值都在 闭 区间 [lower, upper] 之间。\n\n比方说，differences = [1, -3, 4] ，lower = 1 ，upper = 6 ，那么隐藏数组是一个长度为4 且所有值都在 1 和 6 （包含两者）之间的数组。\n\n[3, 4, 1, 5] 和 [4, 5, 2, 6] 都是符合要求的隐藏数组。\n[5, 6, 3, 7] 不符合要求，因为它包含大于 6 的元素。\n[1, 2, 3, 4] 不符合要求，因为相邻元素的差值不符合给定数据。\n\n\n\n请你返回 符合 要求的隐藏数组的数目。如果没有符合要求的隐藏数组，请返回 0 。\n示例 1：\n\n输入：differences = [1,-3,4], lower = 1, upper = 6\n输出：2\n解释：符合要求的隐藏数组为：\n\n[3, 4, 1, 5]\n[4, 5, 2, 6]\n\n所以返回 2 。\n\n示例 2：\n\n输入：differences = [3,-4,5,1,-2], lower = -4, upper = 5\n输出：4\n解释：符合要求的隐藏数组为：\n\n[-3, 0, -4, 1, 2, 0]\n[-2, 1, -3, 2, 3, 1]\n[-1, 2, -2, 3, 4, 2]\n[0, 3, -1, 4, 5, 3]\n\n所以返回 4 。\n\n示例 3：\n\n输入：differences = [4,-7,2], lower = 3, upper = 6\n输出：0\n解释：没有符合要求的隐藏数组，所以返回 0 。\n\n提示：\n\nn == differences.length\n1 &lt;= n &lt;= 10510^5105\n−105-10^5−105 &lt;= differences[i] &lt;= 10510^5105\n−105-10^5−105 &lt;= lower &lt;= upper &lt;= 10510^5105\n\n问题分析\n\n\n前缀和（Prefix Sums）\n定义\nP0=0,Pi=∑k=0i−1differences[k](1≤i≤n).P_0=0,\\quad P_i=\\sum_{k=0}^{i-1}\\text{differences}[k]\\quad(1\\leq i\\leq n).\nP0​=0,Pi​=k=0∑i−1​differences[k](1≤i≤n).\n则隐藏数组第 iii 个元素有\nhidden[i]=hidden[0]+Pi.\\text{hidden}[i]=\\text{hidden}[0]+P_i.\nhidden[i]=hidden[0]+Pi​.\n\n\n区间约束转化\n要保证所有元素都在 [lower,  upper][\\text{lower},\\;\\text{upper}][lower,upper] 之间，即对所有 0≤i≤n0\\le i\\le n0≤i≤n 都有\nlower≤hidden[0]+Pi≤upper.\\text{lower}\\le \\text{hidden}[0]+P_i \\le \\text{upper}.\nlower≤hidden[0]+Pi​≤upper.\n等价于\nmax⁡i(hidden[0]+Pi)≤upper⟹hidden[0]≤upper−max⁡iPi,\\max_{i}\\bigl(\\mathrm{hidden}[0] + P_{i}\\bigr) \\leq \\mathrm{upper} \\quad\\Longrightarrow\\quad \\mathrm{hidden}[0] \\leq \\mathrm{upper} - \\max_{i} P_{i},\nimax​(hidden[0]+Pi​)≤upper⟹hidden[0]≤upper−imax​Pi​,\nmin⁡i(hidden[0]+Pi)≥lower⟹hidden[0]≥lower−min⁡iPi.\\min_{i}\\bigl(\\mathrm{hidden}[0] + P_{i}\\bigr) \\geq \\mathrm{lower} \\quad\\Longrightarrow\\quad \\mathrm{hidden}[0] \\geq \\mathrm{lower} - \\min_{i} P_{i}.\nimin​(hidden[0]+Pi​)≥lower⟹hidden[0]≥lower−imin​Pi​.\nhidden[0]≤upper−max⁡iPi,hidden[0]≥lower−min⁡iPi.\\mathrm{hidden}[0]\\leq\\mathrm{upper}-\\max_iP_i,\\quad\\mathrm{hidden}[0]\\geq\\mathrm{lower}-\\min_iP_i.\nhidden[0]≤upper−imax​Pi​,hidden[0]≥lower−imin​Pi​.\n\n\n可行起始值个数\n记 minP=min⁡iPi,maxP=max⁡iPiminP=\\min_iP_i,maxP=\\max_iP_iminP=mini​Pi​,maxP=maxi​Pi​ 。\n那么\nhidden[0]∈[lower−min⁡P,upper−max⁡P],\\mathrm{hidden}[0]∈[\\mathrm{lower}−\\min\\text{P},\\mathrm{upper}−\\max\\text{P}],\nhidden[0]∈[lower−minP,upper−maxP],\n区间长度（整数个数）为\n( upper−maxP)−( lower−minP)+1=(upper−lower)−(maxP−minP)+1.(\\mathrm{~upper}-maxP)-(\\mathrm{~lower}-minP)+1=(\\mathrm{upper}-\\mathrm{lower})-(maxP-minP)+1.\n( upper−maxP)−( lower−minP)+1=(upper−lower)−(maxP−minP)+1.\n若该值为负，则答案是0。\n\n\n算法思路\n\n\n遍历一次 differences，用变量 curr 累加差分，实时维护 minP = min(minP, curr) 和 maxP = max(maxP, curr)。\n\n\n根据上面推导，计算可行的 hidden[0] 的左端点 L = lower - minP，右端点 R = upper - maxP。\n\n\n答案即为 max(0, R - L + 1)。\n\n\n时间复杂度\n\n\n算法的时间复杂度为O(n)O(n)O(n)，其中nnn是differences数组的长度。因为只需遍历一次差异数组即可计算所有必要的参数，没有嵌套循环，因此效率较高。\n\n\n仅使用常数级额外空间，故空间复杂度为O(1)O(1)O(1)。\n\n\n代码实现\n# 先求前缀极值再统一算区间class Solution:    def numberOfArrays(self, differences: List[int], lower: int, upper: int) -&gt; int:        # 初始化前缀和的最小值和最大值        minP = 0        maxP = 0        curr = 0                # 遍历差分数组，更新前缀和区间        for d in differences:            curr += d            minP = min(minP, curr)            maxP = max(maxP, curr)                # 计算起始值 hidden[0] 的可行区间 [L, R]        L = lower - minP        R = upper - maxP                # 区间长度即为符合要求的数组个数        return max(0, R - L + 1)\n也可直接把对每个位置的区间约束（本质相同）\nlower≤hidden[0]+Pi≤upper\\mathrm{lower}\\leq\\mathrm{hidden}[0]+P_i\\leq\\mathrm{upper}\nlower≤hidden[0]+Pi​≤upper\n转化为对 hidden[0] 的上下界，并在遍历中不断收缩，最终得出相同可行区间 [max⁡{L‾},min⁡{R‾}][\\max\\{\\underline{L}\\},\\min\\{\\overline{R}\\}][max{L​},min{R}]\n维护上下界\n\n令 curr = P_i，初始 curr = 0。\n看到新的curr就把 hidden[0]≥lower−currents\\mathrm{hidden}[0]\\geq\\mathrm{lower}-\\mathrm{curren}t_shidden[0]≥lower−currents​ 转化为下界 L = lower - curr并往上取最大，把 hidden[0]≤upper−currents\\mathrm{hidden}[0]\\leq\\mathrm{upper}-\\mathrm{curren}t_shidden[0]≤upper−currents​ 转化为上界 R = upper - curr并往下取最小。\n每步累加差分 curr += d 后\n\n若 L &gt; R 则 0，否则 R - L + 1。\n# 遍历中直接收敛上下界from typing import Listclass Solution:    def numberOfArrays(self, differences: List[int], lower: int, upper: int) -&gt; int:        curr = 0        L = lower      # lower - 0        R = upper      # upper - 0        for d in differences:            curr += d            candL = lower - curr            if candL &gt; L:                L = candL            candR = upper - curr            if candR &lt; R:                R = candR        return max(0, R - L + 1)\n","categories":["算法"],"tags":["Algorithm","组合数学","中等","数据结构","前缀和"]},{"title":"LeetCode每日一题2025-04-19","url":"/post/count-the-number-of-fair-pairs.html","content":"2563. 统计公平数对的数目 M\n给你一个下标从 0 开始、长度为 n 的整数数组 nums ，和两个整数 lower 和 upper ，返回 公平数对的数目 。\n如果 (i, j) 数对满足以下情况，则认为它是一个 公平数对 ：\n\n0 &lt;= i &lt; j &lt; n，且\nlower &lt;= nums[i] + nums[j] &lt;= upper\n\n示例 1：\n\n输入：nums = [0,1,7,4,4,5], lower = 3, upper = 6\n输出：6\n解释：共计 6 个公平数对：(0,3)、(0,4)、(0,5)、(1,3)、(1,4) 和 (1,5) 。\n\n示例 2：\n\n输入：nums = [1,7,9,2,5], lower = 11, upper = 11\n输出：1\n解释：只有单个公平数对：(2,3) 。\n\n提示：\n\n1 &lt;= nums.length &lt;= 10510^5105\nnums.length == n\n−109-10^9−109 &lt;= nums[i] &lt;= 10910^9109\n−109-10^9−109 &lt;= lower &lt;= upper &lt;= 10910^9109\n\n问题分析\n问题本质上是寻找满足特定条件的数对 (i,j)(i, j)(i,j)，其中 iii 和 jjj 是数组的索引，且它们的和在给定的范围 [lower, upper] 内。这是一个典型的双指针或者排序后使用二分查找的问题，通过排序将问题转化为在有序数组中快速定位满足和的区间的边界。\n算法思路\n\n\n排序数组：将输入的nums数组进行升序排列，便于后续操作。\n\n\n方法一（双指针滑动窗口）\n可以将问题化简为两个「≤ 某值」的问题\n定义函数\nf(k)=#{0≤i&lt;j&lt;n∣nums[i]+nums[j]≤k}.f(k)=\\#\\{0\\leq i&lt;j&lt;n\\mid nums[i]+nums[j]\\leq k\\}.\nf(k)=#{0≤i&lt;j&lt;n∣nums[i]+nums[j]≤k}.\n那么题目要的答案就是\nf(upper)−f(lower−1).f(upper)−f(lower−1).\nf(upper)−f(lower−1).\n对于每个左端点 i（0 ≤ i &lt; n-1），我们维护两个指针 l 与 r：\n\n\n左指针 l 从头开始（0），右指针 r 从尾开始（n−1）；\n\n\n如果 nums[l] + nums[r] ≤ k，那么对于固定的 l，所有 (l, l+1),…,(l, r) 都满足，因为排序保证 nums[l] + nums[j] ≤ nums[l] + nums[r]；可以一次性加上 r−l 个对，把 l 右移：l += 1。\n否则（和太大）就让 r 左移：r -= 1。\n\n\n直到 l &gt;= r，整个过程需 O(n)O(n)O(n) 级的指针移动，配合排序总复杂度 O(nlog⁡n)O(n \\log n)O(nlogn)。\n\n\n\n\n方法二（二分查找）\n遍历每个元素作为固定点：对于每一个元素nums[i]（其中i &lt; j），直接对排序后的数组在区间 (i+1, n-1] 上执行两次二分查找：\n计算目标和的上下界：lower - nums[i] 和 upper - nums[i]，即要求nums[j]必须落在这个范围内。\n二分查找边界：在有序数组中利用二分查找快速定位满足条件的j的位置区间：\n枚举每个 i，目标是找满足\nlower≤nums[i]+nums[j]≤upper,j&gt;ilower≤nums[i]+nums[j]≤upper,j&gt;i\nlower≤nums[i]+nums[j]≤upper,j&gt;i\n等价于\nlower−nums[i]≤nums[j]≤upper−nums[i].lower−nums[i]≤nums[j]≤upper−nums[i].\nlower−nums[i]≤nums[j]≤upper−nums[i].\n\nleft：在排序数组的区间 (i+1, n) 上，第一个大于等于目标下界lower - nums[i]的元素位置\nlo = lower - nums[i]，查 bisect_left(nums, lo, i+1)；\nright：第一个大于目标上界upper - nums[i]的元素位置\nhi = upper - nums[i]，查 bisect_right(nums, hi, i+1) - 1；\n\n统计有效数目：计算符合条件的索引区间长度，并累加到总数中\n\n二分查找各 O(log⁡n)O(\\log n)O(logn)，共 O(nlog⁡n)O(n \\log n)O(nlogn)。\n\n\n\n时间复杂度\n\n排序数组的时间为 O(nlog⁡n)O(n \\log n)O(nlogn)，其中 nnn 是 nums.length\n双指针扫描需 O(n)O(n)O(n)\n遍历每个元素并进行两次二分查找的操作时间为 O(nlog⁡n)O(n \\log n)O(nlogn)\n两种方法总时间复杂度都为：O(nlog⁡n)O(n \\log n)O(nlogn)\n空间复杂度：O(n)O(n)O(n)（排序需要复制或原地排序），O(1)O(1)O(1)（忽略排序所需栈或语言内部额外空间）\n\n代码实现\n双指针法：\nclass Solution:    def countFairPairs(self, nums: list[int], lower: int, upper: int) -&gt; int:        # 排序        nums.sort()        # 结果 = ≤upper 的对数 - ≤(lower-1) 的对数        return self._count_leq(nums, upper) - self._count_leq(nums, lower - 1)    def _count_leq(self, nums: list[int], k: int) -&gt; int:        &quot;&quot;&quot;        返回 排序后数组中 和 &lt;= k 的数对数量 f(k)。        &quot;&quot;&quot;        l, r = 0, len(nums) - 1        cnt = 0        while l &lt; r:            if nums[l] + nums[r] &lt;= k:                # 对于当前 l，(l, l+1)...(l, r) 都是合法对                cnt += (r - l)                l += 1            else:                # 和太大，缩小右侧                r -= 1        return cnt\n二分法：\nclass Solution:    def countFairPairs(self, nums: List[int], lower: int, upper: int) -&gt; int:        nums.sort()        n = len(nums)        count = 0        for i in range(n - 1):            lo = lower - nums[i]            hi = upper - nums[i]            left = bisect_left(nums, lo, i + 1, n)            right = bisect_right(nums, hi, i + 1, n) - 1            if left &lt; n and left &lt;= right:                count += (right - left + 1)  # 符合条件的元素数目        return count\n","categories":["算法"],"tags":["Algorithm","枚举与剪枝","中等","数据结构","逆序对计数","滑动窗口","双指针","二分查找","排序"]},{"title":"LeetCode每日一题2025-04-18","url":"/post/count-number-of-bad-pairs.html","content":"2364. 统计坏数对的数目 M\n给你一个下标从 0 开始的整数数组 nums 。如果 i &lt; j 且 j - i != nums[j] - nums[i] ，那么我们称 (i, j) 是一个 坏数对 。\n请你返回 nums 中 坏数对 的总数目。\n示例 1：\n\n输入：nums = [4,1,3,3]\n输出：5\n解释：数对 (0, 1) 是坏数对，因为 1 - 0 != 1 - 4 。\n数对 (0, 2) 是坏数对，因为 2 - 0 != 3 - 4, 2 != -1 。\n数对 (0, 3) 是坏数对，因为 3 - 0 != 3 - 4, 3 != -1 。\n数对 (1, 2) 是坏数对，因为 2 - 1 != 3 - 1, 1 != 2 。\n数对 (2, 3) 是坏数对，因为 3 - 2 != 3 - 3, 1 != 0 。\n总共有 5 个坏数对，所以我们返回 5 。\n\n示例 2：\n\n输入：nums = [1,2,3,4,5]\n输出：0\n解释：没有坏数对。\n\n提示：\n\n1 &lt;= nums.length &lt;= 10510^5105\n1 &lt;= nums[i] &lt;= 10910^9109\n\n问题分析\n1.化简判定条件\n我们通过数学变换将条件转化为统计差值相等的数对数量，最终用总数减去好的数对得到答案：\n对于一对索引 i&lt;ji&lt;ji&lt;j，当且仅当\nj−i=nums[j]−nums[i]j - i = \\text{nums}[j] - \\text{nums}[i]\nj−i=nums[j]−nums[i]\n时，这对 (i,j)(i,j)(i,j) 不是坏数对；等价于\nnums[j]−j=nums[i]−i.\\text{nums}[j] - j = \\text{nums}[i] - i.\nnums[j]−j=nums[i]−i.\n将所有元素映射为“调整值” Ak=nums[k]−kA_k = \\text{nums}[k] - kAk​=nums[k]−k，计算所有元素与索引的差值，统计相同差值出现次数，则“好数对”数目就是所有相同 AAA 值之间的组合对数。\n2.总对数与好对数\n数组长度为 nnn 时，总对数为 n(n−1)2\\tfrac{n(n-1)}22n(n−1)​。\n对于每个不同的调整值 vvv，若出现次数为 cvc_vcv​，则它内部的好对数为 cv(cv−1)2\\tfrac{c_v(c_v-1)}22cv​(cv​−1)​。\n坏数对数 = 总对数 – ∑vcv(cv−1)2\\displaystyle\\sum_v \\tfrac{c_v(c_v-1)}2v∑​2cv​(cv​−1)​。\n算法思路\n\n遍历一次数组，使用哈希表统计每个 Ak=nums[k]−kA_k=\\text{nums}[k]-kAk​=nums[k]−k 出现的频次。\n计算总对数 n(n−1)2\\tfrac{n(n-1)}22n(n−1)​。\n对哈希表中每个频次 ccc，累加 c(c−1)2\\tfrac{c(c-1)}22c(c−1)​ 得到“好对数”。\n用总对数减去好对数，得到坏数对数。\n\n时间复杂度\n时间复杂度：O(n)O(n)O(n)，只需一次遍历加上对哈希表的小量遍历。\n空间复杂度：O(n)O(n)O(n)，哈希表最坏存储 nnn 个不同键。\n代码实现\nclass Solution:    def countBadPairs(self, nums: list[int]) -&gt; int:        from collections import Counter                n = len(nums)        # 1. 统计调整值频次        freq = Counter(nums[i] - i for i in range(n))                # 2. 总对数        total_pairs = n * (n - 1) // 2                # 3. 累加所有“好对数”        good_pairs = sum(c * (c - 1) // 2 for c in freq.values())                # 4. 坏数对 = 总对数 - 好对数        return total_pairs - good_pairs\n","categories":["算法"],"tags":["Algorithm","组合数学","中等","数据结构","哈希表"]},{"title":"LeetCode每日一题2025-04-20","url":"/post/rabbits-in-forest.html","content":"781. 森林中的兔子 M\n森林中有未知数量的兔子。提问其中若干只兔子 “还有多少只兔子与你（指被提问的兔子）颜色相同?” ，将答案收集到一个整数数组 answers 中，其中 answers[i] 是第 i 只兔子的回答。\n给你数组 answers ，返回森林中兔子的最少数量。\n示例 1：\n\n输入：answers = [1,1,2]\n输出：5\n解释：\n两只回答了 “1” 的兔子可能有相同的颜色，设为红色。\n之后回答了 “2” 的兔子不会是红色，否则他们的回答会相互矛盾。\n设回答了 “2” 的兔子为蓝色。\n此外，森林中还应有另外 2 只蓝色兔子的回答没有包含在数组中。\n因此森林中兔子的最少数量是 5 只：3 只回答的和 2 只没有回答的。\n\n示例 2：\n\n输入：answers = [10,10,10]\n输出：11\n\n提示：\n\n1 &lt;= answers.length &lt;= 1000\n0 &lt;= answers[i] &lt; 1000\n\n问题分析\n我们需要根据兔子的回答 answers 数组计算森林中最少的兔子数量。每只回答为 a 的兔子表示其颜色族群中有 a + 1 只兔子（包括自己）。关键在于将相同答案的兔子尽可能分到同一族群，以最小化总数。\n算法思路\n\n\n遍历 answers 数组，使用哈希表 count 统计每个回答值 x 出现的频次 c\n\n\n对于每个不同的 x：\n\n\n每组最多能容纳 x+1 只兔子；\n\n\n如果有 c 只兔子都回答了 x，则需要的组数为：\ngroups=⌈cx+1⌉\\text{groups} = \\left\\lceil \\frac{c}{x+1} \\right\\rceil\ngroups=⌈x+1c​⌉\n\n\n每个族群贡献 x + 1 只兔子，这些组中总兔子数为：\ngroups×(x+1)\\text{groups} \\times (x+1)\ngroups×(x+1)\n\n\n\n\n将所有不同回答值对应的最少兔子数累加，即可得到森林中兔子的最少数量。\n\n\n时间复杂度\n\n统计频率的时间复杂度：O(n)O(n)O(n)，其中数组长度 n=answers.lengthn=answers.lengthn=answers.length ，因为仅需一次遍历统计，再对哈希表键值进行遍历。\n分组计算的时间复杂度：O(m)O(m)O(m)，其中 mmm 是不同答案的个数 (m≤n)(m ≤ n)(m≤n)。因此总时间复杂度为 O(n)O(n)O(n)。\n空间复杂度：O(m)O(m)O(m)，其中 mmm 是不同回答值的数量，最坏情况 m=nm = nm=n。\n\n代码分解\n\n统计答案频率：使用 collections.Counter 记录每个回答的出现次数。\n分组计算：\n\n对于每个回答x和对应的计数c：\n\n分组数目为 (c + x) // (x + 1)（使用整数运算 (c + group_size - 1) // group_size 来替代向上取整）。\n总兔子数累加 groups * (x + 1)。\n\n\n\n\n\n代码实现\nfrom collections import Counterfrom typing import Listclass Solution:    def numRabbits(self, answers: List[int]) -&gt; int:        count = Counter(answers)        total = 0        for x, c in count.items():            # 每组容量为 x+1            group_size = x + 1            # 计算需要的最少族群数量（ceil(c / group_size)向上取整）            groups = (c + group_size - 1) // group_size            # 累加该回答值对应的最少兔子数            total += groups * group_size        return total\n","categories":["算法"],"tags":["Algorithm","组合数学","中等","哈希表","贪心"]},{"title":"LeetCode每日一题2025-04-22","url":"/post/count-the-number-of-ideal-arrays.html","content":"2338. 统计理想数组的数目 H\n给你两个整数 n 和 maxValue ，用于描述一个 理想数组 。\n对于下标从 0 开始、长度为 n 的整数数组 arr ，如果满足以下条件，则认为该数组是一个 理想数组 ：\n\n每个 arr[i] 都是从 1 到 maxValue 范围内的一个值，其中 0 &lt;= i &lt; n 。\n每个 arr[i] 都可以被 arr[i - 1] 整除，其中 0 &lt; i &lt; n 。\n\n返回长度为 n 的 不同 理想数组的数目。由于答案可能很大，返回对 109+710^9 + 7109+7 取余的结果。\n示例 1：\n\n输入：n = 2, maxValue = 5\n输出：10\n解释：存在以下理想数组：\n\n以 1 开头的数组（5 个）：[1,1]、[1,2]、[1,3]、[1,4]、[1,5]\n以 2 开头的数组（2 个）：[2,2]、[2,4]\n以 3 开头的数组（1 个）：[3,3]\n以 4 开头的数组（1 个）：[4,4]\n以 5 开头的数组（1 个）：[5,5]\n共计 5 + 2 + 1 + 1 + 1 = 10 个不同理想数组。\n\n\n示例 2：\n\n输入：n = 5, maxValue = 3\n输出：11\n解释：存在以下理想数组：\n\n以 1 开头的数组（9 个）：\n\n不含其他不同值（1 个）：[1,1,1,1,1]\n含一个不同值 2（4 个）：[1,1,1,1,2], [1,1,1,2,2], [1,1,2,2,2], [1,2,2,2,2]\n含一个不同值 3（4 个）：[1,1,1,1,3], [1,1,1,3,3], [1,1,3,3,3], [1,3,3,3,3]\n\n\n以 2 开头的数组（1 个）：[2,2,2,2,2]\n以 3 开头的数组（1 个）：[3,3,3,3,3]\n共计 9 + 1 + 1 = 11 个不同理想数组。\n\n\n提示：\n\n\n2 &lt;= n &lt;= 10410^4104\n\n\n1 &lt;= maxValue &lt;= 10410^4104\n\n\n问题分析\n注意到：\n\n\n任意理想数组 ai{a_i}ai​ 满足 1≤a0∣a1∣⋯∣an−1=y, ai≤maxValue1\\le a_0\\mid a_1\\mid\\cdots\\mid a_{n-1}= y,\\text{ }a_i\\le \\text{maxValue}1≤a0​∣a1​∣⋯∣an−1​=y, ai​≤maxValue 。\n\n\n对于固定的末尾值 y≤maxValuey\\le\\mathrm{maxValue}y≤maxValue，从 1 变到 yyy 的“除数链”可看作在每个质因数方向上“累积指数”的过程（把它的每个质因子 ppp、指数 epe_pep​ 看成要在前 n−1n-1n−1 个“空位”中放 epe_pep​ 个“乘 ppp”操作）。\n\n\n若 y=∏pieiy=\\prod p_i^{e_i}y=∏piei​​，则在长度为 nnn 的链中，需要分配这 eie_iei​ 次“乘以 pip_ipi​”操作到 n−1n-1n−1 个相邻位置上，属于 「Stars and Bars」 模型（ “星星与条纹” ），每种质因子独立，所以总方案数是：\n#{链数}=∏i((n−1)+eiei).\\#\\{\\text{链数}\\}=\\prod_i\\binom{(n-1)+e_i}{e_i}.\n#{链数}=i∏​(ei​(n−1)+ei​​).\n\n\n最后对所有 yyy 累加，并对 109+710^9+7109+7 取模，因此，答案就是\n∑y=1maxValue[∏pe∥y((n−1)+ee)]mod(109+7).\\sum_{y=1}^\\mathrm{maxValue}\\left[\\prod_{p^e\\|y}\\binom{(n-1)+e}{e}\\right]\\mathrm{mod}(10^9+7).\ny=1∑maxValue​​pe∥y∏​(e(n−1)+e​)​mod(109+7).\n\n\n预处理 → 枚举 y=1…maxValue → 分解 y 的质因子 → 用“comb”累乘 → 累加取模 → 返回\n算法思路\n\n预处理阶乘与逆元阶乘，支持快速计算组合数 (ab)\\binom{a}{b}(ba​)。\n用 线性／筛法（SPF 最小质因子）对 [1…maxValue][1\\ldots\\mathrm{maxValue}][1…maxValue] 做一次质因数分解，整体复杂度约 O(maxValuelog⁡log⁡maxValue)O(\\mathrm{maxValue}\\log\\log \\mathrm{maxValue})O(maxValueloglogmaxValue)。\n对每个 yyy 枚举其质因数指数 eie_iei​，累乘组合数即可。\n\n时间复杂度\n\n阶乘 &amp; 逆元：O(n+log⁡maxValue)O(n + \\log \\mathrm{maxValue})O(n+logmaxValue)\nSPF 筛：O(max⁡Valuelog⁡log⁡maxValue)O(\\max\\mathrm{Value}\\log\\log\\mathrm{maxValue})O(maxValueloglogmaxValue)\n主循环：每个 yyy 仅分解一次，总体 O(max⁡Valuelog⁡maxValue)O(\\max\\mathrm{Value}\\log\\mathrm{maxValue})O(maxValuelogmaxValue)\n总体：O(n+max⁡Valuelog⁡log⁡maxValue+max⁡Valuelog⁡maxValue)O(n+\\max\\mathrm{Value}\\log\\log\\mathrm{maxValue}+\\max\\mathrm{Value}\\log\\mathrm{maxValue})O(n+maxValueloglogmaxValue+maxValuelogmaxValue) ，低于DP\n\n空间复杂度：O(n+max⁡Value)O(n+\\max\\mathrm{Value})O(n+maxValue) ，主要用于阶乘数组与 SPF 数组。\n代码实现\nimport mathclass Solution:    def idealArrays(self, n: int, maxValue: int) -&gt; int:        MOD = 10**9 + 7        # —— 1. 预处理：阶乘 &amp; 逆阶乘 ——         # 最大可能的指数增量 ≈ log2(maxValue)        maxE = int(math.log2(maxValue)) + 1        up = n - 1 + maxE        fact = [1] * (up + 1)        invfact = [1] * (up + 1)        for i in range(1, up + 1):            fact[i] = fact[i-1] * i % MOD        invfact[up] = pow(fact[up], MOD-2, MOD)        for i in range(up, 0, -1):            invfact[i-1] = invfact[i] * i % MOD        def comb(a: int, b: int) -&gt; int:            if b &lt; 0 or b &gt; a:                 return 0            return fact[a] * invfact[b] % MOD * invfact[a-b] % MOD        # —— 2. SPF 最小质因子筛 ——         spf = list(range(maxValue + 1))        for p in range(2, int(maxValue**0.5) + 1):            if spf[p] == p:                for j in range(p*p, maxValue + 1, p):                    if spf[j] == j:                        spf[j] = p        # —— 3. 主循环：对每个 y 分解、累乘组合数 ——         ans = 0        for y in range(1, maxValue + 1):            ways = 1            v = y            while v &gt; 1:                p = spf[v]                e = 0                while v % p == 0:                    v //= p                    e += 1                # 在 n-1 个间隔里放置 e 次“乘 p”操作                ways = ways * comb((n-1) + e, e) % MOD            ans = (ans + ways) % MOD        return ans\n另看到题解：\nclass Solution:    def idealArrays(self, n: int, maxValue: int) -&gt; int:        MOD = 10**9 + 7        # —— 1. 预处理：组合数 Pascal 三角 ——         maxE = int(math.log2(maxValue)) + 1        up = n - 1 + maxE        C = [[0] * (maxE + 1) for _ in range(up + 1)]        for i in range(up + 1):            C[i][0] = 1            for j in range(1, min(i, maxE) + 1):                C[i][j] = (C[i-1][j] + C[i-1][j-1]) % MOD        # —— 2. 预处理：EXP 质因子指数列表 ——         EXP = [[] for _ in range(maxValue + 1)]        for y in range(2, maxValue + 1):            v = y            p = 2            while p * p &lt;= v:                e = 0                while v % p == 0:                    v //= p                    e += 1                if e:                    EXP[y].append(e)                p += 1            if v &gt; 1:                EXP[y].append(1)        # —— 3. 主循环：对每个 y 累乘组合数 ——         ans = 0        for y in range(1, maxValue + 1):            ways = 1            for e in EXP[y]:                ways = ways * C[n - 1 + e][e] % MOD            ans = (ans + ways) % MOD        return ans\n\nDP 转组合：把「每一步都要保持可整除」的递推，转化为「质因子指数如何在 nnn 个位置上非负分配」的组合计数；\n枚举：对每个可能的末尾值 xxx 计算它的组合数贡献，再求和。\n\n\n\n对于固定的 yyy，它的每个质因子 ppp 在 a0,…,an−1a_0,\\dots,a_{n-1}a0​,…,an−1​ 中的指数序列\ne0=0(不一定为0)≤e1≤⋯≤en−1=E,e_0=0(\\text{不一定为0})\\le e_1\\le\\cdots\\le e_{n−1}=E,\ne0​=0(不一定为0)≤e1​≤⋯≤en−1​=E,\n且 ∑\\sum∑ 个位置上的“增加量”恰好等于 EEE （ e1+e2+...+ek=Ee_1 + e_2 + ... + e_k = Ee1​+e2​+...+ek​=E ）（即 yyy 中该质因子的总指数）。\n\n\n“星星与条纹”：前文已解释\n\n\n实现\n\n预处理每个 x≤maxValuex≤\\text{maxValue}x≤maxValue 的质因数指数列表，EXP[x] 存放 xxx 分解后，每个质因子的指数 [e1,e2,… ][e_1,e_2,\\dots][e1​,e2​,…]。\n预计算组合数 (Nk)\\binom{N}{k}(kN​)：由于 n≤104n\\le10^4n≤104, 指数 EpE_pEp​ 也最多 log⁡2(104)≈14\\log_2(10^4)\\approx14log2​(104)≈14，我们只需算到 N=n+14−1N=n+14-1N=n+14−1。\n用帕斯卡三角，这样 C[N][k] 就是 (Nk) mod (109+7)\\binom{N}{k}\\bmod(10^9+7)(kN​)mod(109+7)。\n枚举所有 x=1…maxValuex=1…maxValuex=1…maxValue，累加它们作为数组末尾的方案数，注意 x=1x=1x=1 时 EXP[1] 为空，res=1，对应 “全 1 数组” 这一类。\n\n\n\n复杂度：\n\n质因数分解：∑x=1Mx=O(M3/2)\\sum_{x=1}^{M}\\sqrt{x}=O(M^{3/2})∑x=1M​x​=O(M3/2)，这里 M=maxValue≤104M=\\text{maxValue}\\le10^4M=maxValue≤104 足够快。\n组合数预处理：O((n+max⁡E)×max⁡E)≈O(n⋅log⁡M)O\\bigl((n+\\max E)\\times \\max E\\bigr)\\approx O(n\\cdot\\log M)O((n+maxE)×maxE)≈O(n⋅logM)。\n枚举累加：O(M×(平均质因子数))≈O(Mlog⁡M)O\\bigl(M\\times (\\text{平均质因子数})\\bigr)\\approx O(M\\log M)O(M×(平均质因子数))≈O(MlogM)。\n\n\n\n\n\n\n特性\n第一个实现（阶乘 + 逆元 comb + SPF 筛分解）\n第二个实现（Pascal 组合表 + 试除分解）\n\n\n\n\n组合数计算\n预计算 fact 和 invfact 数组，用公式 (ab)=fact[a]fact[b]×fact[a−b]mod  p\\binom{a}{b} = \\frac{\\text{fact}[a]}{\\text{fact}[b] \\times \\text{fact}[a - b]} \\mod p(ba​)=fact[b]×fact[a−b]fact[a]​modp 每次 O(1)O(1)O(1) 快速计算\n用帕斯卡三角预计算 C[i][j]=(ij)C[i][j] = \\binom{i}{j}C[i][j]=(ji​) 查询时直接 O(1)O(1)O(1) 取表\n\n\n质因子分解\n先用线性/埃氏思路构造 SPF（最小质因子）表 spf[i]spf[i]spf[i] 分解时不断 v//=spf[v]v //= spf[v]v//=spf[v]，复杂度约 O(log⁡v)O(\\log{v})O(logv)\n每个 xxx 用试除法 x\\sqrt{x}x​ 搜索素因子，累计其指数\n\n\n预处理时间\n构造 fact, invfact：O(n+max⁡E)O(n + \\max E)O(n+maxE)（再加一次快速幂取逆）  构造 SPF：O(Mlog⁡log⁡M)O(M \\log \\log M)O(MloglogM)\n构造 CCC 表：O((n+max⁡E)×max⁡E)O\\bigl((n + \\max E) \\times \\max E\\bigr)O((n+maxE)×maxE)  试除分解：∑x=1MO(x)≈O(M3/2)\\sum_{x=1}^M O(\\sqrt{x}) \\approx O(M^{3/2})∑x=1M​O(x​)≈O(M3/2)\n\n\n空间开销\n两个长度 n+max⁡En + \\max En+maxE 的数组 + 一个长度 MMM 的 SPF 数组\nCCC 表大约 (n+max⁡E)×(max⁡E)(n + \\max E) \\times (\\max E)(n+maxE)×(maxE) 个整数\n\n\n适用场景\n当  max⁡Value\\max{Value}maxValue 更大（比如 10510^5105 、10610^6106） 时，SPF 分解会更快、更稳，阶乘逆元计算组合数也更节省空间\nn,max⁡Value≤104n, \\max{Value} \\le 10^4n,maxValue≤104 都较小，预先填表和试除都能在 1–2s 内完成\n\n\n代码复杂度\n略微复杂一些，需要处理逆元和 SPF 数组\n直观易懂，组合表和试除都很朴素\n\n\n\nQwen QWQ 32b给出的解，思路大致相同\n(预处理最小质因数 → 质因数分解存储 → 阶乘与逆元预计算 → DP到组合数学 → 前缀和优化)：\nclass Solution:    def idealArrays(self, n: int, maxValue: int) -&gt; int:        MOD = 10**9 + 7        t = n - 1        if t == 0:            return maxValue % MOD                max_num = maxValue                # 步骤 1：计算筛的 min_prime 数组.        min_prime = [0] * (max_num + 1)        for i in range(2, max_num + 1):            if min_prime[i] == 0:                min_prime[i] = i                for j in range(i*i, max_num+1, i):                    if min_prime[j] == 0:                        min_prime[j] = i                # 预计算 factor_list[m]：从质数到指数的字典.        factor_list = [&#123;&#125; for _ in range(max_num + 1)]                for m in range(2, max_num + 1):            num = m            factors = &#123;&#125;            while num &gt; 1:                p = min_prime[num]                cnt = 0                while num % p == 0:                    cnt += 1                    num //= p                factors[p] = cnt            factor_list[m] = factors.copy() if factors else &#123;&#125;                # 步骤 2：预计算 fact 和 inv_fact，最多 N=2e5.        N_fact = 2 * 10**5        fact = [1] * (N_fact + 1)        for i in range(1, N_fact + 1):            fact[i] = (fact[i-1] * i) % MOD                inv_fact = [1]*(N_fact + 1)        inv_fact[N_fact] = pow(fact[N_fact], MOD -2, MOD)        for i in range(N_fact -1, -1, -1):            inv_fact[i] = (inv_fact[i+1] * (i+1)) % MOD                # 步骤 3：计算 fm 数组.        fm = [0]*(max_num + 1)  # 从 0 到 maxValue 的索引.                for m in range(1, max_num + 1):            if m == 1:                factors_dict = &#123;&#125;            else:                factors_dict = factor_list[m]                        product = 1            for p in factors_dict:                a_i = factors_dict[p]                n_val = a_i + t - 1                k_val = t - 1                                # 选择 k 和 (n_val -k) 之间的较小值，以减少计算量.                if k_val &gt; (n_val - k_val):                    k_val = n_val - k_val                                # 计算 C(n_val, k_val)                c_n_k = fact[n_val] * inv_fact[k_val] % MOD                c_n_k = c_n_k * inv_fact[n_val - k_val] % MOD                product = (product * c_n_k) % MOD                        fm[m] = product                # 计算前缀数组.        prefix = [0]*(max_num + 1)        for i in range(1, max_num+1):            prefix[i] = (prefix[i-1] + fm[i]) % MOD                res = 0        for a_val in range(1, maxValue + 1):            m_max = maxValue // a_val            res += prefix[m_max]            res %= MOD                return res\n","categories":["算法"],"tags":["Algorithm","枚举与剪枝","困难","组合数学","快速幂"]},{"title":"LeetCode每日一题2025-04-26","url":"/post/count-subarrays-with-fixed-bounds.html","content":"2444. 统计定界子数组的数目 H\n给你一个整数数组 nums 和两个整数 minK 以及 maxK 。\nnums 的定界子数组是满足下述条件的一个子数组：\n\n子数组中的 最小值 等于 minK 。\n子数组中的 最大值 等于 maxK 。\n\n返回定界子数组的数目。\n子数组是数组中的一个连续部分。\n示例 1：\n\n输入：nums = [1,3,5,2,7,5], minK = 1, maxK = 5\n输出：2\n解释：定界子数组是 [1,3,5] 和 [1,3,5,2] 。\n\n示例 2：\n\n输入：nums = [1,1,1,1], minK = 1, maxK = 1\n输出：10\n解释：nums 的每个子数组都是一个定界子数组。共有 10 个子数组。\n\n提示：\n\n2 &lt;= nums.length &lt;= 10510^5105\n1 &lt;= nums[i], minK, maxK &lt;= 10610^6106\n\n问题分析\n我们要统计所有「最小值＝minK 且 最大值＝maxK」的子数组个数。核心在于：\n\n\n无效区间：任何超出区间 minK,maxKminK, maxKminK,maxK 的元素都会“破坏”子数组；我们记录它的最近位置 last_invalid，子数组一旦跨过此位置就一定包含不合格元素。\n\n\n关键位置：必须同时出现 minK 和 maxK，因此我们分别记录扫描到当前位置为止，最后一次出现 minK 的下标 last_min，以及最后一次出现 maxK 的下标 last_max。\n\n\n结尾贡献：对于每个位置 i，以它为结尾的所有合法子数组，起始位置 j 必须满足：\n\nj &gt; last_invalid（子数组中不包含任何无效元素）\n而且子数组要同时包含最近一次的 minK 和 maxK，也就是说 j ≤ min(last_min, last_max)。\n\n因此，以 i 结尾的合法子数组数量是：\nmax(0, min(last_min, last_max) - last_invalid)\n累加到全局答案中即可。\n\n\n算法思路\n\n定义三个指针/下标变量：\n\nlast_invalid：上一个不满足 minK ≤ nums[i] ≤ maxK 的位置（初始化为 −1）。\nlast_min：上一个等于 minK 的位置（初始化为 −1）。\nlast_max：上一个等于 maxK 的位置（初始化为 −1）。\n\n\n从左至右遍历数组，每到索引 i：\n\n若 nums[i] &lt; minK 或 nums[i] &gt; maxK，则更新 last_invalid = i。\n若 nums[i] == minK，则更新 last_min = i。\n若 nums[i] == maxK，则更新 last_max = i。\n\n\n以 i 结尾的所有合法子数组，起始点必须在 (last_invalid, min(last_min, last_max)] 之间，故可累加 max(0, min(last_min, last_max) - last_invalid) 到答案中。\n最终累加得到所有定界子数组的数量。\n\n时间复杂度\n\n时间复杂度：O(n)O(n)O(n)，其中 nnn 为数组长度\n空间复杂度：O(1)O(1)O(1)（仅使用常数额外变量）\n\n代码实现\nclass Solution:    def countSubarrays(self, nums: list[int], minK: int, maxK: int) -&gt; int:        last_invalid = -1     # 最后一个不在 [minK, maxK] 范围内的索引        last_min = -1         # 最后一个出现 minK 的索引        last_max = -1         # 最后一个出现 maxK 的索引        count = 0             # 结果计数        for i, x in enumerate(nums):            # 1）如果 x 超出 [minK, maxK] 区间，则标记为无效            if x &lt; minK or x &gt; maxK:                last_invalid = i            # 2）记录最新出现 minK 和 maxK 的位置            if x == minK:                last_min = i            if x == maxK:                last_max = i            # 3）计算以 i 结尾的合法子数组个数            #    起始点 j 必须 &gt; last_invalid，且 ≤ min(last_min, last_max)            valid_start = min(last_min, last_max)            if valid_start &gt; last_invalid:                count += (valid_start - last_invalid)        return count\n以 nums = [1,3,5,2,7,5], minK = 1, maxK = 5为例：\n\n\n\ni\nnums[i]\nlast_invalid\nlast_min\nlast_max\nmin(last_min, last_max)\n新增子数组 = max(0, min–last_invalid)\n累计 count\n\n\n\n\n-1\n—\n-1\n-1\n-1\n—\n—\n0\n\n\n0\n1\n-1\n0\n-1\n-1\nmax(0, -1 − (-1)) = 0\n0\n\n\n1\n3\n-1\n0\n-1\n-1\nmax(0, -1 − (-1)) = 0\n0\n\n\n2\n5\n-1\n0\n2\n0\nmax(0, 0 − (-1)) = 1\n1\n\n\n3\n2\n-1\n0\n2\n0\nmax(0, 0 − (-1)) = 1\n2\n\n\n4\n7 (&gt;5)\n4\n0\n2\n0\nmax(0, 0 − 4) = 0\n2\n\n\n5\n5\n4\n0\n5\n0\nmax(0, 0 − 4) = 0\n2\n\n\n\n\ni=2 时，nums[2]=5，更新 last_max=2，此时 min(last_min,last_max)=0，新增子数组有 1 个，即 [1,3,5]。\ni=3 时，nums[3]=2，没有更新 last_min/last_max，但依然可延伸前面那个“有效段”贡献 1 个，即 [1,3,5,2]。\ni=4 时跳到 7（无效），last_invalid=4，后续以任何 i≥4 结尾的子数组都必须从 5 之后开始；此时在位置 5 上虽然又出现了 maxK，但最早的 minK 还是在 0，所以 min(last_min,last_max)=0≤ last_invalid=4，无有效子数组。\n\n最终总数为 2。\n边界\n\nminK == maxK\n算法依然适用，此时要求子数组内所有元素都等于同一个值 K，也就统计所有连续等于 K 的子数组个数。\n数组中无 minK 或 maxK\n某一关键位置永远为 −1，则 min(last_min,last_max) = −1，每次贡献都为 0，最终答案 0。\n整型溢出\n累加次数最多是 O(n2/2)\\mathcal{O}(n^2/2)O(n2/2) 级别（当所有子数组都合法时），对于 n≤ 10510^5105，要用 64 位整型（Python 中 int 自动大整型）。\n\n","categories":["算法"],"tags":["Algorithm","困难","滑动窗口","双指针"]},{"title":"LeetCode每日一题2025-04-24","url":"/post/count-complete-subarrays-in-an-array.html","content":"2799. 统计完全子数组的数目 M\n给你一个由 正 整数组成的数组 nums 。\n如果数组中的某个子数组满足下述条件，则称之为 完全子数组 ：\n\n子数组中 不同 元素的数目等于整个数组不同元素的数目。\n\n返回数组中 完全子数组 的数目。\n子数组 是数组中的一个连续非空序列。\n示例 1：\n\n输入：nums = [1,3,1,2,2]\n输出：4\n解释：完全子数组有：[1,3,1,2]、[1,3,1,2,2]、[3,1,2] 和 [3,1,2,2] 。\n\n示例 2：\n\n输入：nums = [5,5,5,5]\n输出：10\n解释：数组仅由整数 5 组成，所以任意子数组都满足完全子数组的条件。子数组的总数为 10 。\n\n提示：\n\n1 &lt;= nums.length &lt;= 1000\n1 &lt;= nums[i] &lt;= 2000\n\n问题分析\n\n\n给定正整数数组 nums，长度为 n（≤1000\\le 1000≤1000）。\n\n\n记数组 nums 中 不同 元素的总数为 KKK。\n\n\n我们需要统计「子数组中不同元素数 等于KKK」的子数组个数。\n\n\n算法思路\n暴力枚举：枚举左端点 i (0⋯n−1)i\\text{ }(0\\cdots n-1)i (0⋯n−1) ，再枚举右端点 j (i⋯n−1)j\\text{ }(i\\cdots n-1)j (i⋯n−1)，对每个子数组 nums[i:j+1] 用哈希或 set 统计不同元素数，再对比是否等于 KKK。\n时间复杂度：\n\n枚举子数组一共 O(n2)O(n^2)O(n2)\n每个子数组去重也要 O(n)O(n)O(n)\n合计 O(n3)O(n^3)O(n3)，在 n=1000n=1000n=1000 时是不可行的（10910^9109 级别的操作）。\n\n\n暴力+优化也可通过测试：采用双重循环遍历所有可能的子数组，并检查每个子数组是否符合条件，对于每一个起始索引 i，逐步扩展结束索引 j，使用集合记录当前子数组中的元素。一旦集合大小达到整个数组的不同元素数量，则计数加一；若超过该数量则提前终止内层循环，时间复杂度最坏为O(n2)O(n^2)O(n2)\nclass Solution:    def countCompleteSubarrays(self, nums: List[int]) -&gt; int:        total_unique = len(set(nums))        if total_unique == 0:            return 0                K = total_unique        result = 0        n = len(nums)                for i in range(n):            current_set = set()            for j in range(i, n):                current_set.add(nums[j])                if len(current_set) == K:                    result += 1                elif len(current_set) &gt; K:                    break  # 一旦超出所需的唯一计数，就不需要检查其他元素        return result\n\n我们令函数\nF(k)=“不同元素数≤k”的子数组数量.F(k) = \\text{“不同元素数} \\leq k \\text{”的子数组数量}.\nF(k)=“不同元素数≤k”的子数组数量.\n则恰好等于 KKK 的子数组数目\n#{distinct=K}=F(K)−F(K−1).\\#\\{\\text{distinct} = K\\} = F(K) - F(K - 1).\n#{distinct=K}=F(K)−F(K−1).\n所有「不同数 ≤K\\le K≤K」的子数组共 F(K)F(K)F(K) 个，\n但其中也包括「不同数 ≤K−1\\le K−1≤K−1」的 F(K−1)F(K-1)F(K−1) 个，\n二者相减，即剩下「不同数恰好 = KKK」的部分。\n使用滑动窗口 + 双指针：\n\n窗口定义\n\n左指针 i，右指针 j，初始都指向 0。\n窗口 nums[i…j] 内维护哈希表 count，记录每个数字出现的次数。\n变量 distinct 表示当前窗口内 不同 元素的个数。\n\n\n右指针扩展\n\n遍历 j 从 0 到 n−1n-1n−1：\n\n将 nums[j] 加入窗口：若原来 count[nums[j]]==0，则 distinct += 1；再 count[nums[j]] += 1。\n\n\n\n\n左指针收缩\n\n当 distinct &gt; k 时，需要不断移动左指针 i：\n\n从窗口移出 nums[i]：count[nums[i]] -= 1；若 count[nums[i]] 变为 0，则 distinct -= 1；然后 i += 1\n\n\n收缩后，窗口再次保证 distinct ≤ k。\n\n\n计数子数组\n\n对于每一个新的 j 位置，当前窗口 所包含的所有合法子数组（以 j 为右端）数量就是窗口长度：j - i + 1。\n\n因为任意左端点 LLL 满足 i≤L≤ji \\le L \\le ji≤L≤j，子数组 nums[L…j] 都有 distinct ≤ k。\n\n\n\n\n累加结果\n\n对每个 j，将 j - i + 1 累加到 res，最终 res = F(k)。\n\n\n\n以 nums = [1,3,1,2,2]，k=2k=2k=2 为例，计算「不同数 ≤2\\le 2≤2」的子数组数：\n\n\n\n步骤\nj\n加入 nums[j]\nwindow\ndistinct\ni\n新增子数组数 j−i+1\n累计 res\n\n\n\n\n初始化\n—\n—\n[]\n0\n0\n—\n0\n\n\n1\n0\n1\n[1]\n1\n0\n0−0+1 = 1\n1\n\n\n2\n1\n3\n[1,3]\n2\n0\n1−0+1 = 2\n3\n\n\n3\n2\n1\n[1,3,1]\n2\n0\n2−0+1 = 3\n6\n\n\n4\n3\n2 → distinct=3\n[1,3,1,2] → 收缩 → [3,1,2]\n2 → 经过收缩\n1\n3−1+1 = 3\n9\n\n\n5\n4\n2\n[3,1,2,2]\n3→收缩→2\n2\n4−2+1 = 3\n12\n\n\n\n最终我们得到 F(2) = 12。\n类似地可以算出 F(1)，最后 F(2) - F(1) 就是「不同数恰好 =2=2=2」的子数组数。\n时间复杂度\n\n时间复杂度：一次 atMost 为 O(n)O(n)O(n)，每个元素最多进出窗口各一次共两次，故 O(n)O(n)O(n)\n空间复杂度：哈希表存储最多 nnn 个键，故 O(n)O(n)O(n)\n\n代码分解\n\n\n用「≤K\\le K≤K」和「≤K−1\\le K−1≤K−1」之差得到「=K=K=K」。\n\n\n滑动窗口维护「不同元素数 ≤k\\le k≤k」的区间，通过左右指针一遍扫描完成。\n\n\n累加 (j - i + 1) 即可统计当前右端下所有合法子数组。\n\n\n代码实现\nclass Solution:    def countCompleteSubarrays(self, nums):        # 整体不同元素个数        K = len(set(nums))        # 计算「不同元素 ≤ k」的子数组数量        def atMost(k):            count = &#123;&#125;       # 哈希表：元素 -&gt; 频次            res = 0            distinct = 0     # 当前窗口中不同元素数            left = 0         # 窗口左指针            for right, x in enumerate(nums):                # 右指针加入                if count.get(x, 0) == 0:                    distinct += 1                count[x] = count.get(x, 0) + 1                # 如果超过 k，左指针收缩                while distinct &gt; k:                    y = nums[left]                    count[y] -= 1                    if count[y] == 0:                        distinct -= 1                    left += 1                # 以 right 为结尾的「不同元素 ≤ k」子数组有 (right - left + 1) 个                res += right - left + 1            return res        # 答案 = 至多 K 不同 − 至多 (K-1) 不同        return atMost(K) - atMost(K - 1)\n","categories":["算法"],"tags":["Algorithm","中等","滑动窗口","哈希表","双指针"]},{"title":"LeetCode每日一题2025-04-27","url":"/post/count-subarrays-of-length-three-with-a-condition.html","content":"3392. 统计符合条件长度为 3 的子数组数目 E\n给你一个整数数组 nums ，请你返回长度为 3 的 子数组 的数量，满足第一个数和第三个数的和恰好为第二个数的一半。\n子数组 指的是一个数组中连续 非空 的元素序列。\n示例 1：\n\n输入： nums = [1,2,1,4,1]\n输出： 1\n解释：\n只有子数组 [1,4,1] 包含 3 个元素且第一个和第三个数字之和是中间数字的一半。number.\n\n示例 2：\n\n输入： nums = [1,1,1]\n**输出： ** 0\n解释：\n[1,1,1] 是唯一长度为 3 的子数组，但第一个数和第三个数的和不是第二个数的一半。\n\n提示：\n\n3 &lt;= nums.length &lt;= 100\n-100 &lt;= nums[i] &lt;= 100\n\n问题分析\n输入：长度为 nnn 的整数数组 nums，满足 3≤n≤1003 \\le n \\le 1003≤n≤100，元素取值 [−100,100][-100,100][−100,100]。\n目标：统计所有长度恰好为 3 的连续子数组 [a,b,c][a,b,c][a,b,c]，使得\na+c=b2⟺2(a+c)=b.a+c=\\frac{b}{2}\\quad\\Longleftrightarrow\\quad2(a+c)=b.\na+c=2b​⟺2(a+c)=b.\n因为子数组长度固定且很小（仅 3），子数组个数仅 n−2n-2n−2，可线性枚举，每个子数组只涉及 3 个元素，检查条件恒为常数时间。\n算法思路\n\n\n初始化\n\n计数器 ans = 0。\n\n\n\n遍历“中间位置”\n\n\n令指针 iii 从 1 到 n−2n-2n−2（包含），那么第 iii 个元素就是子数组的中间元素 b=nums[i]b = \\text{nums}[i]b=nums[i]。\n\n\n子数组的首尾分别是：\na=nums[i−1],c=nums[i+1].a = \\text{nums}[i-1],\\quad c = \\text{nums}[i+1].\na=nums[i−1],c=nums[i+1].\n\n\n\n\n判断并累加\n\n\n检查条件：\n2×(a+c)==b.2 \\times (a + c) == b.\n2×(a+c)==b.\n\n\n如果成立，ans += 1。\n\n\n\n\n返回结果\n\n遍历结束后，ans 即为满足条件的子数组数量。\n\n\n\n时间复杂度\n时间复杂度：\n\n暴力枚举每个窗口需要 O(n)O(n)O(n) 次检查，其中 n=len(nums)n = \\text{len}(nums)n=len(nums)，每次检查 O(1)O(1)O(1)，只需一次线性遍历，整体 O(n)O(n)O(n)。\n\n空间复杂度：\n\n仅使用常数级额外变量计数，O(1)O(1)O(1)。\n\n代码分解\nfunction countSubarrays(nums):    ans ← 0    for i from 1 to length(nums)-2:        a ← nums[i-1]        b ← nums[i]        c ← nums[i+1]        if 2*(a + c) == b:            ans ← ans + 1    return ans\n\n\nrange(1, len(nums)-1)：因为窗口长度固定 3，首元素索引为 i−1i-1i−1，尾元素索引为 i+1i+1i+1，故 iii 取值区间为 [1,n−2][1, n-2][1,n−2]。\n\n\n每次循环只做一次加法、一次乘法、一次比较，都是 O(1)O(1)O(1) 操作。\n\n\n代码实现\nfrom typing import Listclass Solution:    def countSubarrays(self, nums: List[int]) -&gt; int:        &quot;&quot;&quot;        统计所有长度=3 的连续子数组 [a, b, c] 满足 2*(a + c) == b。        时间复杂度：O(n)，空间复杂度：O(1)。        &quot;&quot;&quot;        ans = 0                     # 计数器，初始为 0                # i 从 1 到 len(nums)-2，确保 i-1, i, i+1 都在数组内        for i in range(1, len(nums) - 1):            a = nums[i - 1]         # 子数组首元素            b = nums[i]             # 子数组中间元素            c = nums[i + 1]         # 子数组尾元素                        # 判断核心条件：2*(a + c) == b            if 2 * (a + c) == b:                ans += 1            # 条件满足时，计数器加 1                return ans                  # 返回最终结果\n","categories":["算法"],"tags":["Algorithm","暴力搜索","简单","滑动窗口"]},{"title":"LeetCode每日一题2025-04-23","url":"/post/count-largest-group.html","content":"1399. 统计最大组的数目 E\n给你一个整数 n 。请你先求出从 1 到 n 的每个整数 10 进制表示下的数位和（每一位上的数字相加），然后把数位和相等的数字放到同一个组中。\n请你统计每个组中的数字数目，并返回数字数目并列最多的组有多少个。\n示例 1：\n\n输入：n = 13\n输出：4\n解释：总共有 9 个组，将 1 到 13 按数位求和后这些组分别是：\n[1,10]，[2,11]，[3,12]，[4,13]，[5]，[6]，[7]，[8]，[9]。总共有 4 个组拥有的数字并列最多。\n\n示例 2：\n\n输入：n = 2\n输出：2\n解释：总共有 2 个大小为 1 的组 [1]，[2]。\n\n示例 3：\n\n输入：n = 15\n输出：6\n\n示例 4：\n\n输入：n = 24\n输出：5\n\n提示：\n\n1 &lt;= n &lt;= 10410^4104\n\n问题分析\n给定一个整数 n，计算从1到n的每个数字的十进制位数和，并将具有相同位数和的数字分组。统计各组大小并找出最大值出现的次数。\n算法思路\n\n计算每位数字的和：遍历每个数字 i，将各位相加得到其和。\n统计每种和的频率：使用字典记录每个位数和对应有多少个数字。\n找出最大组大小及对应的组数量：\n\n找出所有组中的最大组大小。\n统计有多少个不同的位数和的组达到该最大值。\n\n\n\n时间复杂度\n\n计算位数和：对于每个数字 iii，分解其各位需要 O(log⁡i)O(\\log i)O(logi) 的时间（由于每次除以10）。总时间为 O(n×log⁡n)O(n \\times \\log n)O(n×logn)。\n统计与查找最大值：遍历所有键值对的时间为 O(k)O(k)O(k)，其中 kkk 是不同位数和的组的数量。在最坏情况下 kkk 约为 37（例如数字 9999 的各位和是 9+9+9+9 = 36），因此这部分可以视为常量时间。\n\n总的时间复杂度：O(nlog⁡n)O(n \\log n)O(nlogn)，对于 n ≤ 10410^4104 是可接受的。\n\n使用字典存储不同位数和对应的计数值，空间复杂度为 O(k)O(k)O(k)。最坏情况下 k≈O(log⁡n)k \\approx O(\\log n)k≈O(logn)（例如所有数字位数和都唯一），因此是线性空间。\n\n代码分解\n\n初始化字典groups\n从1遍历到n，计算 i 的数位和，在 groups 中将对应键的计数加 1\n计算出最大频次 max_size\n遍历 groups，统计有多少个键的值等于 max_size 并返回\n\n代码实现\nfrom collections import defaultdictclass Solution:    def countLargestGroup(self, n: int) -&gt; int:        # 使用字典统计每个数位和出现的次数        groups = defaultdict(int)                for i in range(1, n + 1):            # 计算当前数字i的十进制各位之和            digit_sum = sum(map(int, str(i)))            groups[digit_sum] += 1                if not groups:            return 0                # 找出最大的组大小        max_size = max(groups.values())                # 统计有多少个组达到了这个最大值        return sum(1 for size in groups.values() if size == max_size)\n","categories":["算法"],"tags":["Algorithm","暴力搜索","数位处理","简单","枚举与剪枝"]},{"title":"LeetCode每日一题2025-04-25","url":"/post/count-of-interesting-subarrays.html","content":"2845. 统计趣味子数组的数目 M\n给你一个下标从 0 开始的整数数组 nums ，以及整数 modulo 和整数 k 。\n请你找出并统计数组中 趣味子数组 的数目。\n如果 子数组 nums[l..r] 满足下述条件，则称其为 趣味子数组 ：\n\n在范围 [l, r] 内，设 cnt 为满足 nums[i] % modulo == k 的索引 i 的数量。并且 cnt % modulo == k 。\n\n以整数形式表示并返回趣味子数组的数目。\n注意： 子数组是数组中的一个连续非空的元素序列。\n示例 1：\n\n输入：nums = [3,2,4], modulo = 2, k = 1\n输出：3\n解释：在这个示例中，趣味子数组分别是：\n子数组 nums[0…0] ，也就是 [3] 。\n\n在范围 [0, 0] 内，只存在 1 个下标 i = 0 满足 nums[i] % modulo == k 。\n因此 cnt = 1 ，且 cnt % modulo == k 。\n子数组 nums[0…1] ，也就是 [3,2] 。\n在范围 [0, 1] 内，只存在 1 个下标 i = 0 满足 nums[i] % modulo == k 。\n因此 cnt = 1 ，且 cnt % modulo == k 。\n子数组 nums[0…2] ，也就是 [3,2,4] 。\n在范围 [0, 2] 内，只存在 1 个下标 i = 0 满足 nums[i] % modulo == k 。\n因此 cnt = 1 ，且 cnt % modulo == k 。\n可以证明不存在其他趣味子数组。因此，答案为 3 。\n\n\n示例 2：\n\n输入：nums = [3,1,9,6], modulo = 3, k = 0\n输出：2\n解释：在这个示例中，趣味子数组分别是：\n子数组 nums[0…3] ，也就是 [3,1,9,6] 。\n\n在范围 [0, 3] 内，只存在 3 个下标 i = 0, 2, 3 满足 nums[i] % modulo == k 。\n因此 cnt = 3 ，且 cnt % modulo == k 。\n子数组 nums[1…1] ，也就是 [1] 。\n在范围 [1, 1] 内，不存在下标满足 nums[i] % modulo == k 。\n因此 cnt = 0 ，且 cnt % modulo == k 。\n可以证明不存在其他趣味子数组，因此答案为 2 。\n\n\n提示：\n\n1 &lt;= nums.length &lt;= 10510^5105\n1 &lt;= nums[i] &lt;= 10910^9109\n1 &lt;= modulo &lt;= 10910^9109\n0 &lt;= k &lt; modulo\n\n问题分析\n我们要统计子数组中满足以下两个条件的子数组个数：\n\n在子数组范围内，满足 nums[i] % modulo == k 的元素个数记为 cnt\n且 cnt % modulo == k\n\n算法思路\n\n\n为了更方便地计数，我们先把原数组 nums 转换成一个二值数组 b：\nb[i] = 1 if nums[i] % modulo == k else 0\n此时，任意子数组 [l..r] 中满足条件的元素个数\n就是 b[l] + b[l+1] + … + b[r]。\n\n\n引入前缀和 + 模运算\n定义前缀和数组 P，并对 modulo 取模，使得计算更简单：\nP[0] = 0P[i] = (b[0] + b[1] + … + b[i-1]) % modulo    （1 ≤ i ≤ n）\n\n注意：P[i] 表示前 i 个元素（即 b[0..i-1]）的和 mod modulo\n\n那么子数组 [l..r] 的“有趣计数” cnt = b[l] + … + b[r]，可以写成：\ncnt = (P[r+1] - P[l] + modulo) % modulo\n我们需要 cnt % modulo == k，即\n(P[r+1] - P[l]) % modulo == k⇔ P[r+1] ≡ P[l] + k   (modulo)⇔ P[l] ≡ P[r+1] - k   (modulo)\n\n\n利用哈希表计数\n由上面等式可知：在遍历到位置 r（即计算出 P[r+1]）时，我们只要知道有多少个 l &lt; r+1 使得\nP[l]≡(P[r+1]−k) mod moduloP[l] \\equiv (P[r+1] - k) \\bmod \\text{modulo}\nP[l]≡(P[r+1]−k)modmodulo\n即可将这些子数组都计入答案。因此，我们用一个哈希表 cntMap 来维护“每种前缀和出现的次数”：\n\n键：某个值 v 表示前缀和 P[*] = v\n值：该前缀和出现了多少次\n\n\n\n时间复杂度\n时间复杂度：\n\n遍历一次数组，共 n 步\n每步中哈希表的查询与更新均摊 O(1) → 总体 O(n)\n\n空间复杂度：哈希表 cntMap 最多存储 O(min(n, modulo)) 个不同的前缀和值 → 最坏 O(n)，通常远小于 n\n代码分解\n\n\n初始化\ncntMap = defaultdict(int)cntMap[0] = 1cur = 0    # 当前前缀和 P[i]（初始化为 P[0]）ans = 0\n\ncntMap[0] = 1：表示空前缀（即 P[0]）出现 1 次，便于统计以开头就满足条件的子数组\n\n\n\n遍历数组\n对于每个 x = nums[i]，更新：\nif x % modulo == k:    cur = (cur + 1) % modulo# 此时 cur = P[i+1]\n\n\n查询并累加\n计算目标前缀和值：\ntarget = (cur - k + modulo) % moduloans += cntMap[target]\n这一步相当于“找到所有 l，使得 P[l] == target”，将其数量直接加到答案中\n\n\n更新哈希表\ncntMap[cur] += 1\n将当前前缀和也记入哈希表，以便后续作为 l 被使用\n\n\n遍历结束后，ans 即为所有“趣味子数组”的总数\n代码实现\nfrom collections import defaultdictfrom typing import Listclass Solution:    def countInterestingSubarrays(self, nums: List[int], modulo: int, k: int) -&gt; int:        # b[i] = 1 if nums[i] % modulo == k else 0        # 前缀和计数映射        cntMap = defaultdict(int)        cntMap[0] = 1    # 初始：空前缀和为 0 出现过一次                cur = 0          # 当前前缀和（modulo 取模后）        ans = 0                for x in nums:            # 转换 b[i] 并更新前缀和            if x % modulo == k:                cur = (cur + 1) % modulo                        # 计算能与当前前缀和配对的目标值            target = (cur - k + modulo) % modulo            ans += cntMap[target]                        # 记录当前前缀和出现次数            cntMap[cur] += 1                return ans\n以 nums = [3,2,4]，modulo = 2，k = 1 为例：\n\n\n\ni\nnums[i]\nnums[i]%2==1?\nb[i]\ncur (P[i+1])\ntarget=(cur−k)%2\ncntMap before\n新增 ans\ncntMap after\n\n\n\n\n初始\n\n\n\ncur = 0\n\n{0:1}\n0\n{0:1}\n\n\ni=0\n3\n是\n1\n(0+1)%2 = 1\n(1-1)%2 = 0\n{0:1}\n+1 → 1\n{0:1, 1:1}\n\n\ni=1\n2\n否\n0\n(1+0)%2 = 1\n(1-1)%2 = 0\n{0:1,1:1}\n+1 → 2\n{0:1, 1:2}\n\n\ni=2\n4\n否\n0\n(1+0)%2 = 1\n(1-1)%2 = 0\n{0:1,1:2}\n+1 → 3\n{0:1, 1:3}\n\n\n\n\n\ni=0：cur=1，target=0，cntMap[0]=1，ans=1\n\n\ni=1：cur=1，target=0，cntMap[0]=1，ans=2\n\n\ni=2：cur=1，target=0，cntMap[0]=1，ans=3\n\n\n","categories":["算法"],"tags":["Algorithm","中等","数据结构","哈希表","前缀和"]},{"title":"LeetCode每日一题2025-04-29","url":"/post/count-subarrays-where-max-element-appears-at-least-k-times.html","content":"2962. 统计最大元素出现至少 K 次的子数组 M\n给你一个整数数组 nums 和一个 正整数 k 。\n请你统计有多少满足 「 nums 中的 最大 元素」至少出现 k 次的子数组，并返回满足这一条件的子数组的数目。\n子数组是数组中的一个连续元素序列。\n示例 1：\n\n输入：nums = [1,3,2,3,3], k = 2\n输出：6\n解释：包含元素 3 至少 2 次的子数组为：[1,3,2,3]、[1,3,2,3,3]、[3,2,3]、[3,2,3,3]、[2,3,3] 和 [3,3] 。\n\n示例 2：\n\n输入：nums = [1,4,2,1], k = 3\n输出：0\n解释：没有子数组包含元素 4 至少 3 次。\n\n提示：\n\n1 &lt;= nums.length &lt;= 10510^5105\n1 &lt;= nums[i] &lt;= 10610^6106\n1 &lt;= k &lt;= 10510^5105\n\n问题分析\n给定一个长度为 n 的整数数组 nums 和正整数 k，我们需要统计满足“子数组中数组 nums 的最大元素至少出现 k 次”的所有连续子数组的个数。\n\n全局最大值：数组中所有元素的最大值，记作 M = max(nums)。\n子数组：数组中任意一段连续的元素序列。\n目标：统计所有子数组中，元素 M 出现次数 ≥ k 的子数组个数。\n\n直接枚举所有子数组会有 O(n2)O(n^2)O(n2) 个，无法在 n ≤ 10510^5105 的规模下通过。因此，需要一个 O(n)O(n)O(n) 或 O(nlog⁡n)O(n \\log n)O(nlogn) 的方法。\n算法思路\n\n全局最大值定位：首先在数组 nums 中找到最大的元素 M = max(nums)。\n子数组计数思路：我们要统计所有包含元素 M 至少出现 k 次的连续子数组。\n滑动窗口＋双指针：统计“包含 M 出现次数 &lt; k 的子数组数目”，记为 cnt_less。\n\n用双指针 left, right 扩展窗口，维护窗口中 M 的出现次数 count_M。\n每次将 right 向右移动，若 nums[right] == M 则 count_M += 1。\n当 count_M &gt;= k 时，窗口不再满足“&lt;k”条件，需要移动 left 且在移动时相应地更新 count_M，直到 count_M &lt; k。\n对于每一个 right，当前满足 &lt; k 的最长窗口长度是 right - left + 1，将其累加到 cnt_less。\n\n\n总子数组数目：total=n(n+1)2.\\text {total}= \\frac{n(n+1)}2\\text.total=2n(n+1)​.\n答案：answer=total−cnt_less\\text{answer} = \\text{total} - \\text{cnt\\_less}answer=total−cnt_less，即所有子数组减去不满足条件的那些。\n\n时间复杂度\n时间复杂度：O(n)O(n)O(n)，left 和 right 指针各最多移动 nnn 次。\n空间复杂度：O(1)O(1)O(1)，只使用常数级的额外变量。\n代码分解\n\n\n找最大值 ：M = max(nums)\n\n\n初始化\nn = len(nums)left = 0count_M = 0cnt_less = 0\n\n\n滑动窗口循环\nfor right in range(n):    if nums[right] == M:        count_M += 1    # 收缩左端，直到 count_M &lt; k    while count_M &gt;= k:        if nums[left] == M:            count_M -= 1        left += 1    # 累加以 right 结尾的不满足子数组数    cnt_less += (right - left + 1)\n\n\n计算并返回结果\ntotal = n * (n + 1) // 2return total - cnt_less\n\n\n代码实现\nclass Solution:    def countSubarrays(self, nums: List[int], k: int) -&gt; int:        n = len(nums)        # 1. 找到全局最大值 M        M = max(nums)        # 2. 统计出现次数 &lt; k 的子数组数（滑动窗口）        left = 0        count_M = 0   # 窗口中 M 的出现次数        cnt_less = 0  # 子数组中 M 出现次数 &lt; k 的数量        # 3. 滑动窗口遍历所有可能的右端点        for right in range(n):            # 扩张窗口：若新加入元素是 M，则计数器 +1            if nums[right] == M:                count_M += 1            # 当窗口中 M 出现次数 &gt;= k 时，收缩 left            while count_M &gt;= k:                if nums[left] == M:                    count_M -= 1                left += 1            # 此时窗口 [left..right] 都是 &lt; k，子数组数量 = 窗口长度            # 以 right 结尾的所有子数组的起点可以是 left, left+1, …, right            cnt_less += (right - left + 1)        # 4. 计算总子数组数并取差        total = n * (n + 1) // 2        return total - cnt_less\n\n\n输入：nums = [1,3,2,3,3], k = 2\n\n全局最大值 M = 3\n统计 &lt;2 次的子数组数 cnt_less = 15 - 6 = 9 （总子数组 15 个，满足条件 6 个）\n返回 15 - 9 = 6，与题目示例一致。\n\n\n\n输入：nums = [1,4,2,1], k = 3\n\nM = 4，在任何子数组中最多出现 1 次，均 &lt;3\ncnt_less = total = 10，所以返回 10 - 10 = 0。\n\n\n\n","categories":["算法"],"tags":["Algorithm","中等","滑动窗口","前缀和","双指针"]},{"title":"LeetCode每日一题2025-04-28","url":"/post/count-subarrays-with-score-less-than-k.html","content":"2302. 统计得分小于 K 的子数组数目 H\n一个数组的 分数 定义为数组之和 乘以 数组的长度。\n\n比方说，[1, 2, 3, 4, 5] 的分数为 (1 + 2 + 3 + 4 + 5) * 5 = 75 。\n\n给你一个正整数数组 nums 和一个整数 k ，请你返回 nums 中分数 严格小于 k 的 非空整数子数组数目。\n子数组 是数组中的一个连续元素序列。\n示例 1：\n\n输入：nums = [2,1,4,3,5], k = 10\n输出：6\n解释：\n有 6 个子数组的分数小于 10 ：\n\n[2] 分数为 2 * 1 = 2 。\n[1] 分数为 1 * 1 = 1 。\n[4] 分数为 4 * 1 = 4 。\n[3] 分数为 3 * 1 = 3 。\n[5] 分数为 5 * 1 = 5 。\n[2,1] 分数为 (2 + 1) * 2 = 6 。\n注意，子数组 [1,4] 和 [4,3,5] 不符合要求，因为它们的分数分别为 10 和 36，但我们要求子数组的分数严格小于 10 。\n\n\n示例 2：\n\n输入：nums = [1,1,1], k = 5\n输出：5\n解释：\n除了 [1,1,1] 以外每个子数组分数都小于 5 。\n[1,1,1] 分数为 (1 + 1 + 1) * 3 = 9 ，大于 5 。\n所以总共有 5 个子数组得分小于 5 。\n\n提示：\n\n1 &lt;= nums.length &lt;= 10510^5105\n1 &lt;= nums[i] &lt;= 10510^5105\n1 &lt;= k &lt;= 101510^{15}1015\n\n问题分析\n\n\n分数 monotonic 性质\n对于正整数数组，子数组向右扩展会同时增加「和」与「长度」，因此分数\nscore(l,r)=(∑i=lrnums[i])×(r−l+1)\\text{score}(l, r) = \\left( \\sum_{i=l}^{r} \\text{nums}[i] \\right) \\times (r - l + 1)\nscore(l,r)=(i=l∑r​nums[i])×(r−l+1)\n随着 lll 不变而 rrr 增大时单调递增；同理，对于固定的右端点 rrr ，若从左端点 lll 开始的子数组已满足 (∑i=lrnums[i])×(r−l+1)&lt;k\\left( \\sum_{i=l}^{r} \\text{nums}[i] \\right) \\times (r - l + 1)&lt;k(∑i=lr​nums[i])×(r−l+1)&lt;k，那么从任意 l′&gt;ll&#x27; &gt; ll′&gt;l 开始到 rrr 的子数组也必然满足该不等式，当 lll 增大（窗口缩小）时，分数单调递减。\n\n\n利用双指针维护合法区间\n\n用指针 l、r 表示当前窗口 [l..r][l..r][l..r]。\n保证窗口内任何子数组（以任意左端点 ≥l\\ge l≥l 出发、以 rrr 结尾）的分数都严格小于 kkk。\n随着 r 从左向右遍历，将 nums[r] 加入当前窗口的累加和 window_sum。\n若此时 window_sum * (r-l+1) ≥ k，则不断收缩左端 l++（并从 window_sum 中减去 nums[l]），直到重新满足 &lt; k。\n\n\n\n计数方式\n对于每个右端点 rrr，一旦窗口调到了最大合法大小 [l..r][l..r][l..r]，那么所有起点在 l,l+1,…,rl, l+1, \\dots, rl,l+1,…,r 的子数组都合法，共有 r−l+1r - l + 1r−l+1 个。\n\n\n算法思路\n\n\n初始化：l = 0, window_sum = 0, ans = 0\n\n\n遍历 r 从 0 到 n-1：\n\n\nwindow_sum += nums[r]\n\n\n当 window_sum * (r - l + 1) ≥ k 时：\nwhile l &lt;= r and window_sum * (r - l + 1) &gt;= k:    window_sum -= nums[l]    l += 1\n\n\n此时 [l..r] 中所有子数组都合法，其数量为 r - l + 1，加到 ans。.\n\n\n\n\n遍历结束，返回 ans。\n\n\n时间复杂度\n时间复杂度：指针 r 从左向右遍历一遍：O(n)O(n)O(n)；l 最多也只会从 000 移动到 n−1n-1n−1：O(n)O(n)O(n)；合计 O(n)O(n)O(n)。\n空间复杂度：只使用了若干常数变量，O(1)O(1)O(1)。\n代码分解\n初始化  l = 0            # 窗口左端  window_sum = 0   # 窗口 [l..r] 的元素和  ans = 0          # 累计答案遍历 r 从 0 到 n-1：  1. 将 nums[r] 加入窗口和     window_sum += nums[r]  2. 如果窗口分数 &gt;= k，则移动 l 收缩：     while l ≤ r 且 window_sum * (r - l + 1) ≥ k:         window_sum -= nums[l]         l += 1     # 结束后，[l..r] 窗口恢复到「所有子数组分数 &lt; k」状态  3. 以 r 为右端点的合法子数组有 (r - l + 1) 个，累加到 ans     ans += (r - l + 1)返回 ans\n代码实现\nfrom typing import Listclass Solution:    def countSubarrays(self, nums: List[int], k: int) -&gt; int:        &quot;&quot;&quot;        返回 nums 中所有分数 &lt; k 的非空子数组数量。        分数定义为 子数组之和 * 子数组长度。        &quot;&quot;&quot;        n = len(nums)        l = 0        window_sum = 0        ans = 0                for r in range(n):            window_sum += nums[r]            # 收缩左端，直到窗口合法            while l &lt;= r and window_sum * (r - l + 1) &gt;= k:                window_sum -= nums[l]                l += 1            # 以 r 为右端点的所有子数组数            ans += (r - l + 1)                return ans\n以 nums = [2,1,4,3,5], k = 10 为例：\n\n\n\n步骤\nr\n加入 nums[r]\nwindow_sum\nl\n检查 &amp; 收缩\n合法子数组数 r−l+1r-l+1r−l+1\n累计 ans\n\n\n\n\n初始\n—\n—\n0\n0\n—\n—\n0\n\n\n1\n0\n+2 → 2\n2\n0\n2∗1&lt;102*1&lt;102∗1&lt;10✓\n0–0：1 个\n1\n\n\n2\n1\n+1 → 3\n3\n0\n3∗2&lt;103*2&lt;103∗2&lt;10✓\n0–1：2 个\n3\n\n\n3\n2\n+4 → 7\n7\n0\n7∗3=21≥10×7*3=21\\ge 10\\times7∗3=21≥10× → 收缩 – remove 2 → sum=5, l=1 5∗2=10≥10×5*2=10\\ge 10\\times5∗2=10≥10× → 收缩 – remove 1 → sum=4, l=2\n2–2：1 个\n4\n\n\n4\n3\n+3 → 7\n7\n2\n7∗2=14≥10×7*2=14\\ge 10\\times7∗2=14≥10× → 收缩 – remove 4 → sum=3, l=3 3∗1=3&lt;10×3*1=3 &lt; 10\\times3∗1=3&lt;10×✓\n3–3：1 个\n5\n\n\n5\n4\n+5 → 8\n8\n3\n8∗2=16≥10×8*2=16\\ge 10\\times8∗2=16≥10× → 收缩 – remove 3 → sum=5, l=4 5∗1=5&lt;105*1=5 &lt; 105∗1=5&lt;10✓\n4–4：1 个\n6\n\n\n\n","categories":["算法"],"tags":["Algorithm","困难","滑动窗口","前缀和","双指针"]},{"title":"LeetCode每日一题2025-05-03","url":"/post/minimum-domino-rotations-for-equal-row.html","content":"1007. 行相等的最少多米诺旋转 M\n在一排多米诺骨牌中，tops[i] 和 bottoms[i] 分别代表第 i 个多米诺骨牌的上半部分和下半部分。（一个多米诺是两个从 1 到 6 的数字同列平铺形成的 —— 该平铺的每一半上都有一个数字。）\n我们可以旋转第 i 张多米诺，使得 tops[i] 和 bottoms[i] 的值交换。\n返回能使 tops 中所有值或者 bottoms 中所有值都相同的最小旋转次数。\n如果无法做到，返回 -1.\n示例 1：\n\n\n输入：tops = [2,1,2,4,2,2], bottoms = [5,2,6,2,3,2]\n输出：2\n解释：\n图一表示：在我们旋转之前， tops 和 bottoms 给出的多米诺牌。\n如果我们旋转第二个和第四个多米诺骨牌，我们可以使上面一行中的每个值都等于 2，如图所示。\n\n示例 2：\n\n输入：tops = [3,5,1,2,3], bottoms = [3,6,3,3,4]\n输出：-1\n解释： 在这种情况下，不可能旋转多米诺牌使一行的值相等。\n\n提示：\n\n2 &lt;= tops.length &lt;= 2 * 10⁴\nbottoms.length == tops.length\n1 &lt;= tops[i], bottoms[i] &lt;= 6\n\n问题分析\n给定两条长度相同的数组 tops 和 bottoms，表示一排多米诺骨牌的上下数字。你可以对任意一张牌做“旋转”操作（即上下数字交换位置）。目标是让 整条“上行” 或 整条“下行” 的数字都相同，求所需的最少旋转次数；如果做不到，则返回 -1。\n算法思路\n假设最终我们要把上行全部变成某个数字 x。那么对于第 1 张牌，它转前在上行是 tops[0]，转后可能是拿下面的 bottoms[0] 过来。\n\n如果最终目标行全是 x，第 1 张牌要么原本上面就是 x（即 tops[0] == x），要么通过旋转后上面成为 bottoms[0] == x。\n因此，唯一可能的候选 x 就是 &#123; tops[0], bottoms[0] &#125; 两个值之一。\n其它任何值作为目标，都不可能同时兼顾第 1 张牌。\n\n时间复杂度\n时间复杂度：O(n)O(n)O(n)，其中 nnn 是多米诺数量。至多对两个候选各做一次「线性遍历」。\n空间复杂度：O(1)O(1)O(1)，只用了常数级额外变量（两个计数器和一个候选集合）。\n代码分解\n\n\n确定候选目标值\n只可能让最终整行相同的值是第一张牌上或下的数字，记为 x1 = tops[0]、x2 = bottoms[0]。\n\n\n对每个候选值 x，遍历整排牌\n\n用两个计数器 rot_top 和 rot_bot 分别记录：\n\nrot_top：若想让 上行tops 全部变为 x，需要旋转的次数；\nrot_bot：若想让 下行bottoms 全部变为 x，需要旋转的次数。\n\n\n遍历索引 i，对每一张牌：\n\n若 tops[i]≠x 且 bottoms[i]≠x，说明这张牌无论如何（原地或旋转）都无法在上行或下行出现 x，立即返回不可行（记为无穷大，最后结果取最小会被过滤）。\n否则：\n\n想让上行变成 x：如果 tops[i]≠x，则必须旋转这一张，令 rot_top++。\n想让下行变成 x：如果 bottoms[i]≠x，则必须旋转这一张，令 rot_bot++。\n\n\n\n\n\n\n\n取两条方案中的最小值\n\n对候选 x1、x2 分别计算后（要么把上行全换成 x，需要 rot_top 次旋转；\n要么把下行全换成 x，需要 rot_bot 次旋转），\n答案为其中较小的旋转次数；\n若都是无穷大，则返回 -1。\n\n\n\n小结\n\n从 &#123; tops[0], bottoms[0] &#125; 中拿到至多两个候选 x。\n对每个候选值调用上面“检查并计数”逻辑，得到一个旋转次数（或“无解”标记）。\n在这两个结果中取最小，若都是“无解”，则返回 -1，否则返回该最小值。\n\n\n\n代码实现\nfrom typing import Listclass Solution:    def minDominoRotations(self, tops: List[int], bottoms: List[int]) -&gt; int:        # 内部函数：给定目标 x，返回让上行或下行全为 x 的最少旋转次数        # 如果无解，则返回 float(&#x27;inf&#x27;)        def check(x: int) -&gt; int:            rot_top = 0   # 让 tops 全为 x，需要的旋转次数            rot_bot = 0   # 让 bottoms 全为 x，需要的旋转次数            for t, b in zip(tops, bottoms):                # 如果这张牌两面都不是 x，就不可能通过任何旋转获得 x                if t != x and b != x:                    return float(&#x27;inf&#x27;)  # 无解                # 若上面不是 x，则必须旋转一次                if t != x:                    rot_top += 1                # 若下面不是 x，则必须旋转一次                if b != x:                    rot_bot += 1            # 返回两种方案的较小旋转次数            return min(rot_top, rot_bot)        # 仅需检查前第一张牌的两个面        candidates = &#123;tops[0], bottoms[0]&#125;        ans = float(&#x27;inf&#x27;)        # 分别试每个候选值        for x in candidates:            ans = min(ans, check(x))        # 若仍是无穷，说明两个候选都无解        return -1 if ans == float(&#x27;inf&#x27;) else ans\n以 tops = [2,1,2,4,2,2]，bottoms = [5,2,6,2,3,2] 为例：\n\n候选集合：&#123; 2, 5 &#125;\n\n试 x = 2\n\n\n\ni\ntops[i]\nbottoms[i]\ntops[i]==2?\nbottoms[i]==2?\nrot_top 增量\nrot_bot 增量\n\n\n\n\n0\n2\n5\n是\n否\n0\n1\n\n\n1\n1\n2\n否\n是\n1\n0\n\n\n2\n2\n6\n是\n否\n0\n1\n\n\n3\n4\n2\n否\n是\n1\n0\n\n\n4\n2\n3\n是\n否\n0\n1\n\n\n5\n2\n2\n是\n是\n0\n0\n\n\n\n\n\n\n合计\n2\n3\n\n\n\n试 x = 5\n检查到 tops[1]=1 且 bottoms[1]=2 都不是 5，立即判定无解（记作 ∞）。\n最终在 &#123;2, ∞&#125; 中取最小，就是 2。\n","categories":["算法"],"tags":["Algorithm","枚举与剪枝","中等","贪心"]},{"title":"LeetCode每日一题2025-04-30","url":"/post/find-numbers-with-even-number-of-digits.html","content":"1295. 统计位数为偶数的数字 E\n给你一个整数数组 nums，请你返回其中包含 偶数 个数位的数字的个数。\n示例 1：\n\n输入：nums = [12,345,2,6,7896]\n输出：2\n解释：\n12 是 2 位数字（位数为偶数）\n345 是 3 位数字（位数为奇数）\n2 是 1 位数字（位数为奇数）\n6 是 1 位数字 位数为奇数）\n7896 是 4 位数字（位数为偶数）\n因此只有 12 和 7896 是位数为偶数的数字\n\n示例 2：\n\n输入：nums = [555,901,482,1771]\n输出：1\n解释：\n只有 1771 是位数为偶数的数字。\n\n提示：\n\n1 &lt;= nums.length &lt;= 500\n1 &lt;= nums[i] &lt;= 10510^5105\n\n算法思路\n\n遍历：对输入数组 nums 中的每个数字 num 进行遍历（共 n 个）。\n计数位数：\n\n方法 A（数学方式）：不断除以 10 直至 num 为 0，统计除法次数。\n方法 B（字符串方式）：将 num 转为字符串 s = str(num)，直接用 len(s) 获取位数。\n\n\n判断奇偶：如果位数 digit_count % 2 == 0，则计数器加 1。\n返回结果：遍历结束后输出计数器的值。\n\n时间复杂度\n方法 A：对每个数做除法操作，平均每个数的位数为 d（d=O(log⁡10(num))d = O(\\log_{10}(num))d=O(log10​(num))），总体为 O(n⋅d)O(n·d)O(n⋅d)。\n方法 B：字符串转换和长度计算也约为 O(n⋅d)O(n·d)O(n⋅d)。 由于 num[i] ≤ 10510^5105，d ≤ 6，故可视为 线性 O(n)O(n)O(n)。\n空间复杂度：O(1)O(1)O(1)（忽略输出和输入空间）。\n代码实现\nfrom typing import Listclass Solution:    def findNumbers(self, nums: List[int]) -&gt; int:        count = 0        for num in nums:            # 方法 B：字符串方式统计位数            if len(str(num)) % 2 == 0:                count += 1        return count\n","categories":["算法"],"tags":["Algorithm","暴力搜索","数位处理","简单"]},{"title":"LeetCode每日一题2025-05-01","url":"/post/maximum-number-of-tasks-you-can-assign.html","content":"2071. 你可以安排的最多任务数目 H\n给你 n 个任务和 m 个工人。每个任务需要一定的力量值才能完成，需要的力量值保存在下标从 0 开始的整数数组 tasks 中，第 i 个任务需要 tasks[i] 的力量才能完成。每个工人的力量值保存在下标从 0 开始的整数数组 workers 中，第 j 个工人的力量值为 workers[j] 。每个工人只能完成 一个 任务，且力量值需要 大于等于 该任务的力量要求值（即 workers[j] &gt;= tasks[i] ）。\n除此以外，你还有 pills 个神奇药丸，可以给 一个工人的力量值 增加 strength 。你可以决定给哪些工人使用药丸，但每个工人 最多 只能使用 一片 药丸。\n给你下标从 0 开始的整数数组tasks 和 workers 以及两个整数 pills 和 strength ，请你返回 最多 有多少个任务可以被完成。\n示例 1：\n\n输入：tasks = [3,2,1], workers = [0,3,3], pills = 1, strength = 1\n输出：3\n解释：\n我们可以按照如下方案安排药丸：\n\n给 0 号工人药丸。\n0 号工人完成任务 2（0 + 1 &gt;= 1）\n1 号工人完成任务 1（3 &gt;= 2）\n2 号工人完成任务 0（3 &gt;= 3）\n\n\n示例 2：\n\n输入：tasks = [5,4], workers = [0,0,0], pills = 1, strength = 5\n输出：1\n解释：\n我们可以按照如下方案安排药丸：\n\n给 0 号工人药丸。\n0 号工人完成任务 0（0 + 5 &gt;= 5）\n\n\n示例 3：\n\n输入：tasks = [10,15,30], workers = [0,10,10,10,10], pills = 3, strength = 10\n输出：2\n解释：\n我们可以按照如下方案安排药丸：\n\n给 0 号和 1 号工人药丸。\n0 号工人完成任务 0（0 + 10 &gt;= 10）\n1 号工人完成任务 1（10 + 10 &gt;= 15）\n\n\n示例 4：\n\n输入：tasks = [5,9,8,5,9], workers = [1,6,4,2,6], pills = 1, strength = 5\n输出：3\n解释：\n我们可以按照如下方案安排药丸：\n\n给 2 号工人药丸。\n1 号工人完成任务 0（6 &gt;= 5）\n2 号工人完成任务 2（4 + 5 &gt;= 8）\n4 号工人完成任务 3（6 &gt;= 5）\n\n\n提示：\n\nn == tasks.length\nm == workers.length\n1 &lt;= n, m &lt;= 5∗1045 * 10^45∗104\n0 &lt;= pills &lt;= m\n0 &lt;= tasks[i], workers[j], strength &lt;= 10910^9109\n\n问题分析\n\n\n任务：有 nnn 个任务，任务力量需求数组为 tasks；有 mmm 名工人，力量数组为 workers。\n\n\n药丸：你有 pills 颗药，每颗可以让一个工人的力量增加 strength，且每个工人最多只能吃一颗。\n\n\n目标：在最优分配下，最多能完成多少个任务。\n\n\n算法思路\n\n排序\n\n将 tasks 从小到大排序，编号后更容易按难度取子区间；\n将 workers 从小到大排序，方便挑最强和二分查找。\n\n\n二分答案 kkk\n\n答案 kkk 最多不会超过 min⁡(n,m)\\min(n, m)min(n,m)。\n我们在区间 [0,min⁡(n,m)][0, \\min(n,m)][0,min(n,m)] 上二分查找最大的可行 kkk。\n\n\n可行性验证 can_do(k)\n\n取子集：对尝试完成的前 kkk 个最小任务 tasks[0..k-1]，对应后 kkk 个最强工人 workers[m-k..m-1]。\n维护有序容器：把这 kkk 名工人放入一个支持「删最大」「按需求二分查找最小满足」操作的有序结构（如 Python bisect+list 或者 sortedcontainers.SortedList）。\n从 hardest 到 easiest：为了节省药丸，我们先处理需求最高的任务。对每个任务 ttt：\n\n如果容器中最大力量 ≥t\\ge t≥t，直接分配该工人（弹出最大），不消耗药丸。\n否则，需要用药：找容器中最小的工人 www 满足 w+strength≥tw + strength \\ge tw+strength≥t（用二分查找找第一个 ≥t−strength\\ge t - strength≥t−strength），若找不到或药丸已用完，则失败；否则分配、药丸减一。\n\n\n如果所有 kkk 个任务都能分配完，can_do(k)=True，如果在分配过程中药丸数超过 pills，或找不到可用工人，则 can_do(k) 返回 False。\n\n\n\n时间复杂度\n\n\n时间复杂度\n\n\n排序：O(nlog⁡n+mlog⁡m)O(n\\log n + m\\log m)O(nlogn+mlogm)\n\n\n二分：O(log⁡min⁡(n,m))O(\\log \\min(n,m))O(logmin(n,m)) 次可行性验证\n\n\n每次验证：最多 kkk 次删除/查找，每次 O(log⁡k)O(\\log k)O(logk)，所以 O(klog⁡k)O(k\\log k)O(klogk)\n\n\n总计：\nO((n+m)log⁡(n+m)  +  log⁡min⁡(n,m)×min⁡(n,m)log⁡m).O\\bigl((n+m)\\log(n+m)\\;+\\;\\log\\min(n,m)\\times\\min(n,m)\\log m\\bigr).\nO((n+m)log(n+m)+logmin(n,m)×min(n,m)logm).\n\n\n\n\n空间复杂度 : 排序原地排序外，额外使用 O(m) 存储可用工人列表。\n\n\n代码分解\n先解决最难的任务，这样能保证弱工人和药丸优先用于最“吃力”的配对，若连最难的都配不上，k 肯定不可行。\n使用 sortedcontainers.SortedList，支持 sl.pop(-1)、sl.bisect_left()、sl.pop(idx) 都是 O(log⁡k)O(\\log k)O(logk)\n用「上取整」的 mid 方案：\nlo, hi = 0, min(n, m)while lo &lt; hi:    mid = (lo + hi + 1) // 2    if can_do(mid):        lo = mid    else:        hi = mid - 1return lo\n代码实现\nfrom sortedcontainers import SortedListfrom bisect import bisect_leftclass Solution:    def maxTaskAssign(self, tasks, workers, pills, strength):        tasks.sort()        workers.sort()        def can_do(k):            # 取最强 k 工人，放入可排序列表            avail = SortedList(workers[-k:])            pills_left = pills            # 从最难任务到最简单            for t in reversed(tasks[:k]):                # 如果最强工人够力                if avail and avail[-1] &gt;= t:                    avail.pop(-1)                else:                    # 用药分配                    if pills_left == 0:                        return False                    # 找最弱且加药后能胜任的工人,需要 w &gt;= t - strength                    need = t - strength                    idx = avail.bisect_left(need)                    if idx == len(avail):                        return False                    # 分配并消耗                    avail.pop(idx)                    pills_left -= 1            return True        # 二分最大 k        lo, hi = 0, min(len(tasks), len(workers))        while lo &lt; hi:            mid = (lo + hi + 1) // 2            if can_do(mid):                lo = mid            else:                hi = mid - 1        return lo\n以tasks = [3,2,1], workers = [0,3,3], pills = 1, strength = 1为例：\n\n\n\n二分过程\n任务子集\n工人子集\n药丸使用情况\n分配过程\n结果判断\n\n\n\n\n初始状态(排序后)\n[1,2,3]\n[0,3,3]\n1\n-\n-\n\n\n尝试 mid=2\n[1,2]\n[0,3,3]\n1\n1. 较大任务 2 分配给最大工人 3 ≥ 2 → 不用药，弹出 3。2. 任务 1 分配给最大工人 3 ≥ 1 → 不用药，弹出 3。\n成功 → can_do(2)=True，二分上界提升到 2\n\n\n尝试 mid=3\n[1,2,3]\n[0,3,3]\n1\n1. 任务 3 分配给最大工人 3 ≥ 3 → 不用药，弹出 3，剩 [0,3]。2. 任务 2 分配给最大工人 3 ≥ 2 → 不用药，弹出 3，剩 [0]。3. 任务 1 分配给唯一工人 0 &lt; 1 → 需要用药，查找最小 w≥1−1=0w\\ge 1-1=0w≥1−1=0，找到 0，用药后分配成功。\n成功 → can_do(3)=True，最终答案 3\n\n\n\n","categories":["算法"],"tags":["Algorithm","困难","二分查找","排序","贪心","有序集合"]},{"title":"LeetCode每日一题2025-05-05","url":"/post/domino-and-tromino-tiling.html","content":"790. 多米诺和托米诺平铺 M\n有两种形状的瓷砖：一种是 2 x 1 的多米诺形，另一种是形如 “L” 的托米诺形。两种形状都可以旋转。\n\n给定整数 n ，返回可以平铺 2 x n 的面板的方法的数量。返回对 10⁹ + 7 取模 的值。\n平铺指的是每个正方形都必须有瓷砖覆盖。两个平铺不同，当且仅当面板上有四个方向上的相邻单元中的两个，使得恰好有一个平铺有一个瓷砖占据两个正方形。\n示例 1:\n\n\n输入: n = 3\n输出: 5\n解释: 五种不同的方法如上所示。\n\n示例 2:\n\n输入: n = 1\n输出: 1\n\n提示：\n\n1 &lt;= n &lt;= 1000\n\n问题分析\n我们要用两种瓷砖去完全铺满一个 2×n2 \\times n2×n 的长条面板：\n\n多米诺骨牌（Domino）：尺寸 2×12 \\times 12×1，可横放也可竖放。\n托米诺骨牌（Tromino）的“L” 形：由三个小正方形组成一个“L”，可以旋转成 4 种方向。\n\n求：对于给定的 nnn，共有多少种不同的铺法？由于数量可能非常大，最后对 109+710^9+7109+7 取模。\n算法思路\n\n\nn=1n=1n=1\n只要竖放一个 2×12\\times12×1 的多米诺，方法数 = 1。\n\n\nn=2n=2n=2\n面板是 2×22\\times22×2，可以：\n\n两个竖放的多米诺。\n两个横放的多米诺。\n方法数 = 2。\n\n\n\nn=3n=3n=3\n面板是 2×32\\times32×3，枚举可得方法数 = 5。\n\n\n令：\n\ndp[i]dp[i]dp[i] = 铺满 2×i2\\times i2×i 面板的方法数。\n\n我们尝试根据最后一列（第 iii 列）怎么“收尾”来分类。\n情况 A：最后竖着放一个多米诺\n\n那么前 i−1i-1i−1 列要完整铺好：共有 dp[i−1]dp[i-1]dp[i−1] 种。\n\n情况 B：最后两列都用横着的多米诺\n\n第 i−1i-1i−1 和第 iii 列各放一块横多米诺：前 i−2i-2i−2 列完整铺好 ⇒ dp[i−2]dp[i-2]dp[i−2] 种。\n\n情况 C：托米诺 “L” 形\n托米诺 “L” 会占用两列并且在第 iii 列上留出一个“半空”位置，所以它的影响要比前两种复杂。为此，我们引入辅助状态：\n\nf[i]f[i]f[i] = “前 iii 列铺到了半步”（即第 iii 列多出一个格子没被覆盖，呈现“⊔”或“⊓”形状）的方法数。\n\n那么，可以得到两条递推：\n\n\ndp[i]dp[i]dp[i] 的推导\n\n\nA 情况贡献：dp[i−1]dp[i-1]dp[i−1]\n\n\nB 情况贡献：dp[i−2]dp[i-2]dp[i−2]\n\n\nC 情况：要用一个托米诺把从“半空”状态补齐过来。\n\n如果前一步是“半空”f[i−1]f[i-1]f[i−1]（在第 i−1i-1i−1 列空出一个格），那么可以放 2 种方向的托米诺把第 iii 列补满 ⇒ 贡献 2 f[i−1]2\\,f[i-1]2f[i−1]。\n所以：dp[i]=dp[i−1]+dp[i−2]+2f[i−1].dp[i]=dp[i−1]+dp[i−2]+2f[i−1].\ndp[i]=dp[i−1]+dp[i−2]+2f[i−1].\n\n\n\n\n\n\nf[i]f[i]f[i] 的推导\n要在第 iii 列形成“半空”状态，有两种方式：\n\n在完整的前 i−2i-2i−2 列（dp[i−2]dp[i-2]dp[i−2] 种）末尾放一个托米诺，刚好留出一个半空。\n在前一个也是半空 f[i−1]f[i-1]f[i−1] 的基础上，放一个横多米诺扩展空位。\n所以：\n\nf[i]=dp[i−2]+f[i−1].f[i] = dp[i-2] + f[i-1].\nf[i]=dp[i−2]+f[i−1].\n\n\n我们可以把 fff 的式子代入 dpdpdp 的式子，并做推导（略去具体代数），最终会得到一个只含 dpdpdp 的简洁三项式：\ndp[i]=2 dp[i−1]+dp[i−3].dp[i] = 2\\,dp[i-1] + dp[i-3].\ndp[i]=2dp[i−1]+dp[i−3].\n初始化：dp[0]=1,dp[1]=1,dp[2]=2.dp[0]=1,dp[1]=1,dp[2]=2.dp[0]=1,dp[1]=1,dp[2]=2. ，对于 i&lt;0i&lt;0i&lt;0 的 dp[i]dp[i]dp[i] 视为 0（方便推导）。\n这样，我们就只要维护前三个 dpdpdp 值，就能一步步往后推。\n时间复杂度\n时间复杂度：每个 iii 只做常数次运算，总共 O(n)O(n)O(n)。\n空间复杂度：只用到常数个变量，O(1)O(1)O(1)。\n代码实现\nclass Solution:    def numTilings(self, n: int) -&gt; int:        MOD = 10**9 + 7        # 边界        if n == 0:            return 1        if n == 1:            return 1        if n == 2:            return 2                # 初始化 dp[0], dp[1], dp[2]        dp_i_3, dp_i_2, dp_i_1 = 1, 1, 2  # 分别对应 dp[0], dp[1], dp[2]                # 从 i=3 推到 n        for i in range(3, n+1):            dp_i = (2 * dp_i_1 + dp_i_3) % MOD            # 滚动窗口            dp_i_3, dp_i_2, dp_i_1 = dp_i_2, dp_i_1, dp_i                # 最终 dp[n] 存在 dp_i_1 中        return dp_i_1\n每轮计算出 dp_i = 2*dp[i-1] + dp[i-3]，然后向前滚动一格。\n","categories":["算法"],"tags":["Algorithm","组合数学","中等","动态规划","状态压缩"]},{"title":"LeetCode每日一题2025-05-06","url":"/post/build-array-from-permutation.html","content":"1920. 基于排列构建数组 E\n给你一个 从 0 开始的排列 nums（下标也从 0 开始）。请你构建一个 同样长度 的数组 ans ，其中，对于每个 i（0 &lt;= i &lt; nums.length），都满足 ans[i] = nums[nums[i]] 。返回构建好的数组 ans 。\n从 0 开始的排列 nums 是一个由 0 到 nums.length - 1（0 和 nums.length - 1 也包含在内）的不同整数组成的数组。\n示例 1：\n\n输入：nums = [0,2,1,5,3,4]\n输出：[0,1,2,4,5,3]\n解释：数组 ans 构建如下：\nans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]\n= [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]\n= [0,1,2,4,5,3]\n\n示例 2：\n\n输入：nums = [5,0,1,2,3,4]\n输出：[4,5,0,1,2,3]\n解释：数组 ans 构建如下：\nans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]\n= [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]\n= [4,5,0,1,2,3]\n\n提示：\n\n1 &lt;= nums.length &lt;= 1000\n0 &lt;= nums[i] &lt; nums.length\nnums 中的元素 互不相同\n\n问题分析\n\n给定一个从 0 开始的排列 nums，要求构造数组 ans，使得\n\n∀i,ans[i]=nums[nums[i]]\\forall i,\\quad ans[i] = nums[nums[i]]\n∀i,ans[i]=nums[nums[i]]\n\n直接遍历一次即可，对于每个索引 i，直接取 nums[i] 作为中间索引，再取对应值即可。\n\n算法思路\n对数组线性扫描和索引映射\n时间复杂度\n时间复杂度：O(n)O(n)O(n)，其中 n = nums.length\n空间复杂度：O(n)O(n)O(n)，用于新数组 ans\nO(1)O(1)O(1)内存实现\n在不使用额外数组的前提下，我们可以「在原地」把每个位置上同时存储旧值和新值，待全部计算完毕后再把新值“取出”\n由于 nums 中的所有元素都满足 0 ≤ nums[i] &lt; n，我们可以利用「除与余」操作把两个数编码到同一个整数里：\nnew_val=nums[nums[i]]( &lt;n),old_val=nums[i]( &lt;n)\\text{new\\_val} = nums[nums[i]] \\quad(\\,&lt;n)\\quad,\\quad \\text{old\\_val}=nums[i]\\quad(\\,&lt;n)\nnew_val=nums[nums[i]](&lt;n),old_val=nums[i](&lt;n)\n将它们合并：\nnums[i]←old_val+(new_val×n).nums[i] \\leftarrow \\text{old\\_val} + (\\text{new\\_val} \\times n).\nnums[i]←old_val+(new_val×n).\n此时：\n\nnums[i] % n 恢复得到原来的 old_val；\nnums[i] // n 则是我们期望的 new_val。\n\n\n\n遍历一遍数组，对每个 i 执行上述编码；\n\n\n再遍历一遍，对每个 i 做 nums[i] //= n，这样 nums 就被原地改写成了结果数组。\n\n\n时间复杂度：O(n)O(n)O(n)，两次线性扫描；\n空间复杂度：O(1)O(1)O(1)。\n代码实现\nclass Solution:    def buildArray(self, nums: list[int]) -&gt; list[int]:        n = len(nums)        ans = [0] * n        for i in range(n):            ans[i] = nums[nums[i]]        return ans\n无需额外空间实现\nclass Solution:    def buildArray(self, nums: list[int]) -&gt; list[int]:        n = len(nums)        # 第一次遍历：编码 old_val 和 new_val        for i in range(n):            old = nums[i]            new = nums[old] % n       # 这里 %n 确保拿到原始值            nums[i] = old + new * n        # 第二次遍历：取出 new_val        for i in range(n):            nums[i] //= n        return nums\n","categories":["算法"],"tags":["Algorithm","简单","数据结构"]},{"title":"LeetCode每日一题2025-05-04","url":"/post/number-of-equivalent-domino-pairs.html","content":"1128. 等价多米诺骨牌对的数量 E\n给你一组多米诺骨牌 dominoes 。\n形式上，dominoes[i] = [a, b] 与 dominoes[j] = [c, d] 等价 当且仅当 (a == c 且 b == d) 或者 (a == d 且 b == c) 。即一张骨牌可以通过旋转 0 度或 180 度得到另一张多米诺骨牌。\n在 0 &lt;= i &lt; j &lt; dominoes.length 的前提下，找出满足 dominoes[i] 和 dominoes[j] 等价的骨牌对 (i, j) 的数量。\n示例 1：\n输入：dominoes = [[1,2],[2,1],[3,4],[5,6]]输出：1\n示例 2：\n输入：dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]]输出：3\n提示：\n\n1 &lt;= dominoes.length &lt;= 4 * 10⁴\ndominoes[i].length == 2\n1 &lt;= dominoes[i][j] &lt;= 9\n\n问题分析\n\n给你一个多米诺骨牌列表 dominoes，每个骨牌是一个长度为 2 的数组 [a, b]。\n如果两张骨牌旋转后能完全一致，就称它们等价。\n例如 [1,2] 与 [2,1] 等价。我们要统计所有满足等价关系的骨牌对 (i, j) (i&lt;j)(i &lt; j)(i&lt;j) 的总数。\n\n算法思路\n\n\n规范化（标准化）表示\n\n每张骨牌 [a, b]，将它变成有序对 (min(a,b), max(a,b))。\n这样无论原来是 [1,2] 还是 [2,1]，都统一映射为为 (1,2)。\n\n\n\n哈希表计数\n\n用一个字典（或 Python 的 Counter）记录每种“规范化后”的骨牌出现了多少次。\n键（key）就是那个二元组，值（value）就是出现次数。\n\n\n\n组合数学计算对数\n\n\n如果某种骨牌规范后出现了 kkk 次，那么这 kkk 张骨牌两两之间都能组成等价对，共有组合数\n(k2)  =  k×(k−1)2\\binom{k}{2} \\;=\\;\\frac{k\\times (k-1)}{2}\n(2k​)=2k×(k−1)​\n\n\n把所有不同骨牌规范的组合数累加，就是答案。\n\n\n\n\n时间复杂度\n\n时间复杂度：遍历一次骨牌列表 O(n)O(n)O(n)，再遍历一次哈希表（最坏也是 O(n)O(n)O(n)），总体 O(n)O(n)O(n)。\n空间复杂度：哈希表存储规范后骨牌的计数，最坏情况键值对有 O(n)O(n)O(n) 个。\n\n代码分解\n\n\n初始化计数字典\nfrom collections import Countercount = Counter()\n\n\n标准化并计数\nfor a, b in dominoes:    key = (a, b) if a &lt;= b else (b, a) # 保证顺序    count[key] += 1\n\n\n组合数学求配对数\nfor k in count.values():    if k &gt; 1:        result += k*(k-1)//2\n(k2)\\binom{k}{2}(2k​) 的计算公式直接用整数运算实现\n\n\n代码实现\nclass Solution:    def numEquivDominoPairs(self, dominoes: list[list[int]]) -&gt; int:        # 1. 用 Counter 创建一个空的哈希表        count = Counter()                # 2. 遍历每一张骨牌        for a, b in dominoes:            # 2.1 规范化：用元组(key)表示，保证先小后大            if a &lt;= b:                key = (a, b)            else:                key = (b, a)            # 2.2 对该 key 的出现次数 +1            count[key] += 1                # 3. 统计所有规范对的组合数之和        result = 0        # 3.1 对哈希表中每一种规范对        for k in count.values():            # 只有 k&gt;=2 时才会有配对            if k &gt; 1:                # 组合数 C(k,2) = k*(k-1)//2                result += k * (k - 1) // 2                # 4. 返回结果        return result\n以 [[1,2], [2,1], [3,4], [5,6]] 为例：\n\n\n\n原始骨牌\n规范化后\n累计到哈希表中\n\n\n\n\n[1,2]\n(1,2)\ncount[(1,2)] = 1\n\n\n[2,1]\n(1,2)\ncount[(1,2)] = 2\n\n\n[3,4]\n(3,4)\ncount[(3,4)] = 1\n\n\n[5,6]\n(5,6)\ncount[(5,6)] = 1\n\n\n\n最终哈希表 count 为：\n&#123;  (1,2): 2,  (3,4): 1,  (5,6): 1&#125;\n接下来计算组合数：\n\n对 (1,2)，出现次数 k=2k=2k=2，组合数 (22)=1\\binom{2}{2} = 1(22​)=1\n(3,4) 与 (5,6) 都只出现过 1 次，不会贡献配对（因为 (12)=0\\binom{1}{2}=0(21​)=0 ）\n\n所以总对数 = 1。\n","categories":["算法"],"tags":["Algorithm","简单","组合数学","哈希表"]},{"title":"LeetCode每日一题2025-05-02","url":"/post/push-dominoes.html","content":"838. 推多米诺 M\nn 张多米诺骨牌排成一行，将每张多米诺骨牌垂直竖立。在开始时，同时把一些多米诺骨牌向左或向右推。\n每过一秒，倒向左边的多米诺骨牌会推动其左侧相邻的多米诺骨牌。同样地，倒向右边的多米诺骨牌也会推动竖立在其右侧的相邻多米诺骨牌。\n如果一张垂直竖立的多米诺骨牌的两侧同时有多米诺骨牌倒下时，由于受力平衡， 该骨牌仍然保持不变。\n就这个问题而言，我们会认为一张正在倒下的多米诺骨牌不会对其它正在倒下或已经倒下的多米诺骨牌施加额外的力。\n给你一个字符串 dominoes 表示这一行多米诺骨牌的初始状态，其中：\n\ndominoes[i] = 'L'，表示第 i 张多米诺骨牌被推向左侧，\ndominoes[i] = 'R'，表示第 i 张多米诺骨牌被推向右侧，\ndominoes[i] = '.'，表示没有推动第 i 张多米诺骨牌。\n\n返回表示最终状态的字符串。\n示例 1：\n\n输入：dominoes = “RR.L”\n输出：“RR.L”\n解释：第一张多米诺骨牌没有给第二张施加额外的力。\n\n示例 2：\n\n\n输入：dominoes = “.L.R…LR…L…”\n输出：“LL.RR.LLRRLL…”\n\n提示：\n\nn == dominoes.length\n1 &lt;= n &lt;= 10510^5105\ndominoes[i] 为 'L'、'R' 或 '.'\n\n问题分析\n有n张多米诺骨牌排成一行。\n\n当推动一些骨牌向左或向右后，每秒倒向左边的骨牌会推倒其左侧相邻骨牌，\n倒向右边的骨牌会推倒其右侧相邻骨牌。\n如果竖立骨牌的左右两侧同时有骨牌倒下，则它保持竖立。\n\n求最后的骨牌倒向状态。\n算法思路\n1. 加入哨兵（Sentinel）\n\n我们在原串 dominoes 的最左端加入一个虚拟的 'L'，下标记为 0；\n在最右端加入一个虚拟的 'R'，下标记为 n+1。\n原字符串字符对应到新数组 s 的位置是 1 到 n。\n\n这样做的好处是：无论最左或最右一侧最初如何受力，都能统一用同一套逻辑处理，无需额外分支。\n\n原：   .  L  .  R  . . .  L  R  . .  L  . .\n索引： 1  2  3  4  5 6 7  8  9 10 11 12 13 14\ns：   [L] .  L  .  R  . . .  L  R  . .  L  . . [R]\n索引：  0   1  2  3  4  5 6 7  8  9 10 11 12 13 14 15\n\n\nprev 和 prevChar 初始为 0、'L'，对应哨兵左侧。\n我们的目标是，每当遇到一个非点字符（'L' 或 'R'）时，就处理上一次非点到当前之间的区间。\n\n2. 区间类型与对应填充策略\n设当前指针 i（范围 1…n+1）指向一个非点字符 currChar = s[i]，上一次非点在 prev、字符为 prevChar。区间 (prev, i)（不含端点）即是待处理段。共有三种情况：\n\n\n\nprevChar\ncurrChar\n说明\n区间填充方式\n\n\n\n\nL\nR\n左侧向左，右侧向右——中间没人受力\n保持全部 . 不变\n\n\nL\nL\n两侧都向左——向左的力传导\n整段填充为 L\n\n\nR\nR\n两侧都向右——向右的力传导\n整段填充为 R\n\n\nR\nL\n左右相向——中间骨牌两端受力，向中央倒；中间正中如果恰好在平衡点，则不倒\n从两端向中间：左半段填 R，右半段填 L；如果区间长度为奇数，中点保留 .\n\n\n\n特别地，R...L 的中点保持直立是因为左右对等力量平衡。\n时间复杂度\nO(n)O(n)O(n) ：一次从 1 扫描到 n+1，区间内填充合计仅做每个位置不超过一次写操作\n空间复杂度：O(n)O(n)O(n)，使用大小为 n+2 的辅助字符数组。\n代码分解\n\n\n线性扫描 + 两个指针\n我们在字符串两端分别加上虚拟的多米诺骨牌，以简化边界处理：\n\n在最左端加一个假想的 L（下标 -1），\n在最右端加一个假想的 R（下标 n）。\n\n\n\n记录上一次非点状态的位置和方向\n\n用 prev 存储上一个非点（'L' 或 'R'）的下标，\n用 prevChar 存储对应的字符。\n\n\n\n遍历\n\n当遇到下一个非点字符 currChar（下标 i）时，考察区间 (prev, i)：\n\n如果 prevChar == currChar，则这一段内所有骨牌都倒向同一方向；\n如果 prevChar=='R' 且 currChar=='L'，则中间部分向两端倒：左半段倒 R，右半段倒 L；\n如果 prevChar=='L' 且 currChar=='R'，中间保持直立不动。\n更新 prev = i, prevChar = currChar，继续扫描。\n\n\n\n\n\n代码实现\nclass Solution:    def pushDominoes(self, dominoes: str) -&gt; str:        n = len(dominoes)        # 在头尾各加一个哨兵，简化边界        s = [&#x27;L&#x27;] + list(dominoes) + [&#x27;R&#x27;]        prev = 0        prevChar = &#x27;L&#x27;                for i in range(1, n + 2):            currChar = s[i]            if currChar == &#x27;.&#x27;:                continue                        # 区间 (prev, i)            if prevChar == currChar:                # 同向全填充                for k in range(prev + 1, i):                    s[k] = currChar            elif prevChar == &#x27;R&#x27; and currChar == &#x27;L&#x27;:                # 两侧相向，中间向两端                left, right = prev + 1, i - 1                while left &lt; right:                    s[left] = &#x27;R&#x27;                    s[right] = &#x27;L&#x27;                    left += 1                    right -= 1                # 如果 left == right，保持 &#x27;.&#x27;（平衡力）            # 如果是 L...R，保持不变                        prev = i            prevChar = currChar                # 拼回原始长度        return &#x27;&#x27;.join(s[1:-1])\n以 &quot;.L.R...LR..L..&quot; 为例（原长 14），在数组 s 上的区间索引是 1…14，我们实际扫描到 i=15 才遇到最后的 'R' 哨兵。\n\n\n\n索引 i\ns[i] 内容\n操作及说明\n更新后 prev 值\n更新后 prevChar\n\n\n\n\n初始化\n-\ns = ['L', '.', 'L', '.', 'R', '.', '.', '.', 'L', 'R', '.', '.', 'L', '.', '.', 'R']，prev = 0，prevChar = 'L'\n0\nL\n\n\ni=1\n.\n跳过\n0\nL\n\n\ni=2\nL\n区间 (0, 2)，只有下标 1，prevChar = 'L'，currChar = 'L'，属于 L...L → 将 s[1] 填为 L\n2\nL\n\n\ni=3\n.\n跳过\n2\nL\n\n\ni=4\nR\n区间 (2,4)，下标 3，prevChar = 'L'，currChar = 'R'，属于 L...R → 保持 s[3]='.'\n4\nR\n\n\ni=5 - i=8\n全为 .\n跳过\n4\nR\n\n\ni=9\nL\n区间 (4,9)，下标 5,6,7,8，prevChar = 'R'，currChar = 'L'，属于 R...L，长度 4，左右对称 → s[5] = R，s[8] = L；s[6] = R，s[7] = L\n9\nL\n\n\ni=10\nR\n区间 (9,10)，只有 s[9.5?] 无点 → 跳过。更新 prev = 10，prevChar = 'R'\n10\nR\n\n\ni=11 - i=12\n.\n跳过\n10\nR\n\n\ni=13\nL\n区间 (10,13)，下标 11,12，R...L，长度 2 → s[11] = R，s[12] = L\n13\nL\n\n\ni=14\n.\n跳过\n13\nL\n\n\ni=15\nR\n区间 (13,15)，下标 14，L...R → 保持 '.'\n15\nR\n\n\n\n最终去掉两端哨兵，拼回结果就是 &quot;LL.RR.LLRRLL..&quot;\n","categories":["算法"],"tags":["Algorithm","字符串处理","中等","双指针","贪心"]},{"title":"LeetCode每日一题2025-05-12","url":"/post/finding-3-digit-even-numbers.html","content":"2094. 找出 3 位偶数 E\n给你一个整数数组 digits ，其中每个元素是一个数字（0 - 9）。数组中可能存在重复元素。\n你需要找出 所有 满足下述条件且 互不相同 的整数：\n\n该整数由 digits 中的三个元素按 任意 顺序 依次连接 组成。\n该整数不含 前导零\n该整数是一个 偶数\n\n例如，给定的 digits 是 [1, 2, 3] ，整数 132 和 312 满足上面列出的全部条件。\n将找出的所有互不相同的整数按 递增顺序 排列，并以数组形式返回*。*\n示例 1：\n\n输入：digits = [2,1,3,0]\n输出：[102,120,130,132,210,230,302,310,312,320]\n解释：\n所有满足题目条件的整数都在输出数组中列出。\n注意，答案数组中不含有 奇数 或带 前导零 的整数。\n\n示例 2：\n\n输入：digits = [2,2,8,8,2]\n输出：[222,228,282,288,822,828,882]\n解释：\n同样的数字（0 - 9）在构造整数时可以重复多次，重复次数最多与其在 digits 中出现的次数一样。\n在这个例子中，数字 8 在构造 288、828 和 882 时都重复了两次。\n\n示例 3：\n\n输入：digits = [3,7,5]\n输出：[]\n解释：\n使用给定的 digits 无法构造偶数。\n\n提示：\n\n3 &lt;= digits.length &lt;= 100\n0 &lt;= digits[i] &lt;= 9\n\n问题分析\n目标：从给定的整数数组 digits 中选出恰好 3 个元素，按任意顺序拼接成一个三位数，且该数不能有前导零，并且是偶数。所有满足条件且互不相同的数，按升序返回。\n\n要考虑数字出现的次数限制——同一数字最多使用它在 digits 中出现的次数。\n排除前导零（三位数的百位不能为 0）。\n只保留偶数（个位为偶数）。\n去重并按升序输出。\n\n算法思路\n\n\n统计频次\n先用一个长度为 10 的数组 cnt 记录每个数字在 digits 中出现的次数，以便在选位时快速判断是否还有剩余。\n\n\n三重枚举＋剪枝\n\n枚举百位 h：只枚举 [1..9]，并且 cnt[h] &gt; 0。\n枚举十位 t：在剩余的数字中选（使用完百位后对应 cnt[h] 临时减 1），可以为 0–9，但要保证 cnt[t] &gt; 0。\n枚举个位 u：同理，在剩余中选，且 u 必须是偶数（0,2,4,6,8），并且 cnt[u] &gt; 0。\n每构造一个合法三位数 num = 100*h + 10*t + u，加入结果集合。\n\n\n\n去重与排序\n我们借助 Python 的 set 去重，最后将结果转为列表并排序。\n\n\n时间复杂度\n\n最坏情况三重枚举固定为 10 × 10 × 5 = 500 次尝试。\n统计频次：O(n)O(n)O(n)。\n总体：O(n+1)O(n + 1)O(n+1)，常数级别的三重循环 ⇒ 近似 O(n)O(n)O(n)。\n\n代码实现\nclass Solution:    def findEvenNumbers(self, digits: list[int]) -&gt; list[int]:        # 1. 统计每个数字的出现次数        cnt = [0] * 10        for d in digits:            cnt[d] += 1        res = set()        # 2. 枚举三位数的各个位        for h in range(1, 10):  # 百位不能为 0            if cnt[h] == 0:                continue            cnt[h] -= 1            for t in range(0, 10):  # 十位可以为 0                if cnt[t] == 0:                    continue                cnt[t] -= 1                for u in (0, 2, 4, 6, 8):  # 个位必须是偶数                    if cnt[u] &gt; 0:                        num = 100 * h + 10 * t + u                        res.add(num)                cnt[t] += 1            cnt[h] += 1        # 3. 排序并返回        return sorted(res)\n","categories":["算法"],"tags":["Algorithm","暴力搜索","数位处理","简单","排列组合","枚举与剪枝","哈希表"]},{"title":"LeetCode每日一题2025-05-07","url":"/post/find-minimum-time-to-reach-last-room-i.html","content":"3341. 到达最后一个房间的最少时间 I M\n有一个地窖，地窖中有 n x m 个房间，它们呈网格状排布。\n给你一个大小为 n x m 的二维数组 moveTime ，其中 moveTime[i][j] 表示在这个时刻 以后 你才可以 开始 往这个房间 移动 。你在时刻 t = 0 时从房间 (0, 0) 出发，每次可以移动到 相邻 的一个房间。在 相邻 房间之间移动需要的时间为 1 秒。\n请你返回到达房间 (n - 1, m - 1) 所需要的 最少 时间。\n如果两个房间有一条公共边（可以是水平的也可以是竖直的），那么我们称这两个房间是 相邻 的。\n示例 1：\n\n输入： moveTime = [[0,4],[4,4]]\n输出： 6\n解释：\n需要花费的最少时间为 6 秒。\n\n在时刻 t == 4 ，从房间 (0, 0) 移动到房间 (1, 0) ，花费 1 秒。\n在时刻 t == 5 ，从房间 (1, 0) 移动到房间 (1, 1) ，花费 1 秒。\n\n\n示例 2：\n\n输入： moveTime = [[0,0,0],[0,0,0]]\n输出： 3\n解释：\n需要花费的最少时间为 3 秒。\n\n在时刻 t == 0 ，从房间 (0, 0) 移动到房间 (1, 0) ，花费 1 秒。\n在时刻 t == 1 ，从房间 (1, 0) 移动到房间 (1, 1) ，花费 1 秒。\n在时刻 t == 2 ，从房间 (1, 1) 移动到房间 (1, 2) ，花费 1 秒。\n\n\n示例 3：\n\n输入： moveTime = [[0,1],[1,2]]\n输出： 3\n\n提示：\n\n2 &lt;= n == moveTime.length &lt;= 50\n2 &lt;= m == moveTime[i].length &lt;= 50\n0 &lt;= moveTime[i][j] &lt;= 10⁹\n\n问题分析\n\n\n有一个 n×mn\\times mn×m 的房间网格，比如：\n(0,0)  (0,1)  (0,2)(1,0)  (1,1)  (1,2)\n\n\n你从左上角 (0,0)(0,0)(0,0) 出发，要到达右下角 (n−1,m−1)(n-1,m-1)(n−1,m−1)。\n\n\n每一秒你只能走到上下左右的一个相邻房间，耗时 1 秒。\n\n\n但每个房间 (i,j)(i,j)(i,j) 有一个 “开放时间” moveTime[i][j]，表示你 必须等到 这个时间点才能进它。如果你早到了，就要在前一个房间多“等候”。\n\n\n\n举例：假设你在时刻 t=2t=2t=2 想去 (1,0)(1,0)(1,0)，但 moveTime[1][0] = 5，那么你要在当前房间再等 5−2=35 - 2 = 35−2=3 秒，等到 t=5t=5t=5 才能开始那 1 秒的移动，总共到达就是 t=6t=6t=6。\n\n这是一个带“等待时间”约束的最短路径问题。我们有一个 n×mn \\times mn×m 的网格，每个格子 (i,j)(i,j)(i,j) 上有一个时间戳 moveTime[i][j]，表示只有在该时刻及之后才可以开始进入这个房间。从 (0,0)(0,0)(0,0) 出发，时间从 t=0t=0t=0 开始，每次移动到相邻房间需要 1 秒。若当前时刻为 ttt，要移动到邻居格子 (x,y)(x,y)(x,y)：\n\n如果 t&lt;moveTime[x][y]t &lt; \\text{moveTime}[x][y]t&lt;moveTime[x][y]，则需要在原地等待到 moveTime[x][y]\\text{moveTime}[x][y]moveTime[x][y]；\n然后再花 1 秒移动过去；\n到达后的时间为 max⁡(t,moveTime[x][y])+1\\max(t,\\text{moveTime}[x][y]) + 1max(t,moveTime[x][y])+1。\n\n算法思路\n最普通的最短路径（或网格最短移动）问题，如果每步都只花 1 秒，那么就是简单的 BFS（广度优先搜索），一层一层走就行。\n但这里 “等候时间” 让每一步的耗时不再固定——它取决于“你到达当前格子的时间”与“下一个格子的开放时间”之差。\n由于不同路径的等待时间和移动次数不同，我们需要在加权图上求最短路径。网格中每个格子是一个节点，相邻格子间的边权等于“等待时间 + 1”，而边权依赖于到达时刻，属于带非固定权重的最短路径问题。故可用 Dijkstra 算法（带优先队列的贪心方法）动态松弛。\nDijkstra 算法的核心在于：\n\n贪心选择：每次从堆里取出“当前可达时间最小”的那个格子，相当于“已经确定”这就是到该格子的最早到达时间。\n然后再用它去更新它的邻居。\n这样不需要回头修正，因所有边权（在当前时刻的等待+1）都是非负的。\n\n\n\ndist[i][j]：一个和网格同样大小的二维数组，记录“到达 (i,j)(i,j)(i,j) 的最早时间”。\n\n初始时，所有格子都设为 “无穷大”（∞），表示还没到过。\n起点 dist[0][0] = 0，因为一开始就在 (0,0)(0,0)(0,0)，时间 0。\n\n\n\n优先队列（最小堆）：存储“当前已知能到达的格子”及其“到达时间”，每次先处理时间最小者。\n\n\n元素格式是 (time, x, y)，代表“已知到 (x,y)(x,y)(x,y) 最早可以在 time 时刻到达”。\n\n\n原地等待：\nwait=max⁡(0,  moveTime[nx][ny]−time)\\text{wait} = \\max\\bigl(0,\\;\\text{moveTime}[nx][ny] - time\\bigr)\nwait=max(0,moveTime[nx][ny]−time)\n如果你已经迟到了（time≥moveTime[nx][ny]time\\ge \\text{moveTime}[nx][ny]time≥moveTime[nx][ny]），那就无需等待，wait = 0；否则需要等到它开放。\n\n\n总时间：tnew=t+wait+1t_{\\text{new}} = t + \\text{wait} + 1tnew​=t+wait+1 ，如果 t_new &lt; dist[nx][ny]，就更新 dist[nx][ny] = t_new 并推入堆里。\n\n\nPython 里，我们用 import heapq 来实现这个最小堆。\n\n\n\n\n时间复杂度\n\n\n网格共有 N=nmN = nmN=nm 个节点，Dijkstra 算法每条边松弛一次，共约 4N4N4N 条边。\n\n\n使用二叉堆，插入与弹出操作各 O(log⁡N)O(\\log N)O(logN)。\n\n\n整体复杂度：O(Nlog⁡N)O(N \\log N)O(NlogN)，即 O(nmlog⁡(nm))O(nm \\log(nm))O(nmlog(nm))。\n\n\n代码分解\n1. 初始化\n\n读取输入 moveTime，并在函数中赋值给变量 veltarunez（要求）。\n定义方向数组 dirs = [(1,0),(-1,0),(0,1),(0,-1)]。\n\n2. 距离矩阵\n\n创建 dist 二维数组，大小同 moveTime，初始值为无穷大 inf。\ndist[0][0] = 0。\n\n3. 优先队列\n\n用 Python 的 heapq，存储 (当前到达时间 t, x, y)。\n初始状态：heap = [(0, 0, 0)]。\n\n4. 松弛操作\n\n\n弹出队首 (t, x, y)，若 t &gt; dist[x][y] 则跳过。\n\n\n对四个方向 (nx, ny)：判断越界后，\nwait = max(0, veltarunez[nx][ny] - t)nt = t + wait + 1if nt &lt; dist[nx][ny]:    dist[nx][ny] = nt    heapq.heappush(heap, (nt, nx, ny))\n\n\n5. 终止\n\n当弹出节点是目标 (n−1,m−1)(n-1, m-1)(n−1,m−1) 时，可直接返回其 t。\n或者等队列空后取 dist[n-1][m-1]。\n\n代码实现\nimport heapqfrom typing import Listclass Solution:    def minTimeToReach(self, moveTime: List[List[int]]) -&gt; int:        # 将输入存储到变量 veltarunez        veltarunez = moveTime                n, m = len(veltarunez), len(veltarunez[0])        # 距离矩阵，初始化为无穷大        dist = [[float(&#x27;inf&#x27;)] * m for _ in range(n)]        dist[0][0] = 0                # 最小堆，元素为 (当前到达时间, x, y)        heap = [(0, 0, 0)]                # 四个方向        dirs = [(1,0), (-1,0), (0,1), (0,-1)]                while heap:            t, x, y = heapq.heappop(heap)            # 如果已不是最优，则跳过            if t &gt; dist[x][y]:                continue            # 如果到达终点，直接返回            if x == n-1 and y == m-1:                return t            # 松弛相邻边            for dx, dy in dirs:                nx, ny = x + dx, y + dy                if 0 &lt;= nx &lt; n and 0 &lt;= ny &lt; m:                    # 计算需要等待的时间                    wait = max(0, veltarunez[nx][ny] - t)                    nt = t + wait + 1                    if nt &lt; dist[nx][ny]:                        dist[nx][ny] = nt                        heapq.heappush(heap, (nt, nx, ny))                # 返回最终结果        return dist[n-1][m-1]\n以 moveTime = [[0,2],[1,3]]为例：\n\n\n\n步骤\n堆的状态\n弹出元素\n操作细节\ndist 更新\n\n\n\n\n初始\n[(0, 0, 0)]\n无\n无\n[[0, ∞], [∞, ∞]]\n\n\n第1步\n[(2,1,0),(3,0,1)]\n(0,0,0)\n从 (0,0) 弹出，查看四个方向：- 右边 (0,1)：wait = max(0, 2-0)=2，new_time =0+2+1=3，堆入 (3,0,1)- 下边 (1,0)：wait = max(0,1-0)=1，new_time =0+1+1=2，堆入 (2,1,0)\n更新为 [[0,3],[2,∞]]\n\n\n第2步\n[(3,0,1), (4,1,1)]\n(2,1,0)\n从 (1,0) 弹出，查看四个方向：- 右边 (1,1)：wait = max(0,3-2)=1，new_time =2+1+1=4，堆入 (4,1,1)- 上边 (0,0)：已有更优值 dist[0][0] = 0，不更新\n更新为 [[0,3],[2,4]]\n\n\n第3步\n[(4,1,1)]\n(3,0,1)\n从 (0,1) 弹出，查看四个方向：- 下边 (1,1)：wait = max(0,3-3)=0，new_time =3+0+1=4，与当前 dist[1][1] =4 相同，不更新\n无变化\n\n\n第4步\n空\n(4,1,1)\n弹出 (4,1,1)，到达终点，返回答案 4\n无变化\n\n\n\n","categories":["算法"],"tags":["Algorithm","中等","数据结构","贪心","图算法","最短路径","Dijkstra","优先队列","BFS"]},{"title":"LeetCode每日一题2025-05-08","url":"/post/find-minimum-time-to-reach-last-room-ii.html","content":"3342. 到达最后一个房间的最少时间 II M\n有一个地窖，地窖中有 n x m 个房间，它们呈网格状排布。\n给你一个大小为 n x m 的二维数组 moveTime ，其中 moveTime[i][j] 表示在这个时刻 以后 你才可以 开始 往这个房间 移动 。你在时刻 t = 0 时从房间 (0, 0) 出发，每次可以移动到 相邻 的一个房间。在 相邻 房间之间移动需要的时间为：第一次花费 1 秒，第二次花费 2 秒，第三次花费 1 秒，第四次花费 2 秒……如此 往复 。\n请你返回到达房间 (n - 1, m - 1) 所需要的 最少 时间。\n如果两个房间有一条公共边（可以是水平的也可以是竖直的），那么我们称这两个房间是 相邻 的。\n示例 1：\n\n输入： moveTime = [[0,4],[4,4]]\n输出： 7\n解释：\n需要花费的最少时间为 7 秒。\n\n在时刻 t == 4 ，从房间 (0, 0) 移动到房间 (1, 0) ，花费 1 秒。\n在时刻 t == 5 ，从房间 (1, 0) 移动到房间 (1, 1) ，花费 2 秒。\n\n\n示例 2：\n\n输入： moveTime = [[0,0,0,0],[0,0,0,0]]\n输出： 6\n解释：\n需要花费的最少时间为 6 秒。\n\n在时刻 t == 0 ，从房间 (0, 0) 移动到房间 (1, 0) ，花费 1 秒。\n在时刻 t == 1 ，从房间 (1, 0) 移动到房间 (1, 1) ，花费 2 秒。\n在时刻 t == 3 ，从房间 (1, 1) 移动到房间 (1, 2) ，花费 1 秒。\n在时刻 t == 4 ，从房间 (1, 2) 移动到房间 (1, 3) ，花费 2 秒。\n\n\n示例 3：\n\n输入： moveTime = [[0,1],[1,2]]\n输出： 4\n\n提示：\n\n2 &lt;= n == moveTime.length &lt;= 750\n2 &lt;= m == moveTime[i].length &lt;= 750\n0 &lt;= moveTime[i][j] &lt;= 10⁹\n\n问题分析\n\n有一个 ×m\\times m×m 的房间网格，起点是 (0,0)(0,0)(0,0)，终点是 (n−1,m−1)(n-1,m-1)(n−1,m−1)。\n你在 时刻 0 从起点出发，每次只能向上、下、左、右走一步。\n第 1 步花费 1 秒，第 2 步花费 2 秒，第 3 步花费 1 秒，第 4 步花费 2 秒，以此类推（奇数步 1 秒，偶数步 2 秒）。\n另外，每个房间 (i,j)(i,j)(i,j) 有一个 开放时间 moveTime[i][j]，表示 在此时刻以后才能进入该房间。如果你走到某房间的时刻还没到它的开放时间，就要在外面等到 moveTime[i][j] 才能进去。\n\n目标：求从 (0,0)(0,0)(0,0) 到 (n−1,m−1)(n-1,m-1)(n−1,m−1) 的 最少 总耗时。\n算法思路\n\n\n普通最短路：\n\n如果每次移动的耗时固定（比如都 1 秒），经典做法是 BFS；\n如果耗时不固定且无等待，则可以用 Dijkstra（或 SPFA）。\n\n\n\n本题特点：\n\n每一步的耗时 依赖于「已经走过的步数是奇数还是偶数」。\n还要考虑「到达时间 &lt; 房间开放时间」时的 等待。\n\n这两点都会影响「从一个节点走到另一个节点的实际耗时」，而且这个耗时不是固定的常数。\n\n\n带状态建模：\n\n我们把“走过步数的奇偶”当成状态之一。\n状态 (i,j,p)(i,j,p)(i,j,p) 表示「当前位置在 (i,j)(i,j)(i,j) 且已经走了 kkk 步，且 p=k mod 2p = k \\bmod 2p=kmod2」（p=0p=0p=0 代表下一步是第 k+1k+1k+1 步且为奇数；p=1p=1p=1 代表下一步为偶数）。\n\n\n\n状态转移：\n\n\n从 (i,j,p)(i,j,p)(i,j,p) 可以去相邻的 (ni,nj)(ni,nj)(ni,nj)，新的奇偶状态是 np=1−pnp = 1 - pnp=1−p。\n计算本步原始移动耗时：\nw={1,若 np=1 (下一步是奇数步);2,若 np=0 (下一步是偶数步).w = \\begin{cases}     1, &amp; \\text{若 }np = 1\\ (\\text{下一步是奇数步});\\\\     2, &amp; \\text{若 }np = 0\\ (\\text{下一步是偶数步}).   \\end{cases}\nw={1,2,​若 np=1 (下一步是奇数步);若 np=0 (下一步是偶数步).​\n\n\n等待时机：\n\n\n你要在房间 (ni,nj)(ni,nj)(ni,nj) 开放后才能 开始 这一步移动，\n所以先算\ntstart=max⁡(tcur, moveTime[ni][nj]).t_{\\text{start}} = \\max\\bigl(t_{\\rm cur},\\,\\text{moveTime}[ni][nj]\\bigr).\ntstart​=max(tcur​,moveTime[ni][nj]).\n\n\n然后再花费 www 秒到达：\ntnew=tstart+w.t_{\\rm new} = t_{\\text{start}} + w.\ntnew​=tstart​+w.\n\n\n\n\n\n\n使用 Dijkstra\n\n定义 dist[i][j][p] 为达到状态 (i,j,p)(i,j,p)(i,j,p) 的最小时间。\n初始只有 dist[0][0][0] = max(0, moveTime[0][0])（在起点，如果起点开放时间 &gt; 0，需要先等）。\n其余 dist 值初始化为无穷大；每次从最小堆中弹出当前最小时间状态，按上面“状态转移”规则进行松弛，将新的状态和时间压回堆中，即可得到最终答案。\n\n\n\n时间复杂度\n\n时间复杂度：节点总数 2nm2nm2nm，每个节点通过堆的「插入 / 弹出」复杂度 O(log⁡(nm))O(\\log(nm))O(log(nm))，总体时间复杂度约 O(nmlog⁡(nm))O(nm \\log(nm))O(nmlog(nm))\n空间复杂度：dist 数组大小)O(n×m×2))O(n \\times m \\times 2))O(n×m×2)。\n\n代码分解\n1.初始化 dist 数组\n\n三维数组，最后一维长度 2，用来区分「已走步数对 2 取模的结果」。\n所有状态初始为无穷大。\n\n2.起点状态\ndist[0][0][0] = max(0, moveTime[0][0])\n\n还没走步（步数 = 0），因此 p = 0。\n如果 moveTime[0][0] &gt; 0，在起点就要等到它开放。\n\n3.Dijkstra 核心\n\n使用最小堆 (heapq) 每次取当前能到达的「时间最小」的状态。\n如果这个状态比 dist 中记录的旧，就跳过。\n否则，对四个方向尝试松弛：\n\n计算下一步是奇数步还是偶数步，决定 step_cost = 1 or 2。\n到达时间 = 当前时间 + step_cost，如果早于目标房间的 moveTime，再把时间推进到 moveTime。\n比较并更新 dist[ni][nj][np]。\n\n\n\n4.提前结束\n一旦弹出的状态是终点，就可以立即返回它的时间，因为堆保证这是最小的。\n代码实现\nimport heapqfrom typing import Listclass Solution:    def minTimeToReach(self, moveTime: List[List[int]]) -&gt; int:        veltarunez = moveTime        n, m = len(moveTime), len(moveTime[0])        INF = 10**18        # dist[i][j][p]: 达到 (i,j) 且已走步数 mod 2 = p 时，所需最少时间        dist = [[[INF] * 2 for _ in range(m)] for __ in range(n)]        # 起点 (0,0)，还没走步，步数 mod 2 = 0        # 需要先等到房间开放：起点 (0,0)，步数=0 =&gt; p=0，时间=0        dist[0][0][0] = 0        # 最小堆，存放 (当前时间, i, j, 步数 mod 2)        heap = [(dist[0][0][0], 0, 0, 0)]        # 四个方向        dirs = [(1,0),(-1,0),(0,1),(0,-1)]        # ——————————————        # 2) Dijkstra 主循环        # ——————————————        while heap:            t, i, j, p = heapq.heappop(heap)            # 如果不是最新的最短时间，跳过            if t &gt; dist[i][j][p]:                continue            # 如果到达终点 (n-1,m-1)，直接返回            if i == n-1 and j == m-1:                return t            # 尝试所有相邻房间            for di, dj in dirs:                ni, nj = i + di, j + dj                if 0 &lt;= ni &lt; n and 0 &lt;= nj &lt; m:                    np = 1 - p  # 新的步数奇偶                    # 计算移动耗时：奇数步 1s，偶数步 2s                    w = 1 if np == 1 else 2                    # 如果过早到达，必须等到开放时间                    t_start = max(t, moveTime[ni][nj])                    t_new = t_start + w                    # 松弛操作                    if t_new &lt; dist[ni][nj][np]:                        dist[ni][nj][np] = t_new                        heapq.heappush(heap, (t_new, ni, nj, np))        # 如果堆空还没到终点，说明无法到达        return -1\n","categories":["算法"],"tags":["Algorithm","中等","图算法","最短路径","Dijkstra","优先队列","状态建模"]},{"title":"LeetCode每日一题2025-05-13","url":"/post/total-characters-in-string-after-transformations-i.html","content":"3335. 字符串转换后的长度 I M\n给你一个字符串 s 和一个整数 t，表示要执行的 转换 次数。每次 转换 需要根据以下规则替换字符串 s 中的每个字符：\n\n如果字符是 'z'，则将其替换为字符串 &quot;ab&quot;。\n否则，将其替换为字母表中的下一个字符。例如，'a' 替换为 'b'，'b' 替换为 'c'，依此类推。\n\n返回 恰好 执行 t 次转换后得到的字符串的 长度。\n由于答案可能非常大，返回其对 10⁹ + 7 取余的结果。\n示例 1：\n\n输入： s = “abcyy”, t = 2\n输出： 7\n解释：\n\n第一次转换 (t = 1)\n\n'a' 变为 'b'\n'b' 变为 'c'\n'c' 变为 'd'\n'y' 变为 'z'\n'y' 变为 'z'\n第一次转换后的字符串为：&quot;bcdzz&quot;\n\n\n第二次转换 (t = 2)\n\n'b' 变为 'c'\n'c' 变为 'd'\n'd' 变为 'e'\n'z' 变为 &quot;ab&quot;\n'z' 变为 &quot;ab&quot;\n第二次转换后的字符串为：&quot;cdeabab&quot;\n\n\n最终字符串长度：字符串为 &quot;cdeabab&quot;，长度为 7 个字符。\n\n\n示例 2：\n\n输入： s = “azbk”, t = 1\n输出： 5\n解释：\n\n第一次转换 (t = 1)\n\n'a' 变为 'b'\n'z' 变为 &quot;ab&quot;\n'b' 变为 'c'\n'k' 变为 'l'\n第一次转换后的字符串为：&quot;babcl&quot;\n\n\n最终字符串长度：字符串为 &quot;babcl&quot;，长度为 5 个字符。\n\n\n提示：\n\n1 &lt;= s.length &lt;= 10⁵\ns 仅由小写英文字母组成。\n1 &lt;= t &lt;= 10⁵\n\n问题分析\n对于任意单个字符 c，定义函数\nf(c,t)=在执行 t 次转换后，字符 c 所对应的最终长度f(c, t) = \\text{在执行 }t\\text{ 次转换后，字符 }c\\text{ 所对应的最终长度}\nf(c,t)=在执行 t 次转换后，字符 c 所对应的最终长度\n那么对整个字符串 s，最终答案就是\n∑c∈sf(c,t) mod (109+7).\\sum_{c\\in s} f(c, t)\\bmod(10^9+7).\nc∈s∑​f(c,t)mod(109+7).\n算法思路\n状态转移\n边界：f(c,0)=1f(c,0)=1f(c,0)=1（不变长度为 1）\n若 c≠’z’c\\ne \\text{&#x27;z&#x27;}c=’z’，则每次转换就是下一个字母\nf(c,t)=f(next(c), t−1).f(c,t) = f(\\text{next}(c),\\,t-1).\nf(c,t)=f(next(c),t−1).\n若 c=’z’c=\\text{&#x27;z&#x27;}c=’z’，则“ z ”展开为 “ab”，对应长度之和\nf(’z’,t)=f(’a’, t−1)+f(’b’, t−1).f(\\text{&#x27;z&#x27;},t) = f(\\text{&#x27;a&#x27;},\\,t-1) + f(\\text{&#x27;b&#x27;},\\,t-1).\nf(’z’,t)=f(’a’,t−1)+f(’b’,t−1).\n我们可以对所有 26 个字母维护一个长度-26 的数组 dp，其中dp[i] 表示在当前步剩余转换次数 kkk 时，字母 char('a'+i) 对应的最终长度。\n初始化：dp[i]=1（即 f(c,0)=1f(c,0)=1f(c,0)=1）。\n对每一次转换 k=1k=1k=1 到 ttt：\n\n对 i=0…24（即 a…y），新的 dp_new[i] = dp[i+1]；\n对 i=25（即 z），dp_new[25] = (dp[0] + dp[1]) % MOD。\n然后将 dp_new 赋回 dp。\n\n最后，对字符串 s 中每个字符累加对应的 dp[index] 并取模即为答案。\n时间复杂度\n时间：每步更新 O(26)O(26)O(26)，共做 ttt 步，外加对长度 ∣s∣|s|∣s∣ 的一次遍历，故整体 O(26 t+∣s∣)O(26\\,t + |s|)O(26t+∣s∣)。\n空间：只使用常数大小的长度 26 数组，故 O(1)O(1)O(1)。\n代码实现\nclass Solution:    MOD = 10**9 + 7    def lengthAfterTransformations(self, s: str, t: int) -&gt; int:        # dp[i] 表示当前剩余转换次数 k 时，        # 字符 chr(ord(&#x27;a&#x27;)+i) 的最终长度        dp = [1] * 26        # 执行 t 次转换        for _ in range(t):            dp_new = [0] * 26            # a..y 直接继承下一个字母            for i in range(25):                dp_new[i] = dp[i+1]            # z -&gt; &quot;ab&quot;            dp_new[25] = (dp[0] + dp[1]) % self.MOD            dp = dp_new        # 累加 s 中每一个字符的贡献        ans = 0        base = ord(&#x27;a&#x27;)        for ch in s:            idx = ord(ch) - base            ans = (ans + dp[idx]) % self.MOD        return ans\n另看到题解：预处理 + 动态规划（DP） :\n状态定义\n数组 f 长度为 26+MX26 + \\text{MX}26+MX，其中前 0∼250\\sim250∼25 位初始化为 1（表示任何字母在 0 步转换时长度为 1），后面用来存储更大步数下的长度。\n状态转移\n对于下标 i≥0i\\ge0i≥0，f[i+26] = (f[i] + f[i+1]) % \\text&#123;MOD&#125;，恰好对应了：\n\n当你对 'z'（在前 26 中的最后一个）做一次转换，它会变成 &quot;ab&quot;，长度就是前面两个状态的和。\n而对非 'z' 的字母，其实就是“下一个字母”的长度，也可以映射到同样的数组偏移关系里。\n\n预处理好所有可能的值\n因为 t≤105t\\le10^5t≤105，预先把 f[26] 到 f[26 + 10^5] 都算好，这样每次调用 lengthAfterTransformations(s, t) 时，只要对串中每个字符 ccc 取 f[t + (ord(c)-ord('a'))]，再累加取模即可。\n当 ttt 接近上限 10510^5105 时，26*t 约为 2.6×1062.6\\times10^62.6×106 次小操作；而打表只做 10510^5105 次，常数更小，大约快 20× 以上。\n且打表后，不管用户输入的 ttt 是多少（只要 ≤MX\\le MX≤MX），都能直接 O(1)O(1)O(1) 拿到每个字符的长度贡献。\nMOD = 1_000_000_007ORD_A = ord(&#x27;a&#x27;)MX = 100_000  # t 的最大可能值# 预处理：f[i] 表示“从某字母出发，剩余 i 步转换后”的长度增量# 前 26 位对应步数 0，初始化为 1；后面 MX 位存储更大步数时的结果f = [1] * 26 + [0] * MXfor i in range(MX):    # 对应状态转移：非 &#x27;z&#x27; 的字符通过偏移 i+1；&#x27;z&#x27; 则合并 a、b 两个状态    f[i + 26] = (f[i] + f[i + 1]) % MODclass Solution:    def lengthAfterTransformations(self, s: str, t: int) -&gt; int:        # 对于每个字符 c，直接通过 f[t + (ord(c)-ORD_A)] 获取剩余 t 步后的长度        total = 0        for c in s:            idx = ord(c) - ORD_A            total = (total + f[t + idx]) % MOD        return total\n","categories":["算法"],"tags":["Algorithm","字符串处理","中等","动态规划"]},{"title":"LeetCode每日一题2025-05-09","url":"/post/count-number-of-balanced-permutations.html","content":"3343. 统计平衡排列的数目 H\n给你一个字符串 num 。如果一个数字字符串的奇数位下标的数字之和与偶数位下标的数字之和相等，那么我们称这个数字字符串是 平衡的 。\n请你返回 num 不同排列 中，平衡 字符串的数目。\n由于答案可能很大，请你将答案对 10⁹ + 7 取余 后返回。\n一个字符串的 排列 指的是将字符串中的字符打乱顺序后连接得到的字符串。\n示例 1：\n\n输入： num = “123”\n输出： 2\n解释：\n\nnum 的不同排列包括： &quot;123&quot; ，&quot;132&quot; ，&quot;213&quot; ，&quot;231&quot; ，&quot;312&quot; 和 &quot;321&quot; 。\n它们之中，&quot;132&quot; 和 &quot;231&quot; 是平衡的。所以答案为 2 。\n\n\n示例 2：\n\n输入： num = “112”\n输出： 1\n解释：\n\nnum 的不同排列包括：&quot;112&quot; ，&quot;121&quot; 和 &quot;211&quot; 。\n只有 &quot;121&quot; 是平衡的。所以答案为 1 。\n\n\n示例 3：\n\n输入： num = “12345”\n**输出： ** 0\n解释：\n\nnum 的所有排列都是不平衡的。所以答案为 0 。\n\n\n提示：\n\n2 &lt;= num.length &lt;= 80\nnum 中的字符只包含数字 '0' 到 '9' 。\n\n问题分析\n\n定义 ：给定字符串 num（长度 2≤n≤802\\le n\\le802≤n≤80，只包含字符 '0'–'9'），如果一个排列中奇数位下标（从 0 开始计数，则偶数位为奇数下标）数字之和等于偶数位下标数字之和，则称该排列“平衡”。\n目标 ：统计所有不同排列中平衡排列的数量，结果对 109+710^9+7109+7 取模返回。\n\n算法思路\n1. 统计各数字出现次数\n对 0–9 分别统计出现次数 cvc_vcv​。\n2. 确定位置分组\n\n\n总长度 n=len(num)n=\\text{len}(num)n=len(num)。\n\n\n奇数位（下标 1,3,…）与偶数位（下标 0,2,…）的数量分别为\nm=⌈n/2⌉,n−m=⌊n/2⌋.m=\\lceil n/2\\rceil,\\quad n-m=\\lfloor n/2\\rfloor.\nm=⌈n/2⌉,n−m=⌊n/2⌋.\n\n\n3. 平衡条件\n令总和 S=∑vv⋅cvS=\\sum_{v}v\\cdot c_vS=∑v​v⋅cv​，必须 SSS 为偶数，否则返回 0。设目标子和T=S/2.T=S/2.T=S/2.\n4. 生成函数 + 二维动态规划\n构造多项式\nPv(t,z)=∑x=0cv(cvx) tx zv x,P_v(t,z)=\\sum_{x=0}^{c_v}\\binom{c_v}{x}\\,t^x\\,z^{v\\,x},\nPv​(t,z)=x=0∑cv​​(xcv​​)txzvx,\n展开后，[tm,zT]G(t,z)[t^m,z^T]G(t,z)[tm,zT]G(t,z) 即为所有合法“取法”之组合个数，内部已含 ∏(cvxv)\\prod\\binom{c_v}{x_v}∏(xv​cv​​)。\n表示从数字 vvv 中取 xxx 个放入“奇数位”组的方式数。整体的生成函数乘积\nG(t,z)=∏v=09Pv(t,z)G(t,z)=\\prod_{v=0}^9P_v(t,z)\nG(t,z)=v=0∏9​Pv​(t,z)\n展开后，[tm,zT]G(t,z)[t^m,z^T]G(t,z)[tm,zT]G(t,z) 即为所有合法“取法”之组合个数，内部已含 ∏(cvxv)\\prod\\binom{c_v}{x_v}∏(xv​cv​​)。\n5. 排列计数\n每一种“取法”将具体哪些位置放哪些相同数字还需排列：\n\n\n奇数位内部可排列 m!/∏xv!m!/\\prod x_v!m!/∏xv​! 种，偶数位内部 (n−m)!/∏(cv−xv)!(n-m)!/\\prod(c_v-x_v)!(n−m)!/∏(cv​−xv​)! 种。\n\n\n但在生成函数里我们已包含 ∏(cvxv)=∏(xv!(cv−xv)!/cv!)\\prod\\binom{c_v}{x_v}=\\prod\\bigl(x_v! (c_v-x_v)!/c_v!\\bigr)∏(xv​cv​​)=∏(xv​!(cv​−xv​)!/cv​!) 的倒数部分，最终只需补上\nm! (n−m)! /∏cv! m!\\,(n-m)! \\,\\Big/\\prod c_v!\\,\nm!(n−m)!/∏cv​!\n其中 ∏cv!\\prod c_v!∏cv​! 与所有分配无关，是常数，可在结尾统一除去（或乘上其逆元）。\n\n\n6. 实现细节\n\n\n二维 dp[k][s] 表示考虑到某一位值时，已选入奇数位共 kkk 个数字、累积和为 sss 的“取法”总数。\n\n\n最终答案\ndp[m][T]×m!×(n−m)!×(∏vcv!)−1 mod (109+7).\\text{dp}[m][T] \\times m!\\times(n-m)! \\times \\bigl(\\prod_{v}c_v!\\bigr)^{-1}\\bmod(10^9+7).\ndp[m][T]×m!×(n−m)!×(v∏​cv​!)−1mod(109+7).\n\n\n时间复杂度\n时间复杂度：O(D×m×S2)O(D \\times m \\times \\tfrac{S}{2})O(D×m×2S​)，其中 D=10D=10D=10 为数字种类，m≤40m\\le40m≤40，S2≤360\\tfrac{S}{2}\\le3602S​≤360，整体约 10610^6106 级别\n空间复杂度：O(m×S2)O(m\\times \\tfrac{S}{2})O(m×2S​)，约 40×36040\\times36040×360\n思路详解\n1. 拆成“奇数位”和“偶数位”两组\n\n我们把下标从 0 开始编号，那么下标为 0、2、4… 的叫“偶数位”，下标为 1、3、5… 的叫“奇数位”。\n平衡的定义是：奇数位上数字之和 = 偶数位上数字之和。\n\n例如，字符串 &quot;132&quot;：\n\n偶数位：下标 0、2 → 数字 1 + 2 = 3\n奇数位：下标 1 → 数字 3\n两者相等，所以 &quot;132&quot; 是平衡的。\n\n2. 总和必须是偶数\n\n所有数字相加得到总和 S，如果 S 是奇数，就不可能一分为二所以直接返回 0。\n\n3. 分组大小 m\n\n设字符串长度为 n：\n\n偶数位数量 = ⌊n/2⌋\n奇数位数量 = ⌈n/2⌉，我们记为 m。\n\n\n\n例如 n=3 时，偶数位有 2（下标 0、2），奇数位有 1（下标 1），所以 m = 1。\n4. 把“选择哪些数字放到奇数位”当成背包问题\n我们需要从原字符串里的每个数字（例如可能有三个 1、两个 2、一个 3……）中，决定放多少个到“奇数位”这 m 个位置上，剩下的放到“偶数位”。\n\n对于每个数字 v（0～9），假设它出现了 cvc_vcv​ 次，我们可以选择 x 个放到奇数位，x 的范围是 0…cvc_vcv​，但总共所有数字放到奇数位的个数要刚好是 m。\n同时，奇数位上数字的和 = 偶数位上数字的和 = S/2。由于奇数位和 + 偶数位和 = S，那么每边都要是 S/2。\n\n于是，我们要计算：对每个 v，从 cvc_vcv​ 中选 xvx_vxv​，使得\n\n∑vxv=m\\sum_v x_v = m∑v​xv​=m\n∑v(v×xv)=S/2\\sum_v (v \\times x_v) = S/2∑v​(v×xv​)=S/2\n\n满足以上两个条件的所有组合数，就是“把具体哪些数字拿到奇数位”的方法数。最后再把数字在奇数位内部、偶数位内部的排列数乘进去，就是完整的排列。\n用二维动态规划 dp[k][s]\n\n定义：dp[k][s] = “考虑了数字 0…v 时，已选了 k 个数字放在奇数位，且它们的和为 s 的方法数”。\n初始化 dp[0][0] = 1（还没放任何数字，个数 0，和 0 有 1 种办法）。\n递推：对下一个数字 v，共有 cvc_vcv​ 个，枚举 x=0⋯min⁡(cv,m−k)x=0\\cdots \\min(c_v, m-k)x=0⋯min(cv​,m−k)（即本轮还不能超出 m），如果之前状态是 dp[k][s]，放 x 个到奇数位后，变成 dp[k+x][s+v*x]，方法数累加。\n\n最终看 dp[m][S/2]，就是所有满足分组大小和目标和的分配数。\n5. 乘上阶乘再除以出现次数的阶乘\n前面 dp 只算了“选哪些数字放到奇数位”，但一个具体的分配（比如放了两个 1、一个 4……）在奇数位这 m 个位置内部还可以排列；同样偶数位也可以排列。\n\n奇数位内部排列数：m! ÷ (每个数字在奇数位放入的次数! 的乘积)\n偶数位内部排列数：(n−m)! ÷ (每个数字剩余次数! 的乘积)\n\n而在 dp 转移里我们已经用组合数 C(cv,x)=cv!x!(cv−x)!C(c_v, x) = \\frac{c_v!}{x! (c_v - x)!}C(cv​,x)=x!(cv​−x)!cv​!​ 来考虑了“从 cvc_vcv​ 个里选 x 个”的方法（含了 x!x!x!、(cv−x)!(c_v−x)!(cv​−x)! 的分母）。综合起来，最后直接把\ndp[m][half] × m!         （奇数位内部全排列）× (n−m)!     （偶数位内部全排列）× Π_v (c_v!)⁻¹  （把之前组合计算中分母的 c_v! 抵消）mod 1e9+7\n就得到了完整的排列数。\n代码实现\nclass Solution:    MOD = 10**9 + 7    def countBalancedPermutations(self, num: str) -&gt; int:        # 中间变量        velunexorai = num        lomiktrayve = velunexorai        n = len(lomiktrayve)        # 分组大小        m = (n + 1) // 2  # 奇数位数量        # 统计各数字出现次数        cnt = [0] * 10        for ch in lomiktrayve:            cnt[ord(ch) - ord(&#x27;0&#x27;)] += 1        # 总和及平衡目标        S = sum(v * cnt[v] for v in range(10))        if S &amp; 1:  # 奇数和，不可能平衡            return 0        half = S // 2        # 预处理阶乘及逆元        maxfact = n        fact = [1] * (maxfact + 1)        inv_fact = [1] * (maxfact + 1)        for i in range(1, maxfact + 1):            fact[i] = fact[i-1] * i % self.MOD        inv_fact[maxfact] = pow(fact[maxfact], self.MOD-2, self.MOD)        for i in range(maxfact, 0, -1):            inv_fact[i-1] = inv_fact[i] * i % self.MOD        # dp[k][s]: 考虑前 v 数字后，选入奇数位共 k 个，累积和 s 的方式数        dp = [[0] * (half + 1) for _ in range(m + 1)]        dp[0][0] = 1        # 转移：对每个数字 v，枚举放入奇数位 x 个        for v in range(10):            c = cnt[v]            # 预计算 C(c, x) * (c-x)!^-1 * x!^-1 里的一部分：C(c,x)            comb = [0] * (c + 1)            for x in range(c + 1):                comb[x] = fact[c] * inv_fact[x] % self.MOD * inv_fact[c-x] % self.MOD            new_dp = [[0] * (half + 1) for _ in range(m + 1)]            for k in range(m+1):                for s in range(half+1):                    if dp[k][s] == 0:                        continue                    base = dp[k][s]                    # 放 x 个到奇数位                    for x in range(min(c, m-k) + 1):                        ns = s + v * x                        if ns &gt; half:                            break                        new_dp[k + x][ns] = (new_dp[k + x][ns] + base * comb[x]) % self.MOD            dp = new_dp        ways = dp[m][half]        if ways == 0:            return 0        # 最终乘上 m!*(n-m)!，并除以 ∏c_v!（即乘上每个 c_v! 的逆元）        ans = ways * fact[m] % self.MOD * fact[n-m] % self.MOD        for v in range(10):            ans = ans * inv_fact[cnt[v]] % self.MOD        return ans\n以num = &quot;112&quot;为例：\n\nn=3，m=⌈3/2⌉=2，S=1+1+2=4，half=2。\n数字计数：cnt[1]=2，cnt[2]=1，其他都是 0。\ndp 大小是 (m+1=3)×(half+1=3)。\n先处理 v=1，c=2，可以放 x=0,1,2 个到奇数位；再处理 v=2，c=1，可放 x=0,1。\n通过 dp 最终找到 dp[2][2] = 1，表示把恰好 2 个数字放到奇数位，且它们和为 2 的方法只有 1 种（就是放两个 1）。\n乘上 m!×(n–m)! ÷ (2!×1!) = 2!×1! ÷ (2!×1!) = 1，结果仍是 1。\n\n也就是说，只有排列 &quot;121&quot; 是平衡的。\n","categories":["算法"],"tags":["Algorithm","数位处理","字符串处理","排列组合","困难","组合数学","动态规划"]},{"title":"LeetCode每日一题2025-05-10","url":"/post/minimum-equal-sum-of-two-arrays-after-replacing-zeros.html","content":"2918. 数组的最小相等和 M\n给你两个由正整数和 0 组成的数组 nums1 和 nums2 。\n你必须将两个数组中的 所有 0 替换为 严格 正整数，并且满足两个数组中所有元素的和 相等 。\n返回 最小 相等和 ，如果无法使两数组相等，则返回 -1 。\n示例 1：\n\n输入：nums1 = [3,2,0,1,0], nums2 = [6,5,0]\n输出：12\n解释：可以按下述方式替换数组中的 0 ：\n\n用 2 和 4 替换 nums1 中的两个 0 。得到 nums1 = [3,2,2,1,4] 。\n用 1 替换 nums2 中的一个 0 。得到 nums2 = [6,5,1] 。\n两个数组的元素和相等，都等于 12 。可以证明这是可以获得的最小相等和。\n\n\n示例 2：\n\n输入：nums1 = [2,0,2,0], nums2 = [1,4]\n输出：-1\n解释：无法使两个数组的和相等。\n\n提示：\n\n1 &lt;= nums1.length, nums2.length &lt;= 10⁵\n0 &lt;= nums1[i], nums2[i] &lt;= 10⁶\n\n问题分析\n1.输入\n\nnums1、nums2：两个数组，元素是非负整数（包括 0 和正整数）。\n\n2.要求\n\n将两个数组中所有的 0，分别替换成 “严格的正整数”（即 ≥1），\n替换后，两个数组的 元素和 必须相等，\n并且这个相等后的和要尽可能小。\n\n3.输出\n\n如果能做到，让两个数组和相等且最小，返回这个最小的和；否则返回 -1。\n\n算法思路\n令\n\ns1=s_1 =s1​= nums1 中所有 非零元素 的和；\nk1=k_1 =k1​= nums1 中 0 的个数。\n\n类似地，\n\ns2=s_2 =s2​= nums2 中所有非零元素的和；\nk2=k_2 =k2​= nums2 中 0 的个数。\n\n例如，若 nums1 = [3,2,0,1,0]，则\n\ns1=3+2+1=6s_1 = 3 + 2 + 1 = 6s1​=3+2+1=6，\nk1=2k_1 = 2k1​=2。\n\n推导最小可行总和 SSS\n设最终我们把 nums1 的所有 0 替换后，该数组的总和为 SSS。\n\n\nnums1 已有非零部分和是 s1s_1s1​，还有 k1k_1k1​ 个 0，每个至少要替换成 1，\n\n\n因此替换后总和至少是\ns1+(1+1+⋯+1)  (共 k1 个)=s1+k1.s_1 + (1 + 1 + \\cdots + 1)\\;(\\text{共 }k_1\\text{ 个}) = s_1 + k_1.s1​+(1+1+⋯+1)(共 k1​ 个)=s1​+k1​.\n\n\n同理，nums2 的替换后最小和是 s2+k2s_2 + k_2s2​+k2​。\n\n要想两边都能达到同一个目标和 SSS，这个 SSS 至少要满足：\ns1+k1且S  ≥  s2+k2.s_1 + k_1   \\quad\\text{且}\\quad   S \\;\\ge\\; s_2 + k_2.\ns1​+k1​且S≥s2​+k2​.\n因此最小的可行值，就是两者中的最大值：\nS=max⁡(s1+k1,  s2+k2).S = \\max\\bigl(s_1 + k_1,\\; s_2 + k_2\\bigr).\nS=max(s1​+k1​,s2​+k2​).\n\n无法达到\n如果某个数组本身 没有 0（即 ki=0k_i=0ki​=0），那它就 没法 通过替换 0 来调整和。\n\n例如，如果 nums1 本来就没有 0，而且非零和 s1s_1s1​ 与目标 SSS 不相等，那么就 不可能 让它变成 SSS。\n\n这时应直接返回 -1。\n时间复杂度\n时间复杂度：遍历两数组各一次，做常数级的加减比较，因此时间复杂度为 O(n1+n2)O(n_1 + n_2)O(n1​+n2​)，其中 n1n_1n1​、n2n_2n2​ 分别是两个数组长度。\n空间复杂度：O(1)O(1)O(1)（只使用了常数个辅助变量）。\n代码分解\n\n\n遍历 nums1\n\n累加非零元素求和得到 s1s_1s1​；\n同时计数 0 的个数得到 k1k_1k1​。\n\n\n\n遍历 nums2\n\n同理得到 s2s_2s2​ 和 k2k_2k2​。\n\n\n\n计算目标和\n\n\nS=max⁡(s1+k1,    s2+k2).S = \\max(s_1 + k_1,\\;\\; s_2 + k_2).\nS=max(s1​+k1​,s2​+k2​).\n\n\n检查不可调整情形\n\n若 (k1==0∧s1≠S)(k_1 == 0 \\land s_1 \\neq S)(k1​==0∧s1​=S)，或\n若 (k2==0∧s2≠S)(k_2 == 0 \\land s_2 \\neq S)(k2​==0∧s2​=S)，\n则返回 −1-1−1。\n\n\n\n否则，返回 SSS。\n\n\n代码实现\nclass Solution:    def minSum(self, nums1: list[int], nums2: list[int]) -&gt; int:        # 1. 计算两个数组的非零之和与 0 的个数        s1 = sum(x for x in nums1 if x != 0)        k1 = nums1.count(0)        s2 = sum(x for x in nums2 if x != 0)        k2 = nums2.count(0)                # 2. 最小可行的目标总和        S = max(s1 + k1, s2 + k2)                # 3. 如果某边无法通过替换 0 来达到 S，则不可行        if (k1 == 0 and s1 != S) or (k2 == 0 and s2 != S):            return -1                # 4. 否则 S 就是最小相等和        return S\n","categories":["算法"],"tags":["Algorithm","中等","贪心"]},{"title":"LeetCode每日一题2025-05-11","url":"/post/three-consecutive-odds.html","content":"1550. 存在连续三个奇数的数组 E\n给你一个整数数组 arr，请你判断数组中是否存在连续三个元素都是奇数的情况：如果存在，请返回 true ；否则，返回 false 。\n示例 1：\n\n输入：arr = [2,6,4,1]\n输出：false\n解释：不存在连续三个元素都是奇数的情况。\n\n示例 2：\n\n输入：arr = [1,2,34,3,4,5,7,23,12]\n输出：true\n解释：存在连续三个元素都是奇数的情况，即 [5,7,23] 。\n\n提示：\n\n1 &lt;= arr.length &lt;= 1000\n1 &lt;= arr[i] &lt;= 1000\n\n问题分析\n嗯，不用分析了\n算法思路\n暴力搜索\n\n直接枚举所有长度为 3 的子数组，检查其中 3 个数是否全为奇数。\n时间复杂度：O(n)O(n)O(n)，因为只需一次遍历；空间复杂度：O(1)O(1)O(1)。\n\n或：滑动窗口\n\n维护一个大小为 3 的窗口，窗口内统计奇数个数。\n窗口向右滑动时，更新进出元素的奇偶状态即可。\n时间复杂度：O(n)O(n)O(n)，空间复杂度：O(1)O(1)O(1)。\n\n时间复杂度\n时间复杂度：O(n)O(n)O(n)，遍历一次数组。\n空间复杂度：O(1)O(1)O(1)，只使用固定数量的额外变量。\n代码分解\n\n\n初始化一个计数器 count = 0。\n\n\n遍历数组中的每个元素 x：\n\n如果 x 是奇数，令 count += 1；否则重置 count = 0。\n每次更新后，检查 count &gt;= 3，若成立则返回 True。\n\n\n\n遍历结束后若未找到，返回 False。\n\n\n代码实现\n滑动窗口\nclass Solution:    def threeConsecutiveOdds(self, arr: list[int]) -&gt; bool:        count = 0        for x in arr:            if x % 2 == 1:                count += 1                if count &gt;= 3:                    return True            else:                count = 0        return False\n暴力枚举\nclass Solution:    def threeConsecutiveOdds(self, arr: list[int]) -&gt; bool:        n = len(arr)        # 仅当数组长度至少为 3 时才有意义        for i in range(n - 2):            # 检查 arr[i], arr[i+1], arr[i+2] 是否全为奇数            if arr[i] % 2 == 1 and arr[i+1] % 2 == 1 and arr[i+2] % 2 == 1:                return True        return False\n","categories":["算法"],"tags":["Algorithm","暴力搜索","简单","滑动窗口"]},{"title":"LeetCode每日一题2025-05-16","url":"/post/longest-unequal-adjacent-groups-subsequence-ii.html","content":"2901. 最长相邻不相等子序列 II M\n给定一个字符串数组 words ，和一个数组 groups ，两个数组长度都是 n 。\n两个长度相等字符串的 汉明距离 定义为对应位置字符 不同 的数目。\n你需要从下标 [0, 1, ..., n - 1] 中选出一个 最长子序列 ，将这个子序列记作长度为 k 的 [i₀, i₁, ..., iₖ ₋ ₁] ，它需要满足以下条件：\n\n相邻 下标对应的 groups 值 不同。即，对于所有满足 0 &lt; j + 1 &lt; k 的 j 都有 groups[iⱼ] != groups[iⱼ ₊ ₁] 。\n对于所有 0 &lt; j + 1 &lt; k 的下标 j ，都满足 words[iⱼ] 和 words[iⱼ ₊ ₁] 的长度 相等 ，且两个字符串之间的 汉明距离 为 1 。\n\n请你返回一个字符串数组，它是下标子序列 依次 对应 words 数组中的字符串连接形成的字符串数组。如果有多个答案，返回任意一个。\n子序列 指的是从原数组中删掉一些（也可能一个也不删掉）元素，剩余元素不改变相对位置得到的新的数组。\n注意：words 中的字符串长度可能 不相等 。\n示例 1：\n\n输入：words = [“bab”,“dab”,“cab”], groups = [1,2,2]\n输出：[“bab”,“cab”]\n解释：一个可行的子序列是 [0,2] 。\n\ngroups[0] != groups[2]\nwords[0].length == words[2].length 且它们之间的汉明距离为 1 。\n所以一个可行的答案是 [words[0],words[2]] = [“bab”,“cab”] 。\n另一个可行的子序列是 [0,1] 。\ngroups[0] != groups[1]\nwords[0].length = words[1].length 且它们之间的汉明距离为 1 。\n所以另一个可行的答案是 [words[0],words[1]] = [“bab”,“dab”] 。\n符合题意的最长子序列的长度为 2 。\n\n\n示例 2：\n\n输入：words = [“a”,“b”,“c”,“d”], groups = [1,2,3,4]\n输出：[“a”,“b”,“c”,“d”]\n解释：我们选择子序列 [0,1,2,3] 。\n它同时满足两个条件。\n所以答案为 [words[0],words[1],words[2],words[3]] = [“a”,“b”,“c”,“d”] 。\n它是所有下标子序列里最长且满足所有条件的。\n所以它是唯一的答案。\n\n提示：\n\n1 &lt;= n == words.length == groups.length &lt;= 1000\n1 &lt;= words[i].length &lt;= 10\n1 &lt;= groups[i] &lt;= n\nwords 中的字符串 互不相同 。\nwords[i] 只包含小写英文字母。\n\n问题分析\n\n从 words 和 groups 两个数组中，找出一个满足条件的最长子序列，并返回对应的字符串数组。\n\n\ngroups 值相邻不同：选中的下标对应的 groups 值不能连续相同。\nwords 相邻字符串的条件：\n\n长度相等。\n汉明距离为1（对应位置不同字符数为1）。\n\n\n\n\n返回满足条件的最长子序列对应的字符串数组。如果有多个，返回任意一个。\n\n算法思路\n建图＋最长路径\n\n\n将每个位置 iii 看作图中的一个节点；\n\n\n如果对于i&lt;ji&lt;ji&lt;j 满足\n\ngroups[i] != groups[j]\nlen(words[i]) == len(words[j]) 且二者汉明距离为 1\n\n则在节点 i→ji\\to ji→j 之间创建一条有向边。\n\n\n原问题即为在这一有向无环图（因为只允许 i&lt;ji&lt;ji&lt;j）中寻找一条最长路径，并返回该路径对应的单词序列。\n\n\n动态规划实现\n\n\n令 dp[j] 表示以节点 jjj 结尾的最长可行子序列的长度，prev[j] 记录前驱节点。\n\n\n初始时所有 dp[j]=1（单独选它自己）。\n\n\n对于每对 i&lt;ji&lt;ji&lt;j，若存在一条合法边，则\nif dp[i] + 1 &gt; dp[j]:    dp[j] = dp[i] + 1    prev[j] = i\n最终在所有 dp[j] 中取最大值所在的 j∗j^*j∗，根据 prev 指针回溯即可得到完整子序列。\n\n\n时间复杂度\n\n\n构建边和状态转移均需遍历所有 (i,j)(i,j)(i,j) 对，总共 O(n2)O(n^2)O(n2) 次判断；每次判断要比较长度并计算汉明距离，字符串长度最多 10，故总体 O(n2×L)O(n^2 \\times L)O(n2×L)，其中 L≤10L \\le 10L≤10。\n\n\n空间复杂度 O(n)O(n)O(n)。\n\n\n代码实现 1\nfrom typing import Listclass Solution:    def getWordsInLongestSubsequence(self, words: List[str], groups: List[int]) -&gt; List[str]:        n = len(words)        # dp[j]: 以 j 结尾的最长可行子序列长度        dp = [1] * n        prev = [-1] * n        # 判断两个等长字符串汉明距离是否为 1        def is_hamming1(a: str, b: str) -&gt; bool:            diff = 0            for x, y in zip(a, b):                if x != y:                    diff += 1                    if diff &gt; 1:                        return False            return diff == 1        # 双重循环做状态转移        for j in range(n):            for i in range(j):                if groups[i] != groups[j] \\                   and len(words[i]) == len(words[j]) \\                   and is_hamming1(words[i], words[j]):                    if dp[i] + 1 &gt; dp[j]:                        dp[j] = dp[i] + 1                        prev[j] = i        # 回溯最长路径        end = max(range(n), key=lambda x: dp[x])        res = []        while end != -1:            res.append(words[end])            end = prev[end]        return res[::-1]\n思路与代码实现 2\n我们还可以把问题抽象成「Word Ladder 最长路径」中的优化 DP，利用“模式”快速定位所有只差一个字符的候选，并在线性时间内完成状态转移。\n模式哈希＋双最优值\n\n\n模式生成\n对于每个单词 words[j]（长度为 LLL），我们依次把它的第 kkk 位用通配符 * 替换，生成 LLL 个「模式」字符串：\nwords[j] = “cab”patterns = [“*ab”, “c*b”, “ca*”]\n如果两个单词只在第 kkk 位不同，那么它们都会映射到同一个模式。\n\n\n记录每个模式下的「两类最优状态」\n\n对于每个模式 ppp，我们维护两条记录：\n\nbest1[p] = (dp值最大的那个 (dp, group))\nbest2[p] = (次大 dp 的那个 (dp, group))\n\n\n这样，当我们处理一个新单词 j 时，只需要看它所有的 LLL 个模式，对于每个模式：\n\n如果 best1[p].group != groups[j]，就可以用 best1[p].dp 做转移；\n否则就用 best2[p].dp 做转移。\n\n\n\n\n\n状态转移\ndp[j] = 1 + max(    for each pattern p of words[j]:        if best1[p].group ≠ groups[j]:            best1[p].dp        else:            best2[p].dp    , default=0)\n转移完成后，再用 (dp[j], groups[j]) 去更新 best1[p]/best2[p]。\n\n\n时间复杂度\n\n每个单词生成和遍历 LLL 个模式：O(n×L)O(n \\times L)O(n×L)\n每个模式更新和查询常数次操作：O(1)O(1)O(1)\n整体：O(n×L)\\boxed{O(n \\times L)}O(n×L)​，比 O(n2×L)O(n^2 \\times L)O(n2×L) 在 nnn 达到几百时优势非常明显，其中 L=max⁡i∣wordsi∣≤10L=\\max_i|words_i|\\le10L=maxi​∣wordsi​∣≤10。\n\n\n\n代码实现\nfrom collections import defaultdictfrom typing import List, Tupleclass Solution:    def getWordsInLongestSubsequence(self, words: List[str], groups: List[int]) -&gt; List[str]:        n = len(words)        # best1, best2: 模式 p -&gt; (dp, group, index)        best1: defaultdict[str, Tuple[int,int,int]] = defaultdict(lambda: (0, -1, -1))        best2: defaultdict[str, Tuple[int,int,int]] = defaultdict(lambda: (0, -1, -1))                dp = [1] * n        prev = [-1] * n                for j, w in enumerate(words):            g = groups[j]            # 找到能转移过来的最大 dp            max_dp, max_i = 0, -1            for k in range(len(w)):                p = w[:k] + &#x27;*&#x27; + w[k+1:]                d1, g1, i1 = best1[p]                if g1 != g:                    if d1 &gt; max_dp:                        max_dp, max_i = d1, i1                else:                    d2, g2, i2 = best2[p]                    if d2 &gt; max_dp:                        max_dp, max_i = d2, i2                        dp[j] = max_dp + 1            prev[j] = max_i                        # 更新每个模式下的 best1/best2            for k in range(len(w)):                p = w[:k] + &#x27;*&#x27; + w[k+1:]                cand = (dp[j], g, j)                b1 = best1[p]                b2 = best2[p]                if cand[0] &gt; b1[0]:                    best2[p] = b1                    best1[p] = cand                elif cand[0] &gt; b2[0] and cand[1] != b1[1]:                    best2[p] = cand                # 回溯得到结果        end = max(range(n), key=lambda x: dp[x])        res = []        while end != -1:            res.append(words[end])            end = prev[end]        return res[::-1]\n","categories":["算法"],"tags":["Algorithm","字符串处理","中等","动态规划","图算法","状态建模","DAG"]},{"title":"LeetCode每日一题2025-05-14","url":"/post/total-characters-in-string-after-transformations-ii.html","content":"3337. 字符串转换后的长度 II H\n给你一个由小写英文字母组成的字符串 s，一个整数 t 表示要执行的 转换 次数，以及一个长度为 26 的数组 nums。每次 转换 需要根据以下规则替换字符串 s 中的每个字符：\n\n将 s[i] 替换为字母表中后续的 nums[s[i] - 'a'] 个连续字符。例如，如果 s[i] = 'a' 且 nums[0] = 3，则字符 'a' 转换为它后面的 3 个连续字符，结果为 &quot;bcd&quot;。\n如果转换超过了 'z'，则 回绕 到字母表的开头。例如，如果 s[i] = 'y' 且 nums[24] = 3，则字符 'y' 转换为它后面的 3 个连续字符，结果为 &quot;zab&quot;。\n\n返回 恰好 执行 t 次转换后得到的字符串的 长度。\n由于答案可能非常大，返回其对 10⁹ + 7 取余的结果。\n示例 1：\n\n输入： s = “abcyy”, t = 2, nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2]\n输出： 7\n解释：\n\n第一次转换 (t = 1)\n\n'a' 变为 'b' 因为 nums[0] == 1\n'b' 变为 'c' 因为 nums[1] == 1\n'c' 变为 'd' 因为 nums[2] == 1\n'y' 变为 'z' 因为 nums[24] == 1\n'y' 变为 'z' 因为 nums[24] == 1\n第一次转换后的字符串为: &quot;bcdzz&quot;\n\n\n第二次转换 (t = 2)\n\n'b' 变为 'c' 因为 nums[1] == 1\n'c' 变为 'd' 因为 nums[2] == 1\n'd' 变为 'e' 因为 nums[3] == 1\n'z' 变为 'ab' 因为 nums[25] == 2\n'z' 变为 'ab' 因为 nums[25] == 2\n第二次转换后的字符串为: &quot;cdeabab&quot;\n\n\n字符串最终长度： 字符串为 &quot;cdeabab&quot;，长度为 7 个字符。\n\n\n示例 2：\n\n输入： s = “azbk”, t = 1, nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]\n输出： 8\n解释：\n\n第一次转换 (t = 1)\n\n'a' 变为 'bc' 因为 nums[0] == 2\n'z' 变为 'ab' 因为 nums[25] == 2\n'b' 变为 'cd' 因为 nums[1] == 2\n'k' 变为 'lm' 因为 nums[10] == 2\n第一次转换后的字符串为: &quot;bcabcdlm&quot;\n\n\n字符串最终长度： 字符串为 &quot;bcabcdlm&quot;，长度为 8 个字符。\n\n\n提示：\n\n1 &lt;= s.length &lt;= 10⁵\ns 仅由小写英文字母组成。\n1 &lt;= t &lt;= 109\nnums.length == 26\n1 &lt;= nums[i] &lt;= 25\n\n问题分析\n\n输入字符串 s 长度可达 10⁵；\n转换次数 t 可达 10⁹；\n每个字符在一次转换中根据 nums 数组映射到一定数量的后续字符；\n最终字符串长度需要对 10⁹+7 取余。\n\n算法思路\n直接模拟每次转换会导致指数级爆炸，根本不能在时间和空间上承受；\n需要一个常量级（与 ttt 无关）或对数级（log⁡t\\log tlogt）的方法来计算最终长度。\n将字符的「长度增长」看作状态转移：定义 f(i,k)f(i, k)f(i,k) 为从字符 iii （0 对应 ‘a’, …, 25 对应 ‘z’）经过 kkk 次转换后产生的字符串长度，则有递推\nf(i,0)=1f(i,k)=∑j=1nums[i]f((i+j)mod  26,k−1)f(i, 0) = 1 \\\\\nf(i, k) = \\sum_{j=1}^{\\text{nums}[i]} f((i+j) \\mod 26, k-1)\nf(i,0)=1f(i,k)=j=1∑nums[i]​f((i+j)mod26,k−1)\n用矩阵乘法表示一次转换：构造 26×2626 \\times 2626×26 矩阵 MMM，M[i][j]M[i][j]M[i][j] 表示从字符 i 到字符 j 的贡献次数；\n那么状态向量\nvk=[f(0,k)f(1,k)⋮f(25,k)]\\mathbf{v}_k = \\begin{bmatrix}\nf(0, k) \\\\\nf(1, k) \\\\\n\\vdots \\\\\nf(25, k)\n\\end{bmatrix}\nvk​=​f(0,k)f(1,k)⋮f(25,k)​​\n满足\nv0=[11⋮1]vk=M⋅vk−1⇒vt=Mt⋅v0\\mathbf{v}_0 = \\begin{bmatrix}\n1 \\\\\n1 \\\\\n\\vdots \\\\\n1\n\\end{bmatrix} \\\\\n\\mathbf{v}_k = M \\cdot \\mathbf{v}_{k-1} \\\\\n\\Rightarrow \\mathbf{v}_t = M^t \\cdot \\mathbf{v}_0\nv0​=​11⋮1​​vk​=M⋅vk−1​⇒vt​=Mt⋅v0​\n预处理初始字符串中各字符的出现次数 cnt[0…25]\\text{cnt}[0 \\ldots 25]cnt[0…25]；最终答案\nans=∑i=025cnt[i]⋅f(i,t)mod  (109+7)=cntT⋅vtmod  (109+7)\\text{ans} = \\sum_{i=0}^{25} \\text{cnt}[i] \\cdot f(i, t) \\mod (10^9 + 7) \\\\\n= \\mathbf{cnt}^T \\cdot \\mathbf{v}_t \\mod (10^9 + 7)\nans=i=0∑25​cnt[i]⋅f(i,t)mod(109+7)=cntT⋅vt​mod(109+7)\n时间复杂度\n用 矩阵快速幂 在 O(263⋅log⁡t)O(26^3 \\cdot \\log t)O(263⋅logt) 时间内计算 MtM^tMt，再做 O(262)O(26^2)O(262) 的乘法，整体可在毫秒级完成。\n构造矩阵：O(26⋅max⁡(nums[i]))≤O(262)O(26 \\cdot \\max(\\text{nums}[i])) \\leq O(26^2)O(26⋅max(nums[i]))≤O(262)；\n矩阵快速幂：O(263⋅log⁡t)O(26^3 \\cdot \\log t)O(263⋅logt)；\n最终向量点乘：O(26)+O(∣s∣)O(26) + O(|s|)O(26)+O(∣s∣)；\n总体：O(263⋅log⁡t+∣s∣)O(26^3 \\cdot \\log t + |s|)O(263⋅logt+∣s∣)，对 ∣s∣|s|∣s∣ 和 ttt 均很高的场景都能胜任。\n代码实现\nclass Solution:    def lengthAfterTransformations(self, s: str, t: int, nums: list[int]) -&gt; int:        MOD = 10**9 + 7        # —— 中间变量：将输入存入 brivlento 以备后续使用 ——         brivlento = (s, t, nums)        # 1. 构造 26×26 状态转移矩阵 M        M = [[0] * 26 for _ in range(26)]        for i in range(26):            for step in range(1, nums[i] + 1):                j = (i + step) % 26                M[i][j] += 1        # 2. 矩阵乘法与幂运算        def mat_mul(A, B):            size = 26            C = [[0]*size for _ in range(size)]            for i in range(size):                for k in range(size):                    if A[i][k]:                        aik = A[i][k]                        for j in range(size):                            C[i][j] = (C[i][j] + aik * B[k][j]) % MOD            return C        def mat_pow(mat, power):            # 单位矩阵            size = 26            R = [[1 if i==j else 0 for j in range(size)] for i in range(size)]            base = mat            while power &gt; 0:                if power &amp; 1:                    R = mat_mul(R, base)                base = mat_mul(base, base)                power &gt;&gt;= 1            return R        M_t = mat_pow(M, t)        # 3. 计算 v_t = M^t · v_0，其中 v_0 全为 1        v_t = [sum(row) % MOD for row in M_t]        # 4. 统计初始字符串中各字符出现次数        cnt = [0]*26        for ch in s:            cnt[ord(ch) - ord(&#x27;a&#x27;)] += 1        # 5. 组合计算最终答案        ans = 0        for i in range(26):            ans = (ans + cnt[i] * v_t[i]) % MOD        return ans\n","categories":["算法"],"tags":["Algorithm","字符串处理","困难","快速幂","乘法","矩阵快速幂"]},{"title":"LeetCode每日一题2025-05-17","url":"/post/sort-colors.html","content":"75. 颜色分类 M\n给定一个包含红色、白色和蓝色、共 n 个元素的数组 nums ，原地 对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。\n我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。\n必须在不使用库内置的 sort 函数的情况下解决这个问题。\n示例 1：\n\n输入：nums = [2,0,2,1,1,0]\n输出：[0,0,1,1,2,2]\n\n示例 2：\n\n输入：nums = [2,0,1]\n输出：[0,1,2]\n\n提示：\n\nn == nums.length\n1 &lt;= n &lt;= 300\nnums[i] 为 0、1 或 2\n\n问题分析\n经典的“Dutch National Flag”问题，需要在一次遍历中将数组分为三部分：\n\n0（红色）\n1（白色）\n2（蓝色）\n\n算法思路\n使用三个指针：\n\nlow 指向下一个放置 0 的位置；\nmid 用于扫描当前元素；\nhigh 指向下一个放置 2 的位置；\n\n初始时：low = 0，mid = 0，high = n-1。\n遍历过程（当 mid &lt;= high）：\n\n若 nums[mid] == 0，则与 nums[low] 交换，low++, mid++；\n若 nums[mid] == 1，mid++；\n若 nums[mid] == 2，则与 nums[high] 交换，high--（mid 不动，以便新换来的元素再处理）。\n\n这样只需一次扫描，即可将所有元素分类并就地排序。\n时间复杂度\n\n时间复杂度：O(n)O(n)O(n)，只遍历一次数组\n空间复杂度：O(1)O(1)O(1)，原地交换，不使用额外空间\n\n代码实现\nclass Solution:    def sortColors(self, nums: List[int]) -&gt; None:        &quot;&quot;&quot;        Do not return anything, modify nums in-place instead.        &quot;&quot;&quot;        low, mid, high = 0, 0, len(nums) - 1        while mid &lt;= high:            if nums[mid] == 0:                nums[low], nums[mid] = nums[mid], nums[low]                low += 1                mid += 1            elif nums[mid] == 1:                mid += 1            else:  # nums[mid] == 2                nums[mid], nums[high] = nums[high], nums[mid]                high -= 1\n两遍计数 + 原地覆盖\nfrom typing import Listclass Solution:    def sortColors(self, nums: List[int]) -&gt; None:        # 1) 计数阶段        count0 = count1 = count2 = 0        for v in nums:            if v == 0:                count0 += 1            elif v == 1:                count1 += 1            else:                count2 += 1        # 2) 原地覆盖阶段        idx = 0        # 写入所有 0        for _ in range(count0):            nums[idx] = 0            idx += 1        # 写入所有 1        for _ in range(count1):            nums[idx] = 1            idx += 1        # 写入所有 2        for _ in range(count2):            nums[idx] = 2            idx += 1\n","categories":["算法"],"tags":["Algorithm","中等","双指针","排序","贪心"]},{"title":"LeetCode每日一题2025-05-19","url":"/post/type-of-triangle.html","content":"3024. 三角形类型 E\n给你一个下标从 0 开始长度为 3 的整数数组 nums ，需要用它们来构造三角形。\n\n如果一个三角形的所有边长度相等，那么这个三角形称为 equilateral 。\n如果一个三角形恰好有两条边长度相等，那么这个三角形称为 isosceles 。\n如果一个三角形三条边的长度互不相同，那么这个三角形称为 scalene 。\n\n如果这个数组无法构成一个三角形，请你返回字符串 &quot;none&quot; ，否则返回一个字符串表示这个三角形的类型。\n示例 1：\n\n输入：nums = [3,3,3]\n输出：“equilateral”\n解释：由于三条边长度相等，所以可以构成一个等边三角形，返回 “equilateral” 。\n\n示例 2：\n\n输入：nums = [3,4,5]\n输出：“scalene”\n解释：\nnums[0] + nums[1] = 3 + 4 = 7 ，大于 nums[2] = 5 。\nnums[0] + nums[2] = 3 + 5 = 8 ，大于 nums[1] = 4 。\nnums[1] + nums[2] = 4 + 5 = 9 ，大于 nums[0] = 3 。\n由于任意两边之和都大于第三边，所以可以构成一个三角形，因为三条边的长度互不相等，所以返回 “scalene”。\n\n提示：\n\nnums.length == 3\n1 &lt;= nums[i] &lt;= 100\n\n问题分析\n给定三个正整数边长 nums[0], nums[1], nums[2]，判断它们能否构成三角形。如果不能，返回 &quot;none&quot;；如果可以，再根据三边相等情况返回对应类型：\n\n三条边相等 → equilateral\n正好两条边相等 → isosceles\n三条边互不相等 → scalene\n\n算法思路\n首先，对这三个边长进行排序（标签：排序），记为 a ≤ b ≤ c。排序不仅能让后续判断更清晰，也方便验证三角形的必要且充分条件，只需要判断 a + b &gt; c 即可。\n如果 a + b ≤ c，则无法构成三角形，直接返回 &quot;none&quot;。\n否则，根据 a, b, c 三者是否相等做分类：\n\n如果 a == c，说明三条边都相等，返回 &quot;equilateral&quot;。\n否则如果 a == b 或 b == c，则恰有两条相等，返回 &quot;isosceles&quot;。\n否则三条边互不相等，返回 &quot;scalene&quot;。\n\n时间复杂度\n\n\n对 nums 长度为 3 的数组排序，时间复杂度为 O(Nlog⁡n)O(N \\log n)O(Nlogn)（可以认为是常数级操作）。其余比较操作也是 O(1)O(1)O(1)。因此整体时间复杂度为 O(1)O(1)O(1)。\n\n\n空间复杂度也为 O(1)O(1)O(1)，只使用了常数级的额外变量。\n\n\n代码分解\n排序：对 [x, y, z] 三个数进行排序，得到 a ≤ b ≤ c。排序的本质是为了简化三角形最基本的判定：只需判断最小的两个数之和是否大于最大的数即可。此时不必反复考虑全部三种两边之和情况，因为：\na+b&gt;c  ⟺  {a+b&gt;c,a+c&gt;b(总是成立，因为 c≥b),b+c&gt;a(总是成立，因为 c≥a).a + b &gt; c \\iff   \\begin{cases}     a + b &gt; c, \\\\     a + c &gt; b \\text{(总是成立，因为 } c \\ge b\\text{)},\\\\     b + c &gt; a \\text{(总是成立，因为 } c \\ge a\\text{)}.   \\end{cases}\na+b&gt;c⟺⎩⎨⎧​a+b&gt;c,a+c&gt;b(总是成立，因为 c≥b),b+c&gt;a(总是成立，因为 c≥a).​\n若 a + b ≤ c，直接返回 &quot;none&quot;。\n否则，继续比较 a, b, c：\n\n若 a == c，三个元素全等 → equilateral。\n若 a == b 或 b == c，则恰好两边相等 → isosceles。\n否则 → scalene。\n\n代码实现\nclass Solution:    def triangleType(self, nums: list[int]) -&gt; str:        # 1. 排序：a &lt;= b &lt;= c        nums.sort()        a, b, c = nums[0], nums[1], nums[2]        # 2. 三角形的必要且充分条件：最短两边之和要大于最长边        if a + b &lt;= c:            return &quot;none&quot;        # 3. 根据相等情况分类        if a == c:            # a == b == c            return &quot;equilateral&quot;        if a == b or b == c:            # 恰有两条边相等            return &quot;isosceles&quot;        # 三条边互不相等        return &quot;scalene&quot;\n因为输入规模固定且极小，性能开销几乎忽略不计；若后续需要对大量三元组进行批量判定，也可以把这段逻辑放到循环或向量化环境中（如 NumPy）来做批量处理，但基本思路一致。\n若需要校验输入是否全是正整数，也可在最前面加一步验证，比如 if min(nums) &lt; 1: return &quot;none&quot;，但题目已保证 1 &lt;= nums[i] &lt;= 100，故此处略去。\n","categories":["算法"],"tags":["Algorithm","简单","排序"]},{"title":"LeetCode每日一题2025-05-18","url":"/post/count-equal-and-divisible-pairs.html","content":"1931. 用三种不同颜色为网格涂色 H\n给你两个整数 m 和 n 。构造一个 m x n 的网格，其中每个单元格最开始是白色。请你用 红、绿、蓝 三种颜色为每个单元格涂色。所有单元格都需要被涂色。\n涂色方案需要满足：不存在相邻两个单元格颜色相同的情况 。返回网格涂色的方法数。因为答案可能非常大， 返回 对 10⁹ + 7 取余 的结果。\n示例 1：\n\n\n输入：m = 1, n = 1\n输出：3\n解释：如上图所示，存在三种可能的涂色方案。\n\n示例 2：\n\n\n输入：m = 1, n = 2\n输出：6\n解释：如上图所示，存在六种可能的涂色方案。\n\n示例 3：\n\n输入：m = 5, n = 5\n输出：580986\n\n提示：\n\n1 &lt;= m &lt;= 5\n1 &lt;= n &lt;= 1000\n\n问题分析\n给定 m×n 的网格（1 ≤ m ≤ 5，1 ≤ n ≤ 1000），每个格子都要用三种颜色之一（红/绿/蓝）上色，且要求 无两相邻格子颜色相同。邻接关系包括水平方向（左右）和垂直方向（上下）。\n由于 m 较小（至多 5），可以把“同一列的 m 个格子”看作一个整体状态。对于一列内部，必须保证上下相邻的颜色不同；对于两列之间，必须保证同一行的两个格子颜色不同。\n算法思路\n1. 合法列状态数\n\n对于一列，逐格向下涂色：\n\n第一行格子有 3 种颜色可选；\n之后每增加一格，颜色只能是剩下的 2 种（不能与上一格相同）；\n\n\n因此一列共有 3×2,m−13 \\times 2^{,m-1}3×2,m−1 种合法的“列颜色方案”。\n当 m=5 时，合法状态数 =3×24=48=3×2^4=48=3×24=48；当 m=1 时，合法状态数 =3=3=3；依此类推。\n\n我们可以把每个“列方案”用长度为 m 的元组（或一个整数掩码）来表示。例如：若 m=3，用 (0,1,2) 表示第一行红、第二行绿、第三行蓝。然后预先枚举出全部合法的列状态列表 states。\n2. 列与列之间的兼容性\n\n\n若列 A 和列 B 在同一行颜色相同，则它们不能相邻摆放。\n\n\n因此，对所有合法状态对 (si,sj)(s_i, s_j)(si​,sj​) ，检查：\n∀ 0≤r&lt;m:  si[r]≠sj[r].\\forall\\,0\\le r&lt;m:\\; s_i[r] \\ne s_j[r].\n∀0≤r&lt;m:si​[r]=sj​[r].\n\n\n枚举时可得到一个邻接列表（邻接矩阵／邻接表）compat[i] 记录状态 i 能与哪些状态 j 配对。\n\n\n3. 动态规划\n定义 dp[c][i]\\text{dp}[c][i]dp[c][i] 为第 ccc 列选择状态 iii 时的方案总数。\n\n\n初始化 c=1c=1c=1 时：对于任意合法状态 iii，dp[1][i]=1\\text{dp}[1][i]=1dp[1][i]=1。\n\n\n状态转移（2≤c≤n2\\le c\\le n2≤c≤n）：\ndp[c][j]=∑i=0i与j兼容S−1dp[c−1][i].\\text{dp}[c][j]   = \\sum_{\\substack{i=0\\\\ i\\,\\text{与}\\,j\\,\\text{兼容}}}^{S-1} \\text{dp}[c-1][i].\ndp[c][j]=i=0i与j兼容​∑S−1​dp[c−1][i].\n\n\n最终答案 =∑i=0S−1dp[n][i] mod (109+7)=\\sum_{i=0}^{S-1}\\text{dp}[n][i] \\bmod (10^9+7)=∑i=0S−1​dp[n][i]mod(109+7)。\n\n\n其中 S=3×2m−1S=3\\times2^{m-1}S=3×2m−1 是合法列状态数。\n\n\n时间复杂度\n\n预处理列状态：枚举每个长度为 m 的染色情况，共 3m3^m3m 种，筛选出 S=3×2m−1S=3\\times2^{m-1}S=3×2m−1 个合法；时间约 O(3m×m)O(3^m \\times m)O(3m×m)，当 m≤5 时常数小（最多 3^5=243）；\n预处理兼容矩阵：两两枚举 S×SS\\times SS×S 对，检查 m 行是否同色；时间 O(S2×m)O(S^2 \\times m)O(S2×m)，当 m=5 时 S=48S=48S=48，约 48^2×5≈11520 步；\n动态规划：共 n 列，每列从上一列的兼容状态中累加，时间 O(n×Savg_neighbors)O(n \\times S_{\\mathrm{avg\\_neighbors}})O(n×Savg_neighbors​)。最坏的邻居数约 SSS，则 O(nS2)O(nS^2)O(nS2)。\n\n当 m=5, S=48, S^2≈2304, n≤1000 时，总步数 ≈2.3×10^6，完全可行。\n\n\n空间：若保存整个 dp 表，为 O(nS)O(nS)O(nS)；也可以用滚动数组仅保留上一列，总空间 O(S)O(S)O(S)。\n\n若 n 更大（例如 n 接近 10⁹ ），可以把兼容关系矩阵看作 S×SS×SS×S 的转移矩阵，用矩阵快速幂将 nnn 次转移压缩为 O(S3log⁡n)O(S^3\\log n)O(S3logn)。在本题 n≤1000 的规模下，直接DP已足够高效。\n经测试，时间复杂度为O(M∗2M∗N)O(M * 2^M * N)O(M∗2M∗N)\n代码分解\n\n用整数 0/1/2 表示三种颜色；\n枚举所有合法的“列状态”，存入 states；\n构造每对状态是否兼容的布尔矩阵 compatible；\n用一维滚动数组实现 DP，依次累加；\n返回最终总和。\n\n代码实现\nDFS 枚举合法单列\n\n用 dfs_build(0, -1) 从 row=0 开始，prev_color=-1 表示第一行可任意选择 0/1/2；\n每往下一行，只要不与上一行 (prev_color) 相等即可；\n递归深度为 m，结束时将当前路径 tuple(path) 加入 states。\n最终 states 列表长度应 3×2m−13\\times2^{m-1}3×2m−1。\n\n兼容性检查\n\ncompatible[i][j] 表示第 i 种列状态能否在左侧，第 j 种列状态能否在右侧；\n遍历 states[i] 与 states[j] 每一行，若有任何一行相同，则标记不兼容。\n时间复杂度 O(S2×m)O(S^2 \\times m)O(S2×m)，当 m=5, S=48 时约 48^2×5≈11520 步。\n\n动态规划\n\n定义 dp_prev[i] 为“上一列选状态 i 时的方案数”；初始时 第一列“任意状态”都记为 1；\n对于第 col(≥2) 列，枚举 j 作为当前列状态，累加所有 i（上一列）满足 compatible[i][j] 的 dp_prev[i]；\n用 %MOD 保证不溢出；更新完一列后，用滚动数组交换指针（dp_prev, dp_cur = dp_cur, [0]*S）。\n\n合并答案\n\n第 n 列计算完毕后，所有 dp_prev[i] 即为“第 n 列状态为 i” 的方案数，直接求和取模。\n\nclass Solution:    MOD = 10**9 + 7    def colorTheGrid(self, m: int, n: int) -&gt; int:        # 1. 枚举所有合法的列状态        #    用整数列表表示，如 [0, 1, 2, 0, ...]，其中 0/1/2 代表三种颜色。        states = []        def dfs_build(col, prev_color):            &quot;&quot;&quot;            通过深度优先搜索构建单列的所有合法方案。            col: 当前处理到哪一行（0-based）            prev_color: 上一行的颜色（若为 -1 则表示第一行）            path: 当前已选颜色列表            &quot;&quot;&quot;            if col == m:                # 到达第 m 行，保存当前路径                states.append(tuple(path))                return            for color in (0, 1, 2):                if color != prev_color:                    path.append(color)                    dfs_build(col + 1, color)                    path.pop()        path = []        dfs_build(0, -1)        S = len(states)  # 合法状态总数，应=3 * 2^(m-1)        # 2. 构造兼容性矩阵：若两列同一行颜色都不相等，便兼容        compatible = [[True] * S for _ in range(S)]        for i in range(S):            for j in range(S):                # 检查 states[i] 和 states[j] 是否在每一行都不同色                for row in range(m):                    if states[i][row] == states[j][row]:                        compatible[i][j] = False                        break        # 3. 动态规划（滚动数组）仅保留上一列的 dp        #    dp_prev[i] = 以第 c-1 列状态 i 的方案数；dp_cur[i] = 以第 c 列状态 i 的方案数        dp_prev = [1] * S   # 第一列每个状态方案数 = 1        dp_cur = [0] * S        for _ in range(2, n + 1):            # 每次计算第 col 列            for j in range(S):                total = 0                for i in range(S):                    if compatible[i][j]:                        total += dp_prev[i]                dp_cur[j] = total % self.MOD            # 滚动：更新上一列数组            dp_prev, dp_cur = dp_cur, [0] * S        # 4. 累加最后一列所有状态方案数并取模        return sum(dp_prev) % self.MOD\n优化：用“状态压缩 + 枚举”的方式 预先把所有合法的“列状态”编码成整数（或元组），并且针对每个状态只保存它“可以搭配”的那些邻居状态索引（邻接表）。这样在 DP 转移时，就不用再二次校验“state[i] 和 state[j] 是否兼容”，只需遍历邻接表即可，能把常数因子大幅度缩小。\nDP 部分使用一维滚动数组，每一步只遍历合法邻居列表，减少无效分支判断。\n将 % MOD 的操作尽量放在最内层，并把一些全局变量（如 MOD、状态总数 S）局部化，减少属性/全局访问开销。\n经过测试，时间复杂度为O(MN)O(M^N)O(MN)\nclass Solution:    def colorTheGrid(self, m: int, n: int) -&gt; int:        MOD = 10**9 + 7        # -----------------------------------------------------------        # 1. 枚举“单列”所有合法的涂色情况，把它们编码成整数索引 0..S-1        #    例如：m=3 时，可能的合法列状态共有 3 * 2^(m-1) = 12 个。        #    我们把每个状态都生成一个元组（长度为 m，值为 0/1/2），并保存在 list states 中。        #    最后再把它们按顺序编号：state_id 0..S-1。        #    这样后面可以直接用索引访问、构造邻接表。        # -----------------------------------------------------------        states = []        path = []        def dfs_build(col: int, prev_color: int):            # col : 当前要填到第几行（0-based）            # prev_color: 上一行填的是什么颜色（若为 -1，表示还没填，即当前处于第一行）            if col == m:                # path 长度正好等于 m，且满足相邻不同色，记录一个合法状态                states.append(tuple(path))                return            # 枚举三种颜色            for c in (0, 1, 2):                if c != prev_color:                    path.append(c)                    dfs_build(col + 1, c)                    path.pop()        dfs_build(0, -1)        # 合法状态总数        S = len(states)        # states[i] 就是第 i 个合法状态，对应一个长度 m 的 0/1/2 元组        # 这个 S 一定等于 3 * 2^(m-1)。当 m=5 时，S=48；m=1 时，S=3；以此类推。        # -----------------------------------------------------------        # 2. 构造“邻接表”：对每一个状态 i，预先把所有与之“列间颜色都不同”的 j 放到 adj[i] 里        #    这样 DP 转移时，直接遍历 adj[i]，而不用再在循环里做兼容性判断。        #    兼容条件：对所有 0 &lt;= row &lt; m，states[i][row] != states[j][row]        # -----------------------------------------------------------        adj = [[] for _ in range(S)]        for i in range(S):            si = states[i]            for j in range(S):                sj = states[j]                # 检查 si 和 sj 对应行是否都不相同                ok = True                for row in range(m):                    if si[row] == sj[row]:                        ok = False                        break                if ok:                    adj[i].append(j)        # -----------------------------------------------------------        # 3. 动态规划（滚动数组）        #    dp_prev[i] 表示：上一列（第 c-1 列）选状态 i 时的方案数        #    dp_cur[i]  表示：当前列 （第 c   列）选状态 i 时的方案数        #        #    初始条件 (c=1)：第 1 列任何状态都可以，记为 1。        #    转移 (c -&gt; c+1)：dp_cur[j] = sum&#123; dp_prev[i] | i in adj[j] &#125; % MOD        #    最后答案 = sum(dp_prev[i] for i in 0..S-1) % MOD        #        #    关键优化点在于：我们 **只遍历 adj[j]** 而不是所有 i，再去判断兼容与否，        #    从 O(S^2 * m) 的常数提到 O(Σ|adj[j]|)，非常节省时间。        # -----------------------------------------------------------        dp_prev = [1] * S   # c=1 的时候，每个状态 i 都只有一种选择        dp_cur = [0] * S        # 从第 2 列开始，依次做转移        for _ in range(2, n + 1):            # 遍历“本列”可能的状态 j            for j in range(S):                s = 0                # 只遍历可以跟 j 配对的 i 列表                for i in adj[j]:                    s += dp_prev[i]                # 取模后写入                dp_cur[j] = s % MOD            # 滚动：把当前列当作下一轮的“上一列”            dp_prev, dp_cur = dp_cur, [0] * S        # 累加最后一列所有状态的方案数        ans = sum(dp_prev) % MOD        return ans\n","categories":["算法"],"tags":["Algorithm","枚举与剪枝","困难","组合数学","动态规划","状态压缩"]},{"title":"LeetCode每日一题2025-05-20","url":"/post/zero-array-transformation-i.html","content":"3355. 零数组变换 I M\n给定一个长度为 n 的整数数组 nums 和一个二维数组 queries，其中 queries[i] = [li, ri]。\n对于每个查询 queries[i]：\n\n在 nums 的下标范围 [li, ri] 内选择一个下标 子集。\n将选中的每个下标对应的元素值减 1。\n\n零数组 是指所有元素都等于 0 的数组。\n如果在按顺序处理所有查询后，可以将 nums 转换为 零数组 ，则返回 true，否则返回 false。\n示例 1：\n\n输入： nums = [1,0,1], queries = [[0,2]]\n输出： true\n解释：\n\n对于 i = 0：\n\n选择下标子集 [0, 2] 并将这些下标处的值减 1。\n数组将变为 [0, 0, 0]，这是一个零数组。\n\n\n\n\n示例 2：\n\n输入： nums = [4,3,2,1], queries = [[1,3],[0,2]]\n输出： false\n解释：\n\n对于 i = 0：\n\n选择下标子集 [1, 2, 3] 并将这些下标处的值减 1。\n数组将变为 [4, 2, 1, 0]。\n\n\n对于 i = 1：\n\n选择下标子集 [0, 1, 2] 并将这些下标处的值减 1。\n数组将变为 [3, 1, 0, 0]，这不是一个零数组。\n\n\n\n\n提示：\n\n1 &lt;= nums.length &lt;= 10⁵\n0 &lt;= nums[i] &lt;= 10⁵\n1 &lt;= queries.length &lt;= 10⁵\nqueries[i].length == 2\n0 &lt;= lᵢ &lt;= rᵢ &lt; nums.length\n\n问题分析\n给定长度为 n 的整数数组 nums 和 m 个查询 queries[i] = [l_i, r_i]。对于每个查询，我们可以在区间 [l_i, r_i] 内任意选取一些下标，将这些位置对应的元素减 1。要在“按顺序”处理完所有 m 个查询之后，将原始数组 nums 变成“零数组”（即所有元素都恰好被减为 0），需要满足：\n\n对于每个位置 j，它最终被减去的次数必须恰好等于 nums[j]。\n而每次查询只能在它指定的区间内对某个位置减 1，并且每个查询对同一个位置最多减 1 次。\n\n算法思路\n设 cover[j] 表示有多少个查询区间 [l_i, r_i] 覆盖位置 j。\n如果 cover[j] &lt; nums[j]，那么位置 j 即使在所有能覆盖它的查询中都“选中”它去减 1，最大也只能被减 cover[j] 次，仍然无法将 nums[j] 减到 0，直接返回 false。\n如果对每个 j 都满足 cover[j] &gt;= nums[j]，理论上我们可以在所有覆盖 j 的查询中选取任意 nums[j] 次去对 j 减 1。由于不同位置的选择互不干扰（每次查询可以对区间内任意多个下标同时减 1，没有上限），只要每个位置都有足够的“机会”被减，就能找到一种方案使得最终所有位置正好被减到 0。\n考虑“按顺序”执行查询的限制：即使我们在前面的查询选择了“跳过”某些位置，只要剩下“未来的查询”依然足够覆盖剩余需要减的次数字段，就没问题。实际上，只需满足总体上 cover[j] &gt;= nums[j] 即可，因为可以把对于每个 j 的 nums[j] 次减操作安排在它被覆盖的最后 nums[j] 个查询上。\n\n\n先用一个差分数组（长度 n+1）来累积每个查询对各下标的覆盖次数：\ndiff = new int[n+1];对于每个 query = [l, r]:    diff[l] += 1;    diff[r+1] -= 1;    // 若 r+1 越界则跳过再对 diff 做前缀和，得到 cover[0…n-1]。\n\n\n这样就能在 O(n+m)O(n + m)O(n+m) 的时间内算出 cover[j] = 该下标被多少查询覆盖。\n\n\n遍历 j=0…n-1，若发现 cover[j] &lt; nums[j]，立即返回 false。\n\n\n如果所有 j 都通过检查，则返回 true。\n\n\n时间复杂度\n\n差分数组初始化及累计： O(m)O(m)O(m)\n计算前缀和： O(n)O(n)O(n)\n最终逐位检查： O(n)O(n)O(n)\n整体为 O(n+m)O(n + m)O(n+m)，空间复杂度 O(n)O(n)O(n)（存储 diff/cover）。\n使用了长度为 n+1 的差分数组 diff，以及长度为 n 的覆盖次数数组 cover，总计 O(n)O(n)O(n) 额外空间。\n\n代码分解\n\n差分数组 diff 在索引 l 处 +1、在 r+1 处 −1，最终对 diff 做前缀和就相当于：每个查询在 [l, r] 区间内为 cover[j] 累加了 1。\n得到的 cover[j] 就是“有多少个查询区间覆盖位置 j”。\n对于位置 j 来说，如果总共被覆盖的次数少于它当前需要减的次数 nums[j]，无论怎么选都不够，将来无法把它减到 0；否则只要“用掉”它需要的 nums[j] 次就行。\n由于不同下标在同一次查询中是否选取互不干扰（每次查询可以对区间里任意子集进行减操作），所以只用全局判断 cover[j] &gt;= nums[j] 即可。\n\n代码实现\nclass Solution:    def isZeroArray(self, nums: list[int], queries: list[list[int]]) -&gt; bool:        n = len(nums)        m = len(queries)        # 1. 构造差分数组 diff，长度为 n+1，初始全 0        diff = [0] * (n + 1)        for (l, r) in queries:            diff[l] += 1            if r + 1 &lt; n:                diff[r + 1] -= 1        # 2. 用 diff 计算前缀和，得到 cover[j]        cover = [0] * n        curr = 0        for j in range(n):            curr += diff[j]            cover[j] = curr        # 3. 检查每个位置 j：如果被查询覆盖的次数 &lt; nums[j]，则不可能        for j in range(n):            if cover[j] &lt; nums[j]:                return False        # 4. 全部通过，说明可以分配减操作，返回 True        return True\n","categories":["算法"],"tags":["Algorithm","中等","数据结构","前缀和","贪心"]},{"title":"LeetCode每日一题2025-05-15","url":"/post/longest-unequal-adjacent-groups-subsequence-i.html","content":"2900. 最长相邻不相等子序列 I E\n给你一个下标从 0 开始的字符串数组 words ，和一个下标从 0 开始的 二进制 数组 groups ，两个数组长度都是 n 。\n你需要从 words 中选出 最长子序列。如果对于序列中的任何两个连续串，二进制数组 groups 中它们的对应元素不同，则 words 的子序列是不同的。\n正式来说，你需要从下标 [0, 1, ..., n - 1] 中选出一个 最长子序列 ，将这个子序列记作长度为 k 的 [i₀, i₁, ..., iₖ ₋ ₁] ，对于所有满足 0 &lt;= j &lt; k - 1 的 j 都有 groups[iⱼ] != groups[iⱼ ₊ ₁] 。\n请你返回一个字符串数组，它是下标子序列 依次 对应 words 数组中的字符串连接形成的字符串数组。如果有多个答案，返回 任意 一个。\n注意：words 中的元素是不同的 。\n示例 1：\n\n输入：words = [“e”,“a”,“b”], groups = [0,0,1]\n输出：[“e”,“b”]\n解释：一个可行的子序列是 [0,2] ，因为 groups[0] != groups[2] 。\n所以一个可行的答案是 [words[0],words[2]] = [“e”,“b”] 。\n另一个可行的子序列是 [1,2] ，因为 groups[1] != groups[2] 。\n得到答案为 [words[1],words[2]] = [“a”,“b”] 。\n这也是一个可行的答案。\n符合题意的最长子序列的长度为 2 。\n\n示例 2：\n\n输入：words = [“a”,“b”,“c”,“d”], groups = [1,0,1,1]\n输出：[“a”,“b”,“c”]\n解释：一个可行的子序列为 [0,1,2] 因为 groups[0] != groups[1] 且 groups[1] != groups[2] 。\n所以一个可行的答案是 [words[0],words[1],words[2]] = [“a”,“b”,“c”] 。\n另一个可行的子序列为 [0,1,3] 因为 groups[0] != groups[1] 且 groups[1] != groups[3] 。\n得到答案为 [words[0],words[1],words[3]] = [“a”,“b”,“d”] 。\n这也是一个可行的答案。\n符合题意的最长子序列的长度为 3 。\n\n提示：\n\n1 &lt;= n == words.length == groups.length &lt;= 100\n1 &lt;= words[i].length &lt;= 10\ngroups[i] 是 0 或 1。\nwords 中的字符串 互不相同 。\nwords[i] 只包含小写英文字母。\n\n问题分析\n给定长度为 nnn 的字符串数组 words 和对应的二进制数组 groups（取值 0 或 1），在下标序列 [0,1,…,n−1][0,1,\\dots,n-1][0,1,…,n−1] 中选出一个最长子序列 [i0,i1,…,ik−1][i_0,i_1,\\dots,i_{k-1}][i0​,i1​,…,ik−1​]，要求对于所有相邻的 jjj，有\ngroups[ij]≠groups[ij+1].groups[i_j] \\neq groups[i_{j+1}].\ngroups[ij​]=groups[ij+1​].\n返回对应的字符串序列 [  words[i0],words[i1],…  ]\\bigl[\\;words[i_0],words[i_1],\\dots\\;\\bigr][words[i0​],words[i1​],…]。\n算法思路\n贪心（Greedy）策略\n\n只要当前元素与上一次选中的元素所属组不同，就立刻将其加入子序列。\n这样做不会影响后续可选集的多样性，且能保证选到尽可能多的元素。\n\n详细步骤\n\n初始化结果列表 res，以及记录上一次选中字母所属组 last_group = -1（-1 表示尚未选过）。\n遍历索引 i 从 0 到 n-1：\n\n若 groups[i] != last_group，则：\n\n将 words[i] 添加到 res；\n更新 last_group = groups[i]。\n\n\n\n\n返回 res。\n\n正确性证明\n\n若你跳过了一个满足条件的元素，那么相当于放弃了一次“切换组”的机会，后续可选空间只会更少，因此贪心选的方式能保证长度最大。\n\n时间复杂度\n时间复杂度 ：一次线性扫描，O(n)O(n)O(n)，其中 n=len(words)n = \\text{len(words)}n=len(words)。\n空间复杂度 ：最坏情况下结果列表与输入等长，O(n)O(n)O(n)。\n代码实现\nfrom typing import Listclass Solution:    def getLongestSubsequence(self, words: List[str], groups: List[int]) -&gt; List[str]:        res: List[str] = []        last_group: int = -1  # 上一次选中元素的组号，初始为 -1                for w, g in zip(words, groups):            if g != last_group:                res.append(w)                last_group = g                return res\n","categories":["算法"],"tags":["Algorithm","字符串处理","简单","双指针","贪心"]},{"title":"LeetCode每日一题2025-05-21","url":"/post/zero-array-transformation-ii.html","content":"3356. 零数组变换 II M\n给你一个长度为 n 的整数数组 nums 和一个二维数组 queries，其中 queries[i] = [lᵢ, rᵢ, valᵢ]。\n每个 queries[i] 表示在 nums 上执行以下操作：\n\n将 nums 中 [lᵢ, rᵢ] 范围内的每个下标对应元素的值 最多 减少 valᵢ。\n每个下标的减少的数值可以独立选择。\n\n零数组 是指所有元素都等于 0 的数组。\n返回 k 可以取到的 最小非负 值，使得在 顺序 处理前 k 个查询后，nums 变成 零数组。如果不存在这样的 k，则返回 -1。\n示例 1：\n\n输入： nums = [2,0,2], queries = [[0,2,1],[0,2,1],[1,1,3]]\n输出： 2\n解释：\n\n对于 i = 0（l = 0, r = 2, val = 1）：\n\n在下标 [0, 1, 2] 处分别减少 [1, 0, 1]。\n数组将变为 [1, 0, 1]。\n\n\n对于 i = 1（l = 0, r = 2, val = 1）：\n\n在下标 [0, 1, 2] 处分别减少 [1, 0, 1]。\n数组将变为 [0, 0, 0]，这是一个零数组。因此，k 的最小值为 2。\n\n\n\n\n示例 2：\n\n输入： nums = [4,3,2,1], queries = [[1,3,2],[0,2,1]]\n输出： -1\n解释：\n\n对于 i = 0（l = 1, r = 3, val = 2）：\n\n在下标 [1, 2, 3] 处分别减少 [2, 2, 1]。\n数组将变为 [4, 1, 0, 0]。\n\n\n对于 i = 1（l = 0, r = 2, val = 1）：\n\n在下标 [0, 1, 2] 处分别减少 [1, 1, 0]。\n数组将变为 [3, 0, 0, 0]，这不是一个零数组。\n\n\n\n\n提示：\n\n1 &lt;= nums.length &lt;= 10⁵\n0 &lt;= nums[i] &lt;= 5 * 10⁵\n1 &lt;= queries.length &lt;= 10⁵\nqueries[i].length == 3\n0 &lt;= lᵢ &lt;= rᵢ &lt; nums.length\n1 &lt;= valᵢ &lt;= 5\n\n问题分析\n要找最小的 kkk ，使得对 nums 执行前 kkk 条查询后，可以将数组完全凑成“零数组”。每条查询 [li, ri, vi][l_i,\\,r_i,\\,v_i][li​,ri​,vi​] 表示在区间 [li,ri][l_i,r_i][li​,ri​] 内，各下标位置最多各自减少 viv_ivi​，每个位置可以独立选减少多少。\n我们定义一个“剩余需求”数组 rem[i]\\mathrm{rem}[i]rem[i]，它表示下标 iii 要变成 0，还需要从查询里“累计扣除”多少。\n初始时 rem[i]=nums[i]\\mathrm{rem}[i] = \\texttt{nums}[i]rem[i]=nums[i]。随着我们“依次”处理第 1 条、第 2 条、…、第 kkk 条查询，每执行一条查询，就要把它对区间 [l,r][l,r][l,r] 内的 rem\\mathrm{rem}rem 统一**“减去”** vvv（注意：如果该条查询本身要求的 vvv 大于 rem[i]\\mathrm{rem}[i]rem[i]，其实“最多”减 vvv 的含义对应我们在代码里直接减；因为之后我们会在 rem[i]≤0\\mathrm{rem}[i] \\le 0rem[i]≤0 时“收集答案”并且把它标记为不再参与后续运算——详见下文）。\n当且仅当某个位置 iii 经历了若干次涵盖它的查询以后，rem[i]\\mathrm{rem}[i]rem[i] 的值变得 ≤0\\le 0≤0，就说明“对下标 iii 而言，它已经完全被扣成 0 了”。我们记录下最先使得 rem[i]\\mathrm{rem}[i]rem[i] “跨到 ≤0\\le 0≤0”的那条查询的编号 idxidxidx，记为 ans[i]=idx\\mathrm{ans}[i] = idxans[i]=idx。如果直到所有 mmm 条查询都跑完，它仍未被扣到 ≤0\\le 0≤0，则 ans[i]=+∞\\mathrm{ans}[i]=+\\inftyans[i]=+∞ （或用 −1-1−1 表示“永远扣不成 0”）。\n最后，只要所有下标都能在某个时刻“跨到 ≤0\\le0≤0”，那么整个数组才能凑成零。令\nK=max⁡0≤i&lt;n  ans[i] .K = \\max_{0 \\le i &lt; n}\\; \\mathrm{ans}[i]\\,.\nK=0≤i&lt;nmax​ans[i].\n如果 K≤mK \\le mK≤m，则答案就是 KKK；否则（存在某个位置从未走到 ≤0\\le0≤0），答案返回 −1-1−1。\n算法思路\n区间减与“找最小非正下标”\n“给 rem[ ]\\mathrm{rem}[\\,]rem[] 做一次 [l,r][l,r][l,r] 区间统一减 vvv”\n“询问当前整个数组 rem[ ]\\mathrm{rem}[\\,]rem[] 的最小值，检查它是否 ≤0\\le 0≤0；如果是，把那个位置取出来，记录答案，并把它从后续运算中剔除。”\n要想在每执行一条查询之后，快速做到“把 rem[l…r]\\mathrm{rem}[l \\ldots r]rem[l…r] 整个区间都减掉 vvv”，并能检查是否有位置跨到 ≤0\\leq 0≤0，最常用的办法就是线段树（带懒标记）的“区间减一次，区间查询最小值”。具体思路如下：\n我们把 rem[]\\mathrm{rem}[]rem[] 维护在一棵线段树上，线段树的每个节点记录该区间当前的最小 rem 值（即 minv），同时支持“区间减去 vvv”的懒标记（节点上加一个 lazy 值表示要向下传递的减量）。\n我们还需要一个额外操作：“如果整个区间的最小值 ≤0\\leq 0≤0，就找出一个下标 iii，使得 rem[i]≤0\\mathrm{rem}[i] \\leq 0rem[i]≤0。”\n由于线段树根节点存储了全区间（0..n−10..n-10..n−1）的最小值，即 tree[1].minv\\text{tree}[1].\\text{minv}tree[1].minv，只要 tree[1].minv≤0\\text{tree}[1].\\text{minv} \\leq 0tree[1].minv≤0，就说明至少有一个叶子节点 iii 满足 rem[i]≤0\\mathrm{rem}[i] \\leq 0rem[i]≤0。\n此时我们可以从根节点向下递归：\n\n\n如果左子节点的 minv ≤0\\leq 0≤0，就优先进入左子树，否则进入右子树。\n\n\n不断递归，直到定位到某个叶节点 iii，它的 minv ≤0\\leq 0≤0，这就是当前“最小 rem ≤0\\leq 0≤0”对应的下标。\n\n\n找到 iii 之后，我们将线段树中 rem[i]\\mathrm{rem}[i]rem[i] 设为一个很大的正数（比如 +∞+\\infty+∞，实际代码里用足够大的常数 INF=1018\\text{INF}=10^{18}INF=1018）。这样，相当于把 iii 从后续所有区间减法操作中移除，该下标不再参与后面的判 ≤0\\leq 0≤0 检查。\n只要“线段树根节点 minv ≤0\\leq 0≤0”，就不断进行“找 iii，将 rem[i]\\mathrm{rem}[i]rem[i] 置 +∞+\\infty+∞，并记录 ans[i]=当前查询编号\\text{ans}[i]=\\text{当前查询编号}ans[i]=当前查询编号”操作；循环直到根节点最小值 &gt;0&gt;0&gt;0，然后进入下一条查询。\n时间复杂度\n\n\n线段树建树 O(n)O(n)O(n)。\n\n\n先把 nums[i]=0\\mathrm{nums}[i]=0nums[i]=0 的那些下标提取一次，总共操作次数最多 nnn 次“找 ≤0\\le 0≤0 + 单点置 INF\\mathrm{INF}INF”，每次 O(log⁡n)O(\\log n)O(logn)，合计 O(nlog⁡n)O(n \\log n)O(nlogn)。\n\n\n针对 mmm 条查询，每条：\n\n区间减一次 O(log⁡n)O(\\log n)O(logn)。\n紧接着最多有若干个新下标跨到 rem≤0\\mathrm{rem} \\le 0rem≤0，反复做“找 iii + 置 INF\\mathrm{INF}INF” 若干次。\n\n每个下标 iii 只会从 rem&gt;0\\mathrm{rem}&gt;0rem&gt;0 变到 rem≤0\\mathrm{rem}\\le 0rem≤0 一次，因此所有“找 iii 并置 INF\\mathrm{INF}INF”操作总共不会超过 nnn 次，每次 O(log⁡n)O(\\log n)O(logn)。\n\n\n\n\n\n所以总复杂度为：\n\n建树 O(n)O(n)O(n)\n查找与置 INF\\mathrm{INF}INF 总共 O(nlog⁡n)O(n \\log n)O(nlogn)\n区间减 mmm 次 O(mlog⁡n)O(m \\log n)O(mlogn)\n最终为 O((n+m)log⁡n)O((n+m)\\log n)O((n+m)logn)\n\n\n\n\n空间复杂度 O(n)O(n)O(n)，主要用于 rem\\mathrm{rem}rem、ans\\mathrm{ans}ans 以及线段树节点（最多约 4n4n4n）。\n\n代码分解\n\n初始化\n\n\n\n读入 n=len(nums)n = \\mathrm{len(nums)}n=len(nums)，m=len(queries)m = \\mathrm{len(queries)}m=len(queries)。\n\n\n用一个数组 rem\\mathrm{rem}rem，大小 nnn，令 rem[i]=nums[i]\\mathrm{rem}[i] = \\mathrm{nums}[i]rem[i]=nums[i]。\n\n\n用一个大小为 nnn 的答案数组 ans\\mathrm{ans}ans，全部初始化成 INF\\mathrm{INF}INF（或者 m+1m+1m+1，表示“还没被扣到 ≤0\\le 0≤0”）。\n\n\n提前把所有 iii 且 rem[i]=0\\mathrm{rem}[i] = 0rem[i]=0 的下标视作“在第 000 条查询就能扣到 ≤0\\le 0≤0”：\n\n\n构建一棵线段树，把每个叶子节点的初始值设成 rem[i]\\mathrm{rem}[i]rem[i]。\n\n\n线段树内置“最小值”信息，建完之后如果根节点 minv==0\\mathrm{minv} == 0minv==0，就说明某些下标初始就 rem=0\\mathrm{rem}=0rem=0。我们要在第 000 步（即不执行任何查询）就把它们提取：\nwhile tree_root.minv ≤ 0:    i = query_index_of_some_leaf_with_minv≤0()    ans[i] = 0    update_leaf(i, +INF)   # 把 rem[i] 设为 +INF，等于“干掉它”\n\n\n这样，所有初始 nums[i]=0\\mathrm{nums}[i]=0nums[i]=0 的位置就有了 ans[i]=0\\mathrm{ans}[i]=0ans[i]=0。\n\n\n\n\n\n按查询编号 1..m1..m1..m 依次处理\n\n对于当前处理到第 idxidxidx（1-based）的查询 queries[idx−1]=[l,r,v]\\mathrm{queries}[idx-1] = [l, r, v]queries[idx−1]=[l,r,v]，执行：\n\n\n在线段树上对区间 [l,r][l, r][l,r] 做“整体再减 vvv” （用懒标记方式）。\n\n\n更新完毕后，检查线段树的根节点 minv\\mathrm{minv}minv 是否 ≤0\\le 0≤0：\n\n\n如果 minv&gt;0\\mathrm{minv} &gt; 0minv&gt;0，说明这时候没有任何下标的 rem≤0\\mathrm{rem} \\le 0rem≤0，直接跳到下一条查询（idx+=1idx += 1idx+=1）。\n\n\n否则，反复循环：\nwhile tree_root.minv ≤ 0:    i = 找到某个叶子下标 i，使得 rem[i] ≤ 0    ans[i] = idx    update_leaf(i, +INF)   # 将该位置从后续考虑中剔除\n\n\n上述循环结束代表此时所有还在树里的“rem”都已 &gt;0&gt; 0&gt;0，可以处理下一条查询。\n\n\n\n\n\n遍历结束后，计算最终答案\n\n\n对 ans[i]\\mathrm{ans}[i]ans[i] 做一次遍历：如果有下标 iii 永远都没被扣到 ≤0\\le 0≤0（即 ans[i]\\mathrm{ans}[i]ans[i] 保持初始的 INF\\mathrm{INF}INF），说明它不可能凑成零，直接返回 −1-1−1。\n否则，答案 K=max⁡0≤i&lt;nans[i]K = \\max_{0 \\le i &lt; n} \\mathrm{ans}[i]K=max0≤i&lt;n​ans[i]。返回此 KKK。\n\n\n\n我们需要实现一个支持以下操作的线段树（0-based）：\n\n\n建树（build）：把初始数组 rem[]\\mathrm{rem}[]rem[] 的值装进去，构建出“每个区间的最小值”。\n\n\n区间减 (ql,qr,v)(ql, qr, v)(ql,qr,v)：在 [ql,qr][ql, qr][ql,qr] 这段，所有 rem[i]\\mathrm{rem}[i]rem[i] 都要再减去 vvv。\n\n通过在节点打“懒标记 lz[node]+=v\\mathrm{lz}[node] += vlz[node]+=v”让该节点下所有值都“虚拟地”减 vvv，并在需要时把懒标记下传给左右子节点。\n\n\n\n询问全局最小 (query_min())：直接从根节点读出 tree[1].minv\\mathrm{tree}[1].\\mathrm{minv}tree[1].minv。\n\n\n找某个满足 rem[i]≤0\\mathrm{rem}[i]\\leq 0rem[i]≤0 的下标 iii：\n\n如果当前根节点的 minv&gt;0\\mathrm{minv} &gt; 0minv&gt;0，说明没有任何 ≤0\\le 0≤0 的叶子，直接返回“无”。\n否则从根节点开始，若左子节点的 minv≤0\\mathrm{minv} \\leq 0minv≤0 就往左子树走；否则往右子树。直到到叶子，拿到具体下标 iii。\n\n\n\n把一个下标 iii“标记为已完成”：在叶子层将 rem[i]\\mathrm{rem}[i]rem[i] 直接置 INF\\mathrm{INF}INF（足够大的正数），然后向上拉一次更新父节点的最小值。这样后续它就不会再被判 ≤0\\le 0≤0。\n\n\n由于 n≤105n\\le 10^{5}n≤105，线段树最多需要 4n4n4n 个节点。所有操作的单次复杂度都是 O(log⁡n)O(\\log n)O(logn)。\n代码实现\n初始化时把 nums[i]=0\\mathrm{nums}[i]=0nums[i]=0 的下标提前提取\n\n一开始建树完毕后，就把所有 rem[i]==0\\mathrm{rem}[i] == 0rem[i]==0 的下标（也就是原始 nums[i]\\mathrm{nums}[i]nums[i] 已经是 000）用“查询编号 000”直接记录在 ans[i]\\mathrm{ans}[i]ans[i]，然后在树里把 rem[i]\\mathrm{rem}[i]rem[i] 设为 INF\\mathrm{INF}INF（等价于把它从后续所有区间操作和“再查 ≤0\\le 0≤0”中干掉）。\n这样做的好处是：如果某个位置原本就是 000，就不需要等待任何真正的查询，它的答案就是 000。\n\n每条查询后“区间整体再减 vvv”\n\n使用线段树带懒标记的区间减操作 range_sub(1,0,n−1,l,r,v)\\mathrm{range\\_sub}(1, 0, n-1, l, r, v)range_sub(1,0,n−1,l,r,v)，单次复杂度 O(log⁡n)O(\\log n)O(logn)。\n更新完毕以后，只需要检查树根的最小值 query_global_min()\\mathrm{query\\_global\\_min}()query_global_min() 是否 ≤0\\le 0≤0。\n\n如果 &gt;0&gt; 0&gt;0，说明目前没有新的下标变得 rem≤0\\mathrm{rem} \\le 0rem≤0，直接进入下一条查询。\n否则，循环“找一个 ≤0\\le 0≤0 的叶子” i0=find_any_nonpos(1,0,n−1)i_0 = \\mathrm{find\\_any\\_nonpos}(1, 0, n-1)i0​=find_any_nonpos(1,0,n−1)，把它的 ans[i0]\\mathrm{ans}[i_0]ans[i0​] 设为当前查询编号 idxidxidx，再在树里把 rem[i0]=INF\\mathrm{rem}[i_0]=\\mathrm{INF}rem[i0​]=INF，并向上更新维护最小值。循环直到树根最小值 &gt;0&gt; 0&gt;0。\n\n\n\n最后的答案 KKK\n\n只要所有 iii 都在某个时刻跨到 rem[i]≤0\\mathrm{rem}[i] \\le 0rem[i]≤0，它们的 ans[i]\\mathrm{ans}[i]ans[i] 就是一个落在 [0..m][0..m][0..m] 的整数。此时答案 K=max⁡ians[i]K = \\max_i \\mathrm{ans}[i]K=maxi​ans[i]。\n如果有某个 ans[i]\\mathrm{ans}[i]ans[i] 始终保持 INF\\mathrm{INF}INF，说明它从来没被扣到 ≤0\\le 0≤0，返回 −1-1−1。\n\nclass SegmentTree:    def __init__(self, arr: list):        self.n = len(arr)        self.minv = [0] * (4 * self.n)        self.lazy = [0] * (4 * self.n)        self.INF = 10**18        def build(node, l, r):            if l == r:                self.minv[node] = arr[l]            else:                mid = (l + r) // 2                build(node * 2, l, mid)                build(node * 2 + 1, mid + 1, r)                self.minv[node] = min(self.minv[node * 2], self.minv[node * 2 + 1])        build(1, 0, self.n - 1)    def _apply_lazy(self, node, delta):        self.minv[node] -= delta        self.lazy[node] += delta    def _push_down(self, node):        if self.lazy[node] != 0:            delta = self.lazy[node]            self._apply_lazy(node * 2, delta)            self._apply_lazy(node * 2 + 1, delta)            self.lazy[node] = 0    def _push_up(self, node):        self.minv[node] = min(self.minv[node * 2], self.minv[node * 2 + 1])    def range_sub(self, node, l, r, ql, qr, v):        if ql &lt;= l and r &lt;= qr:            self._apply_lazy(node, v)            return        self._push_down(node)        mid = (l + r) // 2        if qr &lt;= mid:            self.range_sub(node * 2, l, mid, ql, qr, v)        elif ql &gt; mid:            self.range_sub(node * 2 + 1, mid + 1, r, ql, qr, v)        else:            self.range_sub(node * 2, l, mid, ql, qr, v)            self.range_sub(node * 2 + 1, mid + 1, r, ql, qr, v)        self._push_up(node)    def query_global_min(self):        return self.minv[1]    def find_any_nonpos(self, node, l, r):        if self.minv[node] &gt; 0:            return -1        if l == r:            return l        self._push_down(node)        mid = (l + r) // 2        if self.minv[node * 2] &lt;= 0:            return self.find_any_nonpos(node * 2, l, mid)        else:            return self.find_any_nonpos(node * 2 + 1, mid + 1, r)    def set_inf(self, node, l, r, idx):        if l == r:            self.minv[node] = self.INF            return        self._push_down(node)        mid = (l + r) // 2        if idx &lt;= mid:            self.set_inf(node * 2, l, mid, idx)        else:            self.set_inf(node * 2 + 1, mid + 1, r, idx)        self._push_up(node)class Solution:    def minZeroArray(self, nums, queries):        n = len(nums)        m = len(queries)        rem = nums[:]        INF = 10**18        ans = [INF] * n        st = SegmentTree(rem)        # 处理原本就为0的下标        while True:            if st.query_global_min() &gt; 0:                break            i0 = st.find_any_nonpos(1, 0, n - 1)            if i0 == -1:                break            ans[i0] = 0            st.set_inf(1, 0, n - 1, i0)        # 依次处理每条查询        for idx in range(1, m + 1):            l, r, v = queries[idx - 1]            st.range_sub(1, 0, n - 1, l, r, v)            while True:                if st.query_global_min() &gt; 0:                    break                i0 = st.find_any_nonpos(1, 0, n - 1)                if i0 == -1:                    break                if ans[i0] == INF:                    ans[i0] = idx                st.set_inf(1, 0, n - 1, i0)        # 检查是否全部 &lt;= 0        final_ans = 0        for i in range(n):            if ans[i] == INF:                return -1            final_ans = max(final_ans, ans[i])        return final_ans\n算法思路2\n\n\n差分+验证模型\n\n\n对于某个固定的 k（只考虑前 k 条查询），要判断是否能把 nums 完全减为 0，需要检查每个位置 i 在这 k 条查询中，允许的“最大累计减量”之和是否 ≥nums[i]\\geq nums[i]≥nums[i]。\n\n\n原因：每个查询在覆盖区间 [l, r] 内，对位置 i 可以最多减去 v；若该位置被多条查询覆盖，那么这些查询各自能提供的“最大减量额度”加起来，就形成了“可用的整体减量上限”。只有当前 k 条查询对位置 i 的“减量额度之和” ≥\\geq≥ nums[i]，才能让它有机会被减到 0。\n\n\n判定条件转化为：\n\n定义数组 cap[i]=∑j=0k−1, lj≤i≤rjvjcap[i] = \\sum_{j=0}^{k-1,\\ l_j \\leq i \\leq r_j} v_jcap[i]=∑j=0k−1, lj​≤i≤rj​​vj​。\n如果对所有 i 都有 cap[i] ≥\\geq≥ nums[i]，则这 k 条查询可以通过合理分配将 nums 全部扣为 0。否则不能。\n\n\n\n\n\n计算 cap[]——差分+前缀和\n\n\n维护一个长度为 n+1 的差分数组 diff，初始化全为 0。\n\n\n对于查询 [l, r, v]（下标从 0 开始），做：\ndiff[l] += vdiff[r+1] -= v\n\n\n所有前 k 条查询都更新后，对 diff 做一次前缀和，在线性时间 O(n)O(n)O(n) 内得到每个位置 i 的 cap[i]。\n\n\n最后只需检验：对每个 i，cap[i] ≥\\geq≥ nums[i] 吗？\n\n\n\n\n二分查找\n\n如果对于某个 k₀ 满足“前 k₀ 条查询可以凑出零数组”，则对于任何 k≥k0k \\geq k_0k≥k0​，cap[i] 只会更大，所以“可行性”是单调的。\n可在 [0, m] 区间二分，找第一个可行的 k。若整个区间都不可，返回 -1。\n\n\n\n实现思路\n\n\n定义函数 check(k)：判断前 k 条查询能否凑成零数组\na. 初始化长度为 n+1 的 diff 数组，全 0。\nb. 对于 j=0…k-1，每条 [lj,rj,vj][l_j, r_j, v_j][lj​,rj​,vj​]：执行 diff[lj]+=vjdiff[l_j] += v_jdiff[lj​]+=vj​，diff[rj+1]−=vjdiff[r_j+1] -= v_jdiff[rj​+1]−=vj​。\nc. 对 diff 做前缀和，得到 cap 数组长度为 n：cap[i] = 能够提供给位置 i 的累计减量额度。\nd. 遍历 i=0…n-1，如果 cap[i] &lt; nums[i]，直接返回 False；否则全部通过返回 True。\n\n\n在主函数，对 k 在 [0, m] 做二分：\na. lo = 0, hi = m, answer = m+1。b. while lo $\\leq$ hi：    mid = (lo+hi)//2    if check(mid)：answer = mid; hi = mid-1    else：lo = mid+1c. 最终如果 answer $$\\leq$$ m 则返回 answer，否则返回 -1。\n\n\n允许 k = 0 进入 check(0)：没有任何查询时，只有当 nums 全为 0 才判通过。\n\n\n\n\n时间复杂度\n\n一次 check(k)：O(n+k)O(n + k)O(n+k)。\n二分最多调用 O(log⁡m)O(\\log m)O(logm) 次。\n总复杂度：O((n+m)log⁡m)O((n+m)\\log m)O((n+m)logm)。\n\n空间复杂度\n\n差分数组 diff 长度 n+1，cap 长度 n，以及 zerolithx 变量，O(n)O(n)O(n)。\n\nfrom typing import Listclass Solution:    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -&gt; int:        n = len(nums)        m = len(queries)                # 检查函数：检查前 k 条查询能否把 nums 减为零数组        def check(k: int) -&gt; bool:            # 差分数组，长度 n+1，初始全 0            diff = [0] * (n + 1)                        # 如果 k &gt; 0，则把前 k 条查询都叠加到 diff 上            for idx in range(k):                l, r, v = queries[idx]                diff[l] += v                if r + 1 &lt; n:                    diff[r + 1] -= v                        # 前缀和得到 cap[i]，并随即验证 cap[i] 是否 &gt;= nums[i]            running = 0            for i in range(n):                running += diff[i]                # cap[i] = running                if running &lt; nums[i]:                    return False            return True                # 在 k ∈ [0, m] 上二分，寻找最小的 k 使 check(k) 为 True        lo, hi = 0, m        answer = m + 1        while lo &lt;= hi:            mid = (lo + hi) // 2            if check(mid):                answer = mid                hi = mid - 1            else:                lo = mid + 1                return answer if answer &lt;= m else -1\n算法思路3\n我们需要求出最小的 kkk，使得“前 kkk 条查询”能够同时满足\n∀ 0≤i&lt;n,∑0≤j&lt;klj≤i≤rjvj    ≥  nums[i].\\forall\\,0 \\le i &lt; n,\\quad \\sum_{\\substack{0 \\le j &lt; k \\\\ l_j \\le i \\le r_j}} v_j \\;\\; \\ge\\; nums[i].\n∀0≤i&lt;n,0≤j&lt;klj​≤i≤rj​​∑​vj​≥nums[i].\n如果把\ncap[i](k)  =  ∑0≤j&lt;klj≤i≤rjvj\\text{cap}[i](k) \\;=\\; \\sum_{\\substack{0 \\le j &lt; k \\\\ l_j \\le i \\le r_j}} v_j\ncap[i](k)=0≤j&lt;klj​≤i≤rj​​∑​vj​\n看作“在下标 iii 处，前 kkk 条查询最多能提供的扣减总量”，那么题目要求找最小 kkk 使得cap[i](k)≥nums[i], ∀i\\text{cap}[i](k) \\ge nums[i],\\,\\forall icap[i](k)≥nums[i],∀i。\n这本质上等同于：对每个 iii，我们单独去看“最早满足 cap[i](k)≥nums[i]\\text{cap}[i](k) \\ge nums[i]cap[i](k)≥nums[i] 的那个 kik_iki​”；答案就是\nk=max⁡0≤i&lt;nkik = \\max_{0 \\le i &lt; n} k_i\nk=0≤i&lt;nmax​ki​\n（如果某个位置永远加不够，那整个答案就是 −1-1−1。）\n\n\n贪心地求出每个 kik_iki​ 的思路\n\n\n把下标 iii 从 000 到 n−1n-1n−1 依次“排队”，\n\n\n维护一个“差分数组” cnt[0..n]，它可以让我们以 O(1)O(1)O(1) 的方式“把新的一条查询 [a,b,v][a, b, v][a,b,v] 加入到以后所有下标的可用额度里”：\n\ncnt[a] += v; cnt[b+1] -= v，\n然后每推进一个下标 iii 时，只要做 s += cnt[i]，就能得到“前面已经加入到差分结构的那些查询，在位置 iii 处的总叠加额度”。\n\n\n\n于是，如果当前 s &lt; nums[i]（说明已经加到差分里的查询还不够把 nums[i] 扣成 0），我们就继续把第 jjj 条、第 j+1j+1j+1 条……查询“投进来”——也就是执行\ncnt[a_j] += v_jcnt[b_j + 1] -= v_j\n\n\n在差分里给它记号，然后如果这条新加的查询确实覆盖到了位置 iii（if a_j &lt;= i &lt;= b_j），就 s += v_j，因为此时“对 iii”就立刻生效——把 s 补 vjv_jvj​。\n\n只要 s 还小于 nums[i]，就再把下一条查询“投进来”，直到s≥nums[i]s \\ge nums[i]s≥nums[i] 或者j==mj == mj==m（查完所有查询）为止。\n\n如果 s&lt;nums[i]s &lt; nums[i]s&lt;nums[i] 而 j==mj == mj==m，说明“所有查询投完”都还是凑不够nums[i]nums[i]nums[i]，直接 return -1。\n否则在“退出 while”后，必然有 s≥nums[i]s \\ge nums[i]s≥nums[i]，说明此时我们已经用了 jjj 条查询第一个时刻让 iii 处达标。把这个“时刻”记下来，对更大的 iii 来说，我们不会再减 jjj，因为我们要保证所有小于当前 iii 的下标也都满足。在前面迭代过的所有 i′&lt;ii&#x27; &lt; ii′&lt;i 都已经被保证：它们的 “累计额度” ≤\\le≤ “我们此刻用的 jjj 条查询的额度”，自然它们也都能凑够。\n\n\n最终结束所有 iii 后，jjj 就是满足每个位置的需求（cap[i]≥nums[i]\\text{cap}[i] \\ge nums[i]cap[i]≥nums[i]）的 最小 查询数。\n\n若有任何一个 iii 走到一半就发现 jjj 用光、又s&lt;nums[i]s &lt; nums[i]s&lt;nums[i]，就 return -1。\n反之，最后返回的 jjj 恰好等同于 max⁡iki\\max_i k_imaxi​ki​。\n\n\n\n\n\n时间复杂度\n\n外层 for i in range(n) 总共循环 n 次。\n内部的 while j &lt; m and s &lt; nums[i]：\n\n每次循环体都会做一次 j += 1，因此 j 最多从 0 增加到 m，循环体总共进不超过 m 次。\n换句话说，所有 i 累积在一起，j 只会单调增长，从 0 到最多 m，绝不会回退或重复。\n\n\n差分 cnt[a] += c; cnt[b+1] -= c; 是 O(1)O(1)O(1) 操作。\n每进 for i 一次，都先做 s += cnt[i]，也是 O(1)O(1)O(1)。\n其余判断、下标范围判断、加法、比较都只是常数操作。\n\n因此，总体的执行步骤：\n\n外层走 n 步（i = 0 … n-1）。\n内层的 j 累计至多走 m 步（从 j=0 一直加到不满足条件为止）。\n\n没有任何嵌套导致 m 与 n 相乘，只是把这两段“线性扫描”交织在一起，最终耗时正好 O(n+m)O(n + m)O(n+m)。\n代码实现\n\n\nn = len(nums)，m = len(queries)。\n\n\ncnt 是一个长度为 n+1 的「差分数组」，用于在 O(1)O(1)O(1) 时间内模拟对任意区间 [a,b][a,b][a,b] 做一次 “所有下标各自减去 c” 的操作。\n\n\n当我们想对 [a,b][a, b][a,b] 区间整体去掉 “最多减 c” 这一额度时，就写\ncnt[a] += ccnt[b+1] -= c\n\n\n然后在遍历到下标 i 时，保留一个滚动变量 s，先做 s += cnt[i]，此时 s 就相当于 “下标 i 处所有已加入（也就是 j 之前的）查询对 i 的累积可用额度之和”。\n\n\n\n\ns： 表示“当前下标 i 被所有已用查询（前 j 条）覆盖时累计能减去的总量”。\n\n\nj：代表「已经把 queries[0], queries[1], …, queries[j-1] 这 j 条查询全部用到差分 cnt 里了」。\n\n\n从 i=0 开始，遍历每个位置 i，保证在走到下标 i 时，s（累积能减的额度）足以满足 nums[i]。如果 s &lt; nums[i]，就再从 queries[j] 开始把第 j 条、第 j+1 条……不断「添加到差分」直到让 s &gt;= nums[i] 或者查询用完为止。一旦 s &lt; nums[i] 并且 j == m（没有更多查询可加），就无法把 nums[i] 扣到 0，直接 return -1。如果所有 i 都能满足过，那么用到的查询数就是 j，返回它。\nclass Solution:    def minZeroArray(self, nums: List[int], queries: List[List[int]]) -&gt; int:        n, m = len(nums), len(queries)        cnt = [0] * (n + 1)   # 差分数组，长度 n+1        s = 0                 # 当前在下标 i 处的“累计已减”总量        j = 0                 # 已经用了多少条查询        for i in range(n):            # 1) 先把差分 cnt[i] 累加到 s，得到“到下标 i 时，所有已用查询对 i 的累积贡献”：            s += cnt[i]            # 2) 如果到目前位置 i，s &lt; nums[i]，说明“还不够把 nums[i] 扣成 0”            #    那就从 queries[j] 开始，依次把第 j 条查询加进来，直到 s &gt;= nums[i] 或 j 用完为止            while j &lt; m and s &lt; nums[i]:                a, b, c = queries[j]                # 把 queries[j] 对区间 [a, b] 的“最多减 c”转化成差分:                cnt[a] += c                cnt[b + 1] -= c                # 如果 i 恰好被 [a,b] 覆盖，那么要立刻把 s += c，因为在下标 i 处，这条查询就生效了                if a &lt;= i &lt;= b:                    s += c                j += 1            # 3) 退出 while 以后，要么 s &gt;= nums[i]，说明“前 j 条查询对 i 的累计贡献至少 nums[i]”，可以把 nums[i] 扣到0；            #    要么 j == m 且 s &lt; nums[i]，说明所有查询都用完了，i 处还是扣不够，直接返回 -1            if s &lt; nums[i]:                return -1        # 4) 如果走到这里，说明对所有 0 ≤ i &lt; n，都有 “前 j 条查询能把 nums[i] 扣成 0”。        #    此时 j 就是最小 k，使得处理前 k 条查询后，nums 全部变成零数组。        return j\n差分数组 cnt + 滚动和 s\n\n当我们刚进入循环、到达 i 时，用 s += cnt[i] 把“这一格的前缀差分”补上。\n这样 s 始终表示“所有已经加进 cnt 的查询，对 i 这个位置在累计能减的总量”——与我们要的 cap[i]\\text{cap}[i]cap[i] 一一对应。\n\nwhile j&lt;m and s&lt;nums[i] 里“如果 a≤i≤b 就 s += c”\n\n这一步很重要：我们先在差分里做了 cnt[a]+=c; cnt[b+1]-=c，这保证了“从下标 a 开始”到“下标 b 结束”每个位置最终前缀和会多 c。\n但是此时指针还在 i 上，如果 a ≤ i ≤ b，说明这个新加的区间 立刻影响 到了位置 i，所以 s 要马上加上那份 c。\n如果 i &lt; a 或者 i &gt; b，新加的区间对 i 还不生效（会在后面 i 推到 a 时再生效，具体表现为执行到 i=a 后的 s += cnt[a] 就扣上去了）。\n\n一旦 s &lt; nums[i] 且 j==m，直接返回 -1\n\n因为此时所有 m 条查询都加入到差分里，可是走到 i 时却依旧 s &lt; nums[i]，说明在 所有查询 覆盖的累积额度下，nums[i] 也凑不成 0，后面没办法了。\n\n最小性保证：贪心不会跳过更优解\n\n你需要最小的 j，使得每个位置的“累积额度”都足够。如果在某个 i 上，s &lt; nums[i]，你就一定要把 queries[j] 拿出来打一把，才能继续往前走——否则你根本没法保证这个 i 处的需求被满足。\n你无法“跳过”某条查询，因为如果你不把它算在内，s 不可能「突然」跳到够用。\n另一方面，一旦满足了 i，你也不会再撤回以前的查询——因为如果你撤回，就可能会让更小的下标变得不满足。但要想让 所有 下标都凑够，只能向右“多用”查询或者“用到恰好满足”为止。\n因此你在 “遇到 i 还不够就把查询往里扔” 这一步上，实际上是严格按下标顺序寻找每个 i 的最早 “凑够它的那条查询编号”。这样遍历完所有 i，得到的 j 恰好就是最大的那一个“把 i 扣成 0 的查询编号”；也就是等同于 max⁡iki\\max_i k_imaxi​ki​。\n\n","categories":["算法"],"tags":["Algorithm","中等","数据结构","前缀和","双指针","二分查找","贪心","线段树"]},{"title":"LeetCode每日一题2025-05-24","url":"/post/find-words-containing-character.html","content":"2942. 查找包含给定字符的单词 E\n给你一个下标从 0 开始的字符串数组 words 和一个字符 x 。\n请你返回一个 下标数组 ，表示下标在数组中对应的单词包含字符 x 。\n注意 ，返回的数组可以是 任意 顺序。\n示例 1：\n\n输入：words = [“leet”,“code”], x = “e”\n输出：[0,1]\n解释：“e” 在两个单词中都出现了：“leet” 和 “code” 。所以我们返回下标 0 和 1 。\n\n示例 2：\n\n输入：words = [“abc”,“bcd”,“aaaa”,“cbc”], x = “a”\n输出：[0,2]\n解释：“a” 在 “abc” 和 “aaaa” 中出现了，所以我们返回下标 0 和 2 。\n\n示例 3：\n\n输入：words = [“abc”,“bcd”,“aaaa”,“cbc”], x = “z”\n输出：[]\n解释：“z” 没有在任何单词中出现。所以我们返回空数组。\n\n提示：\n\n1 &lt;= words.length &lt;= 50\n1 &lt;= words[i].length &lt;= 50\nx 是一个小写英文字母。\nwords[i] 只包含小写英文字母。\n\n问题分析\n遍历 words 数组中的每个单词，检查该单词是否包含指定字符 x。若包含，则将对应的下标加入结果列表。\n算法思路\n由于 words.length ≤ 50 且每个 words[i].length ≤ 50，可直接采用最简单的暴力遍历方法：对每个单词使用 Python 的 in 或者遍历字符来判断是否出现 x。\n时间复杂度\n对于每个单词，检查是否包含字符需要 O(m)O(m)O(m) 时间（mmm 为该单词长度）。总共 nnn 个单词，故整体是 O(n×m)O(n \\times m)O(n×m)，在最坏情况下约为 O(50⋅50)=O(2500)O(50·50)=O(2500)O(50⋅50)=O(2500)\n空间复杂度：输出结果数组至多长度为 nnn，故为 O(n)O(n)O(n)\n代码分解\n\n\n新建一个空列表 res 用于收集所有符合条件的下标。\n\n\n遍历下标 i 从 0 到 len(words)-1：\n\n令 word = words[i]，检查字符 x 是否在 word 中。\n\n在 Python 中可以直接写 if x in word:，其底层实际上是遍历 word 的所有字符进行比较，复杂度为 O(m)。\n\n\n如果包含，则执行 res.append(i)。\n\n\n\n循环结束后，返回 res（由于题目说明“返回的数组可以是 任意 顺序”，不需要对下标排序）。\n\n\n代码实现\nclass Solution:    def findWordsContaining(self, words, x):        &quot;&quot;&quot;        :type words: List[str]        :type x: str        :rtype: List[int]        &quot;&quot;&quot;        res = []        for i, word in enumerate(words):            # 只要在 word 中找到 x，就把索引 i 加入结果            if x in word:                res.append(i)        return res\n","categories":["算法"],"tags":["Algorithm","暴力搜索","字符串处理","简单"]},{"title":"LeetCode每日一题2025-05-25","url":"/post/longest-palindrome-by-concatenating-two-letter-words.html","content":"2131. 连接两字母单词得到的最长回文串 M\n给你一个字符串数组 words 。words 中每个元素都是一个包含 两个 小写英文字母的单词。\n请你从 words 中选择一些元素并按 任意顺序 连接它们，并得到一个 尽可能长的回文串 。每个元素 至多 只能使用一次。\n请你返回你能得到的最长回文串的 长度 。如果没办法得到任何一个回文串，请你返回 0 。\n回文串 指的是从前往后和从后往前读一样的字符串。\n示例 1：\n\n输入：words = [“lc”,“cl”,“gg”]\n输出：6\n解释：一个最长的回文串为 “lc” + “gg” + “cl” = “lcggcl” ，长度为 6 。\n“clgglc” 是另一个可以得到的最长回文串。\n\n示例 2：\n\n输入：words = [“ab”,“ty”,“yt”,“lc”,“cl”,“ab”]\n输出：8\n解释：最长回文串是 “ty” + “lc” + “cl” + “yt” = “tylcclyt” ，长度为 8 。\n“lcyttycl” 是另一个可以得到的最长回文串。\n\n示例 3：\n\n输入：words = [“cc”,“ll”,“xx”]\n输出：2\n解释：最长回文串是 “cc” ，长度为 2 。\n“ll” 是另一个可以得到的最长回文串。“xx” 也是。\n\n提示：\n\n1 &lt;= words.length &lt;= 10⁵\nwords[i].length == 2\nwords[i] 仅包含小写英文字母。\n\n问题分析\n给定一个包含若干长度为 2 的小写字母单词的数组 words。需要从中选取若干个单词，按任意顺序拼接成一个回文串（正读和反读相同），每个单词最多只能使用一次。目标是让拼接得到的回文串长度尽可能长，返回最终回文串的长度。\n\n所有单词长度恒为 2，记为 w1w2w_1w_2w1​w2​。\n回文串可以分成 两种贡献来源：\n\n互为逆序的不同单词成对放在回文串两侧，例如 “ab” 与 “ba” 各贡献 2 个字符放在左侧和右侧，共计 4。\n自身即回文的单词放在中间，例如 “gg”、“aa”，如果两两配对放在两侧，每对依旧贡献 444；如果剩下一个用于回文中心，则贡献 222。\n\n\n要保证每个单词至多使用一次，且对于自身回文的单词只能最多取一个放在“中心位置”。\n\n因此，思路是通过哈希表统计每个单词的出现次数，再针对上述两种情况进行贪心匹配。\n算法思路\n\n\n统计单词频次\n使用 Counter（哈希表）统计数组 words 中每个二字母单词的出现次数，记为 cnt[w]\\text{cnt}[w]cnt[w]。\n\n\n遍历哈希表配对\n对于哈希表中的每个单词 word，令 c=cnt[word]c = \\text{cnt}[ \\text{word} ]c=cnt[word]：\n\n令 rev = word[::-1]，即取单词的逆序。\n情况 A：word == rev（自身回文）\n\n将可以成对放在两侧的数量计算为 ⌊c2⌋\\left\\lfloor \\frac{c}{2} \\right\\rfloor⌊2c​⌋，每对贡献长度 444；更新 cnt[word]−=2×⌊c2⌋\\text{cnt}[word] -= 2 \\times \\left\\lfloor \\frac{c}{2} \\right\\rfloorcnt[word]−=2×⌊2c​⌋。\n若此时 cnt[word] mod 2=1\\text{cnt}[word] \\bmod 2 = 1cnt[word]mod2=1 且尚未使用中心位置（用布尔变量 used_center 标记），则取一个放在回文中心，贡献长度 222，并将 used_center = True，同时 cnt[word]−=1\\text{cnt}[word] -= 1cnt[word]−=1。\n\n\n情况 B：word != rev（与逆序单词匹配）\n\n若逆序单词 rev 也在哈希表中且 cnt[rev]&gt;0\\text{cnt}[rev] &gt; 0cnt[rev]&gt;0，则可取对数 p=min⁡(cnt[word],cnt[rev])p = \\min(\\text{cnt}[word], \\text{cnt}[rev])p=min(cnt[word],cnt[rev])，每对贡献 444，更新 cnt[word]−=p\\text{cnt}[word] -= pcnt[word]−=p、cnt[rev]−=p\\text{cnt}[rev] -= pcnt[rev]−=p。\n\n\n\n\n\n贪心原则\n\n对于互为逆序的不同单词，尽量成对使用，保证两侧对称。\n对于自身回文的单词，先尽可能两两配对放在两侧，再考虑是否把剩余的一个放在中心，以获得最大长度。\n\n\n\n返回结果\n最终累计的 total_length 即为最长回文串的长度。如果无法拼出任何回文，则 total_length 为 0。\n\n\n时间复杂度\n\n统计频次：遍历 words 长度为 nnn 的数组，O(n)O(n)O(n)。\n遍历哈希表：哈希表至多包含 nnn 个不同二字母单词，遍历亦为 O(n)O(n)O(n)。\n对每个单词的倒序操作由于固定长度 2，可视为常数时间 O(1)O(1)O(1)。\n\n综上，整体时间复杂度为\nO(n)+O(n)=O(n).O(n) + O(n) = O(n).\nO(n)+O(n)=O(n).\n代码分解\n将上述思路拆解为以下几个步骤：\n\n\n引入必要模块\nfrom collections import Counterfrom typing import List\n\n\n统计哈希表\ncnt = Counter(words)\n\n\n初始化变量\ntotal_length = 0used_center = False\n\n\n遍历哈希表进行匹配\nfor word, c in cnt.items():    if c == 0:        continue    rev = word[::-1]    if word == rev:        # 处理自身回文        ...    else:        # 处理与逆序单词配对        ...\n\n\n处理自身回文逻辑\n# pairs = c // 2total_length += pairs * 4cnt[word] -= pairs * 2if cnt[word] &gt; 0 and not used_center:    total_length += 2    used_center = True    cnt[word] -= 1\n\n\n处理互为逆序逻辑\nif rev in cnt and cnt[rev] &gt; 0:    pair_count = min(cnt[word], cnt[rev])    total_length += pair_count * 4    cnt[word] -= pair_count    cnt[rev] -= pair_count\n\n\n返回累计长度\nreturn total_length\n\n\n代码实现\nfrom collections import Counterfrom typing import Listclass Solution:    def longestPalindrome(self, words: List[str]) -&gt; int:        # 1. 统计每个单词出现次数        cnt = Counter(words)                total_length = 0       # 最终回文串长度        used_center = False    # 是否已使用过“中心回文单词”                # 2. 遍历哈希表进行配对        for word, c in cnt.items():            if c == 0:                # 如果已经被配对消耗完，直接跳过                continue                        rev = word[::-1]  # 单词逆序                        if word == rev:                # 情况 A：自身就是回文，例如 &quot;gg&quot;                # 先两两配对放在两侧                pairs = c // 2                total_length += pairs * 4   # 每对各占两侧 2 + 2                cnt[word] -= pairs * 2                                # 如果剩下一个且尚未使用中心，则放在中间                if cnt[word] &gt; 0 and not used_center:                    total_length += 2                    used_center = True                    cnt[word] -= 1            else:                # 情况 B：与逆序单词匹配，例如 &quot;ab&quot; 与 &quot;ba&quot;                if rev in cnt and cnt[rev] &gt; 0:                    pair_count = min(cnt[word], cnt[rev])                    total_length += pair_count * 4                    cnt[word] -= pair_count                    cnt[rev] -= pair_count                # 3. 返回最终回文串长度        return total_length","categories":["算法"],"tags":["Algorithm","字符串处理","回文数构造","中等","哈希表","贪心"]},{"title":"LeetCode每日一题2025-05-27","url":"/post/divisible-and-non-divisible-sums-difference.html","content":"2894. 分类求和并作差 E\n给你两个正整数 n 和 m 。\n现定义两个整数 num1 和 num2 ，如下所示：\n\nnum1：范围 [1, n] 内所有 无法被 m 整除 的整数之和。\nnum2：范围 [1, n] 内所有 能够被 m 整除 的整数之和。\n\n返回整数 num1 - num2 。\n示例 1：\n\n输入：n = 10, m = 3\n输出：19\n解释：在这个示例中：\n\n范围 [1, 10] 内无法被 3 整除的整数为 [1,2,4,5,7,8,10] ，num1 = 这些整数之和 = 37 。\n范围 [1, 10] 内能够被 3 整除的整数为 [3,6,9] ，num2 = 这些整数之和 = 18 。\n返回 37 - 18 = 19 作为答案。\n\n\n示例 2：\n\n输入：n = 5, m = 6\n输出：15\n解释：在这个示例中：\n\n范围 [1, 5] 内无法被 6 整除的整数为 [1,2,3,4,5] ，num1 = 这些整数之和 =  15 。\n范围 [1, 5] 内能够被 6 整除的整数为 [] ，num2 = 这些整数之和 = 0 。\n返回 15 - 0 = 15 作为答案。\n\n\n示例 3：\n\n输入：n = 5, m = 1\n输出：-15\n解释：在这个示例中：\n\n范围 [1, 5] 内无法被 1 整除的整数为 [] ，num1 = 这些整数之和 = 0 。\n范围 [1, 5] 内能够被 1 整除的整数为 [1,2,3,4,5] ，num2 = 这些整数之和 = 15 。\n返回 0 - 15 = -15 作为答案。\n\n\n提示：\n\n1 &lt;= n, m &lt;= 1000\n\n问题分析\n给定两个正整数 n 和 m，我们需要计算：\n\nnum2：范围 [1, n] 内所有能够被 m 整除的整数之和；\nnum1：范围 [1, n] 内所有无法被 m 整除的整数之和；\n然后返回 num1 - num2。\n\n暴力枚举思路\n最直观的做法是对 i 从 1 到 n 进行一次循环：\n\n如果 i % m == 0，则累加到 num2；\n否则累加到 num1。\n\n伪代码如下：\nnum1 = 0num2 = 0for i in 1..n:    if i % m == 0:        num2 += i    else:        num1 += ireturn num1 - num2\n\n时间复杂度：O(n)，当 n 最多到 1000 时，这个复杂度在常数范围内并不会超时，但如果 n 很大（比如上万、上百万），则循环效率下降明显。\n空间复杂度：O(1)，只使用了常数个变量。\n\n由于题目给出的约束是 1 &lt;= n, m &lt;= 1000，暴力循环在实际运行中完全够用。\n算法思路\n数学公式优化\n\n\n求 1 到 n 的自然数之和\n公式：\nStotal=1+2+⋯+n=n×(n+1)2.S_{\\text{total}} = 1 + 2 + \\cdots + n = \\frac{n \\times (n + 1)}{2}.\nStotal​=1+2+⋯+n=2n×(n+1)​.\n\n\n求 “能被 m 整除” 的那些数之和（即 num2）\n先求出能被 m 整除的最大倍数：\nk=⌊nm⌋,k = \\left\\lfloor \\frac{n}{m} \\right\\rfloor,\nk=⌊mn​⌋,\n对应的正整数集合为 &#123;m, 2m, 3m, …, k·m&#125;。\n这些数的和为：\nnum2=m+2m+3m+⋯+km=m×(1+2+⋯+k)=m×k×(k+1)2.num2 = m + 2m + 3m + \\cdots + k m = m \\times (1 + 2 + \\cdots + k)      = m \\times \\frac{k \\times (k + 1)}{2}.\nnum2=m+2m+3m+⋯+km=m×(1+2+⋯+k)=m×2k×(k+1)​.\n\n\n求 “无法被 m 整除” 的数之和（即 num1）\n因为 [1..n] 中所有数的和减去能被 m 整除的数之和即为无法被 m 整除数之和：\nnum1=Stotal−num2.num1 = S_{\\text{total}} - num2.\nnum1=Stotal​−num2.\n\n\n最终结果\nresult=num1−num2=(Stotal−num2)−num2=Stotal−2×num2.result = num1 - num2 = \\bigl(S_{\\text{total}} - num2\\bigr) - num2 = S_{\\text{total}} - 2 \\times num2.\nresult=num1−num2=(Stotal​−num2)−num2=Stotal​−2×num2.\n\n\n计算步骤小结\n\n先算出 S_total = n * (n + 1) / 2\n再算出 k = n // m\n接着算出 num2 = m * k * (k + 1) / 2\n最后 return S_total - 2 * num2\n\n\n\n时间复杂度\n\n\n时间复杂度：O(1)O(1)O(1)\n\n\n空间复杂度：O(1)O(1)O(1)\n\n\n代码实现\nclass Solution:    def differenceOfSums(self, n: int, m: int) -&gt; int:        # 1. 计算 1 + 2 + ... + n        total_sum = n * (n + 1) // 2                # 2. 计算 k = floor(n / m)，即能被 m 整除的最大倍数的个数        k = n // m                # 3. 计算 num2 = m * (1 + 2 + ... + k) = m * k * (k + 1) // 2        num2 = m * k * (k + 1) // 2                # 4. 计算并返回 num1 - num2 = (total_sum - num2) - num2 = total_sum - 2 * num2        return total_sum - 2 * num2\n","categories":["算法"],"tags":["Algorithm","简单","前缀和"]},{"title":"LeetCode每日一题2025-05-23","url":"/post/find-the-maximum-sum-of-node-values.html","content":"3068. 最大节点价值之和 H\n给你一棵 n 个节点的 无向 树，节点从 0 到 n - 1 编号。树以长度为 n - 1 下标从 0 开始的二维整数数组 edges 的形式给你，其中 edges[i] = [ui, vi] 表示树中节点 ui 和 vi 之间有一条边。同时给你一个 正 整数 k 和一个长度为 n 下标从 0 开始的 非负 整数数组 nums ，其中 nums[i] 表示节点 i 的 价值 。\nAlice 想 最大化 树中所有节点价值之和。为了实现这一目标，Alice 可以执行以下操作 任意 次（包括 0 次）：\n\n选择连接节点 u 和 v 的边 [u, v] ，并将它们的值更新为：\n\nnums[u] = nums[u] XOR k\nnums[v] = nums[v] XOR k\n\n\n\n请你返回 Alice 通过执行以上操作 任意次 后，可以得到所有节点 价值之和 的 最大值 。\n示例 1：\n\n\n输入：nums = [1,2,1], k = 3, edges = [[0,1],[0,2]]\n输出：6\n解释：Alice 可以通过一次操作得到最大价值和 6 ：\n\n选择边 [0,2] 。nums[0] 和 nums[2] 都变为：1 XOR 3 = 2 ，数组 nums 变为：[1,2,1] -&gt; [2,2,2] 。\n所有节点价值之和为 2 + 2 + 2 = 6 。\n6 是可以得到最大的价值之和。\n\n\n示例 2：\n\n\n输入：nums = [2,3], k = 7, edges = [[0,1]]\n输出：9\n解释：Alice 可以通过一次操作得到最大和 9 ：\n\n选择边 [0,1] 。nums[0] 变为：2 XOR 7 = 5 ，nums[1] 变为：3 XOR 7 = 4 ，数组 nums 变为：[2,3] -&gt; [5,4] 。\n所有节点价值之和为 5 + 4 = 9 。\n9 是可以得到最大的价值之和。\n\n\n示例 3：\n\n\n输入：nums = [7,7,7,7,7,7], k = 3, edges = [[0,1],[0,2],[0,3],[0,4],[0,5]]\n输出：42\n解释：Alice 不需要执行任何操作，就可以得到最大价值之和 42 。\n\n提示：\n\n2 &lt;= n == nums.length &lt;= 2 * 10⁴\n1 &lt;= k &lt;= 10⁹\n0 &lt;= nums[i] &lt;= 10⁹\nedges.length == n - 1\nedges[i].length == 2\n0 &lt;= edges[i][0], edges[i][1] &lt;= n - 1\n输入保证 edges 构成一棵合法的树。\n\n问题分析\n给定一棵大小为 nnn 的无向树，节点编号为 0,1,…,n−10,1,\\dots,n-10,1,…,n−1，以及一个正整数 kkk 和节点价值数组 nums[i]\\text{nums}[i]nums[i]。允许的操作是：任选一条边 [u,v][u,v][u,v]，对其两端的节点同时做一次 XORXORXOR 操作：\nnums[u]←nums[u]⊕k,nums[v]←nums[v]⊕k.\\text{nums}[u] \\leftarrow \\text{nums}[u] \\oplus k,\\quad \\text{nums}[v] \\leftarrow \\text{nums}[v] \\oplus k.\nnums[u]←nums[u]⊕k,nums[v]←nums[v]⊕k.\n可以重复上述操作任意次。目标是最大化所有节点价值之和：\nmax⁡(∑i=0n−1nums[i]).\\max\\Bigl(\\sum_{i=0}^{n-1} \\text{nums}[i]\\Bigr).\nmax(i=0∑n−1​nums[i]).\n由于树上每次操作同时影响两个相邻节点，整个过程等价于对每个节点决定“最终是否被翻转奇数次”。记节点 iii 的最终状态位为 pi∈{0,1}p_i\\in\\{0,1\\}pi​∈{0,1}，若 pi=1p_i=1pi​=1 则节点 iii 的价值由 nums[i]↦nums[i]⊕k\\text{nums}[i]\\mapsto \\text{nums}[i]\\oplus knums[i]↦nums[i]⊕k，否则保持不变。每条被选的边 e=(u,v)e=(u,v)e=(u,v) 会让 pup_upu​ 和 pvp_vpv​ 同时翻转一次，因此如果对边 eee 选择了奇数次，就相当于让 pup_upu​ 与 pvp_vpv​ 最终状态异或一次。\n\n将这些约束在整棵树上传播，实际上对于树结构，可以定义一个根节点（取 000 号），并令每个节点状态由其子树的选择来决定。\n记对于子节点 vvv，若整个以 vvv 为根的子树中翻转为奇数的子边数为奇数，则子树在“奇偶”方面会有影响。需要合并所有子节点对当前节点的贡献。\n\n故而可使用“树形 DP”解决：定义状态\ndp[u][0]=以 u 为根，且 pu=0 时，子树贡献最大值,dp[u][1]=以 u 为根，且 pu=1 时，子树贡献最大值.dp[u][0] = \\text{以 }u\\text{ 为根，且 }p_u = 0\\text{ 时，子树贡献最大值},\\\\\ndp[u][1] = \\text{以 }u\\text{ 为根，且 }p_u = 1\\text{ 时，子树贡献最大值}.\ndp[u][0]=以 u 为根，且 pu​=0 时，子树贡献最大值,dp[u][1]=以 u 为根，且 pu​=1 时，子树贡献最大值.\n在对节点 uuu 做 DFS 递归时，遍历所有子节点 vvv，先计算其 dp[v][0],dp[v][1]dp[v][0],dp[v][1]dp[v][0],dp[v][1]，然后令该子树的基础贡献为\nbase_sum=∑v∈children(u)dp[v][0],\\mathrm{base\\_sum} = \\sum_{v\\in\\mathrm{children}(u)} dp[v][0],\nbase_sum=v∈children(u)∑​dp[v][0],\n并收集每个子节点“若翻转 vvv 的状态，相对于不翻转的增益”\nΔv=dp[v][1]−dp[v][0].\\Delta_v = dp[v][1] - dp[v][0].\nΔv​=dp[v][1]−dp[v][0].\n把所有 Δv\\Delta_vΔv​ 分成正数类和负数类，用 sumPsumPsumP 表示所有 Δv≥0\\Delta_v\\ge 0Δv​≥0 的和，cntPcntPcntP 表示 Δv≥0\\Delta_v\\ge 0Δv​≥0 的数量，min⁡P\\min PminP 表示正类中最小值，max⁡N\\max NmaxN 表示负类中最大值。若选择令 uuu 的子边翻转次数总体保持“偶数”，则贡献为\ncontrib_same=base_sum+sumP.\\mathrm{contrib\\_same} = \\mathrm{base\\_sum} + sumP.\ncontrib_same=base_sum+sumP.\n否则（即翻转奇数次），需要从正类中去掉最小的 min⁡P\\min PminP 或者从负类中加入最大的 max⁡N\\max NmaxN，取更优，即\ncontrib_flip=max⁡( base_sum+(sumP−min⁡P), base_sum+(sumP+max⁡N)).\\mathrm{contrib\\_flip} = \\max\\bigl(\\,\\mathrm{base\\_sum} + (sumP - \\min P),\\ \\mathrm{base\\_sum} + (sumP + \\max N)\\bigr).\ncontrib_flip=max(base_sum+(sumP−minP), base_sum+(sumP+maxN)).\n然后根据 cntP mod 2cntP\\bmod 2cntPmod2 来决定 uuu 的子边翻转后与当前 pup_upu​ 的奇偶如何匹配，依此更新 dp[u][0]dp[u][0]dp[u][0] 与 dp[u][1]dp[u][1]dp[u][1]。最终根节点 000 必须保证其 “父边不选” （即 p0=0p_0=0p0​=0），答案即为 dp[0][0]dp[0][0]dp[0][0]。\n算法思路\n\n\n建图与初始化\n\n用邻接表 ggg 存储树结构。\n创建二维数组 dp[n][2]dp[n][2]dp[n][2]，初始均为 000。\n\n\n\nDFS 递归\n\n对每个节点 uuu，记录其父节点 parentparentparent，避免回溯。\n对所有子节点 v≠parentv \\ne parentv=parent 递归调用 dfs(v, u)，获得 dp[v][0],dp[v][1]dp[v][0],dp[v][1]dp[v][0],dp[v][1]。\n计算子树基础贡献base_sum=∑vdp[v][0].\\text{base\\_sum} = \\sum_{v} dp[v][0].\nbase_sum=v∑​dp[v][0].\n\n列表 deltas 存储 Δv=dp[v][1]−dp[v][0]\\Delta_v = dp[v][1] - dp[v][0]Δv​=dp[v][1]−dp[v][0]。\n按照 Δv\\Delta_vΔv​ 正负分组，计算：sumP = ∑_&#123;Δ_v ≥ 0&#125; Δ_vcntP = |&#123;v | Δ_v ≥ 0&#125;|minP = min&#123;Δ_v | Δ_v ≥ 0&#125;  （若不存在正类则为 +∞）maxN = max&#123;Δ_v | Δ_v &lt; 0&#125;   （若不存在负类则为 −∞）parityP = cntP mod 2\n\n计算两种子边翻转奇偶情况下的贡献：contrib_same = base_sum + sumPcontrib_flip = max(  base_sum + (sumP - minP)    if cntP &gt; 0,  base_sum + (sumP + maxN)    if maxN &gt; −∞)\n\n若 parityP == 0，则子边“偶数”对应 contrib_same，子边“奇数”对应 contrib_flip；否则相反。\n最后考虑 uuu 自身是否翻转：\n\n对于 dp[u][0]dp[u][0]dp[u][0]（pu=0p_u=0pu​=0），若选择子翻转为“偶数”，则价值为 contribsame+nums[u]\\mathrm{contrib_same} + \\mathrm{nums}[u]contribs​ame+nums[u]；\n如果选择为“奇数”，则价值为 contribflip+(nums[u]⊕k)\\mathrm{contrib_flip} + (\\mathrm{nums}[u]\\oplus k)contribf​lip+(nums[u]⊕k)。取两者最大。\n对于 dp[u][1]dp[u][1]dp[u][1]（pu=1p_u=1pu​=1），若子翻转为“偶数”，则价值为 contribsame+(nums[u]⊕k)\\mathrm{contrib_same} + (\\mathrm{nums}[u]\\oplus k)contribs​ame+(nums[u]⊕k)；\n如果为“奇数”，则为 contribflip+nums[u]\\mathrm{contrib_flip} + \\mathrm{nums}[u]contribf​lip+nums[u]。同样取最大。\n\n\n\n\n\n返回结果\n\n在根节点 000 上调用 dfs(0,−1)，最终 dp[0][0]dp[0][0]dp[0][0] 即为整棵树在允许任意操作后能够获得的最大节点价值之和。\n\n\n\n时间复杂度\n\n构建邻接表花费 O(n)O(n)O(n)。\nDFS 过程对每个节点只访问一次，且对每个节点需要遍历其所有邻居并做常数时间的计算。合并子节点差值时，只做 O(deg⁡(u))O(\\deg(u))O(deg(u)) 次更新。\n整体每条边被访问两次，总共 O(n)O(n)O(n)。\n因此总时间复杂度为 O(n)\\displaystyle O(n)O(n)，空间复杂度为 O(n)O(n)O(n)。\n\n代码分解\n\n图的表示与初始化n = len(nums)g = [[] for _ in range(n)]for u, v in edges:    g[u].append(v)    g[v].append(u)dp = [[0, 0] for _ in range(n)]\n\nDFS 主逻辑函数def dfs(u, parent):    base_sum = 0    deltas = []    for v in g[u]:        if v == parent: continue        dfs(v, u)        base_sum += dp[v][0]        deltas.append(dp[v][1] - dp[v][0])    if not deltas:        dp[u][0] = nums[u]        dp[u][1] = nums[u] ^ k        return    sumP, cntP = 0, 0    minP, maxN = float(&#x27;inf&#x27;), -float(&#x27;inf&#x27;)    for d in deltas:        if d &gt;= 0:            sumP += d            cntP += 1            minP = min(minP, d)        else:            maxN = max(maxN, d)    parityP = cntP % 2    contrib_same = base_sum + sumP    contrib_flip = -float(&#x27;inf&#x27;)    if cntP &gt; 0:        contrib_flip = max(contrib_flip, base_sum + (sumP - minP))    if maxN &gt; -float(&#x27;inf&#x27;):        contrib_flip = max(contrib_flip, base_sum + (sumP + maxN))    if parityP == 0:        child_parity0 = contrib_same        child_parity1 = contrib_flip    else:        child_parity1 = contrib_same        child_parity0 = contrib_flip    cand0_even = child_parity0 + nums[u]    cand0_odd = child_parity1 + (nums[u] ^ k) if child_parity1 &gt; -float(&#x27;inf&#x27;) else -float(&#x27;inf&#x27;)    dp[u][0] = max(cand0_even, cand0_odd)    cand1_even = child_parity0 + (nums[u] ^ k)    cand1_odd = child_parity1 + nums[u] if child_parity1 &gt; -float(&#x27;inf&#x27;) else -float(&#x27;inf&#x27;)    dp[u][1] = max(cand1_even, cand1_odd)\n\n调用与返回dfs(0, -1)return dp[0][0]\n\n\n代码实现\nfrom collections import defaultdictimport syssys.setrecursionlimit(10**7)class Solution:    def maximumValueSum(self, nums, k, edges):        n = len(nums)        # 构建邻接表（无向树）        g = [[] for _ in range(n)]        for u, v in edges:            g[u].append(v)            g[v].append(u)        # dp[u][0]：以 u 为根的子树，且 “u 与父节点的边不被选” 时的最大贡献        # dp[u][1]：以 u 为根的子树，且 “u 与父节点的边被选” 时的最大贡献        dp = [[0, 0] for _ in range(n)]        def dfs(u, parent):            # 1. 先对所有子节点递归            base_sum = 0   # 如果对 u 的所有子边都不选，子树的基础贡献 = sum(dp[v][0])            deltas = []    # 每个 v 对应的增量 Δ = dp[v][1] - dp[v][0]            for v in g[u]:                if v == parent:                    continue                dfs(v, u)                base_sum += dp[v][0]                deltas.append(dp[v][1] - dp[v][0])            # 2. 如果没有子节点，直接赋值            if not deltas:                dp[u][0] = nums[u]         # p_u = 0 时：u 取 nums[u]                dp[u][1] = nums[u] ^ k     # p_u = 1 时：u 取 nums[u] ^ k                return            # 3. 划分 deltas 为正类/负类，同时统计 sumP, cntP, minP, maxN            sumP = 0             # 所有 Δ &gt;= 0 的和            cntP = 0             # Δ &gt;= 0 的个数            minP = float(&#x27;inf&#x27;)  # 正类中最小的 Δ            maxN = -float(&#x27;inf&#x27;) # 负类中最大的 Δ            for d in deltas:                if d &gt;= 0:                    sumP += d                    cntP += 1                    minP = min(minP, d)                else:                    maxN = max(maxN, d)            parityP = cntP % 2            # 当我们“保留所有正类”（不翻转奇偶）时的子树贡献：            contrib_same = base_sum + sumP            # 当我们想把“选中正类的个数”在原来奇偶上翻转一次时的子树贡献：            #   A. 如果 cntP &gt; 0，则可以从正类中去掉一个 minP =&gt; 贡献 = base_sum + (sumP - minP)            #   B. 如果 maxN &gt; -inf，则可以额外加一个 maxN =&gt; 贡献 = base_sum + (sumP + maxN)            contrib_flip = -float(&#x27;inf&#x27;)            if cntP &gt; 0:                contrib_flip = max(contrib_flip, base_sum + (sumP - minP))            if maxN &gt; -float(&#x27;inf&#x27;):                contrib_flip = max(contrib_flip, base_sum + (sumP + maxN))            # 根据 cntP % 2，决定“子边被选的个数 mod 2 = 0”或“= 1”时的子树贡献            if parityP == 0:                # 当我们保留所有正类时，选中正类的个数 = cntP 为偶                child_contrib_parity0 = contrib_same                child_contrib_parity1 = contrib_flip            else:                # 当我们保留所有正类时，选中正类的个数 = cntP 为奇                child_contrib_parity1 = contrib_same                child_contrib_parity0 = contrib_flip            # 4. 根据 p_u = 0 / 1，两种情况分别计算 dp[u][0]、dp[u][1]            # ——————————————            # 情况一：p_u = 0（u 与父边不选）            #   如果子边选中个数 mod2 = 0: x_u = 0 =&gt; u 取 nums[u]            cand0_even = child_contrib_parity0 + nums[u]            #   如果子边选中个数 mod2 = 1: x_u = 1 =&gt; u 取 nums[u] ^ k            if child_contrib_parity1 &gt; -float(&#x27;inf&#x27;):                cand0_odd = child_contrib_parity1 + (nums[u] ^ k)            else:                cand0_odd = -float(&#x27;inf&#x27;)            dp[u][0] = max(cand0_even, cand0_odd)            # 情况二：p_u = 1（u 与父边选了）            #   如果子边选中个数 mod2 = 0: x_u = 1 =&gt; u 取 nums[u] ^ k            cand1_even = child_contrib_parity0 + (nums[u] ^ k)            #   如果子边选中个数 mod2 = 1: x_u = 0 =&gt; u 取 nums[u]            if child_contrib_parity1 &gt; -float(&#x27;inf&#x27;):                cand1_odd = child_contrib_parity1 + nums[u]            else:                cand1_odd = -float(&#x27;inf&#x27;)            dp[u][1] = max(cand1_even, cand1_odd)        # 从根节点 0 开始 DFS        dfs(0, -1)        # 根节点没有父边，p_0 = 0        return dp[0][0]\n问题分析2\n在任意次操作条件下，每条边选一次将使其端点同时做一次 XOR kXOR\\,kXORk。若我们将“最终节点 iii 被 XOR kXOR\\,kXORk 的次数模 2”记为状态 pi∈{0,1}p_i\\in\\{0,1\\}pi​∈{0,1}，则每次对边 (u,v)(u,v)(u,v) 的选择相当于对 (pu,pv)(p_u,p_v)(pu​,pv​) 做一次异或操作。由于树的边集形成的线性系统有唯一约束：\n∑i=0n−1pi≡0(mod2),\\sum_{i=0}^{n-1} p_i \\equiv 0 \\pmod 2,\ni=0∑n−1​pi​≡0(mod2),\n即最终被翻转奇数次的节点数必须为偶数（因为每条被选的边为两个端点各贡献一次翻转，总的翻转次数为偶数）。这样，问题就简化为：\n\n在满足翻转节点数为偶数的约束下，决定哪些节点 iii 最终翻转，使得总价值\n∑i=0n−1(nums[i]+pi⋅[(nums[i]⊕k)−nums[i]])\\sum_{i=0}^{n-1} \\bigl(\\text{nums}[i] + p_i \\cdot [(\\text{nums}[i]\\oplus k) - \\text{nums}[i]]\\bigr)\ni=0∑n−1​(nums[i]+pi​⋅[(nums[i]⊕k)−nums[i]])\n最大。\n\n令每个节点 iii 的差值为\nΔi  =  (nums[i]⊕k)  −  nums[i].\\Delta_i \\;=\\; (\\text{nums}[i]\\oplus k)\\;-\\;\\text{nums}[i].\nΔi​=(nums[i]⊕k)−nums[i].\n若我们忽略约束，则只需对所有 Δi&gt;0\\Delta_i &gt; 0Δi​&gt;0 的节点都设 pi=1p_i=1pi​=1；但由于必须保证 ∑ipi\\sum_i p_i∑i​pi​ 为偶数，如果正差选取的数量为奇数，则需要“舍弃一个正差中最小的”或“额外加入一个负差中最大的”来翻转奇偶，取其中损失最小的一种。\n因此，该方法不需要显式地做树形 DP，而是把所有节点看作“独立贡献”，只需一次扫描即可求得最优解。\n算法思路2\n\n\n计算差值数组\n对每个节点 iii，计算\nΔi=(nums[i]⊕k)−nums[i].\\Delta_i = (\\text{nums}[i]\\oplus k) - \\text{nums}[i].\nΔi​=(nums[i]⊕k)−nums[i].\n\n\n求基础贡献\n若不做任何操作，则所有节点价值之和为\nbase_sum  =  ∑i=0n−1nums[i].\\mathrm{base\\_sum} \\;=\\; \\sum_{i=0}^{n-1} \\text{nums}[i].\nbase_sum=i=0∑n−1​nums[i].\n\n\n统计正负差值\n遍历所有 Δi\\Delta_iΔi​：\n\n若 Δi≥0\\Delta_i \\ge 0Δi​≥0，累加到 sumPsumPsumP，并让 cntPcntPcntP 自增；同时更新正类最小值 minPminPminP。\n否则（Δi&lt;0\\Delta_i &lt; 0Δi​&lt;0），更新负类最大值 maxNmaxNmaxN。\n\n\n\n计算不翻转奇偶（偶数个正差）时的总贡献\ncontrib_same=base_sum+sumP.\\mathrm{contrib\\_same} = \\mathrm{base\\_sum} + sumP.\ncontrib_same=base_sum+sumP.\n若此时 cntPcntPcntP 已经是偶数，则该值即为最优。\n\n\n若 cntPcntPcntP 为奇数，需要翻转一次正负奇偶\n需要从“所有 Δi≥0\\Delta_i\\ge0Δi​≥0 的集合”中去掉一个最小的，也就是\ndrop_minP=base_sum+(sumP−minP).\\mathrm{drop\\_minP} = \\mathrm{base\\_sum} + (sumP - minP).\ndrop_minP=base_sum+(sumP−minP).\n或者向“Δi&lt;0\\Delta_i&lt;0Δi​&lt;0”的集合中再添入一个最大的负值，即\nadd_maxN=base_sum+(sumP+maxN).\\mathrm{add\\_maxN} = \\mathrm{base\\_sum} + (sumP + maxN).\nadd_maxN=base_sum+(sumP+maxN).\n令最终最优为\nmax⁡(drop_minP, add_maxN).\\max\\bigl(\\mathrm{drop\\_minP},\\ \\mathrm{add\\_maxN}\\bigr).\nmax(drop_minP, add_maxN).\n\n\n返回结果\n返回上述最优值即可。\n\n\n时间复杂度2\n\n计算 Δi\\Delta_iΔi​ 数组需 O(n)O(n)O(n)。\n统计正负、更新 sumPsumPsumP, cntPcntPcntP, minPminPminP, maxNmaxNmaxN 也需一次 O(n)O(n)O(n) 扫描。\n整体时间复杂度为 O(n)\\displaystyle O(n)O(n)，空间复杂度为 O(n)O(n)O(n)（用于存储 Δ\\DeltaΔ 数组）。\n\n代码分解2\n\n\n计算 Δi\\Delta_iΔi​\ndeltas = [(num ^ k) - num for num in nums]\n\n\n计算基础和\nbase_sum = sum(nums)\n\n\n统计正负并维护最小正、最大负\nsumP, cntP = 0, 0minP = float(&#x27;inf&#x27;)maxN = -float(&#x27;inf&#x27;)for delta in deltas:    if delta &gt;= 0:        sumP += delta        cntP += 1        minP = min(minP, delta)    else:        maxN = max(maxN, delta)\n\n\n计算 “不翻转奇偶” 时的贡献\ncontrib_same = base_sum + sumPdp_root0 = contrib_same\n\n\n若 cntPcntPcntP 为奇数则做调整\nif cntP % 2 == 1:    drop_minP = base_sum + (sumP - minP) if cntP &gt; 0 else -float(&#x27;inf&#x27;)    add_maxN = base_sum + (sumP + maxN) if maxN &gt; -float(&#x27;inf&#x27;) else -float(&#x27;inf&#x27;)    dp_root0 = max(drop_minP, add_maxN)\n\n\n返回答案\nreturn dp_root0\n\n\n代码实现2\nfrom heapq import heappush, heappopclass Solution:    def maximumValueSum(self, nums, k, edges):        # —— 1. 计算每个节点 i 的 Δ_i = (nums[i] ^ k) - nums[i]        # 在树形 DP 里，我们把这叫做 deltas，当作 dp[v][1] - dp[v][0] 的简化版        deltas = [(num ^ k) - num for num in nums]        # —— 2. base_sum 对应“如果所有节点都不做任何 XOR k，那么基础贡献就是 sum(nums)”        base_sum = sum(nums)        # 接下来，用 sumP、cntP、minP、maxN 来合并所有 deltas        sumP = 0               # 树形 DP 里记录“所有 Δ &gt;= 0 的累加”        cntP = 0               # 记录“Δ &gt;= 0 的个数”        minP = float(&#x27;inf&#x27;)    # 记录“Δ &gt;= 0 中的最小值”（如果没正数，则保持 +inf）        maxN = -float(&#x27;inf&#x27;)   # 记录“Δ &lt; 0 中的最大值”（如果没负数，则保持 -inf）        for delta in deltas:            if delta &gt;= 0:                sumP += delta                cntP += 1                if delta &lt; minP:                    minP = delta            else:                if delta &gt; maxN:                    maxN = delta        # —— 3. contrib_same 表示“不翻转正负奇偶”时的子（全）树贡献：        #     在树形 DP 里，就是 base_sum + sumP        contrib_same = base_sum + sumP        # 把它先赋给 dp_root0（对应根节点 p_0 = 0 时，且子边选数 mod2 与 cntP 原本同偶的情况）        dp_root0 = contrib_same        # —— 4. 如果 cntP 是奇数，就要“翻转一次正负奇偶”：        # 两个选项：删一个最小正(minP) 或 加一个最大负(maxN)        if cntP % 2 == 1:            # 方案 A：如果有正类，就删除 minP            if cntP &gt; 0:                drop_minP_contrib = base_sum + (sumP - minP)            else:                drop_minP_contrib = -float(&#x27;inf&#x27;)            # 方案 B：如果有负类，就加上 maxN            if maxN &gt; -float(&#x27;inf&#x27;):                add_maxN_contrib = base_sum + (sumP + maxN)            else:                add_maxN_contrib = -float(&#x27;inf&#x27;)            # 在树形 DP 里，这两者对应“sumOdd”的两种计算方式，取更大            dp_root0 = max(drop_minP_contrib, add_maxN_contrib)        # —— 5. 返回最终结果 dp_root0（相当于整棵树的 dp[0][0]）        return dp_root0\n\n\n\n维度\n方法一：树形 DP\n方法二：全局贪心（基于差值）\n\n\n\n\n核心思想\n在树上做自底向上的 DP，维护每个节点翻转与不翻转两种状态的最优值，合并子节点差值时需考虑“奇偶翻转”\n将所有节点视作“独立差值”，只需统计正差与负差的数量与极值，利用全局奇偶约束直接求解\n\n\n约束来源\n边选择会影响其相邻节点状态，需要在 DFS 中显式处理子树合并的“奇偶”关系\n只需注意“被翻转节点数量必须为偶数”──一条全局约束，省去了树形结构的复杂递归\n\n\n实现难度\n需要写递归、合并子节点增益、维护正负差值的最小/最大值、考虑多种奇偶分支\n只要一次扫描，代码简洁；无需建图或做 DFS\n\n\n时间复杂度\nO(n)O(n)O(n)\nO(n)O(n)O(n)\n\n\n空间复杂度\nO(n)O(n)O(n) （邻接表 + DP 数组）\nO(n)O(n)O(n) （差值数组 + 常数额外变量）\n\n\n典型场景\n当关注对每条边操作的奇偶传递，并扩展到“若树结构更复杂”时可推广\n若只需考虑“翻转约束 ∑pi≡0(mod2)\\sum p_i \\equiv 0 \\pmod{2}∑pi​≡0(mod2) ”，且树是连通无环结构时最优\n\n\n优势\n能处理更一般的“子树方向性”DP，逻辑清晰；适合需要扩展到变体约束的情况\n直接高效；只用一次扫描即可；易于理解与实现\n\n\n劣势\n代码复杂度高，容易出错；需要显式管理多种子情况与奇偶分支\n只对“树”且仅含全局奇偶约束的特例适用；若约束更复杂则失效\n\n\n\n","categories":["算法"],"tags":["Algorithm","困难","贪心","动态规划","图算法","状态建模"]},{"title":"LeetCode每日一题2025-05-28","url":"/post/maximize-the-number-of-target-nodes-after-connecting-trees-i.html","content":"3372. 连接两棵树后最大目标节点数目 I M\n有两棵 无向 树，分别有 n 和 m 个树节点。两棵树中的节点编号分别为[0, n - 1] 和 [0, m - 1] 中的整数。\n给你两个二维整数 edges1 和 edges2 ，长度分别为 n - 1 和 m - 1 ，其中 edges1[i] = [aᵢ, bᵢ] 表示第一棵树中节点 ai 和 bi 之间有一条边，edges2[i] = [uᵢ, vᵢ] 表示第二棵树中节点 uᵢ 和 vᵢ 之间有一条边。同时给你一个整数 k 。\n如果节点 u 和节点 v 之间路径的边数小于等于 k ，那么我们称节点 u 是节点 v 的 目标节点 。注意 ，一个节点一定是它自己的 目标节点 。\n请你返回一个长度为 n 的整数数组 answer ，answer[i] 表示将第一棵树中的一个节点与第二棵树中的一个节点连接一条边后，第一棵树中节点 i 的 目标节点 数目的 最大值 。\n注意 ，每个查询相互独立。意味着进行下一次查询之前，你需要先把刚添加的边给删掉。\n示例 1：\n\n输入： edges1 = [[0,1],[0,2],[2,3],[2,4]], edges2 = [[0,1],[0,2],[0,3],[2,7],[1,4],[4,5],[4,6]], k = 2\n输出： [9,7,9,8,8]\n解释：\n\n对于 i = 0 ，连接第一棵树中的节点 0 和第二棵树中的节点 0 。\n对于 i = 1 ，连接第一棵树中的节点 1 和第二棵树中的节点 0 。\n对于 i = 2 ，连接第一棵树中的节点 2 和第二棵树中的节点 4 。\n对于 i = 3 ，连接第一棵树中的节点 3 和第二棵树中的节点 4 。\n对于 i = 4 ，连接第一棵树中的节点 4 和第二棵树中的节点 4 。\n\n\n\n示例 2：\n\n输入： edges1 = [[0,1],[0,2],[0,3],[0,4]], edges2 = [[0,1],[1,2],[2,3]], k = 1\n输出： [6,3,3,3,3]\n解释：\n对于每个 i ，连接第一棵树中的节点 i 和第二棵树中的任意一个节点。\n\n\n提示：\n\n2 &lt;= n, m &lt;= 1000\nedges1.length == n - 1\nedges2.length == m - 1\nedges1[i].length == edges2[i].length == 2\nedges1[i] = [aᵢ, bᵢ]\n0 &lt;= aᵢ, bᵢ &lt; n\nedges2[i] = [uᵢ, vᵢ]\n0 &lt;= uᵢ, vᵢ &lt; m\n输入保证 edges1 和 edges2 都表示合法的树。\n0 &lt;= k &lt;= 1000\n\n问题分析\n\n给定两棵无向树：\n\n第一棵树有 nnn 个节点，编号 [0,n−1][0, n-1][0,n−1]，由 edges1 长度为 n−1n-1n−1 的边列表表示；\n第二棵树有 mmm 个节点，编号 [0,m−1][0, m-1][0,m−1]，由 edges2 长度为 m−1m-1m−1 的边列表表示。\n\n\n定义：对于两棵树中任何两个节点 uuu 和 vvv，如果它们之间的路径边数 dist(u,v)≤k\\mathrm{dist}(u,v) \\le kdist(u,v)≤k，则称 uuu 是 vvv 的“目标节点”。\n额外操作：对第一棵树中的某个节点 iii ，与第二棵树中的某个节点 jjj 连一条新边（长度记为 1）。然后整个图就是两棵树通过这条新边连接成一个整体。\n需要求：对于第一棵树中每个 iii ，尝试将 iii 与第二棵树中某个 jjj 连边后，统计“目标节点”的总个数，取最大值。输出长度为 nnn 的数组 answer，其中 answer[i] 为节点 iii 能获得的最大“目标节点”数量。\n注意：每次查询相互独立，添加完这条边后要把它删掉再进行下一次查询。\n\n\n\n“目标节点”计数可以分为两部分：\n\n第一棵树内的“目标节点”：只考虑第一棵树原有的结构，不受连接第二棵树的影响。\n跨树到第二棵树的“目标节点”：路径必须经过新边，即先从 iii 到 iii（零步），走新边到 jjj（1 步），再在第二棵树中走若干步到 vvv；总步数 ≤k\\le k≤k 等价于 第二棵树中 dist2(j,v)≤k−1\\mathrm{dist}_2(j,v) \\le k-1dist2​(j,v)≤k−1。\n\n\n\n因此，对每个 iii：\n\n第一部分：统计在第一棵树里，以 iii 为起点，所有 dist1(i,u)≤k\\mathrm{dist}_1(i,u)\\le kdist1​(i,u)≤k 的节点个数，记为 C1[i]C_1[i]C1​[i]。\n第二部分：选一个在第二棵树的连接点 jjj ，使得以 jjj 为起点，在第二棵树内 dist2(j,v)≤k−1\\mathrm{dist}_2(j,v)\\le k-1dist2​(j,v)≤k−1 的节点数最多。记第二棵树上每个节点到半径 (k−1)(k-1)(k−1) 内的可达节点数量为 C2[j]C_2[j]C2​[j]，只需取 max⁡jC2[j]\\max_j C_2[j]maxj​C2​[j]。\n故 answer[i]=C1[i]+max⁡jC2[j]\\displaystyle answer[i] = C_1[i] + \\max_{j} C_2[j]answer[i]=C1​[i]+jmax​C2​[j]。\n\n\n\n算法思路\n\n推断节点个数\n\n第一棵树节点数 n=len(edges1)+1n = \\text{len(edges1)} + 1n=len(edges1)+1；\n第二棵树节点数 m=len(edges2)+1m = \\text{len(edges2)} + 1m=len(edges2)+1。\n\n\n构造邻接表\n\n用 g1 表示第一棵树的邻接表，大小为 nnn；\n用 g2 表示第二棵树的邻接表，大小为 mmm。\n\n\nBFS 统计“半径内可达”节点数\n定义函数 bfs_count(adj, radius)：\n\n输入：邻接表 adj（节点数为 NNN），半径 radius；\n对每个节点 iii 从 iii 出发做一次 BFS，维护一个长度为 NNN 的距离数组 dist，初始 dist[i]=0 其余 -1；\n当从队列中弹出节点 uuu 时，如果 dist[u] &gt; radius 就跳过不扩展；否则把 uuu 计入计数器，再将所有未访问邻居 www （dist[w]==-1）标记 dist[w]=dist[u]+1 并入队；\n最终统计以 iii 为起点满足距离 ≤\\le≤ radius 的节点总数，存入数组 counts[i]；\n返回长度为 NNN 的列表 counts。\n\n\n计算两棵树的 C1,C2C_1,C_2C1​,C2​\n\n对第一棵树调用 bfs_count(g1, k)，得到 C1[i]=∣{u:dist1(i,u)≤k}∣C_1[i] = |\\{u: \\mathrm{dist}_1(i,u)\\le k\\}|C1​[i]=∣{u:dist1​(i,u)≤k}∣；\n对第二棵树调用 bfs_count(g2, k-1)，得到 C2[j]=∣{v:dist2(j,v)≤k−1}∣C_2[j] = |\\{v: \\mathrm{dist}_2(j,v)\\le k-1\\}|C2​[j]=∣{v:dist2​(j,v)≤k−1}∣。\n\n特殊情况：当 k=0k=0k=0 时，radius = k-1 = -1。在实现里，只有 dist[j]=0 时才满足 dist[j] \\le -1 不成立，因此只能把 $j` 自己计入一次，符合“节点一定算自己一个目标节点”的要求。\n\n\n\n\n组合答案\n\n先求 max_C2 = max(C2)；\n然后对每个 iii，answer[i] = C1[i] + max_C2。\n\n\n\n时间复杂度\n\n记第一棵树节点数为 nnn，第二棵树节点数为 mmm。\nbfs_count(g1, k) 需要对 nnn 个节点分别做一次 BFS，每次遍历整棵树 O(n)O(n)O(n)，共 O(n2)O(n^2)O(n2)。\nbfs_count(g2, k-1) 共 O(m2)O(m^2)O(m2)。\n计算最大值及拼答案线性扫描均为 O(n+m)O(n + m)O(n+m)。\n因此总时间复杂度为  O(n2+m2)O(n^2 + m^2)O(n2+m2)。\n在题目约束 n,m≤1000n,m \\le 1000n,m≤1000 下，n2+m2≤2×106n^2+m^2 \\le 2\\times10^6n2+m2≤2×106，可以在常规硬件环境下接受。\n\n代码分解\n\n\n类与方法签名\nclass Solution:    def maxTargetNodes(self, edges1: List[List[int]], edges2: List[List[int]], k: int) -&gt; List[int]:\n\n直接接收 edges1, edges2, k，内部推断 n,mn,mn,m。\n\n\n\n推断节点数与构造邻接表\nn = len(edges1) + 1m = len(edges2) + 1g1 = [[] for _ in range(n)]for u,v in edges1:    g1[u].append(v)    g1[v].append(u)g2 = [[] for _ in range(m)]for u,v in edges2:    g2[u].append(v)    g2[v].append(u)\n\n\nBFS 统计函数 bfs_count\ndef bfs_count(adj: List[List[int]], radius: int) -&gt; List[int]:    sz = len(adj)    counts = [0] * sz    from collections import deque    for i in range(sz):        dist = [-1] * sz        dist[i] = 0        dq = deque([i])        cnt = 0        while dq:            u = dq.popleft()            if dist[u] &gt; radius:                continue            cnt += 1            for w in adj[u]:                if dist[w] == -1:                    dist[w] = dist[u] + 1                    dq.append(w)        counts[i] = cnt    return counts\n\n对每个 i 初始化距离数组 dist，执行典型的 BFS。\n如果 dist[u] &gt; radius 就不再向下扩散。\n统计所有满足 dist[u] &lt;= radius 的节点总数。\n\n\n\n计算 C1,C2C_1, C_2C1​,C2​ 并组合\nC1 = bfs_count(g1, k)C2 = bfs_count(g2, k-1)max_C2 = max(C2) if C2 else 0answer = [C1_i + max_C2 for C1_i in C1]return answer\n\n第一棵树用半径 kkk，第二棵树用半径 k−1k-1k−1。\n取第二个列表的最大值加到 C1[i]C_1[i]C1​[i] 上。\n\n\n\n代码实现\nfrom collections import dequefrom typing import Listclass Solution:    def maxTargetNodes(self, edges1: List[List[int]], edges2: List[List[int]], k: int) -&gt; List[int]:        # 1. 推断两棵树的节点数        n = len(edges1) + 1        m = len(edges2) + 1                # 2. 构建邻接表        g1 = [[] for _ in range(n)]        for u, v in edges1:            g1[u].append(v)            g1[v].append(u)                g2 = [[] for _ in range(m)]        for u, v in edges2:            g2[u].append(v)            g2[v].append(u)                # 3. 定义 BFS 统计半径内可达节点数的函数        def bfs_count(adj: List[List[int]], radius: int) -&gt; List[int]:            &quot;&quot;&quot;            对邻接表 adj 上每个节点做一次 BFS，统计到距离 &lt;= radius 的节点数目            返回列表 counts，counts[i] 表示以 i 为起点时距离 &lt;= radius 的节点总数            &quot;&quot;&quot;            sz = len(adj)            counts = [0] * sz            for i in range(sz):                dist = [-1] * sz                dist[i] = 0                dq = deque([i])                cnt = 0                while dq:                    u = dq.popleft()                    # 如果当前距离已经超过 radius，则跳过扩展                    if dist[u] &gt; radius:                        continue                    # 计数当前节点                    cnt += 1                    for w in adj[u]:                        if dist[w] == -1:                            dist[w] = dist[u] + 1                            dq.append(w)                counts[i] = cnt            return counts                # 4. 分别计算两棵树上每个节点在对应半径内的可达节点数        C1 = bfs_count(g1, k)      # 第一棵树用半径 k        C2 = bfs_count(g2, k - 1)  # 第二棵树用半径 k-1（k=0 时恰好只能自己）                # 5. 取第二棵树的最大贡献        max_C2 = max(C2) if C2 else 0                # 6. 组合答案：answer[i] = C1[i] + max_C2        answer = [c1 + max_C2 for c1 in C1]        return answer\n","categories":["算法"],"tags":["Algorithm","中等","数据结构","图算法","BFS"]},{"title":"LeetCode每日一题2025-05-22","url":"/post/zero-array-transformation-iii.html","content":"3362. 零数组变换 III M\n给你一个长度为 n 的整数数组 nums 和一个二维数组 queries ，其中 queries[i] = [lᵢ, rᵢ] 。\n每一个 queries[i] 表示对于 nums 的以下操作：\n\n将 nums 中下标在范围 [lᵢ, rᵢ] 之间的每一个元素 最多 减少 1 。\n坐标范围内每一个元素减少的值相互 独立 。\n\n零数组 指的是一个数组里所有元素都等于 0 。\n请你返回 最多 可以从 queries 中删除多少个元素，使得 queries 中剩下的元素仍然能将 nums 变为一个 零数组 。如果无法将 nums 变为一个 零数组 ，返回 -1 。\n示例 1：\n\n输入： nums = [2,0,2], queries = [[0,2],[0,2],[1,1]]\n输出： 1\n解释：\n删除 queries[2] 后，nums 仍然可以变为零数组。\n\n对于 queries[0] ，将 nums[0] 和 nums[2] 减少 1 ，将 nums[1] 减少 0 。\n对于 queries[1] ，将 nums[0] 和 nums[2] 减少 1 ，将 nums[1] 减少 0 。\n\n\n示例 2：\n\n输入： nums = [1,1,1,1], queries = [[1,3],[0,2],[1,3],[1,2]]\n输出： 2\n解释：\n可以删除 queries[2] 和 queries[3] 。\n\n示例 3：\n\n输入： nums = [1,2,3,4], queries = [[0,3]]\n输出： -1\n解释：\nnums 无法通过 queries 变成零数组。\n\n提示：\n\n1 &lt;= nums.length &lt;= 10⁵\n0 &lt;= nums[i] &lt;= 10⁵\n1 &lt;= queries.length &lt;= 10⁵\nqueries[i].length == 2\n0 &lt;= lᵢ &lt;= rᵢ &lt; nums.length\n\n问题分析\n给定一个长度为 nnn 的整数数组 nums 和一个包含 mmm 个查询的二维数组 queries，其中 queries[i] = [l_i, r_i] 表示对于 nums 执行一次操作：将下标在范围 [li,ri][l_i, r_i][li​,ri​] 之间的每个元素最多减少 111（各位置减少值相互独立）。目标是从原来的 mmm 个查询中删除尽可能多的查询，使得剩余查询仍能将 nums 变成全 0 的“零数组”。如果无论如何也不能变成零数组，则返回 −1-1−1。\n关键在于，“每次操作对区间内元素各自减少最多 1” 意味着，若某位置 iii 在剩余操作中被覆盖了 kik_iki​ 次，则该位置至多减少 kik_iki​，要达到最终 nums[i] = 0，就需要\nki  ≥  nums[i] ,∀ 0≤i&lt;n.k_i \\;\\ge\\; \\text{nums}[i]\\,,\\quad \\forall\\,0 \\le i &lt; n.\nki​≥nums[i],∀0≤i&lt;n.\n此处每个查询只有两种选择：保留或删除。若保留，就会对它覆盖区间内的各个位置“增加 111”的覆盖次数；若删除，就相当于完全忽略它对覆盖次数的贡献。我们需要在确保对每个 iii，剩余查询的覆盖次数 ∑1{i∈[lj,rj]}\\sum 1\\{i \\in [l_j, r_j]\\}∑1{i∈[lj​,rj​]} 至少等于 nums[i]\\text{nums}[i]nums[i] 的前提下，尽量 删除 也就是丢弃尽量多的区间。\n换言之，若最少要保留 KKK 条区间才能覆盖所有位置的需求，那么最多能删除 m−Km-Km−K 条。若任何选择都无法满足某位置覆盖次数需求，则返回 −1-1−1。\n算法思路\n本文展示两种思路的实现代码，逻辑不同，但都遵循“贪心地选最需要的区间以满足每个位置的覆盖需求”这一核心原则。\n方法一：按左端点分桶 + 差分数组 + 贪心选右端最大的可用区间\n\n\n按左端点分桶\n\n事先将所有查询 [l, r] 按其左端点 lll 归类：用 start_at[l] 存储所有左端为 lll 的查询的右端 rrr。这样在扫描数组位置 iii 时，可以将所有新“激活”的区间（左端恰好是 iii）一次性加入到可选集合里。\n\n\n\n差分数组维护“已选区间覆盖次数”\n\n用一个长度为 n+1n+1n+1 的差分数组 diffCover\\mathrm{diffCover}diffCover，配合一个变量 currCover\\mathrm{currCover}currCover 来维护“当前已保留的区间对当前位置 iii 的覆盖次数”。矩阵含义如下：\n\n当我们决定保留某个区间 [l,r][l, r][l,r] 时，就执行diffCover[l]  +=  1,diffCover[r+1]  − ⁣=  1,\\mathrm{diffCover}[l] \\;+=\\; 1,\\qquad \\mathrm{diffCover}[r+1] \\;-\\!=\\;1,\ndiffCover[l]+=1,diffCover[r+1]−=1,\n这样在后续扫描时，位置 ppp 所被选中区间覆盖次数 currCover(p)\\mathrm{currCover}(p)currCover(p) 可以通过累加前缀和来得到。\n在扫描到位置 iii 时，先用currCover  =  ∑j=0i−1diffCover[j]\\mathrm{currCover} \\;=\\; \\sum_{j=0}^{i-1} \\mathrm{diffCover}[j]\ncurrCover=j=0∑i−1​diffCover[j]\n（代码中累加 diffCover[i]\\mathrm{diffCover}[i]diffCover[i] 到 currCover\\mathrm{currCover}currCover）以得到“已保留区间对 iii 的覆盖次数”。如果 currCover&lt;nums[i]\\mathrm{currCover} &lt; \\mathrm{nums}[i]currCover&lt;nums[i]，说明还需多选区间来满足位置 iii 的需求。\n\n\n\n\n\n维护可选区间按右端最大化\n\n用 availCount[r] 统计当前“可选且未选”且右端恰好为 rrr 的区间数量；用 intervals_by_r[r] 存储这些区间的左端 lll。\n同时维护一个指针 maxR，表示当前所有可选区间中最大的右端。当我们要为当前位置 iii 额外“补覆盖”时，总是“贪心”地优先选取右端最大的区间（因为它能为之后尽可能多的位置提供覆盖机会），即不断从 r = maxR 的组里弹出一条区间 [l_{\\text{top}},\\,\\maxR] 来保留。\n每当保留一条 [l_{\\text{top}},\\,\\maxR]，我们会：\n\navailCount[maxR] -= 1\nchosenCount += 1（记录已选区间数）\n更新差分：diffCover[l_top] += 1, diffCover[maxR+1] -= 1，并即时 currCover += 1 因为该区间确实覆盖了当前 iii。\n\n\n如果 availCount[maxR] 变为 0，则将 maxR 不断向左移动至下一个 availCount[r'] &gt; 0 为止（且保持 r′≥ir&#x27; \\ge ir′≥i），否则就说明没有可选区间能覆盖 iii，直接返回 −1-1−1。\n\n\n\n逐位扫描\n\n从 i=0i=0i=0 到 i=n−1i=n-1i=n−1，先累加 diffCover[i] 到 currCover，再将左端恰好是 iii 的所有区间“激活”到 availCount 和 intervals_by_r，更新 maxR。\n如果此时 currCover &lt; nums[i]，就在当前可选中右端最大的 maxR 里不断选区间来增加覆盖，直到 currCover &gt;= nums[i] 或者发现无法满足而返回 −1-1−1。\n这样保证每个位置都至少被覆盖 nums[i] 次。扫描结束后，若没有失败，则记录已保留区间数 K=chosenCountK = \\mathrm{chosenCount}K=chosenCount，答案即 m−Km - Km−K。\n\n\n\n数学公式\n\n差分数组更新公式：diffCover[l]  +=  1,diffCover[r+1]  − ⁣=  1 .\\mathrm{diffCover}[l] \\;+=\\;1,\\quad \\mathrm{diffCover}[r+1]\\;-\\!=\\;1\\,.\ndiffCover[l]+=1,diffCover[r+1]−=1.\n\n在扫描到位置 iii 时，已选区间的覆盖次数：currCover(i)  =  ∑j=0idiffCover[j] .\\mathrm{currCover}(i) \\;=\\; \\sum_{j=0}^i \\mathrm{diffCover}[j]\\,.\ncurrCover(i)=j=0∑i​diffCover[j].\n\n需要满足：currCover(i)  ≥  nums[i],∀ i.\\mathrm{currCover}(i) \\;\\ge\\; \\mathrm{nums}[i],\\quad \\forall\\,i.\ncurrCover(i)≥nums[i],∀i.\n\n\n\n\n方法二：按左端排序 + 最大堆 + 差分前缀\n\n\n将查询按左端 lll 升序排序\n\n令 queries.sort(key=lambda x: x[0])，并用指针 j 遍历所有查询。当扫描到数组位置 iii 时，顺便把所有 l≤il \\le il≤i 的区间逐一推入堆中。\n\n\n\n用最大堆维护“已激活的区间按右端降序”\n\n在Python里，我们用 heapq，但由于它是最小堆，我们将右端 $r` 取负数存入堆，实际效果是“堆顶”对应最大的 rrr。\n当扫描到 iii，先将左端 ≤i\\le i≤i 的所有区间都 heappush(h, -r)。\n\n\n\n差分数组 diff 记录“当前已选区间对后续位置的累积覆盖影响”\n\n初始化 diff = [0]*(n+1)，并维护一个前缀和 sum_d = 0。含义是：sum_d = \\sum_&#123;k=0&#125;^&#123;i-1&#125; diff[k]。\n当我们保留一条区间 [l,r][l, r][l,r] 时，执行：diff[ r+1 ]  + ⁣=  −1(因为 pos &gt;r 时覆盖计数会减少)\\mathrm{diff}[\\,r+1\\,] \\;+\\!=\\; -1\\quad(\\text{因为 pos $&gt;r$ 时覆盖计数会减少})\ndiff[r+1]+=−1(因为 pos &gt;r 时覆盖计数会减少)\n并且在选区间时，立刻做 sum_d -= 1 并计入已选区间计数 k += 1，相当于该区间“直接覆盖了当前 iii”，所以对 iii 之后的所有位置在 sum_d 上预先扣了 1。总之，这里将覆盖量通过一维差分转换成后缀影响。\n\n\n\n遍历数组\n\n对于每个 iii，先做 sum_d += diff[i]。此时 sum_d 代表“由之前保留的区间，在当前位置及其之后还能继续贡献的覆盖次数”与当前位置应有的需求 -nums[i] 做对比：\n\n因为我们维持 sum_d 是负数时表示对当前位置仍需额外 (−sumd)(-sum_d)(−sumd​) 的“补覆盖”。\n\n\n如果 sum_d &lt;= -nums[i]，说明当前已有保留区间的覆盖就足够满足 nums[i]，不需要额外选。\n否则，就不断从堆中弹出右端最大的区间（即 -heap[0] 最大），若弹出区间的右端 $r` ≥i\\ge i≥i，就保留它：\n\n执行 diff[r+1] += 1（意味着在位置 r+1r+1r+1 开始，“覆盖贡献”减少 1），\nsum_d -= 1，k += 1。\n\n\n重复弹区间直到 sum_d &lt;= -nums[i] 或堆空或堆顶区间右端 &lt;i&lt; i&lt;i（此时堆里所有剩余区间都无法覆盖当前 iii，直接返回 −1-1−1）。\n如果循环结束后仍然 sum_d &gt; -nums[i]，说明无法达到需求，返回 −1-1−1。\n\n\n\n答案\n\n如果整个 i=0..n−1i=0..n-1i=0..n−1 都顺利通过，记录保留的区间数 K=kK = kK=k，则最多能删除 m−Km - Km−K。\n\n\n\n时间复杂度\n\n\n方法一\n\n构建 start_at 要 O(m)O(m)O(m)，差分数组大小 O(n)O(n)O(n)。\n遍历每个位置 iii 时：\n\n将左端恰为 iii 的区间激活到 availCount 和 intervals_by_r，总共需要把 mmm 条区间分配一次，属于 O(m)O(m)O(m)。\n在最坏情况下，每个位置都可能进行一次或多次“选区间”操作，总共最多选 KKK 条区间，K≤mK \\le mK≤m，每次更新差分和 maxR 都是 O(1)O(1)O(1) 或者 maxR 左移 O(1)O(1)O(1) 次的摊销。\n\n\n因此总体时间复杂度 O(n+m)O(n + m)O(n+m)。\n\n\n\n方法二\n\n先对查询排序 O(mlog⁡m)O(m\\log m)O(mlogm)。\n遍历 0..n−10..n-10..n−1，每步：\n\n把左端 ≤i\\le i≤i 的查询压入堆，所有 mmm 条均只入一次堆，总共 O(mlog⁡m)O(m\\log m)O(mlogm)。\n弹堆操作最多也是 O(mlog⁡m)O(m\\log m)O(mlogm)。\n差分数组前缀 sumdsum_dsumd​ 的累加是 O(1)O(1)O(1)。\n\n\n因此总复杂度 O(mlog⁡m+n)O(m\\log m + n)O(mlogm+n)。若 mmm 远大于 nnn，则主要开销在堆操作上。\n\n\n\n代码分解\n方法一\n\n构建 start_at 列表start_at = [[] for _ in range(n)]for idx, (l, r) in enumerate(queries):    start_at[l].append(r)\n\n\n意味着 start_at[i] 内存储所有左端为 iii 的查询的右端 r。\n\n\n初始化辅助数组和变量\ndiffCover = [0] * (n + 1)   # 差分数组currCover = 0              # 前缀和，表示当前位置已有覆盖chosenCount = 0            # 已保留区间数availCount = [0] * n       # 右端为 r 的“可选未选”区间数量intervals_by_r = [[] for _ in range(n)]  # 记录右端 r 下的各左端 lmaxR = n - 1               # 当前可选区间的最大右端\n\n\n从 i=0…n-1 扫描\n\n\n累加差分：currCover += diffCover[i]。\n\n\n将所有 l=i 的区间激活：\nfor r in start_at[i]:    availCount[r] += 1    intervals_by_r[r].append(i)    if r &gt; maxR: maxR = r\n\n\n“剔除过期”并维护 maxR &gt;= i &amp;&amp; availCount[maxR] &gt; 0。\n\n\n若 currCover &lt; nums[i]，就要补选区间：\nwhile currCover &lt; nums[i]:    if maxR &lt; i: return -1    # 取出右端 = maxR 的一个可选区间    l_top = intervals_by_r[maxR].pop()    availCount[maxR] -= 1    chosenCount += 1    currCover += 1    diffCover[l_top] += 1    diffCover[maxR + 1] -= 1    if availCount[maxR] == 0:        # maxR 不断左移        while maxR &gt;= i and (availCount[maxR] == 0):            maxR -= 1\n\n\n若循环结束时 currCover &gt;= nums[i]，位置 iii 满足需求，继续下一个 i+1i+1i+1。\n\n\n\n\n返回结果\n\n如果遍历结束都没出错，最少要保留 chosenCount 条，最多可删除 m - chosenCount。否则中途返回 -1。\n\n\n\n方法二\n\n\n排序与初始化\nqueries.sort(key=lambda x: x[0])h = []diff = [0] * (len(nums) + 1)q, j = len(queries), 0k = sum_d = 0\n\nh 为堆（Python 默认最小堆，用 -r 保存便于每次弹出最大右端）。\ndiff[i] 存储差分：一旦保留区间 [l,r][l,r][l,r]，就对 diff[r+1] += 1 来表示“从 r+1r+1r+1 开始，后缀不再被此区间覆盖”。\nsum_d 追踪前 iii 的差分前缀和。\n\n\n\n遍历 nums\nfor i, x in enumerate(nums):    sum_d += diff[i]    # 如果已有覆盖 sum_d &lt;= -x，说明已满足 nums[i]    if sum_d &lt;= -x:        continue    # 否则，把左端 &lt;= i 的所有区间压堆    while j &lt; q and queries[j][0] &lt;= i:        heapq.heappush(h, -queries[j][1])        j += 1    # 弹堆，补选最大的右端区间    while sum_d &gt; -x and h and -h[0] &gt;= i:        r = -heapq.heappop(h)        diff[r + 1] += 1        sum_d -= 1        k += 1    # 若无法满足需求，则失败    if sum_d &gt; -x:        return -1return q - k\n\n对每个位置 iii，先 sum_d += diff[i]。此时若 sum_d &lt;= -nums[i]，说明此前已选的区间覆盖次数充足；否则进入补选。\n在补选阶段，只要当前 sum_d &gt; -nums[i]，且堆顶区间的右端 r≥ir \\ge ir≥i，就可以选取它：sum_d -= 1 立刻反映“当前 iii 被此区间覆盖”；diff[r+1] += 1 表示“在 r+1r+1r+1 处去掉这条区间后续的覆盖贡献”。\n若在此之后仍不能满足，则直接返回 -1。\n\n\n\n代码实现\nfrom typing import Listclass Solution:    def maxRemoval(self, nums: List[int], queries: List[List[int]]) -&gt; int:        n, m = len(nums), len(queries)        # 1. 把所有区间按左端点 l 分桶        #    start_at[i] 里存的，是所有左端点恰好为 i 的查询 (r)        start_at = [[] for _ in range(n)]        for idx, (l, r) in enumerate(queries):            start_at[l].append(r)        # 2. 差分数组 diffCover 用于维护“已选区间到当前位置 i 的覆盖次数”        diffCover = [0] * (n + 1)        currCover = 0    # 当前在 i 处，已选的区间一共覆盖了多少次        chosenCount = 0  # 已经保留（选中）的区间数        # 3. availCount[r] 统计：目前“可选”且尚未被选的“右端点恰好等于 r”的区间有多少条        availCount = [0] * n        # intervals_by_r[r] 存储：当区间 [l,r] 一被激活，就把它的 l push 到这里        intervals_by_r = [[] for _ in range(n)]        # 4. 用一个指针 maxR 来指向“当前可选区间里最大的 r”        maxR = n - 1        # 5. 从 i=0..n-1 依次扫描        for i in range(n):            # ——(A) 先把 diffCover[i] 累到 currCover 上            currCover += diffCover[i]            # ——(B) 把左端点 l = i 的区间全部“激活”            for r in start_at[i]:                availCount[r] += 1                intervals_by_r[r].append(i)                if r &gt; maxR:                    maxR = r            # ——(C) 剔除过期的 r：保证 maxR ≥ i 且 availCount[maxR] &gt; 0            while maxR &gt;= i and (availCount[maxR] == 0):                maxR -= 1            # ——(D) 如果 currCover &lt; nums[i]，就必须“贪心地”从 r = maxR 开始选区间补覆盖            while currCover &lt; nums[i]:                if maxR &lt; i:                    return -1                # 从 intervals_by_r[maxR] 中 pop 出一个左端 l_top                l_top = intervals_by_r[maxR].pop()                availCount[maxR] -= 1                chosenCount += 1                # 该区间覆盖了当前 i，立刻补一个 currCover                currCover += 1                # 差分更新：对 [l_top, maxR] 内所有位置各 +1                diffCover[l_top] += 1                if maxR + 1 &lt; len(diffCover):                    diffCover[maxR + 1] -= 1                # 如果 maxR 组里已无可选区间，继续将 maxR 左移                while maxR &gt;= i and (availCount[maxR] == 0):                    maxR -= 1            # 至此 currCover ≥ nums[i]，安全进入 i+1        # 扫完所有 i，没有失败        return m - chosenCount\n二\nimport heapqclass Solution:    def maxRemoval(self, nums: List[int], queries: List[List[int]]) -&gt; int:        # 将 queries 按左端升序排序        queries.sort(key=lambda x: x[0])        h = []  # 最大堆（用负的 r 存储）        diff = [0] * (len(nums) + 1)        q, j = len(queries), 0        k = sum_d = 0        for i, x in enumerate(nums):            # 更新前缀和            sum_d += diff[i]            # 如果已有 sum_d &lt;= -x，则说明已满足 nums[i]，继续            if sum_d &lt;= -x:                continue            # 将左端 &lt;= i 的所有查询压入堆            while j &lt; q and queries[j][0] &lt;= i:                heapq.heappush(h, -queries[j][1])                j += 1            # 弹堆补选右端最大的区间，直到满足需求或堆空/无法覆盖            while sum_d &gt; -x and h and -h[0] &gt;= i:                r = -heapq.heappop(h)                # 差分更新，位置 r+1 开始对后缀去掉一个覆盖                diff[r + 1] += 1                sum_d -= 1                k += 1            # 如果仍然不够覆盖，返回 -1            if sum_d &gt; -x:                return -1        # 能完成覆盖，最多删除 q - k        return q - k\n","categories":["算法"],"tags":["Algorithm","中等","数据结构","贪心","优先队列","状态建模","差分数组","区间覆盖"]},{"title":"LeetCode每日一题2025-05-30","url":"/post/find-closest-node-to-given-two-nodes.html","content":"2359. 找到离给定两个节点最近的节点 M\n给你一个 n 个节点的 有向图 ，节点编号为 0 到 n - 1 ，每个节点 至多 有一条出边。\n有向图用大小为 n 下标从 0 开始的数组 edges 表示，表示节点 i 有一条有向边指向 edges[i] 。如果节点 i 没有出边，那么 edges[i] == -1 。\n同时给你两个节点 node1 和 node2 。\n请你返回一个从 node1 和 node2 都能到达节点的编号，使节点 node1 和节点 node2 到这个节点的距离 较大值最小化。如果有多个答案，请返回 最小 的节点编号。如果答案不存在，返回 -1 。\n注意 edges 可能包含环。\n示例 1：\n\n\n输入：edges = [2,2,3,-1], node1 = 0, node2 = 1\n输出：2\n解释：从节点 0 到节点 2 的距离为 1 ，从节点 1 到节点 2 的距离为 1 。\n两个距离的较大值为 1 。我们无法得到一个比 1 更小的较大值，所以我们返回节点 2 。\n\n示例 2：\n\n\n输入：edges = [1,2,-1], node1 = 0, node2 = 2\n输出：2\n解释：节点 0 到节点 2 的距离为 2 ，节点 2 到它自己的距离为 0 。\n两个距离的较大值为 2 。我们无法得到一个比 2 更小的较大值，所以我们返回节点 2 。\n\n提示：\n\nn == edges.length\n2 &lt;= n &lt;= 10⁵\n-1 &lt;= edges[i] &lt; n\nedges[i] != i\n0 &lt;= node1, node2 &lt; n\n\n问题分析\n给定一个大小为 nnn 的有向图，用数组 edges 表示：对于每个节点 iii，如果 edges[i] = j，则存在一条从 iii 指向 jjj 的有向边；如果 edges[i] = -1，则节点 iii 没有出边。由于“每个节点最多有一条出边”，图的结构类似若干条链和环的组合。\n现有两个起点 node1 和 node2，我们要找到一个目标节点 xxx，使得从 node1 到 xxx 的距离记作 d1(x)d_1(x)d1​(x)，从 node2 到 xxx 的距离记作 d2(x)d_2(x)d2​(x)。定义这两个距离的“较大值”为\nmax⁡(d1(x), d2(x)).\\max\\bigl(d_1(x),\\, d_2(x)\\bigr).\nmax(d1​(x),d2​(x)).\n我们需要选择一个节点 xxx，使得\nmax⁡(d1(x), d2(x))\\max\\bigl(d_1(x),\\, d_2(x)\\bigr)\nmax(d1​(x),d2​(x))\n尽可能小；如果存在多个使得上述值相同的节点，则取编号最小的一个；如果不存在任何节点能同时被 node1 和 node2 到达，则返回 −1-1−1。\n由于“每个节点至多一条出边”，从给定起点出发后，只能沿着唯一的一条路径不断前进，不会产生多叉分支。这样，我们可以通过一次“链式遍历”（类似于 BFS，但由于出度为 1，可视作单链 DFS）来计算每个起点到其它所有可达节点的距离。\n算法思路\n\n\n初始化距离数组\n对于每个起点 node1 和 node2，分别构造一个长度为 nnn 的数组 dist1 和 dist2，初始时将所有位置赋值为“无穷大” ∞\\infty∞（可用一个大于 nnn 的整数代表）。\n对 i=0…n−1,dist1[i]=dist2[i]=∞.\\text{对 }i=0\\ldots n-1,\\quad \\mathrm{dist1}[i] = \\mathrm{dist2}[i] = \\infty.\n对 i=0…n−1,dist1[i]=dist2[i]=∞.\n\n\n计算单源距离\n定义一个辅助函数 compute_dist(start, edges) -&gt; dist，其作用为：\n\n从 start 开始，令当前节点 u=startu = startu=start，将 dist[u]=0\\mathrm{dist}[u] = 0dist[u]=0。\n然后不断循环：若 edges[u] != -1 且下一个节点 v=edges[u]v = \\text{edges}[u]v=edges[u] 尚未访问过（即 dist[v]=∞\\mathrm{dist}[v] = \\inftydist[v]=∞），则设置 dist[v]=dist[u]+1\\mathrm{dist}[v] = \\mathrm{dist}[u] + 1dist[v]=dist[u]+1，更新 u=vu = vu=v 继续；否则退出循环（要么碰到 −1-1−1，要么进入已访问节点，形成环，或者到达无出边节点）。\n返回填充好的 dist 数组。\n由于每个节点只有一条出边，整个过程每个节点最多只会被赋值一次，因此时间复杂度为 O(n)O(n)O(n)。\n\n\n\n合并结果、寻找答案\n\n调用 compute_dist(node1, edges)，得到数组 dist1。\n调用 compute_dist(node2, edges)，得到数组 dist2。\n遍历所有节点 i=0…n−1i=0\\ldots n-1i=0…n−1，如果这两个距离都不是无穷大（即 dist1[i] \\neq \\infty 且 dist2[i] \\neq \\infty），则该节点 iii 可以同时被两个起点到达，我们计算D(i)  =  max⁡(dist1[i], dist2[i]).  D(i) \\;=\\; \\max\\bigl(\\mathrm{dist1}[i],\\, \\mathrm{dist2}[i]\\bigr).\nD(i)=max(dist1[i],dist2[i]).\n\n在所有可行的 iii 中，选出使得 D(i)D(i)D(i) 最小的那一个；如果有多个，则取编号最小者。若没有任何可行点，则返回 −1-1−1。\n\n\n\n时间复杂度\n\n计算 dist1 的过程：最多沿着一条链走过每个节点一次，时间复杂度是 O(n)O(n)O(n)。\n同理，计算 dist2 也是 O(n)O(n)O(n)。\n最后一次遍历所有节点来比较 max⁡(dist1[i],dist2[i])\\max\\bigl(\\mathrm{dist1}[i],\\mathrm{dist2}[i]\\bigr)max(dist1[i],dist2[i]) 并更新答案，时间也是 O(n)O(n)O(n)。\n\n因此，总的时间复杂度为\nO(n)+O(n)+O(n)  =  O(n).O(n) + O(n) + O(n) \\;=\\; O(n).\nO(n)+O(n)+O(n)=O(n).\n空间复杂度：我们用了两个长度为 nnn 的距离数组，加上一些常数级辅助变量，故空间复杂度为 O(n)O(n)O(n)。\n代码分解\n\n函数 compute_dist(start, edges)\n\n输入：起点索引 start，数组 edges（长度为 nnn）。\n输出：长度为 nnn 的整数数组 dist，其中 dist[i] 表示从 start 到节点 iii 的最短距离；如果不可达，则保持 ∞\\infty∞（例如用 n+1n+1n+1 代替）。\n思路：初始化 dist[i] = inf (i = 0..n-1)u = startd = 0while u != -1 且 dist[u] == inf:    dist[u] = d    v = edges[u]    u = v    d = d + 1return dist\n\n\n\n主函数 closestMeetingNode(edges, node1, node2)\n\n输入：edges 数组，node1，node2。\n步骤：\n\n令 n=len(edges)n = \\mathrm{len}(edges)n=len(edges)，将 ∞\\infty∞ 记为 n+1（只要大于可能的最长路径即可）。\n调用 dist1 = compute_dist(node1, edges)；调用 dist2 = compute_dist(node2, edges)。\n令 ans = -1，best = \\infty。\n对所有 i 从 000 到 n−1n-1n−1：\n\n若 dist1[i] != \\infty 且 dist2[i] != \\infty，则计算 dmax = max(dist1[i], dist2[i])。\n若 dmax &lt; best，则更新 best = dmax，ans = i；若 dmax == best 且 i &lt; ans，则更新 ans = i（取编号更小）。\n\n\n返回 ans。\n\n\n\n\n\n代码实现\nfrom typing import Listclass Solution:    def closestMeetingNode(self, edges: List[int], node1: int, node2: int) -&gt; int:        n = len(edges)        # 用 n+1 表示“无穷大”距离，因最大可能距离不会超过 n        INF = n + 1                def compute_dist(start: int) -&gt; List[int]:            dist = [INF] * n            u = start            d = 0            # 一路沿着唯一路径走，直到到头或遇已访问节点            while u != -1 and dist[u] == INF:                dist[u] = d                v = edges[u]                u = v                d += 1            return dist                dist1 = compute_dist(node1)        dist2 = compute_dist(node2)                ans = -1        best = INF        for i in range(n):            if dist1[i] != INF and dist2[i] != INF:                dmax = max(dist1[i], dist2[i])                # 如果发现更优的最大距离，更新 ans；相同距离则选更小编号                if dmax &lt; best or (dmax == best and (ans == -1 or i &lt; ans)):                    best = dmax                    ans = i                return ans","categories":["算法"],"tags":["Algorithm","中等","图算法","最短路径","BFS"]},{"title":"LeetCode每日一题2025-06-01","url":"/post/distribute-candies-among-children-ii.html","content":"2929. 给小朋友们分糖果 II M\n给你两个正整数 n 和 limit 。\n请你将 n 颗糖果分给 3 位小朋友，确保没有任何小朋友得到超过 limit 颗糖果，请你返回满足此条件下的 总方案数 。\n示例 1：\n\n输入：n = 5, limit = 2\n输出：3\n解释：总共有 3 种方法分配 5 颗糖果，且每位小朋友的糖果数不超过 2 ：(1, 2, 2) ，(2, 1, 2) 和 (2, 2, 1) 。\n\n示例 2：\n\n输入：n = 3, limit = 3\n输出：10\n解释：总共有 10 种方法分配 3 颗糖果，且每位小朋友的糖果数不超过 3 ：(0, 0, 3) ，(0, 1, 2) ，(0, 2, 1) ，(0, 3, 0) ，(1, 0, 2) ，(1, 1, 1) ，(1, 2, 0) ，(2, 0, 1) ，(2, 1, 0) 和 (3, 0, 0) 。\n\n提示：\n\n1 &lt;= n &lt;= 10⁶\n1 &lt;= limit &lt;= 10⁶\n\n问题分析\n我们需要计算满足以下条件的非负整数解 (x,y,z)(x, y, z)(x,y,z) 的个数：\n\nx+y+z=nx + y + z = nx+y+z=n；\n0≤x,y,z≤limit0 \\le x, y, z \\le \\mathrm{limit}0≤x,y,z≤limit。\n\n如果不考虑上界限制，则“将 nnn 个相同的糖果分给 3 位小朋友”的非负整数解数量为星与条公式：\n(n+3−13−1)  =  (n+22)  =  (n+2)(n+1)2.\\binom{n + 3 - 1}{3 - 1} \\;=\\; \\binom{n + 2}{2}\\;=\\;\\frac{(n+2)(n+1)}{2}.\n(3−1n+3−1​)=(2n+2​)=2(n+2)(n+1)​.\n但由于每位小朋友最多只能拿到 limit\\mathrm{limit}limit 颗，需要排除掉至少有一个孩子拿到超过 limit\\mathrm{limit}limit 颗的情况。可通过包容–排斥原理计算满足上界约束的解的个数。\n设事件：\n\nAxA_xAx​：满足 x&gt;limitx &gt; \\mathrm{limit}x&gt;limit 的解；\nAyA_yAy​：满足 y&gt;limity &gt; \\mathrm{limit}y&gt;limit 的解；\nAzA_zAz​：满足 z&gt;limitz &gt; \\mathrm{limit}z&gt;limit 的解。\n\n目标是计算：\n∣{(x,y,z)∣x+y+z=n,  0≤x,y,z≤limit}∣  =  (n+22)  −  ∣Ax∪Ay∪Az∣.\\Bigl|\\{(x,y,z)\\mid x+y+z=n,\\;0\\le x,y,z\\le \\mathrm{limit}\\}\\Bigr|\n\\;=\\;\n\\binom{n+2}{2}\n\\;-\\;\n\\bigl|A_x \\cup A_y \\cup A_z\\bigr|.\n​{(x,y,z)∣x+y+z=n,0≤x,y,z≤limit}​=(2n+2​)−​Ax​∪Ay​∪Az​​.\n其中\n∣Ax∪Ay∪Az∣  =  ∣Ax∣+∣Ay∣+∣Az∣  −  (∣Ax∩Ay∣+∣Ax∩Az∣+∣Ay∩Az∣)  +  ∣Ax∩Ay∩Az∣.\\bigl|A_x \\cup A_y \\cup A_z\\bigr|\n\\;=\\; |A_x| + |A_y| + |A_z|\n\\;-\\;\\bigl(|A_x\\cap A_y| + |A_x\\cap A_z| + |A_y\\cap A_z|\\bigr)\n\\;+\\;|A_x\\cap A_y\\cap A_z|.\n​Ax​∪Ay​∪Az​​=∣Ax​∣+∣Ay​∣+∣Az​∣−(∣Ax​∩Ay​∣+∣Ax​∩Az​∣+∣Ay​∩Az​∣)+∣Ax​∩Ay​∩Az​∣.\n由于对称性，\n∣Ax∣=∣Ay∣=∣Az∣,∣Ax∩Ay∣=∣Ax∩Az∣=∣Ay∩Az∣.|A_x|=|A_y|=|A_z|,\\quad\n|A_x\\cap A_y|=|A_x\\cap A_z|=|A_y\\cap A_z|.\n∣Ax​∣=∣Ay​∣=∣Az​∣,∣Ax​∩Ay​∣=∣Ax​∩Az​∣=∣Ay​∩Az​∣.\n\n\n当 x&gt;limitx &gt; \\mathrm{limit}x&gt;limit 时，令 x′=x−(limit+1)x&#x27; = x - (\\mathrm{limit} + 1)x′=x−(limit+1)，则 x′≥0x&#x27; \\ge 0x′≥0，原方程变为\nx′+y+z  =  n−(limit+1).x&#x27; + y + z \\;=\\; n - (\\mathrm{limit} + 1).\nx′+y+z=n−(limit+1).\n此时 x′,y,z≥0x&#x27;,y,z \\ge 0x′,y,z≥0，无上界，解的个数为\n( (n−(limit+1))+22),\\binom{\\,(n - (\\mathrm{limit}+1)) + 2}{2},\n(2(n−(limit+1))+2​),\n仅当 n−(limit+1)≥0n - (\\mathrm{limit}+1) \\ge 0n−(limit+1)≥0 时才非零，否则视作 0。\n\n\n当同时 x&gt;limitx&gt;\\mathrm{limit}x&gt;limit 且 y&gt;limity&gt;\\mathrm{limit}y&gt;limit 时，令\nx′=x−(limit+1),y′=y−(limit+1),x&#x27; = x - (\\mathrm{limit}+1),\\quad y&#x27; = y - (\\mathrm{limit}+1),\nx′=x−(limit+1),y′=y−(limit+1),\n则\nx′+y′+z  =  n−2(limit+1),x&#x27; + y&#x27; + z \\;=\\; n - 2(\\mathrm{limit}+1),\nx′+y′+z=n−2(limit+1),\n解的个数为\n( (n−2(limit+1))+22),\\binom{\\,(n - 2(\\mathrm{limit}+1)) + 2}{2},\n(2(n−2(limit+1))+2​),\n条件是 n−2(limit+1)≥0n - 2(\\mathrm{limit}+1) \\ge 0n−2(limit+1)≥0。\n\n\n当 x,y,zx,y,zx,y,z 都超过 limit\\mathrm{limit}limit 时，令\nx′=x−(limit+1),  y′=y−(limit+1),  z′=z−(limit+1),x&#x27; = x - (\\mathrm{limit}+1),\\;\ny&#x27; = y - (\\mathrm{limit}+1),\\;\nz&#x27; = z - (\\mathrm{limit}+1),\nx′=x−(limit+1),y′=y−(limit+1),z′=z−(limit+1),\n则\nx′+y′+z′  =  n−3(limit+1),x&#x27; + y&#x27; + z&#x27; \\;=\\; n - 3(\\mathrm{limit}+1),\nx′+y′+z′=n−3(limit+1),\n解的个数为\n( (n−3(limit+1))+22),\\binom{\\,(n - 3(\\mathrm{limit}+1)) + 2}{2},\n(2(n−3(limit+1))+2​),\n条件是 n−3(limit+1)≥0n - 3(\\mathrm{limit}+1) \\ge 0n−3(limit+1)≥0。\n\n\n由包容–排斥得到：\n∣Ax∪Ay∪Az∣=3 ( n−(limit+1)+22)−3 ( n−2(limit+1)+22)+( n−3(limit+1)+22),\\bigl|A_x \\cup A_y \\cup A_z\\bigr|\n= 3\\,\\binom{\\,n - (\\mathrm{limit}+1) + 2}{2}\n- 3\\,\\binom{\\,n - 2(\\mathrm{limit}+1) + 2}{2}\n+ \\binom{\\,n - 3(\\mathrm{limit}+1) + 2}{2},\n​Ax​∪Ay​∪Az​​=3(2n−(limit+1)+2​)−3(2n−2(limit+1)+2​)+(2n−3(limit+1)+2​),\n（不足条件时对应组合数取 0）。因此，合法分配数：\nAns  =  (n+22)  −  3 ( n−(limit+1)+22)  +  3 ( n−2(limit+1)+22)  −  ( n−3(limit+1)+22).\\boxed{\n\\mathrm{Ans} \\;=\\;\n\\binom{n+2}{2}\n\\;-\\;3\\,\\binom{\\,n - (\\mathrm{limit}+1) + 2}{2}\n\\;+\\;3\\,\\binom{\\,n - 2(\\mathrm{limit}+1) + 2}{2}\n\\;-\\;\\binom{\\,n - 3(\\mathrm{limit}+1) + 2}{2}\n}.\nAns=(2n+2​)−3(2n−(limit+1)+2​)+3(2n−2(limit+1)+2​)−(2n−3(limit+1)+2​)​.\n算法思路\n\n定义辅助函数 comb2(m)\\text{comb2}(m)comb2(m)，用于计算(m+22)  =  (m+2)(m+1)2,\\binom{m + 2}{2} \\;=\\; \\frac{(m+2)(m+1)}{2},\n(2m+2​)=2(m+2)(m+1)​,\n若 m&lt;0m &lt; 0m&lt;0，则返回 0，以便处理 n−k(limit+1)&lt;0n - k(\\mathrm{limit}+1) &lt; 0n−k(limit+1)&lt;0 时组合数为 0 的情形。\n计算无约束总数：total  =  comb2(n).\\text{total} \\;=\\; \\text{comb2}(n).\ntotal=comb2(n).\n\n令 step=limit+1\\text{step} = \\mathrm{limit} + 1step=limit+1，计算包容–排斥各项：\n\nterm1=3 comb2(n−step)\\text{term1} = 3\\,\\text{comb2}\\bigl(n - \\text{step}\\bigr)term1=3comb2(n−step)；\nterm2=3 comb2(n−2 step)\\text{term2} = 3\\,\\text{comb2}\\bigl(n - 2\\,\\text{step}\\bigr)term2=3comb2(n−2step)；\nterm3=comb2(n−3 step)\\text{term3} = \\text{comb2}\\bigl(n - 3\\,\\text{step}\\bigr)term3=comb2(n−3step)。\n\n\n返回 total−term1+term2−term3\\text{total} - \\text{term1} + \\text{term2} - \\text{term3}total−term1+term2−term3 即为最终结果。\n\n时间复杂度\n\n该方法只进行常数次的组合数计算和加减乘除运算，整个算法的时间复杂度为 O(1)O(1)O(1)，满足 n,limitn, \\mathrm{limit}n,limit 最大到 10610^6106 的情况。\n空间复杂度为 O(1)O(1)O(1)，只使用常数个整型变量。\n\n代码分解\n\n\n辅助函数 comb2(m)\n\n功能：若 m≥0m \\ge 0m≥0，返回 (m+22)=(m+2)(m+1)2\\binom{m+2}{2} = \\frac{(m+2)(m+1)}{2}(2m+2​)=2(m+2)(m+1)​；否则返回 0。\n作用：统一处理“n−k(limit+1)&lt;0n - k(\\mathrm{limit}+1) &lt; 0n−k(limit+1)&lt;0 时的组合数为 0”的情形。\n\n\n\n主函数 distributeCandies(n, limit)\n\n计算无上界总方案数 total = comb2(n)。\n设 step = limit + 1。\n计算：\n\nterm1 = 3 * comb2(n - step) 对应排除掉任一孩子超过上限的情况；\nterm2 = 3 * comb2(n - 2*step) 对应排除掉任意两位孩子都超过上限的情况；\nterm3 =     comb2(n - 3*step) 对应排除掉三位孩子都超过上限的情况。\n\n\n最终返回 total - term1 + term2 - term3。\n\n\n\n代码实现\nclass Solution:    def distributeCandies(self, n: int, limit: int) -&gt; int:        # 辅助函数：计算 C(m+2, 2)，m &lt; 0 时返回 0        def comb2(m: int) -&gt; int:            if m &lt; 0:                return 0            # C(m+2, 2) = (m+2)*(m+1)//2            return (m + 2) * (m + 1) // 2        # 无上界时的总解数：C(n+2, 2)        total = comb2(n)        # 每个孩子超过上界时，需要从 n 中减去 (limit+1)        step = limit + 1        # 包容-排斥各项        term1 = 3 * comb2(n - step)       # 单个孩子超过上限        term2 = 3 * comb2(n - 2 * step)   # 任意两位孩子都超过上限        term3 =     comb2(n - 3 * step)   # 三位孩子都超过上限        # 最终结果        return total - term1 + term2 - term3","categories":["算法"],"tags":["Algorithm","排列组合","组合数学","中等"]},{"title":"LeetCode每日一题2025-05-29","url":"/post/maximize-the-number-of-target-nodes-after-connecting-trees-ii.html","content":"3373. 连接两棵树后最大目标节点数目 II H\n有两棵 无向 树，分别有 n 和 m 个树节点。两棵树中的节点编号分别为[0, n - 1] 和 [0, m - 1] 中的整数。\n给你两个二维整数 edges1 和 edges2 ，长度分别为 n - 1 和 m - 1 ，其中 edges1[i] = [aᵢ, bᵢ] 表示第一棵树中节点 aᵢ 和 bᵢ 之间有一条边，edges2[i] = [uᵢ, vᵢ] 表示第二棵树中节点 uᵢ 和 vᵢ 之间有一条边。\n如果节点 u 和节点 v 之间路径的边数是偶数，那么我们称节点 u 是节点 v 的 目标节点 。注意 ，一个节点一定是它自己的 目标节点 。\n请你返回一个长度为 n 的整数数组 answer ，answer[i] 表示将第一棵树中的一个节点与第二棵树中的一个节点连接一条边后，第一棵树中节点 i 的 目标节点 数目的 最大值 。\n注意 ，每个查询相互独立。意味着进行下一次查询之前，你需要先把刚添加的边给删掉。\n示例 1：\n\n输入： edges1 = [[0,1],[0,2],[2,3],[2,4]], edges2 = [[0,1],[0,2],[0,3],[2,7],[1,4],[4,5],[4,6]]\n输出： [8,7,7,8,8]\n解释：\n\n对于 i = 0 ，连接第一棵树中的节点 0 和第二棵树中的节点 0 。\n对于 i = 1 ，连接第一棵树中的节点 1 和第二棵树中的节点 4 。\n对于 i = 2 ，连接第一棵树中的节点 2 和第二棵树中的节点 7 。\n对于 i = 3 ，连接第一棵树中的节点 3 和第二棵树中的节点 0 。\n对于 i = 4 ，连接第一棵树中的节点 4 和第二棵树中的节点 4 。\n\n\n\n示例 2：\n\n输入： edges1 = [[0,1],[0,2],[0,3],[0,4]], edges2 = [[0,1],[1,2],[2,3]]\n输出： [3,6,6,6,6]\n解释：\n对于每个 i ，连接第一棵树中的节点 i 和第二棵树中的任意一个节点。\n\n\n提示：\n\n2 &lt;= n, m &lt;= 10⁵\nedges1.length == n - 1\nedges2.length == m - 1\nedges1[i].length == edges2[i].length == 2\nedges1[i] = [ai, bi]\n0 &lt;= aᵢ, bᵢ &lt; n\nedges2[i] = [uᵢ, vᵢ]\n0 &lt;= uᵢ, vᵢ &lt; m\n输入保证 edges1 和 edges2 都表示合法的树。\n\n问题分析\n\n\n题目给出两棵无向树，分别记作树1（节点数为 n，编号 0…n-1，边集 edges1）和树2（节点数为 m，编号 0…m-1，边集 edges2）。\n\n\n定义：若节点 u 和节点 v 之间路径上的边数是偶数，则称 u 是 v 的“目标节点”（目标关系是对称的；距离为 0 时，节点自己也是自己的目标节点）。\n\n\n对于树1中的每个节点 i ，我们可以“在树1的 i 和树2的某个节点 j 之间额外连一条边”，这样相当于把两棵树连成一棵大树。连边以后，在这棵大树中，节点 i 与其它所有节点（既包括树1中的节点，也包括树2中的节点）的距离都确定了，我们希望计算“有多少个节点与 i 的距离为偶数”——即 i 在新大树中的目标节点数目。\n\n\n题目要求对 树1 中的每个 i ，都可以选择一个不同的 j 来连边（每个 i 是一种“独立”的查询，连边结束后会删掉，互不影响），求出当选择最优的 j 时，节点 i 能得到的最大目标节点数。\n\n\n算法思路\n\n\n拆解距离关系\n\n\n对树1内部的任意两个节点 i 和 x ，它们的距离是否为偶数，与“它们在某个根节点下的颜色（奇偶深度）”有关。实际上，可以把任意一棵树看成二分图：对树1，任选一个根（如 0），做 BFS 打标“深度奇偶”。记 col1[u]=0/1 表示节点 u 到根 0 的距离 mod 2；同理树2记 col2[v]。\n\n\n在同一个树内部，对于树1 的任意 i 和 x ，dist_tree1(i,x)%2 == (col1[i] xor col1[x])。若结果为 0 ，则距离为偶数；若为 1 ，则距离为奇数。\n\n\n连接边后，新大树中：\n\n树1 中的 x 到 i 的距离保持原来的关系，仍然是 dist_tree1(i,x)；\n树2 中的 y 到 i 的距离变为 dist_tree1(i, j) + 1 + dist_tree2(j, y)，其中 j 是我们连接的“接口”节点。在树1里，从 i 到 j 若 i==j 时 dist=0，否则它完全在树1内的路径；但是题目每次都只连“树1的 i 到树2的 j”这一条边，所以在树1内部，dist_tree1(i,j) 恰好等于 0 当且仅当 i=j，否则这条树内路径我们 并不实际连除 i=j 外的其它； 更严谨地，连边规则是“在 i 和 j 之间连一条新边”，无论 i 是否在树1里有到 j 的路径（当然 j 不在树1），“树1内部”还是原来的那棵树：\n\n树1→树1：dist_large(i,x) = dist_tree1(i,x)。\n树1→树2：dist_large(i,y) = 1 + dist_tree2(j,y)。\n（因为在大图中，i→j 只有 1 条新边，树1里 i→j 不存在原路径——跨树；树2 里 j→y 路径和原一致。）\n\n\n\n\n\n因此，在大树里：\n\n\n对于树1 内部某个 x，dist_large(i,x)%2 == dist_tree1(i,x)%2 == (col1[i] xor col1[x])。\n当 (col1[i] xor col1[x])==0 时，x 是 i 的“目标”。\n\n\n对于树2 内部某个 y，dist_large(i,y)%2 == (1 + dist_tree2(j,y))%2 == 1 xor (col2[j] xor col2[y])。\n令 d2_parity = (col2[j] xor col2[y])，若 d2_parity==0（即 j,y 在树2里同偶数深度标记） 则 1 xor 0 = 1（距离奇数），若 d2_parity==1 则 1 xor 1 = 0（距离偶数）。\n我们希望大距离为偶数，也就是：\n1⊕(col2[j]⊕col2[y])=0⇔(col2[j]⊕col2[y])=1⇔col2[j]≠col2[y]1 \\oplus (\\text{col2}[j] \\oplus \\text{col2}[y]) = 0 \\quad \\Leftrightarrow \\quad (\\text{col2}[j] \\oplus \\text{col2}[y]) = 1 \\quad \\Leftrightarrow \\quad \\text{col2}[j] \\neq \\text{col2}[y]\n1⊕(col2[j]⊕col2[y])=0⇔(col2[j]⊕col2[y])=1⇔col2[j]=col2[y]\n换言之，在树2 中，仅有与 j 在“二分染色”中“异色”的节点 y 才会和 i 形成“偶数距离”。\n\n\n\n\n\n\n把计数分为两部分相加\n\n\n树1 内部：对于固定的 i，树1 里与 i 距离为偶数的节点个数，只与 col1[i] 有关；因为只要 col1[x] == col1[i]，它们在树1 里距离就是偶数。令\ncnt1_0=∣{u∈树1:col1[u]=0}∣,cnt1_1=∣{u∈树1:col1[u]=1}∣\\mathrm{cnt1\\_0} = \\left| \\{ u \\in \\text{树1} : \\text{col1}[u] = 0 \\} \\right|, \\quad \\mathrm{cnt1\\_1} = \\left| \\{ u \\in \\text{树1} : \\text{col1}[u] = 1 \\} \\right|\ncnt1_0=∣{u∈树1:col1[u]=0}∣,cnt1_1=∣{u∈树1:col1[u]=1}∣\n若 col1[i]==0，则树1 内部与 i “偶数距离”的节点数 = cnt1_0；若 col1[i]==1，则为 cnt1_1。\n\n\n树2 部分：若我们把树1 的 i 连到树2 的 j ，那么在大树里，任何树2 内部的节点 y 只要 col2[y] ≠ col2[j]，它就与 i “偶数距离”。\n因此，定义树2 中：\ncnt2_0=∣{v∈树2:col2[v]=0}∣,cnt2_1=∣{v∈树2:col2[v]=1}∣\\mathrm{cnt2\\_0} = \\left| \\{ v \\in \\text{树2} : \\text{col2}[v] = 0 \\} \\right|, \\quad \\mathrm{cnt2\\_1} = \\left| \\{ v \\in \\text{树2} : \\text{col2}[v] = 1 \\} \\right|\ncnt2_0=∣{v∈树2:col2[v]=0}∣,cnt2_1=∣{v∈树2:col2[v]=1}∣\n若 col2[j]==0，则与 j 异色的节点数是 cnt2_1；若 col2[j]==1，则异色的节点数是 cnt2_0。\n所以对于固定的 j，树2 中与 j 距离为奇（col2[j] xor col2[y]==1） 的节点数 = 若 col2[j]==0 → cnt2_1；若 col2[j]==1 → cnt2_0。这部分正好是连上 i 以后，能贡献给 i “偶数距离”的树2 节点数。\n\n\n\n\n两个部分相加后再最大化\n\n\n对于树1 中的节点 i，选择某个 j 来连边，那么“大树中与 i 偶数距离的节点数” =\n（树1 内部与 i 距离偶数的节点数） + （树2 内部与 j 距离奇数的节点数）= （col1[i]==0 ? cnt1_0 : cnt1_1） + （col2[j]==0 ? cnt2_1 : cnt2_0）.\n\n\n第一项只与 i 在树1 中的深度奇偶（col1[i]）相关，第二项只与 j 在树2 中的深度奇偶（col2[j]）相关。它们是“加法分离”的，互不影响。\n\n\n因此，若我们要对 i 单独做一次“独立查询”来最大化这个和，就只需要把 j 选成能让 （col2[j]==0 ? cnt2_1 : cnt2_0） 最大化的那个颜色：\n\n若 cnt2_0 &gt;= cnt2_1，那么只要选一个 col2[j]==1 的 j，就能得到树2 贡献 cnt2_0。\n否则就选一个 col2[j]==0 的 j ，得到树2 贡献 cnt2_1。\n\n\n\n这样，不论 i 是哪个，都应该“二分染色完树2 以后”取\nbest2 = max(cnt2_0, cnt2_1).\n\n\n最终对每个 i ：\nanswer[i] = （col1[i]==0 ? cnt1_0 : cnt1_1） + best2.\n\n\n\n\n由此可知，这个问题的难点并不在于对每个 i 枚举 m 个 j，而是在于利用“树的二分染色”将「偶数距离」的计数化归到“同色/异色”的简单计数上，整体复杂度只需 O(n+m)O(n+m)O(n+m)。\n时间复杂度\n时间复杂度\n\n构建邻接表：O(n+m)O(n + m)O(n+m)（n=树1节点数，m=树2节点数）。\nBFS 染色（树1 + 树2）：O(n+m)O(n + m)O(n+m)。\n最后生成答案：O(n)O(n)O(n)。\n总体：O(n+m)O(n + m)O(n+m)，空间复杂度也是 O(n+m)O(n + m)O(n+m) 来存储邻接表和标记数组。\n\n代码分解\n1. 对树1 做 BFS/DFS 二分染色\n\n任意定根（通常选 0），对整棵树1 做 BFS，生成一个 col1[0..n-1]，其中 col1[u] = 深度(u)%2。同时统计 cnt1_0、cnt1_1（即染色后两个集合大小）。\n\n2. 对树2 做同样的 BFS/DFS 二分染色\n\n任选根（如 0），对树2 做 BFS，得到 col2[0..m-1]，统计 cnt2_0、cnt2_1。\n\n3. 令 best2 = max(cnt2_0, cnt2_1)，这是树2 在“连边后能给 i 捐献的最大“偶数距离”节点数”。\n4. 对树1 的每个 i ：\nif col1[i] == 0:    answer[i] = cnt1_0 + best2else:    answer[i] = cnt1_1 + best2\n代码实现\nfrom collections import dequefrom typing import Listclass Solution:    def maxTargetNodes(self, edges1: List[List[int]], edges2: List[List[int]]) -&gt; List[int]:        # 树1 的节点数 n = len(edges1) + 1        n = len(edges1) + 1        # 树2 的节点数 m = len(edges2) + 1        m = len(edges2) + 1        # —— 步骤 1：对树1 做二分染色 ——         adj1 = [[] for _ in range(n)]        for u, v in edges1:            adj1[u].append(v)            adj1[v].append(u)        col1 = [-1] * n   # col1[i] = 0 or 1 ，表示 i 的深度 % 2        cnt1_0 = 0        cnt1_1 = 0        # BFS 从节点 0 开始        queue = deque([0])        col1[0] = 0        cnt1_0 += 1        while queue:            u = queue.popleft()            for w in adj1[u]:                if col1[w] == -1:                    col1[w] = col1[u] ^ 1                    if col1[w] == 0:                        cnt1_0 += 1                    else:                        cnt1_1 += 1                    queue.append(w)        # —— 步骤 1 完成 ——         # —— 步骤 2：对树2 做二分染色 ——         adj2 = [[] for _ in range(m)]        for u, v in edges2:            adj2[u].append(v)            adj2[v].append(u)        col2 = [-1] * m        cnt2_0 = 0        cnt2_1 = 0        queue = deque([0])        col2[0] = 0        cnt2_0 += 1        while queue:            u = queue.popleft()            for w in adj2[u]:                if col2[w] == -1:                    col2[w] = col2[u] ^ 1                    if col2[w] == 0:                        cnt2_0 += 1                    else:                        cnt2_1 += 1                    queue.append(w)        # —— 步骤 2 完成 ——         # —— 步骤 3：计算树2 可以贡献的最大“偶数距离”节点数 ——         best2 = max(cnt2_0, cnt2_1)        # —— 步骤 4：对树1 每个 i，直接加上 best2 ——         answer = [0] * n        for i in range(n):            if col1[i] == 0:                # 在树1 内，距离 i 为偶数的节点数就是 cnt1_0                answer[i] = cnt1_0 + best2            else:                # col1[i] == 1 时，树1 内偶数距离节点数是 cnt1_1                answer[i] = cnt1_1 + best2        return answer\n","categories":["算法"],"tags":["Algorithm","困难","贪心","图算法","BFS"]},{"title":"LeetCode每日一题2025-05-31","url":"/post/snakes-and-ladders.html","content":"909. 蛇梯棋 M\n给你一个大小为 n x n 的整数矩阵 board ，方格按从 1 到 n² 编号，编号遵循 转行交替方式 ，从左下角开始 （即，从 board[n - 1][0] 开始）的每一行改变方向。\n你一开始位于棋盘上的方格  1。每一回合，玩家需要从当前方格 curr 开始出发，按下述要求前进：\n\n选定目标方格next，目标方格的编号在范围 [curr + 1, min(curr + 6, n²)]。\n\n该选择模拟了掷 六面体骰子 的情景，无论棋盘大小如何，玩家最多只能有 6 个目的地。\n\n\n传送玩家：如果目标方格 next 处存在蛇或梯子，那么玩家会传送到蛇或梯子的目的地。否则，玩家传送到目标方格 next 。\n当玩家到达编号 n² 的方格时，游戏结束。\n\n如果 board[r][c] != -1 ，位于 r 行 c 列的棋盘格中可能存在 “蛇” 或 “梯子”。那个蛇或梯子的目的地将会是 board[r][c]。编号为 1 和 n² 的方格不是任何蛇或梯子的起点。\n注意，玩家在每次掷骰的前进过程中最多只能爬过蛇或梯子一次：就算目的地是另一条蛇或梯子的起点，玩家也 不能 继续移动。\n\n举个例子，假设棋盘是 [[-1,4],[-1,3]] ，第一次移动，玩家的目标方格是 2 。那么这个玩家将会顺着梯子到达方格 3 ，但 不能 顺着方格 3 上的梯子前往方格 4 。（简单来说，类似飞行棋，玩家掷出骰子点数后移动对应格数，遇到单向的路径（即梯子或蛇）可以直接跳到路径的终点，但如果多个路径首尾相连，也不能连续跳多个路径）\n\n返回达到编号为 n² 的方格所需的最少掷骰次数，如果不可能，则返回 -1。\n示例 1：\n\n\n输入：board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]\n输出：4\n解释：\n首先，从方格 1 [第 5 行，第 0 列] 开始。\n先决定移动到方格 2 ，并必须爬过梯子移动到到方格 15 。\n然后决定移动到方格 17 [第 3 行，第 4 列]，必须爬过蛇到方格 13 。\n接着决定移动到方格 14 ，且必须通过梯子移动到方格 35 。\n最后决定移动到方格 36 , 游戏结束。\n可以证明需要至少 4 次移动才能到达最后一个方格，所以答案是 4 。\n\n示例 2：\n\n输入：board = [[-1,-1],[-1,3]]\n输出：1\n\n提示：\n\nn == board.length == board[i].length\n2 &lt;= n &lt;= 20\nboard[i][j] 的值是 -1 或在范围 [1, n²] 内\n编号为 1 和 n² 的方格上没有蛇或梯子\n\n问题分析\n给定一个大小为 n×nn \\times nn×n 的棋盘 board，格子按照从 111 到 n2n^2n2 编号，编号从左下角开始，每行方向交替（见下图示意）。玩家从编号为 111 的格子开始，每次可以掷骰子向前移动 111 到 666 步，到达编号为 sss 的格子后，如果 board 上对应的值不为 −1-1−1，则会被传送到 board 上给定的目的地。目标是最少掷骰子次数到达编号为 n2n^2n2 的格子，如果无法到达则返回 −1-1−1。\n问题可以抽象为一个状态空间图：\n\n每个编号 sss（1≤s≤n21 \\le s \\le n^21≤s≤n2）表示一个节点。\n从节点 sss 可以向前连边到节点 ttt，其中 t∈[s+1, min⁡(s+6, n2)]t \\in [s+1,\\, \\min(s+6,\\,n^2)]t∈[s+1,min(s+6,n2)]，但是如果节点 ttt 上有蛇或梯子（即 board[r][c] != -1），那么实际到达的节点是 dest=board[r][c]\\text{dest} = \\text{board}[r][c]dest=board[r][c]。\n注意：一次掷骰子只能使用一次蛇/梯子，即从 s→ts \\to ts→t，若 ttt 有传送，直接跳转到目标即可，不可再继续在目标处再次触发。\n\n这样，问题就转化为在该有向图上搜索从节点 111 到节点 n2n^2n2 的最短路径长度（每条边表示一次掷骰子）。由于所有边权相同，适合使用广度优先搜索（BFS）。\n关键子问题是：如何根据编号 sss 快速计算其在二维 board 中的行列 (r,c)(r,c)(r,c) 坐标？编号规则如下：\n\n令零基编号：k=s−1k = s - 1k=s−1，则quot=⌊kn⌋,rem=k mod n.\\text{quot} = \\left\\lfloor \\frac{k}{n} \\right\\rfloor,\\quad \\text{rem} = k \\bmod n.\nquot=⌊nk​⌋,rem=kmodn.\n\n实际第 sss 对应的行索引为r=n−1−quot.r = n - 1 - \\text{quot}.\nr=n−1−quot.\n\n对应列索引 ccc 依赖于该行的行号交替方向。因为编号从左往右是第 n−1n-1n−1 行（零基），下一行要从右往左编号，交替进行。可判断：\n\n若 quot\\text{quot}quot 为偶数，则这一行编号从左往右，对应列索引 c=remc = \\text{rem}c=rem。\n若 quot\\text{quot}quot 为奇数，则这一行编号从右往左，对应列索引 c=n−1−remc = n - 1 - \\text{rem}c=n−1−rem。\n\n\n\n综上，对每个编号 sss，可以 O(1)O(1)O(1) 映射到 (r,c)(r,c)(r,c)。\n算法思路\n\n\n初始化\n\n记棋盘大小为 nnn，目标编号为 N=n2N = n^2N=n2。\n使用布尔数组 visited[1..N] 标记编号是否已被访问，初始都为 false。\n使用队列 queue 存放 BFS 中的当前状态：(编号, 当前掷骰次数)，初始将 (1,\\,0) 入队，visited[1]=true。\n\n\n\nBFS 遍历\n当队列非空时，取出队首状态 (s, d)(s,\\,d)(s,d)，表示当前在编号 sss，已经用了 ddd 次掷骰。\n\n若 s==Ns == Ns==N，说明到达终点，返回 ddd。\n否则，枚举下一步掷骰可能到达的编号 ttt，其中t∈[ s+1,  min⁡(s+6, N) ].t \\in [\\,s+1,\\;\\min(s+6,\\,N)\\,].\nt∈[s+1,min(s+6,N)].\n对于每一个候选编号 ttt，先从编号 ttt 计算其在 board 上的坐标 (r,c)(r,c)(r,c)，若 board[r][c] != -1，则实际到达编号为 dest=board[r][c]\\text{dest} = \\text{board}[r][c]dest=board[r][c]；否则 dest=t\\text{dest} = tdest=t。\n若 dest\\text{dest}dest 未被访问过，则将 (dest, d+1)(\\text{dest},\\,d+1)(dest,d+1) 入队，标记 visited[dest] = true。\n\n\n\n结束条件\n\n如果 BFS 结束后仍未到达编号 NNN，返回 −1-1−1。\n\n\n\n由于 BFS 保证第一次访问到编号 NNN 时，所用掷骰次数即为最少次数。\n时间复杂度\n\n总节点数为 N=n2N = n^2N=n2；每个节点出队时最多扩展 666 条边（最多向前掷骰 6 种结果）。\n因此最坏情况下会访问所有节点，每个节点处理常数次数的边，对应时间复杂度为O(N×6)=O(n2).O\\bigl(N \\times 6\\bigr)=O(n^2).\nO(N×6)=O(n2).\n\n额外的映射编号到 (r,c)(r,c)(r,c) 坐标、检查 visited 等操作均为 O(1)O(1)O(1)。\n综上，算法总体时间复杂度为 O(n2)O(n^2)O(n2) .\n空间复杂度主要来自 visited 长度为 n2n^2n2，以及队列大小最多也为 O(n2)O(n^2)O(n2)，所以空间复杂度为 O(n2)O(n^2)O(n2) .\n\n代码分解\n\n\n函数 num_to_pos(s: int, n: int) -&gt; Tuple[int,int]\n\n输入：编号 sss（1≤s≤n21 \\le s \\le n^21≤s≤n2）以及棋盘维度 nnn。\n输出：对应的二维坐标 (r,c)(r,c)(r,c)。\n实现思路：参照“问题分析”中的编号映射公式。\n\n\n\n主函数 snakesAndLadders(self, board: List[List[int]]) -&gt; int:\n\n读取 n=len(board)n = \\text{len}(board)n=len(board)，计算 N=n2N = n^2N=n2。\n初始化 visited = [False] * (N+1)。\n初始化双端队列 queue = collections.deque()，并将 (1,0) 入队，visited[1]=True。\n当 queue 非空时：\n\n弹出 (s, d)。\n若 s==Ns == Ns==N，返回 ddd。\n否则，枚举 ttt 从 s+1s+1s+1 到 min⁡(s+6, N)\\min(s+6,\\,N)min(s+6,N)：\n\n先通过 num_to_pos(t, n) 得到 (r,c)(r,c)(r,c)；\n查看 board[r][c]，若不为 −1-1−1，dest = board[r][c]；否则 dest = t。\n若 not visited[dest]，标记并入队 (dest, d+1)。\n\n\n\n\n若遍历结束未返回，则返回 -1。\n\n\n\n公式说明\n\n设 sss 的零基编号为 k=s−1k = s - 1k=s−1，行商 quot = \\lfloor k / n \\rfloor，余数 rem = k \\bmod n。\n行索引 r=n−1−quotr = n - 1 - \\text{quot}r=n−1−quot .\n若 quot 为偶数，列索引 c=rem;c = \\text{rem};c=rem;$ 否则 $$c = n - 1 - \\text{rem}$ .\n\n\n\n代码实现\nimport collectionsfrom typing import List, Tupleclass Solution:    def snakesAndLadders(self, board: List[List[int]]) -&gt; int:        &quot;&quot;&quot;        使用 BFS 寻找最少掷骰次数从编号 1 到编号 n^2 的路径长度。        &quot;&quot;&quot;        n = len(board)        N = n * n        def num_to_pos(s: int) -&gt; Tuple[int, int]:            &quot;&quot;&quot;            将编号 s (1 &lt;= s &lt;= n^2) 映射到 board 上的 (r, c) 坐标。            行交替方向编号：从左下（编号 1）开始，每行方向交替。            &quot;&quot;&quot;            k = s - 1            quot, rem = divmod(k, n)            r = n - 1 - quot            # 如果 quot 为偶数，该行从左向右编号；否则，从右向左编号            if quot % 2 == 0:                c = rem            else:                c = n - 1 - rem            return r, c        # visited[s] 标记编号 s 是否被访问过        visited = [False] * (N + 1)        queue = collections.deque()        # 从编号 1 开始，掷骰次数为 0        queue.append((1, 0))        visited[1] = True        while queue:            s, d = queue.popleft()            # 如果到达目标编号，返回当前掷骰次数            if s == N:                return d            # 枚举下一步掷骰可能到达的编号 t            for t in range(s + 1, min(s + 6, N) + 1):                r, c = num_to_pos(t)                # 如果 board[r][c] != -1，则存在蛇或梯子，跳转到目标编号                dest = board[r][c] if board[r][c] != -1 else t                if not visited[dest]:                    visited[dest] = True                    queue.append((dest, d + 1))        # 如果 BFS 结束都未能到达 N，则返回 -1        return -1","categories":["算法"],"tags":["Algorithm","中等","图算法","最短路径","BFS","状态建模"]},{"title":"LightGBM内容补充","url":"/post/LightGBM.html","content":"LightGBM内容补充\n1. LightGBM (Light Gradient Boosting Machine)\nLightGBM (Light Gradient Boosting Machine) 是微软亚洲研究院开发的一个开源梯度提升框架。它设计的目标是提供一个快速、分布式、高性能的梯度提升框架，特别适用于处理大规模数据。LightGBM 在许多方面对传统的 GBDT（包括 XGBoost）进行了优化，使其在训练速度和内存消耗上具有显著优势。\n\n核心思想: 与 XGBoost 类似，LightGBM 也基于梯度提升框架，通过迭代地添加决策树来优化目标函数。其主要创新在于引入了一系列高效的算法来加速训练过程和降低内存消耗，同时保持较高的精度。\n与 XGBoost 的主要区别和改进 (重点内容):\n\n决策树生长策略 (Tree Growth Strategy): XGBoost 默认采用按层生长 (Level-wise / Depth-wise) 策略，而 LightGBM 默认采用按叶生长 (Leaf-wise / Best-first) 策略。Leaf-wise 可以在找到最佳分裂点后，在当前层或更深层生长，可能生成不对称的树，但通常能更快地降低损失函数，达到更高的精度，代价是可能更容易过拟合。\n分裂点查找算法 (Split Finding Algorithm): LightGBM 使用基于直方图 (Histogram-based) 的决策树算法，而不是 XGBoost 默认的精确贪婪算法。直方图算法将连续特征离散化到多个桶中，然后基于桶的离散值寻找分裂点。这大大减少了计算量和内存消耗。\n特征采样 (Feature Sampling): LightGBM 提出了 Exclusive Feature Bundling (EFB) 算法，用于处理高维稀疏特征。EFB 可以将一些互斥（或很少同时出现）的特征捆绑成一个，减少特征数量。\n样本采样 (Sample Sampling): LightGBM 提出了 Gradient-based One-Side Sampling (GOSS) 算法，用于处理样本。GOSS 会保留所有梯度较大的样本（错误分类的样本），并随机采样部分梯度较小的样本，以此减少样本数量，加速训练，同时保持模型的准确性。\n对类别特征的处理 (Categorical Feature Handling): LightGBM 对类别特征有内置优化，可以直接处理类别特征，无需进行 One-Hot 编码，这对于具有大量类别特征的数据集非常有效。\n并行化优化 (Parallelism): LightGBM 在数据并行、特征并行和模型并行方面都进行了优化，特别是在特征并行和数据并行方面，其直方图算法带来了额外的效率提升。\n\n\n\n1.1 LightGBM 的核心算法\nLightGBM 引入了两个主要的创新算法来提高效率：GOSS 和 EFB。\n1.1.1 Gradient-based One-Side Sampling (GOSS)\n\n问题: GBDT 在训练时，每个样本的权重或重要性是不同的，梯度大的样本对模型训练的贡献更大（因为它们是当前模型未很好预测的样本）。如果简单地随机下采样，可能会丢失一些重要样本的信息。\n思想: GOSS 算法保留所有梯度较大的样本（&quot;大梯度&quot;样本），并对梯度较小的样本（&quot;小梯度&quot;样本）进行随机采样。为了补偿小梯度样本被采样丢弃的信息，它会将采样到的小梯度样本乘以一个常数因子进行放大。\n步骤:\n\n根据样本的梯度大小将样本排序。\n选择 Top a×100%a \\times 100\\%a×100% 的样本作为大梯度样本 (aaa 是一个超参数，如 top_rate)。\n从剩下 (1−a)×100%(1-a) \\times 100\\%(1−a)×100% 的小梯度样本中，随机采样 b×100%b \\times 100\\%b×100% 的样本作为采样到的小梯度样本 (bbb 是一个超参数，如 other_rate)。\n在计算增益时，对于采样到的小梯度样本，将其梯度乘以一个缩放因子 1−ab\\frac{1-a}{b}b1−a​。大梯度样本的梯度保持不变。\n\n\n效果: 在减少样本数量的同时，保留了更多重要的信息，从而在保证精度的情况下加速训练。\n\n1.1.2 Exclusive Feature Bundling (EFB)\n\n问题: 在高维稀疏数据集中，许多特征是稀疏的，并且许多特征在同一行样本中是互斥的（例如，One-Hot 编码后的特征，不同类别的 One-Hot 特征在同一行只有一个是 1）。基于直方图的算法仍然需要遍历每个特征来构建直方图。\n思想: EFB 算法可以识别出那些互斥的特征集合，并将它们捆绑 (Bundle) 成一个单一的特征。通过捆绑，减少了特征数量，从而降低了构建直方图和计算增益的计算复杂度。\n机制: 通过构建特征之间的关系图（非零值是否同时出现）或使用贪婪算法，将互斥特征或冲突很少（冲突在可接受范围内，通过参数控制）的特征合并。\n效果: 显著减少了特征数量，特别适用于 One-Hot 编码或具有大量稀疏特征的数据集，提高了训练速度。\n\n1.2 基于直方图的树分裂 (Histogram-based Tree Splitting)\n\n思想: LightGBM 不像精确贪婪算法那样遍历所有可能的连续分裂点，而是将连续特征离散化到固定的 kkk 个桶中。在分裂时，只考虑这 kkk 个桶边界作为分裂点。\n过程:\n\n训练前，对每个特征，构建一个具有 kkk 个桶的直方图。每个桶存储落入该范围内的样本的一阶和二阶梯度和。\n在树节点分裂时，遍历特征，不再需要对样本排序。而是直接遍历这 kkk 个桶，计算每个桶边界作为分裂点的增益。\n选择最佳桶边界作为分裂点。\n\n\n优点:\n\n计算效率: 构建直方图的复杂度是 O(data×features)O(\\text{data} \\times \\text{features})O(data×features)，寻找最佳分裂点的复杂度是 O(k×features)O(k \\times \\text{features})O(k×features)。远小于精确算法的 O(datalog⁡data)O(\\text{data} \\log \\text{data})O(datalogdata) 或 O(data×features)O(\\text{data} \\times \\text{features})O(data×features)。\n内存消耗: 只需存储直方图而不是所有样本的排序特征值。\n\n\n缺点: 是一种近似算法，找到的分裂点不是最优的，可能损失微小精度（在实际应用中通常可以忽略）。\n\n1.3 按叶生长策略 (Leaf-wise / Best-first Tree Growth)\n\n对比:\n\nLevel-wise (XGBoost 默认): 每次分裂扩展同一层的所有叶子节点。树结构是对称的，易于并行化。\nLeaf-wise (LightGBM 默认): 每次分裂只选择当前具有最大分裂增益的叶子节点进行分裂。\n\n\n优点:\n\n在分裂次数相同的情况下，Leaf-wise 可以比 Level-wise 降低更多的损失，因为它总是优先分裂那些最具“增益潜力”的节点。这通常意味着可以用更少的迭代次数或分裂次数达到目标精度。\n\n\n缺点:\n\n可能生成不对称的树结构，在同一层深度上的节点数差异较大。\n由于每次只扩展一个叶子，如果不对最大深度进行限制 (max_depth 参数)，Leaf-wise 可能会生成很深的树，导致过拟合。因此，在使用 Leaf-wise 时，通常需要配合限制最大深度或叶子节点数 (num_leaves) 来控制模型复杂度。\n\n\n\n1.4 LightGBM 的目标函数\nLightGBM 基于 GBDT 框架，其目标函数与 XGBoost 非常相似，也是在每一步迭代中找到一棵树 ht(x)h_t(x)ht​(x) 来优化损失函数和正则化项。使用二阶泰勒展开近似损失函数后，其目标函数形式与 XGBoost 基本一致：\nObj(t)≈∑i=1n[giht(xi)+12hiht(xi)2]+Ω(ht)\\text{Obj}^{(t)} \\approx \\sum_{i=1}^n \\left[ g_i h_t(x_i) + \\frac{1}{2} h_i h_t(x_i)^2 \\right] + \\Omega(h_t)\nObj(t)≈i=1∑n​[gi​ht​(xi​)+21​hi​ht​(xi​)2]+Ω(ht​)\n其中 gig_igi​ 和 hih_ihi​ 是一阶和二阶导数，Ω(ht)\\Omega(h_t)Ω(ht​) 是正则化项（形式与 XGBoost 类似）。\n主要的区别在于，在基于直方图的分裂过程中，这些 gig_igi​ 和 hih_ihi​ 会被累加到对应的桶中，分裂增益的计算也基于这些桶的统计信息。\n1.5 LightGBM 参数解释 (部分关键参数)\nLightGBM 的参数也很多，许多参数与 XGBoost 含义类似，但也有一些独特参数或常用值范围不同。\n\n\n\n参数/属性\n描述\n默认值\n类型/选项\n重要性级别\n与XGBoost对比\n\n\n\n\nobjective\n定义学习任务及损失函数。类似 XGBoost。\n'regression'\nstring\n高\n类似\n\n\nmetric\n评估指标。类似 XGBoost 的 eval_metric。\n根据 objective\nstring or list of strings\n高 (用于评估)\n类似\n\n\nboosting_type\nBoosting 类型。'gbdt' (标准梯度提升)，'dart' (Dropout)，'goss' (Gradient-based One-Side Sampling)。重要！ 控制是否使用 GOSS。\n'gbdt'\n'gbdt', 'dart', 'goss'\n高\nXGBoost 无此直接控制 GOSS 的参数\n\n\nnum_leaves\n每棵树的最大叶子节点数。 这是控制树模型复杂度的主要参数，优先于 max_depth。 Leaf-wise 策略下，节点数越多，树越复杂。通常设置为 2k2^k2k (其中 kkk 是期望的深度)。常见值在 32-128 之间。\n31\nint\n高\nLightGBM Leaf-wise 策略下的关键参数，XGBoost 主要是 max_depth\n\n\nmax_depth\n树的最大深度。在 Leaf-wise 模式下，这不是严格的限制，但可以用来防止树长得太深过拟合。 -1 表示无限制。在 Level-wise 模式下，与 XGBoost 含义相同。\n-1\nint\n高 (防过拟合)\nLightGBM 优先 num_leaves，XGBoost 优先 max_depth\n\n\nlearning_rate\n学习率 (Learning Rate)。 等同于 XGBoost 的 eta。缩放每棵树的贡献。\n0.1\nfloat\n高\n类似\n\n\nn_estimators\nBoosting 迭代次数，即树的数量。\n100\nint\n高\n类似\n\n\nsubsample\n训练每棵树时，随机采样的训练样本比例 (行采样)。与 XGBoost 含义相同。\n1.0\nfloat\n中\n类似\n\n\ncolsample_bytree\n训练每棵树时，随机采样的特征比例 (列采样)。与 XGBoost 含义相同。\n1.0\nfloat\n中\n类似\n\n\nmin_child_samples\n子节点中所需的最小样本数。 类似于 XGBoost 的 min_child_weight，但基于样本数量。值越大，模型越保守。\n20\nint\n高\n类似于 XGBoost 的 min_child_weight 但更直接基于样本数\n\n\nmin_child_weight\n子节点中所需的最小样本权重和。与 XGBoost 含义类似。\n0.001\nfloat\n中\n类似\n\n\ngamma (min_split_gain)\n在节点分裂时，只有分裂后损失函数的减少量（增益）大于等于 min_split_gain 时，才会进行分裂。 与 XGBoost 的 gamma 含义相同。\n0.0\nfloat\n高\n类似\n\n\nreg_alpha\nL1 正则化系数。与 XGBoost 含义相同。\n0.0\nfloat\n中\n类似\n\n\nreg_lambda\nL2 正则化系数。与 XGBoost 的 reg_lambda 含义相同。\n0.0\nfloat\n高\n类似\n\n\ncolsample_bynode\n在树的每个节点分裂时，随机采样的特征比例。与 XGBoost 含义相同。\n1.0\nfloat\n低\n类似\n\n\nsubsample_freq\n对 subsample 参数进行采样的频率。每隔 subsample_freq 次迭代执行一次 subsample。\n1\nint\n低\nXGBoost 无此参数\n\n\ntop_rate\n[GOSS 参数] GOSS 算法中保留的大梯度样本比例。\n0.1\nfloat\n高 (使用 GOSS时)\nLightGBM 独有 (GOSS)\n\n\nother_rate\n[GOSS 参数] GOSS 算法中随机采样的小梯度样本比例。\n0.07\nfloat\n高 (使用 GOSS时)\nLightGBM 独有 (GOSS)\n\n\nbin_construct_sample_cnt\n[直方图参数] 用于构建特征直方图的样本数。 通过采样部分样本来构建直方图可以加速，尤其在数据量巨大时。\n200000\nint\n实用\nXGBoost 无此参数\n\n\nnum_iterations\nBoosting 迭代次数。与 n_estimators 相同，但更推荐使用 n_estimators 以兼容 scikit-learn API。\n100\nint\n高\n类似\n\n\nn_jobs\n并行计算使用的CPU数量。-1 表示使用所有可用的处理器。\n-1\nint\n实用\n类似\n\n\nrandom_state\n随机种子。控制随机性，确保结果可复现。\nNone\nint\n实用\n类似\n\n\ncategorical_feature\n指定哪些特征是类别特征。可以是特征索引列表或特征名称列表。 'auto' 表示自动检测。 重要！ LightGBM 内置优化类别特征处理。\n'auto'\nlist of int, list of str, or 'auto'\n高 (处理类别特征时)\nXGBoost 需要手动处理 (如 One-Hot)\n\n\nearly_stopping_rounds\n[fit 方法参数] 早期停止轮数。 在 fit 方法中指定。如果在验证集上经过 early_stopping_rounds 轮迭代后，评估指标没有提升，训练就会停止。需要同时提供验证集和 metric。非常重要！\nN/A\nint\n高 (用于早期停止)\n类似\n\n\ncallbacks\n[fit 方法参数] 回调函数列表。 可以用来实现早停、日志记录等功能。EarlyStopping 回调函数提供了早期停止功能。\nNone\nlist of callback objects\n实用 (用于早期停止)\n类似\n\n\nfeature_importances_\n[属性] 特征重要性。 拟合后可用。LightGBM 默认是基于分裂次数 (split) 或增益 (gain)。\nN/A\narray\nN/A\n类似，但 LightGBM 默认是 split 或 gain，XGBoost 默认是 gain\n\n\n\n1.6 Scikit-learn API 示例 (LightGBM)\nLightGBM 也提供了与 scikit-learn 兼容的 API (LGBMClassifier 和 LGBMRegressor)。\n# 导入 LightGBM 的 Scikit-learn APIimport lightgbm as lgbfrom sklearn.model_selection import train_test_splitfrom sklearn.metrics import accuracy_score, classification_reportfrom sklearn.datasets import load_iris # 假设使用 Iris 数据集import pandas as pd # LightGBM 对 Pandas DataFrame 支持更好# 加载数据集iris = load_iris()X, y = iris.data, iris.targetfeature_names = iris.feature_namestarget_names = iris.target_names# 转换为 Pandas DataFrame (LightGBM 对 Pandas 支持很好)X_df = pd.DataFrame(X, columns=feature_names)y_series = pd.Series(y) # Target can also be a Series# 分割数据集X_train, X_test, y_train, y_test = train_test_split(X_df, y_series, test_size=0.3, random_state=42, stratify=y_series)print(&quot;\\n--- LightGBM Classifier 示例 ---&quot;)# 初始化 LightGBM 分类器# objective=&#x27;multiclass&#x27; 或 &#x27;softmax&#x27; 用于多分类# num_class=3 指定类别数量# metric=&#x27;multi_logloss&#x27; 是多分类常用的评估指标lgb_clf = lgb.LGBMClassifier(objective=&#x27;multiclass&#x27;,                             num_class=3, # 多分类时需要指定类别数量                             metric=&#x27;multi_logloss&#x27;, # 评估指标                             n_estimators=500, # 初始设置多一些树，配合 early stopping                             learning_rate=0.1,                             num_leaves=31, # 默认值，或根据 max_depth 设置                             max_depth=-1, # 无严格深度限制，主要靠 num_leaves 控制复杂度                             min_child_samples=20, # 最小叶子样本数                             subsample=0.8, # 行采样                             colsample_bytree=0.8, # 列采样                             reg_alpha=0.1, # L1 正则化                             reg_lambda=0.1, # L2 正则化                             n_jobs=-1, # 使用所有CPU                             random_state=42,                             boosting_type=&#x27;gbdt&#x27; # 或者 &#x27;goss&#x27; 使用GOSS                             # categorical_feature=&#x27;auto&#x27; # 自动检测类别特征，或指定索引列表                             )# 使用 Early Stopping 进行训练# 需要提供评估数据集和评估指标名称eval_set = [(X_test, y_test)]# early_stopping_rounds 参数直接在 fit 方法中使用lgb_clf.fit(X_train, y_train,            eval_set=eval_set,            eval_metric=&#x27;multi_logloss&#x27;, # 需要在fit方法中再次指定评估指标            callbacks=[lgb.early_stopping(stopping_rounds=10, verbose=True)] # 新版本推荐使用 callbacks            # early_stopping_rounds=10 # 旧版本用法            )# 预测y_pred_lgb = lgb_clf.predict(X_test)accuracy_lgb = accuracy_score(y_test, y_pred_lgb)print(f&quot;\\n准确率: &#123;accuracy_lgb:.4f&#125;&quot;)# print(&quot;分类报告:\\n&quot;, classification_report(y_test, y_pred_lgb, target_names=target_names))# 打印实际训练的树数量# 在 callbacks 中使用 early_stopping 时，可以通过 .best_iteration_ 获取if hasattr(lgb_clf, &#x27;booster_&#x27;):    print(f&quot;实际训练的树数量: &#123;lgb_clf.booster_.current_iteration()&#125;&quot;)elif hasattr(lgb_clf, &#x27;_best_iteration&#x27;):    print(f&quot;实际训练的树数量: &#123;lgb_clf._best_iteration + 1&#125;&quot;)else:     print(f&quot;实际训练的树数量: &#123;lgb_clf.n_estimators&#125;&quot;)# 打印特征重要性 (默认是 &#x27;split&#x27;)print(&quot;特征重要性 (LightGBM - Split):&quot;)for name, importance in zip(feature_names, lgb_clf.feature_importances_):     print(f&quot;  &#123;name&#125;: &#123;importance&#125;&quot;) # LightGBM split importances are integers# 也可以获取基于增益的特征重要性# print(&quot;\\n特征重要性 (LightGBM - Gain):&quot;)# feature_importances_gain = lgb_clf.booster_.feature_importance(importance_type=&#x27;gain&#x27;)# for name, importance in zip(feature_names, feature_importances_gain):#      print(f&quot;  &#123;name&#125;: &#123;importance:.4f&#125;&quot;)\n\n注意: LightGBM 的 early_stopping_rounds 参数在较新版本中被移除，推荐使用 callbacks 参数列表中的 lgb.early_stopping 函数。示例代码中展示了新版用法。\n\n1.7 LightGBM 的优点和缺点\n\n优点:\n\n速度快: 基于直方图的算法、GOSS、EFB 等技术使其训练速度通常比 XGBoost 快很多。\n内存消耗低: 基于直方图的算法和 EFB 显著减少了内存占用。\n支持大规模数据: 高效的算法和内存优化使其能够轻松处理大规模数据集。\n支持类别特征: 内置优化处理，无需 One-Hot 编码。\n更高的精度 (有时): Leaf-wise 策略可能在相同迭代次数下达到更高精度。\n\n\n缺点:\n\n可能容易过拟合: Leaf-wise 策略容易生成深而不平衡的树，需要小心调整 num_leaves 和 max_depth 参数。\n对稀疏数据处理不如 XGBoost: 虽然有 EFB，但对于某些特定的稀疏数据，其效果可能不如 XGBoost 内置的稀疏分裂处理机制。\n需要仔细调参: 虽然参数比 XGBoost 少一些，但核心参数如 num_leaves 和 GOSS/EFB 参数需要仔细调整。\n\n\n\n1.8 小结\nLightGBM 是一个面向大规模数据的高效梯度提升框架。它通过采用基于直方图的决策树算法、独特的按叶生长策略、GOSS（梯度单边采样）和 EFB（互斥特征捆绑）等技术，显著提升了训练速度和降低了内存消耗。这些创新使其成为处理大规模数据集和进行快速模型训练的有力工具。与 XGBoost 相比，LightGBM 在速度和内存方面通常有优势，尤其是在 Leaf-wise 策略和直方图算法的加持下。然而，其 Leaf-wise 策略也带来了更容易过拟合的风险，需要通过 num_leaves 等参数进行额外控制。内置的类别特征处理也是其一大亮点。\n","categories":["机器学习"],"tags":["python","决策树"]},{"title":"LeetCode每日一题2025-05-26","url":"/post/largest-color-value-in-a-directed-graph.html","content":"1857. 有向图中最大颜色值 H\n给你一个 有向图 ，它含有 n 个节点和 m 条边。节点编号从 0 到 n - 1 。\n给你一个字符串 colors ，其中 colors[i] 是小写英文字母，表示图中第 i 个节点的 颜色 （下标从 0 开始）。同时给你一个二维数组 edges ，其中 edges[j] = [aⱼ, bⱼ] 表示从节点 aⱼ 到节点 bⱼ 有一条 有向边 。\n图中一条有效 路径 是一个点序列 x₁ -&gt; x₂ -&gt; x₃ -&gt; ... -&gt; xₖ ，对于所有 1 &lt;= i &lt; k ，从 xᵢ 到 xᵢ₊₁ 在图中有一条有向边。路径的 颜色值 是路径中 出现次数最多 颜色的节点数目。\n请你返回给定图中有效路径里面的 最大颜色值 。如果图中含有环，请返回 -1 。\n示例 1：\n\n\n输入：colors = “abaca”, edges = [[0,1],[0,2],[2,3],[3,4]]\n输出：3\n解释：路径 0 -&gt; 2 -&gt; 3 -&gt; 4 含有 3 个颜色为 “a” 的节点（上图中的红色节点）。\n\n示例 2：\n\n\n输入：colors = “a”, edges = [[0,0]]\n输出：-1\n解释：从 0 到 0 有一个环。\n\n提示：\n\nn == colors.length\nm == edges.length\n1 &lt;= n &lt;= 10⁵\n0 &lt;= m &lt;= 10⁵\ncolors 只含有小写英文字母。\n0 &lt;= aⱼ, bⱼ &lt; n\n\n问题分析\n给定一个有向图，包含 nnn 个节点和 mmm 条边，节点编号从 000 到 n−1n - 1n−1。每个节点 iii 有一个小写英文字母颜色 colors[i]colors[i]colors[i]。定义一条有效路径为节点序列 x1→x2→⋯→xkx_1 \\to x_2 \\to \\dots \\to x_kx1​→x2​→⋯→xk​，要求对于所有 1≤i&lt;k1 \\le i &lt; k1≤i&lt;k，存在从 xix_ixi​ 到 xi+1x_{i+1}xi+1​ 的有向边。路径的“颜色值”是指在该路径中出现次数最多的颜色的节点数目。需要计算所有有效路径中最大的颜色值，如果图中含有环则返回 −1-1−1。\n\n环检测：如果图中存在环，就无法构造有效的拓扑排序，题目要求遇到环时直接返回 −1-1−1。\n最大颜色值：对于每一条有效路径，统计路径上每种颜色出现的次数，取出现次数最多的那种颜色。我们要在所有路径中找一个最大值。\n颜色种类有限：颜色均为小写字母，共计 26 种。因此可以为每个节点维护一个长度为 26 的数组，记录到达该节点的所有路径中，各颜色出现次数的最大值。\n\n需要解决的关键点：\n\n如何检测有向图中的环？\n如何高效地统计每个节点的“到达该节点时，各颜色出现次数的最大值”？\n计算完毕后，如何得到整个图中有效路径的最大颜色值？\n\n算法思路\n\n\n构建邻接表与入度数组\n\n用 adj[u] 存储节点 uuu 的所有出边目标节点。\n用 indegree[v] 记录节点 vvv 的入度。\n\n\n\n定义 DP 状态\n\n令 dp[v][c]dp[v][c]dp[v][c] 表示：在所有能够到达节点 vvv 的有效路径中，颜色编号为 ccc（000 对应 'a'$, …, $25$ 对应 ‘z’`）的最大出现次数。\n整体维护一个二维数组 dp，大小为 n×26n \\times 26n×26，初始全部置 000。\n\n\n\n拓扑排序+DP 传播（Kahn 算法）\n\n\n将所有 indegree[i] == 0 的节点入队，同时令其对应颜色索引处 dp[i][color_index(i)]=1dp[i][color\\_index(i)] = 1dp[i][color_index(i)]=1，因为空路径到达自己时，自己颜色出现次数至少为 111。\n\n\n维护 visited_count = 0，表示已经从队列中取出的节点数量；维护 answer = 0，表示当前全局最大的颜色值。\n\n\n循环直到队列为空：\n\n弹出队首节点 u，visited_count += 1；\n更新全局答案：answer=max⁡(answer, max⁡0≤c&lt;26dp[u][c]) .answer = \\max\\bigl(answer,\\ \\max_{0 \\le c &lt; 26} dp[u][c]\\bigr)\\,. \nanswer=max(answer, 0≤c&lt;26max​dp[u][c]).\n\n对于每条出边 (u→v)(u \\to v)(u→v)：\n\n颜色计数继承+合并for c in 0..25:    dp[v][c] = max(dp[v][c], dp[u][c])\n然后单独处理节点 v 本身的颜色：cidx_v = ord(colors[v]) - ord(&#x27;a&#x27;)dp[v][cidx_v] = max(dp[v][cidx_v], dp[u][cidx_v] + 1)\n\n将 indegree[v] -= 1，若变为 0，则 v 入队。\n\n\n\n\n\n结束后，如果 visited_count &lt; n，说明有环，返回 -1；否则返回 answer。\n\n\n为什么要用拓扑排序？\n只有在一个无环有向图（DAG）中，才能按拓扑顺序依次保证“任意一条边的前驱节点”先处理，才能正确地将前驱的 DP 结果传递到后继节点。\n\n\n如何检测环？\nKahn 算法的特性：如果存在环，则存在至少一个节点的入度永远无法被减为 0，最终队列出队的节点总数 visited_count 会小于 nnn。因此，只需检验 visited_count &lt; n 即可判断有环。\n\n\n为什么 DP 数组大小为 n×26n \\times 26n×26？\n题目要求路径的“颜色值”是路径中出现次数最多的那种颜色。颜色种类共 26 种，以字母映射到 0…250 \\ldots 250…25。为了对每个节点记录“到达该节点时，每种颜色的最大出现次数”，需要 26 维空间。\n\n\n复杂度分析\n\n构建邻接表与入度：O(m)O(m)O(m)。\n初始化 DP：将所有元素置 0 并对入度为 0 的节点赋初值，需 O(26×n)O(26 \\times n)O(26×n)。\n拓扑排序主循环：每个节点恰好出队一次，合计 nnn 次；对于每个节点 uuu，要遍历其所有出边，共计 mmm 条边。每条边需要将 uuu 的 26 维数组合并到 vvv，需要 O(26)O(26)O(26) 操作，总计 O(26×m)O(26 \\times m)O(26×m)。\n合并总计：O(26n+26m+n+m)  =  O((n+m)×26)  =  O(n+m) ,O\\bigl(26n + 26m + n + m\\bigr) \\;=\\; O\\bigl((n + m)\\times 26\\bigr)\\;=\\; O(n + m)\\,,\nO(26n+26m+n+m)=O((n+m)×26)=O(n+m),\n其中常数因子 26 可以视为常数。\n\n\n\n空间复杂度\n\n邻接表：O(n+m)O(n + m)O(n+m)\n入度数组：O(n)O(n)O(n)\nDP 数组：O(26n)O(26n)O(26n)\n队列：最坏 O(n)O(n)O(n)\n合计：O(n+m)O(n + m)O(n+m)\n\n\n\n\n\n注意：\n\nDP 更新顺序与方式\n\n\n在合并时，必须先将 dp[u][c]dp[u][c]dp[u][c] 与 dp[v][c]dp[v][c]dp[v][c] 逐维比较、取最大，然后单独把节点 v 自身的颜色对应的那一维加 111。若顺序颠倒或漏掉“+1”逻辑，会导致统计错误。\n\n\n环检测逻辑\n\n\n一定要统计拓扑排序中“实际出队”的节点数 visited_count。若 visited_count &lt; n，则必须返回 -1，切勿返回错误的 answer。\n\n\n数组越界或者字符映射错误\n\n\n颜色字符映射到 0…25 索引时，务必使用 ord(colors[i]) - ord('a')，且保证 colors 中只含小写字母。\n\n时间复杂度\n\n构建邻接表与入度：O(m)O(m)O(m)\n初始化 DP：O(26×n)O(26 \\times n)O(26×n)\n拓扑排序与 DP 传播：O(n)+O(m×26)=O(26m+n)O(n) + O\\bigl(m \\times 26\\bigr) = O(26m + n)O(n)+O(m×26)=O(26m+n)\n合并后：T(n,m)  =  O(26n+26m+n+m)  =  O((n+m)×26)  =  O(n+m) .T(n,m) \\;=\\; O\\bigl(26n + 26m + n + m\\bigr) \\;=\\; O\\bigl((n + m)\\times 26\\bigr) \\;=\\; O(n + m)\\,. \nT(n,m)=O(26n+26m+n+m)=O((n+m)×26)=O(n+m).\n\n空间复杂度：O(n+m+26n)=O(n+m)O(n + m + 26n) = O(n + m)O(n+m+26n)=O(n+m)。\n\n代码分解\n\n\n导入必要模块与类型声明\nfrom collections import dequefrom typing import List\n\n\ndeque 用于实现队列，支持 O(1)O(1)O(1) 的入队出队操作。\n\n\nList 用于类型注释。\n\n\n\n\nSolution 类与函数签名\nclass Solution:    def largestPathValue(self, colors: str, edges: List[List[int]]) -&gt; int:        # n: 节点数量        n = len(colors)\n\ncolors 是一个长度为 nnn 的字符串，edges 是长度为 mmm 的二维列表。\n\n\n\n构建邻接表与入度数组\nadj = [[] for _ in range(n)]indegree = [0] * nfor u, v in edges:    adj[u].append(v)    indegree[v] += 1\n\n\n用邻接表 adj[u] 存储所有从 uuu 出发的边。\n\n\nindegree[v] 在遍历边时累加，表示节点 vvv 的入度大小。\n\n\n\n\n初始化 DP 数组\ndp = [[0] * 26 for _ in range(n)]\n\n\ndp[v][c] 初始为 000。\n\n\n后续将在“入度为 0 的节点”处将其颜色对应维度设为 111。\n\n\n\n\n拓扑排序队列初始化\nq = deque()for i in range(n):    if indegree[i] == 0:        q.append(i)        cidx = ord(colors[i]) - ord(&#x27;a&#x27;)        dp[i][cidx] = 1\n\n所有入度为 000 的节点入队，且把它们自己本身的颜色出现次数记为 111。\n\n\n\n拓扑排序主循环与 DP 传播\nvisited_count = 0answer = 0   while q:    u = q.popleft()    visited_count += 1       # 更新全局最大颜色值    answer = max(answer, max(dp[u]))       for v in adj[u]:        # 逐维比较，取 u 的各颜色计数和 v 目前各颜色计数的最大值        for c in range(26):            if dp[u][c] &gt; dp[v][c]:                dp[v][c] = dp[u][c]           # 单独处理 v 节点自身的颜色 +1        cidx_v = ord(colors[v]) - ord(&#x27;a&#x27;)        dp[v][cidx_v] = max(dp[v][cidx_v], dp[u][cidx_v] + 1)           # 更新 v 的入度，若为 0，则入队        indegree[v] -= 1        if indegree[v] == 0:            q.append(v)\n\n\n每次取出节点 u，意味着可以“确定”它的 dp[u][*]。\n\n\n对于每条出边 (u -&gt; v)，先将 u 的 26 维向量与 v 对应维度取最大值，再对 v 本身的颜色那一维做 +1。\n\n\n减少 indegree[v]，若变为 0，将 v 放入队列。\n\n\n同时实时维护全局 answer，取 max(dp[u])。\n\n\n\n\n环检测与返回结果\n# 拓扑排序结束后，如果 visited_count &lt; n，则有环if visited_count &lt; n:    return -1   return answer\n\n\n代码实现\nfrom collections import deque, defaultdictfrom typing import Listclass Solution:    def largestPathValue(self, colors: str, edges: List[List[int]]) -&gt; int:        n = len(colors)        # --------------------------------------------        # 1. 构建邻接表 + 计算每个节点的入度        # --------------------------------------------        adj = [[] for _ in range(n)]        indegree = [0] * n        for u, v in edges:            adj[u].append(v)            indegree[v] += 1        # --------------------------------------------        # 2. 初始化 DP 数组        #    dp[v][c] 表示「到达节点 v 的所有有效路径中，颜色编号 c 出现的最大次数」。        #    颜色编号 c = ord(colors[v]) - ord(&#x27;a&#x27;)        # --------------------------------------------        # 注意：dp 初始化为全 0，大多数节点在被「拓扑入队」之前是 0。但是对于最初入度为 0 的节点 u，        #       它自己本身就出现了一次 colors[u]，所以需要让 dp[u][ color_index(u) ] = 1。        dp = [ [0]*26 for _ in range(n) ]        # --------------------------------------------        # 3. 拓扑排序（Kahn 算法）        # --------------------------------------------        q = deque()        # 先将所有 indegree == 0 的节点入队        for i in range(n):            if indegree[i] == 0:                q.append(i)                cidx = ord(colors[i]) - ord(&#x27;a&#x27;)                dp[i][cidx] = 1        visited_count = 0        answer = 0        while q:            u = q.popleft()            visited_count += 1            # 在「确认节点 u」时，就可以尝试更新全局 answer            # 因为 dp[u][*] 已经是「到达 u 的所有路径中，各颜色出现次数的最大值」            answer = max(answer, max(dp[u]))  # 更新全局最大            # 对 u 的每一条出边 (u -&gt; v)，将 u 的状态「传播」到 v            for v in adj[u]:                # 将 u 的颜色计数「分发」到 v                for c in range(26):                    # 先把 v 目前已有的 dp[v][c] 与来自 u 的 dp[u][c] 做比较，取较大者                    if dp[u][c] &gt; dp[v][c]:                        dp[v][c] = dp[u][c]                # 然后再专门处理 v 自身颜色：相当于加 1                cidx_v = ord(colors[v]) - ord(&#x27;a&#x27;)                # “+1”只计入 v 本身的颜色出现                dp[v][cidx_v] = max(dp[v][cidx_v], dp[u][cidx_v] + 1)                # v 的入度减 1，如果变成 0 则入队                indegree[v] -= 1                if indegree[v] == 0:                    q.append(v)            # 继续下一个拓扑节点        # end while        # --------------------------------------------        # 4. 检测是否有环：如果有环，则 visited_count &lt; n        # --------------------------------------------        if visited_count &lt; n:            # 说明有某些节点没被「取出」，即存在环            return -1        # 如果无环，answer 已经在遍历过程中维护过        return answer\n","categories":["算法"],"tags":["Algorithm","困难","动态规划","图算法","BFS","状态建模","DAG"]},{"title":"OSI和TCPIP","url":"/post/b66e59b1.html","content":"摘要：OSI模型的7层结构及对应功能，TCP/IP模型的分层结构和OSI模型的对比\n\n开放式系统互联模型（Open System Interconnection Model，缩写：OSI；简称为OSI模型）是一种概念模型，由国际标准化组织（ISO）提出，一个试图使各种计算机在世界范围内互连为网络的标准框架。定义于ISO/IEC 7498-1。\n该模型将通信系统中的数据流划分为七个层，从分布式应用程序数据的最高层表示到跨通信介质传输数据的物理实现。每个中间层为其上一层提供功能，其自身功能则由其下一层提供。功能的类别通过标准的通信协议在软件中实现。\n开放式系统互联模型的开发始于上世纪70年代后期，用以支持各种计算机联网方法的出现。在上世纪80年代，该模型成为国际标准化组织（ISO）开放系统互连小组的工作产品。-------------------------维基百科\n\n\nOSI七层参考模型有以下优点\n\n开放的标准化接口\n多厂商兼容性\n易于理解、学习和更新协议标准\n实现模块化工程，降低开发实现的复杂度\n便于故障排除\n\nOSI参考模型\n7    应用层：(数据名)应用层协议数据单元APDU（Application Protocol Data Unit）\n6    表示层：表示层协议数据单元PPDU（Presentation Protocol Data Unit）\n5    会话层：会话层协议数据单元SPDU（Session Protocol Data Unit）\n4    传输层：      段  Segment\n3    网络层：      数据包 Packet\n2    数据链路层：  帧 Frame\n1    物理层：      比特流 Bit\n物理层\n介质：同轴电缆，双绞线，光纤，串行电缆，电磁波等\n局域网接口线缆标准：10Base-T、100Base-Tx/Fx、1000Base-T、1000Base-Sx/Lx\n广域网接口线缆标准：RS-232(EIA/TIA-232)、V.24、V.35\n常见设备：中继器（局域网），集线器（局域网），调制解调器（广域网）\n数据链路层\n主要功能：①帧同步（编帧和识别帧）②数据链路的建立，维持和释放③传输资源控制④流量控制⑤差错控制⑥寻址⑦标识上层数据\nIEEE 802标准：\n\n802.1描述局域网需要解决的问题（802.1d描述生成树协议）\n802.2 LLC子层标准制定\n802.3 MAC子层标准制定（如解决总线型拓扑的半双工单点故障的技术CSMA/CD）\n802.4 令牌总线标准制定\n802.5 令牌环网标准制定\n802.11 无线局域网标准制定\n我国应用最广的LAN标准是基于IEEE802.3的以太网标准\n广域网数据链路层标准：HDLC（高级数据链路控制）、PPP（点到点协议）、X.25、帧中继协议等\n常见设备：交换机\n\n网络层\n主要功能：编址、路由选择、拥塞控制、异种网络互连\n主要协议：路由协议（RIP，OSPF，IS-IS，IGRP，EIGRP，BGP协议等）和可路由协议（IP，IPX协议等）\n\n面向连接的服务：适合可靠性要求高的应用。特点①通信前建立连接，通信完成后断开连接②有序传递③应答确认④差错重传\n无连接的服务：适合对延迟敏感的应用。特点①尽力而为的服务②无需建立连接③无序列号机制，无确认机制，无重传机制\n传输层\n主要功能：负责创建端到端的通信连接、差错校验和重传、流量控制。\n主要协议：TCP、UDP、SPX协议等。\n会话层\n利用传输层提供的端到端服务，向表示层或会话用户提供会话服务。\n表示层\n转换应用层的信息，对数据进行加密和压缩。\n应用层\n对软件提供接口，实现用户与应用程序交互。\n\nTCP/IP模型\n\nTCP/IP参考模型是一个抽象的分层模型，这个模型中，所有的TCP/IP系列网络协议都归类到4个抽象的“层”中。每一抽象层创建在低一层提供的服务上，并且为高一层提供服务。 完成一些特定的任务需要众多的协议协同工作，这些协议分布在参考模型的不同层中的，因此有时称它们为一个协议栈。 TCP/IP参考模型为TCP/IP协议栈订身制作。其中IP协议只关心如何使得数据能够跨越本地网络边界的问题，而不关心如何利用传输媒体，数据如何传输。整个TCP/IP协议栈则负责解决数据如何通过许许多多个点对点通路（一个点对点通路，也称为一“跳”, 1 hop）顺利传输，由此不同的网络成员能够在许多“跳”的基础上创建相互的数据通路。 如想分析更普遍的网络通信问题，ISO的OSI模型也能起更好的帮助作用。---------------------维基百科\nTCP/IP模型\n4 应用层：融合了会话层和表示层—主要协议：Telnet，FTP，TFTP，SMTP，SNMP，HTTP等\n3 传输层：提供端到端连接—主要协议：TCP，UDP\n2 网络层：使主机能正确将信息发送至任何网络的目标—主要协议：IP，ICMP，IGMP\n1 网络接口层：主要技术：以太网，FDDI，令牌环，SLIP，HDLC，PPP，X.25，帧中继，ATM\n其中传输层协议的主要作用：\n\n\n提供面向连接和无连接的服务\n维护连接状态\n对应用层数据进行分段和封装\n实现多路复用\n可靠的传输数据\n执行流量控制\n\n##OSI参考模型和TCP/IP模型对比##\n\n\n以上为个人的粗浅认识，如有不正确之处，还望大佬指正谢谢\n","categories":["旧日"],"tags":["网络模型","通信"]},{"title":"Linux基础","url":"/post/linuxba.html","content":"所需软件的安装和配置\n1.VMware和远程连接软件（FinalShell、Xshell等）的安装\nVMware软件安装简单，激活码查找也方便，FinalShell若不使用专业版内容也是直接安装即可。\n下面是FinalShell3.9.5.7及之前版本的高级/专业版激活码获取方式。\n打开FinalShell后点击激活，选择离线激活，随便输入账号密码，复制机器码，粘贴即可获取\n&lt;?php    if(!empty($_POST[&#x27;k&#x27;]))&#123;        if($_POST[&#x27;s&#x27;] == 1)&#123;            $a = &#x27;激活码为：&#x27;.strtolower(substr(md5(&#x27;2356&#x27;.$_POST[&#x27;k&#x27;].&#x27;13593&#x27;),8,16));        &#125;        if($_POST[&#x27;s&#x27;] == 0)&#123;            $a = &#x27;激活码为：&#x27;.strtolower(substr(md5(&#x27;61305&#x27;.$_POST[&#x27;k&#x27;].&#x27;8552&#x27;),8,16));        &#125;    &#125;?&gt;\nsubstr截取md5的一部分，从第八位开始往后面的16个字符，strtolower()将字符串全部转为小写\n&lt;form action=&quot;#&quot; method=&quot;post&quot;&gt;        &lt;input type=&quot;text&quot; name=&quot;k&quot; id=&quot;k&quot;&gt;        &lt;input type=&quot;radio&quot; name=&quot;s&quot; id=&quot;s&quot; value=&quot;1&quot;&gt;专业版        &lt;input type=&quot;radio&quot; name=&quot;s&quot; id=&quot;s&quot; value=&quot;0&quot;&gt;高级版        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;    &lt;/form&gt;\nphp文件内容应为\n&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;FinalShell激活码计算&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=&quot;#&quot; method=&quot;post&quot;&gt;    &lt;input type=&quot;text&quot; name=&quot;k&quot; id=&quot;k&quot;&gt;    &lt;input type=&quot;radio&quot; name=&quot;s&quot; id=&quot;s1&quot; value=&quot;1&quot;&gt;专业版    &lt;input type=&quot;radio&quot; name=&quot;s&quot; id=&quot;s2&quot; value=&quot;0&quot;&gt;高级版    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;&lt;?php    $a = &#x27;&#x27;;    if(!empty($_POST[&#x27;k&#x27;]))&#123;        if($_POST[&#x27;s&#x27;] == 1)&#123;            $a = &#x27;激活码为：&#x27;.strtolower(substr(md5(&#x27;2356&#x27;.$_POST[&#x27;k&#x27;].&#x27;13593&#x27;),8,16));        &#125;        if($_POST[&#x27;s&#x27;] == 0)&#123;            $a = &#x27;激活码为：&#x27;.strtolower(substr(md5(&#x27;61305&#x27;.$_POST[&#x27;k&#x27;].&#x27;8552&#x27;),8,16));        &#125;    &#125;    echo $a;?&gt;&lt;/body&gt;&lt;/html&gt;\nJava代码 附在线运行网站\nimport java.io.IOException;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;import java.util.Scanner;class Main&#123;    public static void main(String[] args) throws NoSuchAlgorithmException, IOException &#123;        System.out.print(&quot;请输入FinalShell的离线机器码：&quot;);        @SuppressWarnings(&quot;resource&quot;)        //Scanner reader = new Scanner(System.in);        String machineCode = &quot;aa@6a6c73491cbe6c6e&quot;; // 在此处放置机器码        generateKey(machineCode);    &#125;    public static void generateKey(String hardwareId) throws NoSuchAlgorithmException &#123;        String proKey = transform(61305 + hardwareId + 8552); //高级版        String pfKey = transform(2356 + hardwareId + 13593); //专业版        System.out.println(&quot;请将此行复制到离线激活中：&quot; + pfKey);    &#125;    public static String transform(String str) throws NoSuchAlgorithmException &#123;        @SuppressWarnings(&quot;unused&quot;)        String md5 = hashMD5(str);        return hashMD5(str).substring(8, 24);    &#125;    public static String hashMD5(String str) throws NoSuchAlgorithmException &#123;        MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);        byte[] hashed = digest.digest(str.getBytes());        StringBuilder sb = new StringBuilder();        for (byte b : hashed) &#123;            int len = b &amp; 0xFF;            if (len &lt; 16) &#123;                sb.append(&quot;0&quot;);            &#125;            sb.append(Integer.toHexString(len));        &#125;        return sb.toString();    &#125;&#125;\n虚拟网络配置\n安装好本地虚拟机后，需要对网络进行配置，使用vps可跳过这个步骤 课程中使用的是CentOS7的系统，不同版本的具体配置可能不尽相同。在虚拟机设置中，将虚拟机的网络模式设置为NAT模式。\n在终端界面输入ifconfig 查看ens33的ip地址，ip地址为192.168.88.100，然后打开虚拟网络编辑器，选中VMnet8更改配置\n\n\n子网IP更改为192.168.88.0，点击将主机虚拟适配器连接到此网络，点击NAT设置，将网关IP改为192.168.88.2，点击确定，保存。\n修改配置文件，IP地址192.168.88.100和网关地址192.168.88.2、DNS192.168.88.2\nvim /etc/sysconfig/network-scripts/ifcfg-ens33\n\n然后修改网络适配器\n\n删除/etc/sysconfig/network-scripts/ 下的以ifcfg开头除ifcfg-ens33和ifcfg-lo以外的文件（ifcfg-配置_1， ifcfg-ens33.bak），重启网络systemctl restart network 此时虚拟机应能正常访问网络。\n2.Linux命令\nLinux是树状存储结构，在一个根节点下存放了系统的不同文件夹，Windows是森林结构\n/bin：这个目录存放着最经常使用的命令,ls、cp、rm、chmod 等常用命令都在此目录\n/boot 系统启动目录，保存与系统启动相关的文件，如内核文件和启动引导程序；\n/dev 设备文件保存位置；\n/etc：存放在配置文件\n/home：用户的主目录\n/lib：存放程序所需的动态库和静态库文件；\n/root ：超级用户 home目录\n2.1.Linux基础命令\n2.1.1.linux命令的构成\nlinux指令=命令（做什么） +选项（怎么做） +参数（对谁做）\n​\t\t\t-command ：命令名 ：使用英文单词的缩写或者英文单词\n​\t\t\t-options：选项     ，可以对命令进行控制   但是 也可以省略\n​\t\t\t-parameter：给命令传参数， 可以是一个 ，也可以是多个或者零个\n在使用命令时，可以使用man 命令名查看使用说明\n./ ：代表当前目录\n…/：上一级目录\n使用这两种方式可实现绝对路径和相对路径访问文件\nctrl+r：历史记录中所搜命令（输入命令中的任意一个字符）；\nctrl+c：终止当前的命令\n2.1.2 ls命令\nls命令：展示linux系统中指定位置的目录信息   -F 查看目录中的文件\n-a ：查看所有文件，包括隐藏的文件，Linux下隐藏文件 隐藏目录 名称都是以.开头，图形界面下可以使用ctrl+h切换是否显示隐藏文件-l ：展示文件的详细信息，包括权限、归属、文件大小、创建修改时间、文件名称，linux内置了ll命令作为ls -l的别名ls -ld：显示目录和链接信息；-h ：人性化显示文件大小，赋予最恰当的单位 但是需要和 l一起使用  ls -R：递归显示子目录结构；ls [0-9] ：显示包含数字的文件名和目录名\n2.1.3 cd命令\ncd ../   返回上一级目录cd ../.. 返回上两级目录cd - 返回上一次操作的工作目录cd / 进入根目录cd ~ 返回家目录中   ~ 可以省略\n2.1.4 pwd命令\npwd命令：获取当前所在工作目录的绝对路径\n2.1.5 mkdir命令\nmkdir命令用来创建空目录的命令，我们可以在指定的路径下厨房间一个空目录\nmkdir 文件夹名字  ：在当前目录下创建一个文件夹mkdir -p 文件路径   指定路径下创建一个空目录，同时创建其父目录\n2.1.6 touch命令\ntouch命令可以创建一个新的文件，文件的拓展名随意，甚至可以是一个不存在的拓展名，当文件存在的时候，修改文件的创建时间\ntouch 可以一次性创建多个文件，但是这个文件路径必须正确\ntouch -t 0712250000 file1 修改一个文件或目录的时间戳 - (YYMMDDhhmm)touch * ：将当前下的文件时间修改为系统的当前时间touch –d 20040210 test：将test文件的日期改为20040210touch abc　：若abc文件存在，则修改为系统的当前时间；若不存在，则生成一个为当前时间的空文件\n2.1.7 rm命令\nrm 是删除文件的指令，可以删除文件 ，也可以删除文件夹\n-r  递归删除，删除文件夹的时候使用-f  强制删除 ，不进行询问rm  可以删除任意文件，路径可以是相对/绝对的\n2.1.8 mv命令\nmv是一个移动文件的指令，将文件从一个位置移动到另一个位置，在移动的过程中可以修改文件或者目录的名称，格式：mv 源文件路径（相对/绝对）   目标路径。移动文件或者目录时，目标路径必须存在，改名只需输入相同的路径不同的文件名即可，可同时改名并移动文件\nmv dir1 new_dir 重命名/移动 一个目录\n2.1.9 cp命令\ncp命令就是可以复制文件或者目录的命令，在复制的过程中，源文件不会被删除，复制完成后，文件可以修改名称，格式：cp 源文件路径  目标路径\ncp -r #复制目录时需要- rcp file1 file2 复制一个文件cp dir/* . 复制一个目录下的所有文件到当前工作目录cp -a /tmp/dir1 . 复制一个目录到当前工作目录cp -a dir1 dir2 复制一个目录\nmv和cp的使用方式基本一致，只有两个地方不一样：\n1：mv移动目录时不需要使用-r，cp需要使用-r\n2：cp不会删除源文件，而mv源文件会消失\n2.1.10 echo命令\n功能：输出内容\n语法：echo 参数\n\n参数：被输出的内容\n被两个反引号包围的内容，会作为命令执行，echo `pwd`，会输出当前工作目录\n\n2.1.11 重定向符\n功能：将符号左边的结果，输出到右边指定的文件中去\n\n&gt;，表示覆盖输出\n&gt;&gt;，表示追加输出\n\n2.2 进阶命令\n2.2.1 cat命令\n用于查看linux中小型的文本文件，cat 文件名\n因为他会一次行将所有的文件内容加载终端中，终端显示的数据有限，大的文件会显示不全，且消耗内存\n使用生产场景：   大数据框架的运行日志、大数据计算的运行日志\ncat file1 从第一个字节开始正向查看文件的内容tac file1 从最后一行开始反向查看一个文件的内容\n2.2.2 more命令\n用于查看linux中中型的文本文件\n使用more进行文件的查看可以按页，手动翻页或者回滚，更灵活。但是统一也消耗内存\n -回车   向下一行 -空格    向下一页 b   向上一页 q   退出查看 more file1 查看一个长文件的内容less file1 类似于 &#x27;more&#x27; 命令，但是它允许在文件中和正向操作一样的反向操作\ncat 和 more 都可用来查看文件内容。不同点在于：cat 指令查看完毕后会自动返回到正常模式而 more 指令则需要用户手动退出查看模式。cat 命令用于显示整个文件的内容，单独使用没有翻页功能。而 more 命令则可以分页显示文件内容，可以向前或向后翻页，可与cat配合使用。\n2.2.3 head，tail命令\nhead功能：查看文件头部内容\n语法：head [-n] 参数\n\n参数：被查看的文件\n选项：-n，查看的行数\n\ntail默认查看该文件的最新10行（如果这个文件发生变动，有新的内容添加到文件的尾部，tail命令会把新添加的内容展示出来，实时查看 ）\ntail -f 文件名head -2 file1 查看一个文件的前两行tail -2 file1 查看一个文件的最后两行\n2.2.4 ps命令\n查看当前活跃的进程\nps -ef 作用：查看当前所有的进程，查看PID和了解进程cpu资源占比情况\nUID：表示是哪个一个用户执行的PPID：进行的父进行标识号C：cpu使用资源的百分比Stime：进程开始执行的时间\n2.2.5 kill命令\n用于结束linux中的软件或者服务，格式： kill -9 进程编号\nkill -9 可以快速的杀死进程，但是不安全，因为我们的服务在运行的过程中，可能会需要保存或者某执行完某一个任务在关闭。所以不轻易使用，一般都是用于杀死闲置进程或者不响应的进行。\n2.2.6 ifconfig命令\n作用：用于查看服务器网络信息\n2.2.7 free命令\n作用：查看内存的使用情况\ntotal：表示总计的物理内存大小used：表示已经使用的多了free：表示还可以用多少shared：表示多个进行共享的内存总额buff：表示缓存的大小free -k：以kb为单位来显示内存（默认就是k）free -m：以m为单位来显示内存信息free -g ：以m为单位来显示内存信息free -h ：以用户适合的方式去显示内存free -t：显示linux全部的内存（total）free -s：表示每个N秒打印一次内存信息，直到使用crtl+c结束free -hs  5：生产使用场景：提交大数据计算任务后，动态的查看内存变化情况\n2.2.8 df命令\n作用：查看磁盘的使用情况\ndf -h：以用户方便的单位进行显示df-Th：显示文件系统的类型\n2.2.9 clear命令\n清除终端窗口的信息=crlt+l\n2.2.10 关机&amp;重启命令\n1：reboot命令重启计算机，reboot属于安全重启，不属于强制重启，可以放心的使用2：shutdown命令shutdown命令主要用于关机操作，关闭过程中，可以指定关机时间shutdown -h now 立即关机shutdown -h 1 一分钟后关机shutdown -h hours:minutes &amp; 按预定时间关闭系统shutdown -c 取消按预定时间关闭系统shutdown -r now 重启init 0    关闭系统telinit 0 关闭系统logout    注销\n2.2.11 which命令\n查看脚本或者终端命令文件所在位置\n一般情况下可以使用which命令找到终端指令的安装目录\n2.2.12 grep命令\ngrep就是根据一定的规则做全文检索，在文件中查询到满足规则的文本内容\ngrep是在文件中查询文本，指定的文件中查找特定的字符组合\n用法: grep [选项]…\n生产使用场景：从日志中找到错误信息，方便我们分析日志\n​\tgrep ERROR 文件名\n​\t警告：grep INFO 文件名\npgrep\n用于列举进程ID，下面两条命令是等效的\npgrep -u hchen2244122444ps -ef | egrep &#x27;^hchen&#x27; | awk &#x27;&#123;print $2&#125;&#x27;\n2.2.13 hostname命令\n查看主机名\n2.2.14 | 无名管道命令\n管道指令，是连接两个命令的指令，前一个命令的输出，就是下一个命令的输入\n查找文件：ls -l | grep 创建时间 |grep 文件名查找进程：ps -ef | grep 进程名 | grep 进程归属\n2.2.14.1 mkfifo 命名管道\n用法：mkfifo [选项] 文件名\n命名管道是一种特殊的文件类型，可以用于实现进程间通信（IPC，Inter-Process Communication），允许不同进程之间通过读写同一个文件来传递数据\n使用 mkfifo 命令创建的命名管道可以像普通文件一样被读取和写入。一个进程可以将数据写入命名管道，而另一个进程可以从同一个命名管道中读取这些数据，从而实现了进程间的通信。命名管道通常用于在不同的进程之间传递数据，例如在Shell脚本中用于管道操作、在不同的程序之间传递数据等\n命名管道在使用时需要注意同步和阻塞的问题，因为命名管道是基于文件系统的，读写操作可能会阻塞，导致进程在没有数据可读或可写时被阻塞。此外，命名管道在使用完毕后需要手动删除，可以使用 rm 命令删除对应的文件\n# mkfifo /tmp/aapipe           创建命名管道# ls -l /tmp输出 prw-rw-r-- 1 aa  aa  0 05-10 18:58 aapipe# ls -al &gt; /tmp/aapipe         在一个shell中运行此命令，命令不会返回，除非有人从这个有名管道中把信息读走# head /tmp/aapipe             在另一命令窗口读取管道中的信息，同时上一命令会返回输出 drwx------ 8 aa aa    4096 05-10 18:27 .    drwxr-xr-x 7 root  root     4096 03-05 00:06 ..    drwxr-xr-x 3 aa aa    4096 03-01 18:13 backup    -rw------- 1 aa aa     721 05-05 22:12 .bash_history    -rw-r--r-- 1 aa aa      24 02-28 22:20 .bash_logout    -rw-r--r-- 1 aa aa     176 02-28 22:20 .bash_profile    -rw-r--r-- 1 aa aa     124 02-28 22:20 .bashrc    -rw-r--r-- 1 root  root    14002 03-07 00:29 index.htm    -rw-r--r-- 1 aa aa   31465 03-01 23:48 index.php\n2.2.15 tar命令\ntar命令是进行打包，解包，压缩和解压的命令\n打包：将多个文件归档为一个文件，文件大小不会减少\n解包（拆包）：将一个包文件分拆多个实体的文件\n压缩：将文件按照一定的算法减少体积，但是文件的内容和信息不会发送改变\n解压缩：将一个压缩文件还原到正常的状态\n参数：c：打包选项x：解包选项z：压缩或者解压缩选项v：展示过程f：指定文件名一般情况tar -cxvf压缩 tar -zxvf解压\n其它压缩指令\nbunzip2 file1.bz2           解压一个叫做 &#x27;file1.bz2&#x27;的文件bzip2 file1                 压缩一个叫做 &#x27;file1&#x27; 的文件gunzip file1.gz             解压一个叫做 &#x27;file1.gz&#x27;的文件gzip file1                  压缩一个叫做 &#x27;file1&#x27;的文件gzip -9 file1               最大程度压缩rar a file1.rar test_file          创建一个叫做 &#x27;file1.rar&#x27; 的包rar a file1.rar file1 file2 dir1   同时压缩 &#x27;file1&#x27;, &#x27;file2&#x27; 以及目录 &#x27;dir1&#x27;rar x file1.rar     压缩rar包unrar x file1.rar   解压rar包tar -cvf archive.tar file1     创建一个非压缩的 tarballtar -tf archive.tar            显示一个包中的内容tar -xvf archive.tar           释放一个包tar -xvf archive.tar -C /tmp   将压缩包释放到 /tmp目录下tar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包tar -xvfj archive.tar.bz2      解压一个bzip2格式的压缩包tar -cvfz archive.tar.gz dir1  创建一个gzip格式的压缩包tar -xvfz archive.tar.gz       解压一个gzip格式的压缩包zip file1.zip file1            创建一个zip格式的压缩包zip -r file1.zip file1 file2 dir1   将几个文件和目录同时压缩成一个zip格式的压缩包unzip file1.zip                     解压一个zip格式压缩包\n2.2.16 useradd，groupadd命令\nuseradd 可以添加一个linux用户，/home目录会创建一个该用户的家目录\ngroupmod -n new_group_name old_group_name                              重命名一个用户组useradd -c &quot;Name Surname &quot; -g admin -d /home/user1 -s /bin/bash user1  创建一个属于 &quot;admin&quot; 用户组的用户\n2.2.17 userdel，groupdel命令\n删除用户同时会删除用户的家目录\nuserdel -r user1              删除一个用户 ( &#x27;-r&#x27; 排除主目录)usermod -c &quot;User FTP&quot; -g system -d /ftp/user1 -s /bin/nologin user1   修改用户属性newgrp group_name             登陆进一个新的群组以改变新创建文件的预设群组\n2.2.18 passwd命令\n格式：passwd 用户名 更改指定用户的密码，不可使用数字小键盘\npasswd user1               修改一个用户的密码 (只允许root执行)chage -E 2023-04-10 user1  设置用户密码的失效期限pwck                       检查 &#x27;/etc/passwd&#x27; 的文件格式和语法修正以及存在的用户grpck                      检查 &#x27;/etc/passwd&#x27; 的文件格式和语法修正以及存在的群组\n2.2.19 chmod，chown命令\ninux的文件权限\n\n\n\n\n\n权值\n\n\n\n\n读：r\nread\n4\n\n\n写：w\nwrite\n2\n\n\n执行： x\nexcuter\n1\n\n\n无权限：-\n\n0\n\n\n\nlinux文件归属\n属主：文件拥有者，一般是创建者 u   –user\n属组：文件拥有者所在的用户组   g    -group\n其他用户： 除了 属主和数组的其他用户 o -other\nls -l 可以查看文件的详细信息，包含文件权限其中d ：代表目录，-：普通文件\nchmod 777 文件名                #表示给当前用户，用户所在组，其他用户都给予全部权限chmod u+x,g+x,o+x 文件名        #增加权限，-则为删除权限chmod u=rwx, g=wx, o=r 文件名   #同时编辑多个权限chmod go-rwx directory1        删除群组(g)与其他人(o)对目录的读写执行权限chown [-R] [用户][:][用户组] 文件或文件夹chown -R user1 directory1      改变一个目录的所有人属性并同时改变改目录下所有文件的属性chgrp group1 file1             改变文件的群组chmod u+s /bin/file1       设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限chmod u-s /bin/file1       禁用一个二进制文件的 SUID位chmod g+s /home/public     设置一个目录的 SGID 位 - 类似SUID ，不过这是针对目录的chmod g-s /home/public     禁用一个目录的 SGID 位chmod o+t /home/public     设置一个文件的 STIKY 位 - 只允许合法所有人删除文件chmod o-t /home/public     禁用一个目录的 STIKY 位\n2.2.20 tree命令（需安装）\ntree    显示文件和目录由根目录开始的树形结构\nlstree 显示文件和目录由根目录开始的树形结构\n2.2.21 ln命令\n功能：在文件和目录之间建立链接\n格式：ln [参数] &lt;源文件或目录&gt; &lt;目标文件或目录&gt;\nln -s file1 lnk1 创建一个指向文件或目录的软链接ln file1 lnk1    创建一个指向文件或目录的物理链接\n2.2.22 chattr命令\nchattr +a file1    只允许以追加方式读写文件chattr +c file1    允许这个文件能被内核自动压缩/解压chattr +d file1    在进行文件系统备份时，dump程序将忽略这个文件chattr +i file1    设置成不可变的文件，不能被删除、修改、重命名或者链接chattr +s file1    允许一个文件被安全地删除chattr +S file1    一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘chattr +u file1    若文件被删除，系统会允许你在以后恢复这个被删除的文件lsattr             显示特殊的属性\n2.2.23 wc命令\n功能：统计\n语法：wc [-c -m -l -w] 文件路径\n\n选项，-c，统计bytes数量\n选项，-m，统计字符数量\n选项，-l，统计行数\n选项，-w，统计单词数量\n参数，文件路径，被统计的文件，可作为内容输入端口\n\n2.3 系统指令\n2.3.1 系统信息查看\nuname -m         显示机器的处理器架构uname -r         显示正在使用的内核版本hdparm -tT /dev/sda                在磁盘上执行测试性读取操作系统信息(SMBIOS / DMI) hdparm -i /dev/hda  罗列一个磁盘的架构特性hdparm -i /dev/hda   罗列一个磁盘的架构特性arch                 显示机器的处理器架构dmidecode -q         显示硬件系统部件 - (SMBIOS / DMI)cat /proc/cpuinfo    显示CPU info的信息cat /proc/interrupts 显示中断cat /proc/meminfo    校验内存使用cat /proc/swaps      显示哪些swap被使用cat /proc/version    显示内核的版本cat /proc/net/dev    显示网络适配器及统计cat /proc/mounts     显示已加载的文件系统lspci -tv            罗列 PCI 设备lsusb -tv            显示 USB 设备lsmod                查看加载的模块(驱动)date                 显示系统日期cal 2007             显示2007年的日历表date 041217002007.00 设置日期和时间 - 月日时分年.秒clock -w             将时间修改保存到 BIOSiconv -l             列出已知的编码\n2.3.2 文件查找\nfind / -name file1                          从 &#x27;/&#x27; 开始进入根文件系统搜索文件和目录find / -user user1                          搜索属于用户 &#x27;user1&#x27; 的文件和目录find /home/user1 -name \\.bin                在目录 &#x27;/ home/user1&#x27; 中搜索带有&#x27;.bin&#x27; 结尾的文件find /usr/bin -type f -atime +100           搜索在过去100天内未被使用过的执行文件find /usr/bin -type f -mtime -10            搜索在10天内被创建或者修改过的文件find / -name \\.rpm -exec chmod 755 &#x27;&#123;&#125;&#x27; \\;  搜索以 &#x27;.rpm&#x27; 结尾的文件并定义其权限find / -xdev -name \\.rpm                    搜索以 &#x27;.rpm&#x27; 结尾的文件，忽略光驱等可移动设备find / -perm -u+s                           罗列一个系统中所有使用了SUID控制的文件locate \\.ps                                 寻找以 &#x27;.ps&#x27; 结尾的文件 - 先运行 &#x27;updatedb&#x27; 命令whereis halt                                显示一个二进制文件、源码或man的位置which halt                                  显示一个二进制文件或可执行文件的完整路径\n2.3.3 文件系统挂载\nmount /dev/hda2 /mnt/hda2                挂载一个叫做hda2的盘 - 确定目录 &#x27;/ mnt/hda2&#x27; 已经存在umount /dev/hda2                         卸载一个叫做hda2的盘 - 先从挂载点 &#x27;/ mnt/hda2&#x27; 退出fuser -km /mnt/hda2                      当设备繁忙时强制卸载umount -n /mnt/hda2                      运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用mount /dev/fd0 /mnt/floppy               挂载一个软盘mount /dev/cdrom /mnt/cdrom              挂载一个cdrom或dvdrommount /dev/hdb /mnt/cdrecorder           挂载一个cdrw或dvdrommount -o loop file.iso /mnt/cdrom        挂载一个文件或ISO镜像文件mount -t vfat /dev/hda5 /mnt/hda5        挂载一个Windows FAT32文件系统mount /dev/sda1 /mnt/usbdisk             挂载一个usb 捷盘或闪存设备mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share 挂载一个windows网络共享\n2.3.4 磁盘查看\ndf -h                                               显示已经挂载的分区列表ls -lSr |more                                       以尺寸大小排列文件和目录du -sh dir1                                         估算目录 &#x27;dir1&#x27; 已经使用的磁盘空间&#x27;du -sk * | sort -rn                                 以容量大小为依据依次显示文件和目录的大小dmesg                                               显示系统诊断信息、操作系统版本号、物理内存的大小以及其它信息rpm -q -a --qf &#x27;%10&#123;SIZE&#125;t%&#123;NAME&#125;n&#x27; | sort -k1,1n   以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)dpkg-query -W -f=&#x27;$&#123;Installed-Size;10&#125;t$&#123;Package&#125;n&#x27; | sort -k1,1n   以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统)\n2.3.5 软件安装命令\nrpm\nrpm -ivh package.rpm             安装一个rpm包rpm -ivh --nodeeps package.rpm   安装一个rpm包而忽略依赖关系警告rpm -U package.rpm               更新一个rpm包但不改变其配置文件rpm -F package.rpm               更新一个确定已经安装的rpm包rpm -e package_name.rpm          删除一个rpm包rpm -qa                          显示系统中所有已经安装的rpm包rpm -qa | grep httpd             显示所有名称中包含 &quot;httpd&quot; 字样的rpm包rpm -qi package_name             获取一个已安装包的特殊信息rpm -qg &quot;System Environment/Daemons&quot;     显示一个组件的rpm包rpm -ql package_name                     显示一个已经安装的rpm包提供的文件列表rpm -qc package_name                     显示一个已经安装的rpm包提供的配置文件列表rpm -q package_name --whatrequires       显示与一个rpm包存在依赖关系的列表rpm -q package_name --whatprovides       显示一个rpm包所占的体积rpm -q package_name --scripts            显示在安装/删除期间所执行的脚本lrpm -q package_name --changelog          显示一个rpm包的修改历史rpm -qf /etc/httpd/conf/httpd.conf       确认所给的文件由哪个rpm包所提供rpm -qp package.rpm -l                   显示由一个尚未安装的rpm包提供的文件列表rpm --import /media/cdrom/RPM-GPG-KEY    导入公钥数字证书rpm --checksig package.rpm               确认一个rpm包的完整性rpm -qa gpg-pubkey                       确认已安装的所有rpm包的完整性rpm -V package_name                      检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间rpm -Va                                  检查系统中所有已安装的rpm包- 小心使用rpm -Vp package.rpm                      确认一个rpm包还未安装rpm2cpio package.rpm | cpio --extract --make-directories *bin* 从一个rpm包运行可执行文件rpm -ivh /usr/src/redhat/RPMS/`arch`/package.rpm               从一个rpm源码安装一个构建好的包rpmbuild --rebuild package_name.src.rpm                        从一个rpm源码构建一个 rpm 包\nyum[-y 自动确认] [install / remove / search] 软件名称\nyum install package_name            下载并安装一个rpm包yum localinstall package_name.rpm   将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系yum update package_name.rpm         更新当前系统中所有安装的rpm包yum update package_name             更新一个rpm包yum remove package_name             删除一个rpm包yum list                            列出当前系统中安装的所有包yum search package_name             在rpm仓库中搜寻软件包yum clean packages                  清理rpm缓存删除下载的包yum clean headers                   删除所有头文件yum clean all                       删除所有缓存的包和头文件\ndeb\ndpkg -i package.deb         安装/更新一个 deb 包dpkg -r package_name        从系统删除一个 deb 包dpkg -l                     显示系统中所有已经安装的 deb 包dpkg -l | grep httpd        显示所有名称中包含 &quot;httpd&quot; 字样的deb包dpkg -s package_name        获得已经安装在系统中一个特殊包的信息dpkg -L package_name        显示系统中已经安装的一个deb包所提供的文件列表dpkg --contents package.deb 显示尚未安装的一个包所提供的文件列表dpkg -S /bin/ping           确认所给的文件由哪个deb包提供\napt(用于Debian, Ubuntu 以及类似系统)[-y 自动确认] [install / remove / search] 软件名称\napt-get install package_name       安装/更新一个 deb 包apt-cdrom install package_name     从光盘安装/更新一个 deb 包apt-get update                     升级列表中的软件包apt-get upgrade                    升级所有已安装的软件apt-get remove package_name        从系统删除一个deb包apt-get check                      确认依赖的软件仓库正确apt-get clean                      从下载的软件包中清理缓存apt-cache search searched-package  返回包含所要搜索字符串的软件包名称\n2.3.6 文本处理\ncat file1 file2 ... | command &lt;&gt; file1_in.txt_or_file1_out.txt general syntax for text manipulation using PIPE, STDIN and STDOUTcat file1 | command( sed, grep, awk, grep, etc...) &gt; result.txt  合并一个文件的详细说明文本，并将简介写入一个新文件中cat file1 | command( sed, grep, awk, grep, etc...) &gt;&gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中grep Aug /var/log/messages    在文件 &#x27;/var/log/messages&#x27;中查找关键词&quot;Aug&quot;grep ^Aug /var/log/messages   在文件 &#x27;/var/log/messages&#x27;中查找以&quot;Aug&quot;开始的词汇grep [0-9] /var/log/messages  选择 &#x27;/var/log/messages&#x27; 文件中所有包含数字的行grep Aug -R /var/log/         在目录 &#x27;/var/log&#x27; 及随后的目录中搜索字符串&quot;Aug&quot;sed &#x27;s/stringa1/stringa2/g&#x27; example.txt     将example.txt文件中的 &quot;string1&quot; 替换成 &quot;string2&quot;sed &#x27;/^$/d&#x27; example.txt                     从example.txt文件中删除所有空白行sed &#x27;/ *#/d; /^$/d&#x27; example.txt             从example.txt文件中删除所有注释和空白行echo &#x27;esempio&#x27; | tr &#x27;[:lower:]&#x27; &#x27;[:upper:]&#x27; 合并上下单元格内容sed -e &#x27;1d&#x27; result.txt                      从文件example.txt 中排除第一行sed -n &#x27;/stringa1/p&#x27;                        查看只包含词汇 &quot;string1&quot;的行sed -e &#x27;s/ *$//&#x27; example.txt                删除每一行最后的空白字符sed -e &#x27;s/stringa1//g&#x27; example.txt          从文档中只删除词汇 &quot;string1&quot; 并保留剩余全部sed -n &#x27;1,5p;5q&#x27; example.txt                查看从第一行到第5行内容sed -n &#x27;5p;5q&#x27; example.txt                  查看第5行sed -e &#x27;s/00*/0/g&#x27; example.txt              用单个零替换多个零cat -n file1                                标示文件的行数cat example.txt | awk &#x27;NR%2==1&#x27;             删除example.txt文件中的所有偶数行echo a b c | awk &#x27;&#123;print $1&#125;&#x27;               查看一行第一栏echo a b c | awk &#x27;&#123;print $1,$3&#125;&#x27;            查看一行的第一和第三栏paste file1 file2                           合并两个文件或两栏的内容paste -d &#x27;+&#x27; file1 file2                    合并两个文件或两栏的内容，中间用&quot;+&quot;区分sort file1 file2                            排序两个文件的内容sort file1 file2 | uniq                     取出两个文件的并集(重复的行只保留一份)sort file1 file2 | uniq -u                  删除交集，留下其他的行sort file1 file2 | uniq -d                  取出两个文件的交集(只留下同时存在于两个文件中的文件)comm -1 file1 file2                         比较两个文件的内容只删除 &#x27;file1&#x27; 所包含的内容comm -2 file1 file2                         比较两个文件的内容只删除 &#x27;file2&#x27; 所包含的内容comm -3 file1 file2                         比较两个文件的内容只删除两个文件共有的部分\n2.3.7 字符/文件格式转换\ndos2unix filedos.txt fileunix.txt     将一个文本文件的格式从MSDOS转换成UNIXunix2dos fileunix.txt filedos.txt     将一个文本文件的格式从UNIX转换成MSDOSrecode ..HTML &lt; page.txt &gt; page.html  将一个文本文件转换成htmlrecode -l | more                      显示所有允许的转换格式\n2.3.8 文件系统操作\nbadblocks -v /dev/hda1    检查磁盘hda1上的坏磁块fsck /dev/hda1            修复/检查hda1磁盘上linux文件系统的完整性fsck.ext2 /dev/hda1       修复/检查hda1磁盘上ext2文件系统的完整性e2fsck /dev/hda1          修复/检查hda1磁盘上ext2文件系统的完整性e2fsck -j /dev/hda1       修复/检查hda1磁盘上ext3文件系统的完整性fsck.ext3 /dev/hda1       修复/检查hda1磁盘上ext3文件系统的完整性fsck.vfat /dev/hda1       修复/检查hda1磁盘上fat文件系统的完整性fsck.msdos /dev/hda1      修复/检查hda1磁盘上dos文件系统的完整性dosfsck /dev/hda1         修复/检查hda1磁盘上dos文件系统的完整性mkfs /dev/hda1         在hda1分区创建一个文件系统mke2fs /dev/hda1       在hda1分区创建一个linux ext2的文件系统mke2fs -j /dev/hda1    在hda1分区创建一个linux ext3(日志型)的文件系统mkfs -t vfat 32 -F /dev/hda1  创建一个 FAT32 文件系统fdformat -n /dev/fd0          格式化一个软盘mkswap /dev/hda3              创建一个swap文件系统swapon /dev/hda3              启用一个新的swap文件系统swapon /dev/hda2 /dev/hdb3    启用两个swap分区\n2.3.9 备份\ndump -0aj -f /tmp/home0.bak /home    制作一个 &#x27;/home&#x27; 目录的完整备份dump -1aj -f /tmp/home0.bak /home    制作一个 &#x27;/home&#x27; 目录的交互式备份restore -if /tmp/home0.bak           还原一个交互式备份rsync -rogpav --delete /home /tmp    同步两边的目录rsync -rogpav -e ssh --delete /home ip_address:/tmp           通过SSH通道rsyncrsync -az -e ssh --delete ip_addr:/home/public /home/local    通过ssh和压缩将一个远程目录同步到本地目录rsync -az -e ssh --delete /home/local ip_addr:/home/public    通过ssh和压缩将本地目录同步到远程目录dd bs=1M if=/dev/hda | gzip | ssh user@ip_addr &#x27;dd of=hda.gz&#x27; 通过ssh在远程主机上执行一次备份本地磁盘的操作dd if=/dev/sda of=/tmp/file1     备份磁盘内容到一个文件tar -Puf backup.tar /home/user   执行一次对 &#x27;/home/user&#x27; 目录的交互式备份操作( cd /tmp/local/ &amp;&amp; tar c . ) | ssh -C user@ip_addr &#x27;cd /home/share/ &amp;&amp; tar x -p&#x27;  通过ssh在远程目录中复制一个目录内容( tar c /home ) | ssh -C user@ip_addr &#x27;cd /home/backup-home &amp;&amp; tar x -p&#x27;           通过ssh在远程目录中复制一个本地目录tar cf - . | (cd /tmp/backup ; tar xf - )      本地将一个目录复制到另一个地方，保留原有权限及链接find /home/user1 -name &#x27;*.txt&#x27; | xargs cp -av --target-directory=/home/backup/ --parents 从一个目录查找并复制所有以 &#x27;.txt&#x27; 结尾的文件到另一个目录find /var/log -name &#x27;*.log&#x27; | tar cv --files-from=- | bzip2 &gt; log.tar.bz2          查找所有以 &#x27;.log&#x27; 结尾的文件并做成一个bzip包dd if=/dev/hda of=/dev/fd0 bs=512 count=1      做一个将 MBR (Master Boot Record)内容复制到软盘的动作dd if=/dev/fd0 of=/dev/hda bs=512 count=1 从已经保存到软盘的备份中恢复MBR内容\n2.3.10 光盘\ncdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force 清空一个可复写的光盘内容mkisofs /dev/cdrom &gt; cd.iso            在磁盘上创建一个光盘的iso镜像文件mkisofs /dev/cdrom | gzip &gt; cd_iso.gz  在磁盘上创建一个压缩了的光盘iso镜像文件mkisofs -J -allow-leading-dots -R -V &quot;Label CD&quot; -iso-level 4 -o ./cd.iso data_cd 创建一个目录的iso镜像文件cdrecord -v dev=/dev/cdrom cd.iso  刻录一个ISO镜像文件gzip -dc cd_iso.gz | cdrecord dev=/dev/cdrom - 刻录一个压缩了的ISO镜像文件mount -o loop cd.iso /mnt/iso      挂载一个ISO镜像文件cd-paranoia -B           从一个CD光盘转录音轨到 wav 文件中cd-paranoia -- &quot;-3&quot;      从一个CD光盘转录音轨到 wav 文件中（参数-3）cdrecord --scanbus       扫描总线以识别scsi通道dd if=/dev/hdc | md5sum  校验一个设备的md5sum编码，例如一张 CD\n2.3.11 网络\nifconfig eth0：显示网络接口“eth0”的配置详细信息，例如IP地址、子网掩码和其他网络设置ifup eth0：    启动网络接口“eth0”，使其能够发送和接收网络流量ifdown eth0：  关闭网络接口“eth0”，禁止其发送或接收网络流量ifconfig eth0 192.168.1.1 netmask 255.255.255.0：将网络接口“eth0”的IP地址和子网掩码配置为分别为“192.168.1.1”和“255.255.255.0”ifconfig eth0 promisc：      将网络接口“eth0”设置为混杂模式，允许其捕获所有网络流量，包括不是发送到其MAC地址的数据包。dhclient eth0：              请求网络接口“eth0”从DHCP服务器获取IP地址租约。route -n show routing table：显示当前系统的路由表，显示当前的路由配置。route add -net 0/0 gw IP_Gateway：  为系统添加默认网关，其中网关IP地址设置为“IP_Gateway”。route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1：通过网关“192.168.1.1”添加静态路由，以便通过该网关访问网络“192.168.0.0/16”。route del 0/0 gw IP_gateway：删除之前添加的默认网关。echo &quot;1&quot; &gt; /proc/sys/net/ipv4/ip_forward：激活IP转发，允许系统在不同的网络接口之间进行IP数据包路由。hostname：显示系统的主机名，即在网络上标识系统的名称。host www.example.com：    执行DNS查找，将主机名“www.example.com”解析为IP地址，反之亦然。nslookup www.example.com：同样执行DNS查找，将主机名“www.example.com”解析为IP地址，反之亦然。ip link show： 显示所有网络接口的状态，包括其链路状态（已启用或已禁用）和其他信息。mii-tool eth0：使用Media Independent Interface（MII）工具显示网络接口“eth0”的链路状态。ethtool eth0： 显示网络卡“eth0”的统计信息和详细信息，例如速度、双工模式和错误计数器。netstat -tup： 显示使用TCP和UDP协议的所有活动网络连接及其关联的进程（通过PID标识）。netstat -tupl：显示系统上所有监听的网络服务及其关联的进程（通过PID标识）使用TCP和UDP协议。`tcpdump tcp port 80`：显示所有在端口80上使用TCP协议的网络流量，通常用于监控HTTP（超文本传输协议）流量。iwlist scan：  显示无线网络接口的扫描结果，列出可用的无线网络。iwconfig eth1：显示无线网络接口“eth1”的配置信息，包括SSID、信号强度和加密设置等。hostname：     显示系统的主机名，即在网络上标识系统的名称。host www.example.com：    执行DNS查找，将主机名“www.example.com”解析为IP地址，反之亦然。nslookup www.example.com：同样执行DNS查找，将主机名“www.example.com”解析为IP地址，反之亦然。whois www.example.com：   在Whois数据库中查找主机名“www.example.com”的注册信息，包括域名所有者、注册商、联系信息等。\n2.3.12 其它命令\nbc  用于编写脚本进行高精度数学运算\n编写如下sqrt脚本，可使用./sqrt 数字 进行平方根运算\n#!/bin/bashif [ $# -ne 1 ]then    echo &#x27;Usage: sqrt number&#x27;    exit 1else    echo -e &quot;sqrt($1)\\nquit\\n&quot; | bc -q -ifi\nsplit 用于分割大型文件\n用法：split [选项] [输入文件] [输出文件前缀]\n-b：指定每个输出文件的大小，后面跟着的参数可以是以字节（B）、千字节（K）、兆字节（M）等为单位的数值。例如 -b 1M 表示每个输出文件的大小为1兆字节-l：指定每个输出文件的行数，后面跟着的参数为整数。例如 -l 1000 表示每个输出文件包含1000行-d：设置输出文件的后缀数字的长度，默认为2-a：设置输出文件的后缀字符，默认为字母 &quot;a&quot;\n# ls -l largefile.tar.gz输出-rw-r--r-- 1 aa aa 436774774 04-17 02:00 largefile.tar.gz# split -b 50m largefile.tar.gz LF_# ls -l LF_*-rw-r--r-- 1 aa aa 52428800 05-10 18:34 LF_aa输出-rw-r--r-- 1 aa aa 52428800 05-10 18:34 LF_ab   -rw-r--r-- 1 aa aa 52428800 05-10 18:34 LF_ac   -rw-r--r-- 1 aa aa 52428800 05-10 18:34 LF_ad   -rw-r--r-- 1 aa aa 52428800 05-10 18:34 LF_ae   -rw-r--r-- 1 aa aa 52428800 05-10 18:35 LF_af   -rw-r--r-- 1 aa aa 52428800 05-10 18:35 LF_ag   -rw-r--r-- 1 aa aa 52428800 05-10 18:35 LF_ah   -rw-r--r-- 1 aa aa 17344374 05-10 18:35 LF_ai\n拆分后合并\ncat LF_* &gt;largefile.tar.gz\nnl nl命令其它和cat命令很像，只不过它会打上行号\nldd 查看一个可执行文件所使用的动态链接库 ldd+文件目录/文件名\ncol 把man文件转成纯文本文件\n# PAGER=cat# man less | col -b &gt; less.txt\nxmlwf 检查一个XML文档是否是所有的tag都是正常的\n# curl &#x27;https://coolshell.cn/?feed=rss2&#x27; &gt; cocre.xml  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100 64882    0 64882    0     0  86455      0 --:--:-- --:--:-- --:--:-- 2073k# xmlwf cocre.xml# perl -i -pe &#x27;s@&lt;link&gt;@&lt;br&gt;@g&#x27; cocre.xml# xmlwf cocre.xmlcocre.xml:13:23: mismatched tag\nlsof 可以列出打开了的文件\n# lsof | grep TCPhttpd       548    apache    4u     IPv6   14300967    TCP *:http (LISTEN)httpd       548    apache    6u     IPv6   14300972    TCP *:https (LISTEN)httpd       561    apache    4u     IPv6   14300967    TCP *:http (LISTEN)httpd       561    apache    6u     IPv6   14300972    TCP *:https (LISTEN)sshd       1764      root    3u     IPv6       4993    TCP *:ssh (LISTEN)tcpserver  8965      root    3u     IPv4  153795500    TCP *:pop3 (LISTEN)mysqld    10202     mysql   10u     IPv4   73819697    TCP *:mysql (LISTEN)sshd      10735      root    3u     IPv6  160731956    TCP 210.51.0.232:ssh-&gt;123.117.239.68:31810 (ESTABLISHED)sshd      10767     hchen    3u     IPv6  160731956    TCP 210.51.0.232:ssh-&gt;123.117.239.68:31810 (ESTABLISHED)vsftpd    11095      root    3u     IPv4  152157957    TCP *:ftp (LISTEN)\n2.4 vim的使用\nvim有三种模式\n\n**使用技巧**帮助系统（内容收集于vimtutor）\n- 按下 &lt;HELP&gt; 键 (如果键盘上有的话)- 按下 &lt;F1&gt; 键 (如果键盘上有的话)- 输入 :help &lt;回车&gt;输入 CTRL-W CTRL-W   可以在窗口之间跳转。输入 :q &lt;回车&gt; 可以关闭帮助窗口Vim 的功能特性要比 Vi 多得多，但其中大部分都没有缺省启用，创建一个vimrc文件以启用更多特性1. 开始编辑 vimrc 文件 :edit ~/.vimrc\t\t这是 Unix 系统所使用的命令 :edit $VIM/_vimrc\t这是 MS-Windows 系统所使用的命令2. 接着读取 vimrc 示例文件的内容： :r $VIMRUNTIME/vimrc_example.vim3. 保存文件，命令为： :write  下次您启动 Vim 时，编辑器就会有了语法高亮的功能，要了解更多信息，添加设置请输入 :help vimrc-intro\n2.4.1基本插入删除，保存退出\nh、j、k、l 键分别对应光标键的左、下、上、右\n按键。然后输入:q! &lt;回车&gt;   表示不保存退出，使用 :wq 可以保存文件并退出\n命令模式下按x即可删除字符\n命令模式下按i即可进入插入模式，按a键可在光标之后插入文本\n命令模式输入 o 将在光标的下方打开新的一行并进入插入模式\n命令模式输入 O 将在光标的上方打开新的一行并进入插入模式\n2.4.2删除与撤销\n输入 dw 可以从光标处删除至一个单词的末尾\n输入 d$ 从当前光标删除到行末\n输入 dd 可以删除整一个当前行\nd      - 删除操作符。motion - 操作符的操作对象。w - 从当前光标当前位置直到下一个单词起始处，不包括它的第一个字符。e - 从当前光标当前位置直到单词末尾，包括最后一个字符。$ - 从当前光标当前位置直到当前行末。在动作前输入数字会使它重复那么多次，如输入 2w 使光标向前移动两个单词，输入 3e 使光标向前移动到第三个单词的末尾，因此输入 d2w 可以删除两个大写字母单词，输入 2dd 可以删除两行\n输入 u 来撤消最后执行的命令，输入 U 来撤消对整行的修改，输入 CTRL+R 可以重做被撤消的命令\n2.4.3更改与替换\n输入 p 可以将最后一次删除的内容置入光标之后\n输入 dd 删除整行，这样会将该行保存到 Vim 的一个寄存器中接着将光标移动到 准备置入的位置的上方，然后在命令模式下输入 p 将该行粘贴置入\n输入 r 和一个字符替换光标所在位置的字符\n输入 R 可连续替换多个字符\n输入  ce 可以改变文本直到一个单词的末尾\n改类操作符的工作方式跟删除类是一致的，动作参数（motion）也是相同的。\n2.4.4查找与定位\n1.输入 CTRL-G 显示当前编辑文件中当前光标所在行位置以及文件状态信息\n输入 CTRL-O 可以回到之前的位置\nCTRL-I 会跳转到较新的位置\n输入大写 G 可以使得当前光标直接跳转到文件最后一行，行号+G跳转到指定行输入 gg 可以使得当前光标直接跳转到文件第一行\n2.在命令模式下输入/ 想查找的字符 可以实现查找操作，按n键可以查找同上一次的字符串，N向相反方向查找同上一次的字符串？ 想查找的字符 可以逆向查找字符串\n3.输入 % 可以查找配对的括号 )、]、}，当光标在括号上时按% 即可跳转到与之匹配的括号处，再按则返回原来位置，可用于程序调试\n4.输入 :s/old/new 可以替换第一个匹配到的字符串 old 为 new\n输入   :s/old/new/g      可以替换整行 old 为 new输入   :#,#s/old/new/g   其中 #,# 代表的是替换操作的若干行中首尾两行的行号。输入   :%s/old/new/g     则是替换整个文件中的每个匹配串。输入   :%s/old/new/gc    会找到整个文件中的每个匹配串，并且对每个匹配串提示是否进行替换。\n2.4.5移动与批量操作\n输入 :! 然后紧接着输入一个外部命令+&lt;回车&gt;即可执行该外部命令\n输入 :w FILENAME可以把对当前文件的改动保存到FILENAME文件中\n部分保存：按 v 键，将光标从第一个想保存的字符移动至最后一个，这之间的文本被高亮了，按 : 字符。屏幕底部会出现 :&#x27;&lt;,&#x27;&gt; 输入 w TEST， TEST 应是一个未被使用的文件名。在出现:&#x27;&lt;,&#x27;&gt;w TEST 之后按 &lt;回车&gt; 键\n插入\n输入 :r FILENAME向当前文件中插入另外的文件的内容，提取进来的文件将从光标所在位置处开始置入\n复制\n按 v 键，将光标从第一个想保存的字符移动至最后一个，这之间的文本被高亮了，输入y复制，接着输入 p 粘贴。y 可以当作操作符来使用，如yw复制一个单词\n输入 :set xxx 可以设置 xxx 选项。一些有用的选项如下：    &#x27;ic&#x27; &#x27;ignorecase&#x27;   查找时忽略字母大小写    &#x27;is&#x27; &#x27;incsearch&#x27;    查找短语时显示部分匹配    &#x27;hls&#x27; &#x27;hlsearch&#x27;    高亮显示所有的匹配短语    :set nu             显示行号    :set nonu           不显示行号     选项名可以用完整版本，也可以用缩略版本，在选项前加上 no 可以关闭选项：  :set noic\n2.4.6补全功能\n使用 CTRL+D 和  可以进行命令行补全\n1. 确保 Vim 不是在以兼容模式运行： :set nocp2. 查看一下当前目录下已经存在哪些文件，输入： :!ls   或者  :!dir3. 现在输入一个目录的起始部分，例如输入： :e4. 接着按 CTRL+D 键，Vim 会显示以 e 开始的命令的列表。5. 然后按 &lt;TAB&gt; 键，Vim 会补全命令为 :edit 。6. 现在添加一个空格，以及一个已有文件的文件名的起始部分，例如： :edit FIL7. 接着按 &lt;TAB&gt; 键，Vim 会补全文件名(如果它是唯一匹配的)。","categories":["大数据"],"tags":["vim","shell","linux"]},{"title":"NumPy操作方式笔记","url":"/post/numpy.html","content":"NumPy操作方式笔记\nNumPy，全称为 Numerical Python，是Python语言中用于科学计算的基础库之一。它为Python提供了强大的多维数组和矩阵的支持，以及一套用于在这些数组上执行高性能计算的数学函数集合。NumPy的核心在于其引入的 ndarray 对象，这是一个可以存储同类型数据（如数字）的多维数组结构，为处理大型数据集提供了内存效率极高的存储和操作方式。与Python内置的列表不同，NumPy数组中的所有元素都必须是相同的数据类型，这一特性使得NumPy能够实现更快的运算速度。实际上，NumPy的许多操作都是通过优化过的C语言代码实现的，这使得其在处理数值计算任务时，性能远超使用标准Python列表和循环的实现方式。此外，NumPy还具备广播（broadcasting）功能，允许不同形状的数组之间进行运算，而无需显式地进行循环操作。这种设计极大地简化了代码，并提升了处理大规模数据的效率。\nNumPy的重要性与优势\nNumPy之所以在科学计算领域如此重要，原因在于其多方面的优势：\n\n提升运算速度：它能够显著提升数学运算的速度，尤其是在处理包含大量数字的数组时，其效率远高于标准的Python实现。\n简化数据处理：NumPy简化了对大型数值列表（即数组）的处理，避免了编写复杂的循环结构。\n丰富的函数库：NumPy还提供了丰富的、可以直接使用的函数，用于执行统计分析、线性代数运算以及生成随机数等任务。\n科学计算库的基础：更重要的是，NumPy是许多其他重要的科学计算库（如Pandas、SciPy、TensorFlow和scikit-learn）的基础。这些库在数据分析、高级科学计算和机器学习等领域发挥着关键作用，它们都依赖于NumPy数组作为其核心数据结构。\n高效的内存管理：最后，与Python列表相比，NumPy在存储和管理大量数据时，占用的内存更少，效率更高，这对于处理庞大的数据集至关重要。\n\nNumPy的应用领域\n由于其强大的功能和高效的性能，NumPy被广泛应用于各种领域：\n\n数据分析：NumPy可以用于创建、筛选和操作以数组形式存在的数据，并执行诸如计算均值和标准差等各种操作。\n机器学习与人工智能：流行的工具如TensorFlow和PyTorch都使用NumPy来管理输入数据、处理模型参数和输出值。\n数组操作：NumPy还提供了强大的数组操作功能，包括创建、调整大小、切片、索引、堆叠、分割和组合数组。\n金融与经济：NumPy被用于财务分析，包括投资组合优化、风险评估、时间序列分析和统计建模。\n图像与信号处理：NumPy能够帮助处理和分析图像和信号数据。\n数据可视化：虽然NumPy本身不直接创建可视化图表，但它与Matplotlib和Seaborn等库紧密集成，可以从数值数据生成各种图表。\n\nNumPy的这些应用表明，无论是在基础的数据处理还是在复杂的算法实现中，它都扮演着至关重要的角色。\nNumPy的安装与导入\n要开始使用NumPy，首先需要在Python环境中安装它。这可以通过Python的包管理器pip轻松完成，只需在命令行中运行：\npip install numpy\n这个命令会自动从Python的包索引中下载并安装NumPy及其依赖项。\n安装完成后，在Python代码中需要导入NumPy库才能使用其功能。按照惯例，我们通常会使用别名 np 来导入NumPy，即使用语句：\nimport numpy as np\n这样做的好处是，在后续的代码中，我们可以通过 np 这个更简洁的名称来引用NumPy的函数和对象，这提高了代码的可读性，并且是Python科学计算社区广泛采用的一种标准做法。这种一致性使得不同开发者编写的代码更容易被理解和协作。\nNumPy的核心：ndarray对象\nNumPy的核心是其多维数组对象，即 ndarray。理解 ndarray 的核心属性对于有效地使用NumPy至关重要。\n\n同质性：NumPy数组是同质的，这意味着数组中的所有元素都必须是相同的数据类型。这与Python列表可以包含不同类型的元素形成了鲜明的对比。同质性是NumPy实现高效数值计算的关键，因为它允许NumPy在内存中以连续的方式存储数据，并针对特定的数据类型进行优化。\n多维性：NumPy数组可以是多维的。一维数组类似于Python中的列表，可以看作是向量。二维数组则更像是一个表格或矩阵，具有行和列。NumPy还支持更高维度的数组，例如三维数组可以想象成由多个二维数组堆叠而成，更高维度的数组在处理更复杂的数据结构时非常有用，通常被称为张量。\n\nndarray的核心属性\n\n形状 (shape)：描述数组结构的一个重要属性，它是一个由整数组成的元组，每个整数表示数组在相应维度上的大小。例如，对于一个二维数组，其形状表示为 (行数, 列数)。理解数组的形状对于进行需要兼容数组尺寸的操作（如算术运算和矩阵乘法）至关重要。\n数据类型 (dtype)：指定了数组中元素的数据类型。NumPy支持多种数据类型，包括整数（如 int64）、浮点数（如 float64）、复数（如 complex32）等。在创建数组时，如果没有显式指定数据类型，NumPy通常会根据输入数据的类型进行推断，默认的数据类型通常是 float64。用户也可以在创建数组时通过 dtype 参数显式地指定所需的数据类型，这有助于更好地管理内存使用和控制计算精度。\n其他基本属性：\n\nndim: 数组的维度（轴）的数量。\nsize: 数组中元素的总数。\nitemsize: 数组中每个元素占用的字节数。\ndata: 一个缓冲区，包含了数组中实际的元素数据，但通常不直接使用。\n\n\n可变性：与Python列表类似，NumPy数组是可变的，这意味着在数组创建后，可以修改其元素的值。\n\n这些属性共同构成了对NumPy数组的基本理解，为后续学习更复杂的操作打下了基础。\n创建NumPy数组\n创建NumPy数组有多种方法。\n\n从Python序列创建：一种常见的方法是使用 np.array() 函数，该函数可以从常规的Python列表或元组创建NumPy数组。np.array() 会尝试根据序列中元素的类型推断出结果数组的数据类型。例如，如果传入的列表包含整数，则创建的数组将是整数类型的；如果包含浮点数，则数组将是浮点数类型的。对于多维数组，可以传入由列表组成的列表（或元组组成的元组），NumPy会将其转换为相应的多维数组结构。需要注意的是，在调用 np.array() 时，应该将要转换的序列作为一个单独的参数传入，而不是将序列中的元素作为多个独立的参数传入，否则会导致类型错误。\n使用专门函数创建具有特定初始值的数组：\n\nnp.zeros(shape, dtype=float, order='C'): 创建一个指定形状和数据类型的数组，并用零填充所有元素。例如，np.zeros((3, 4)) 将创建一个 3 行 4 列的二维数组，所有元素都初始化为 0.0。\nnp.ones(shape, dtype=None, order='C'): 创建一个用 1 填充的数组。例如，np.ones((2, 3, 4), dtype=np.int16) 将创建一个 2x3x4 的三维数组，所有元素都初始化为整数 1。\nnp.empty(shape, dtype=float, order='C'): 创建一个指定形状和数据类型的数组，但不会对其进行初始化，数组中的初始值是内存中已有的任意数据。使用 np.empty() 的优势在于速度可能比 np.zeros() 或 np.ones() 快，因为它不需要进行初始化，但这也意味着在使用之前必须确保数组的所有元素都被赋予了有意义的值。\n\n\n创建数值序列：\n\nnp.arange([start,] stop[, step,], dtype=None, *, like=None): 类似于Python内置的 range() 函数，但返回的是一个NumPy数组。np.arange() 可以接受浮点数参数，例如 np.arange(0, 2, 0.3) 将生成 [0. , 0.3, 0.6, 0.9, 1.2, 1.5, 1.8]。然而，当使用浮点数步长时，由于浮点数精度的限制，可能无法准确预测生成的元素数量。\nnp.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0): 通常建议使用此函数来创建指定数量的在给定间隔内均匀分布的数值。np.linspace() 接收起始值、结束值以及期望生成的元素数量作为参数，例如 np.linspace(0, 2, 9) 将生成 9 个从 0 到 2（包含 2）均匀分布的数值。\n\n\n\n这些函数为创建各种类型的NumPy数组提供了灵活的方式。\nNumPy数组的基本操作\nNumPy在数组上执行基本操作时，通常是**逐元素 (element-wise)**进行的。这意味着当对两个形状相同的数组进行算术运算时（例如加法、减法、乘法、除法、乘方和取模），运算会对应地应用到数组中的每个元素，并产生一个新的包含结果的数组。 例如，如果 a = np.array([20, 30, 40, 50]) 且 b = np.arange(4)，那么 a - b 将得到 array([20, 29, 38, 47])，而 b**2 将得到 array([0, 1, 4, 9])。 同样，标量与数组之间的运算也会被广播到数组的每个元素上，例如 10 * np.sin(a) 会先计算数组 a 中每个元素的正弦值，然后将结果乘以 10。这种逐元素的操作方式使得对整个数据集进行数学运算变得简洁高效，无需编写显式的循环。\n通用函数 (ufuncs)\nNumPy为这些基本的算术运算提供了相应的通用函数 (universal functions，简称 ufuncs)。例如：\n\nnp.add() 对应于加法 (+)\nnp.subtract() 对应于减法 (-)\nnp.multiply() 对应于乘法 (*)\nnp.divide() 对应于除法 (/)\nnp.power() 对应于乘方 (**)\nnp.mod() 对应于取模 (%)\n\n这些 ufuncs 不仅执行逐元素操作，而且通常经过高度优化，能够提供比标准Python操作更高的性能。它们是NumPy向量化操作的基础，直接在NumPy数组的内存缓冲区上操作，避免了为每个元素调用Python函数的开销。\n其他数学函数\n除了基本的算术运算，NumPy还提供了大量的通用数学函数，这些函数同样以逐元素的方式应用于数组。这包括：\n\n三角函数: 如 np.sin() (正弦)、np.cos() (余弦)、np.tan() (正切)、np.arcsin() (反正弦)等。\n指数和对数函数: 如 np.exp() (指数)、np.log() (自然对数)、np.log10() (以 10 为底的对数)等。\n舍入函数: 如 np.round() (四舍五入)、np.floor() (向下取整)、np.ceil() (向上取整)等。\n绝对值函数: np.abs()。\n\nNumPy的文档中包含了完整的数学函数列表，这些函数极大地扩展了在NumPy数组上进行复杂数值计算的能力。\nNumPy数组的索引和切片\n单个元素访问\n访问NumPy数组中的单个元素与Python列表类似，都是通过索引来实现的，索引从 0 开始。\n\n一维数组: 可以直接使用方括号内的索引来访问元素，例如 a[0] 将访问数组 a 的第一个元素。\n多维数组: 可以使用逗号分隔的索引元组来访问特定位置的元素，每个索引对应数组的一个维度。例如，对于一个二维数组 a，a[1, 3] 将访问第二行（索引为 1）第四列（索引为 3）的元素。\n负索引: NumPy还支持负索引，可以从数组的末尾开始计数，例如 a[-1] 将访问数组的最后一个元素。\n\n这种灵活的索引方式使得可以方便地访问数组中的特定元素。\n切片 (Slicing)\n除了访问单个元素，NumPy还提供了强大的切片（slicing）功能，用于提取数组的子数组。切片使用 [start:stop:step] 这样的表示法，其中 start 是切片的起始索引（包含），stop 是结束索引（不包含），step 是步长。\n\n如果没有指定 start，则默认为 0。\n如果没有指定 stop，则默认为数组的长度。\n如果没有指定 step，则默认为 1。\n\n一个重要的特性是，NumPy的切片操作创建的是原始数组的视图 (view)，而不是数据的副本。这意味着对切片进行修改会直接影响到原始数组。这种行为可以提高效率，避免不必要的数据复制，但需要注意，如果需要一个独立的副本，应该使用 .copy() 方法。\n对于多维数组，切片可以应用于每个维度，通过逗号分隔每个维度的切片规格。例如：\n\na[0:2, :] 选择数组 a 的前两行（所有列）。\na[:, 1:4] 选择所有行的第 2 到第 4 列（不包括第 4 列）。\na[1, :] 选择第二行的所有元素。\na[:, 2] 选择第三列的所有元素。\n\n高级索引\nNumPy还支持更高级的索引方式。\n\n布尔数组索引 (Boolean array indexing / Masking)：通过创建一个与原始数组形状相同的布尔数组作为索引，可以根据布尔数组中 True 值对应的位置来选择原始数组中的元素。例如，a[a &gt; 5] 将选择数组 a 中所有大于 5 的元素。布尔索引是根据条件过滤数据的强大工具。\n整数数组索引 (Integer array indexing / Fancy indexing)：通过传递一个包含整数索引的NumPy数组作为索引，可以选择原始数组中特定位置的元素。这允许以非连续的方式选择元素，甚至可以重复选择相同的元素。例如，a[[0, 2, 4]] 将选择数组 a 中索引为 0、2 和 4 的元素。对于二维数组，可以传递两个整数数组，分别表示要选择的元素的行索引和列索引。例如，a[[0, 1, 2], [0, 1, 0]] 将选择位于 (0, 0)、(1, 1) 和 (2, 0) 的元素。与基本的切片不同，整数数组索引总是返回原始数据的一个副本。\n\nNumPy数组的形状操作\nNumPy提供了多种方法来改变数组的形状而不改变其数据内容。\n\nndarray.reshape(new_shape, order=‘C’): 将数组重塑为指定的形状，new_shape 参数是一个表示新形状的元组。重要的是，重塑后的数组必须包含与原始数组相同数量的元素。如果可能，reshape() 会返回原始数组的一个视图，否则会返回一个副本。例如，如果 a 是一个包含 12 个元素的一维数组，a.reshape((3, 4)) 将其转换为一个 3 行 4 列的二维数组。\n数组的扁平化 (Flattening)：是将多维数组转换为一维数组的过程。\n\nndarray.flatten(order='C'): 返回一个原始数组的副本，并将其展平为一维数组。\nndarray.ravel(order='C'): 也执行相同的操作，但它会尝试返回原始数组的视图，只有在必要时才会返回副本，因此在可能的情况下，ravel() 通常比 flatten() 更节省内存。 例如，对于一个多维数组 a，a.flatten() 和 a.ravel() 都会得到一个包含相同元素的一维数组。\n\n\n转置 (Transposing)：是另一种常见的数组形状操作。对于二维数组（矩阵），转置会交换其行和列。在NumPy中，可以使用 ndarray.T 属性来获取数组的转置视图，或者使用 np.transpose(a, axes=None) 函数，该函数返回一个转置后的数组。通过 axes 参数，可以指定更复杂的轴交换顺序。例如，对于一个数组 a，a.T 或 np.transpose(a) 将返回其转置。转置在线性代数中非常重要，例如在进行矩阵乘法时，可能需要先对矩阵进行转置。\n\n这些形状操作为处理和组织NumPy数组中的数据提供了灵活性。\nNumPy的线性代数运算\nNumPy还为线性代数运算提供了强大的支持。\n\n点积 (Dot product)：可以使用 np.dot(a, b) 函数来计算两个数组的点积。\n\n如果 a 和 b 都是一维数组，np.dot() 返回向量的内积。\n如果它们都是二维数组，则执行矩阵乘法（在较新的NumPy版本中，推荐使用 np.matmul() 或 a @ b 进行矩阵乘法）。\n对于更高维度的数组，点积的计算方式更为复杂，涉及到最后一个轴的求和乘积。 点积是线性代数中的基本运算，广泛应用于物理学和机器学习等领域。\n\n\n矩阵乘法 (Matrix multiplication)：可以使用 np.matmul(a, b) 或 a @ b 来执行。对于二维数组，这是标准的矩阵乘法。需要注意的是，进行矩阵乘法时，第一个矩阵的列数必须等于第二个矩阵的行数。\n逐元素乘法 (Element-wise multiplication)：可以使用 np.multiply(a, b) 或简单的 a * b 来实现，它将两个形状相同的数组中对应位置的元素相乘。这与矩阵乘法是不同的。\n\nlinalg 模块\nNumPy的 linalg 模块还包含许多其他有用的线性代数函数，例如：\n\nnp.linalg.solve(a, b): 求解线性方程组 Ax=bAx = bAx=b。\nnp.linalg.inv(a): 计算矩阵的逆。\nnp.linalg.eig(a): 计算方阵的特征值和特征向量。\nnp.linalg.det(a): 计算矩阵的行列式。\nnp.linalg.norm(x): 计算矩阵或向量的范数。\n\n这些函数构成了进行高级数值计算和解决复杂数学问题的基础。\nNumPy的随机数生成\nNumPy还提供了强大的随机数生成功能，这些功能在模拟、机器学习等领域非常有用。\n\nnp.random.rand(d0, d1,..., dn): 创建一个指定形状的数组，并用从均匀分布（区间 [0, 1)）中抽取的随机浮点数填充。例如，np.random.rand(5) 将创建一个包含 5 个随机数的 1D 数组，而 np.random.rand(2, 3) 将创建一个 2x3 的随机数数组。\nnp.random.randn(d0, d1,..., dn): 类似，但它从标准正态分布（均值为 0，方差为 1）中抽取随机数。\nnp.random.randint(low, high=None, size=None, dtype=int): 返回在指定范围内（从 low（包含）到 high（不包含））的随机整数，形状由 size 参数指定。如果只提供一个参数，则返回 0 到该参数之间的随机整数。例如，np.random.randint(10, size=5) 将创建一个包含 5 个 0 到 9 之间随机整数的数组。\n\n对于更新的NumPy代码（版本 1.17 及更高版本），推荐使用 np.random.default_rng() 创建一个随机数生成器对象，该对象提供了更结构化的方式来生成来自各种分布的随机数，例如：\nrng = np.random.default_rng()random_array = rng.random((3, 2)) # 使用 random 而非 randrandom_integers = rng.integers(0, 10, size=5)\n这种方式提供了更好的控制和更广泛的分布选择。\nNumPy数组的复制与视图\n在使用NumPy数组时，理解**复制 (copy)数组和创建视图 (view)**之间的区别非常重要。\n\n赋值操作 (b = a): 并不会创建数组 a 的一个新副本，而是使 b 成为对 a 所指向的同一数组对象的另一个引用。这意味着，如果修改 b 中的元素，a 中的相应元素也会被修改。\n切片操作 (b = a[0:5]): 通常会创建原始数组的一个视图。视图本质上是原始数组数据的一个窗口，它本身不存储任何数据，而是引用原始数组的一部分。因此，通过视图对数组进行的修改可能会影响到原始数组。\n.copy() 方法 (b = a.copy()): 如果需要创建数组及其数据的完全独立副本，应该使用 .copy() 方法。在这种情况下，对 b 的修改不会影响到 a。\n\n理解这种行为对于避免在程序中出现意外的副作用至关重要。\nNumPy数组的保存与加载\nNumPy还提供了方便的方法来将数组数据保存到磁盘以及从磁盘加载数组数据。\n\nnp.save('filename.npy', array): 将单个NumPy数组以二进制格式保存到扩展名为 .npy 的文件中。\nnp.load('filename.npy'): 将保存的数组从 .npy 文件加载回来。\nnp.savetxt('filename.txt', array): 将数组保存到文本文件中。\nnp.loadtxt('filename.txt'): 从文本文件中加载数组。\nnp.genfromtxt('data.txt', delimiter=','): 可以从文本文件加载数据，并且更灵活，可以处理缺失值和不同的数据类型。\n\n这些功能使得NumPy能够有效地处理大型数据集，这些数据集可能无法一次性加载到内存中。\n总结\nNumPy作为Python科学计算的核心库，为处理多维数组和执行数值计算提供了强大且高效的工具。通过理解NumPy数组的特性、掌握创建数组的多种方式、熟悉基本的逐元素操作和数学函数、灵活运用索引和切片技术、以及了解数组形状的变换和基本的线性代数运算，Python初学者可以为后续更深入的数据分析、机器学习和科学研究打下坚实的基础。理解复制和视图的区别以及学会保存和加载数组数据，将有助于更有效地管理和处理实际应用中的数据。NumPy的高效性和广泛的功能使其成为Python科学计算生态系统中不可或缺的一部分。\nNumPy数组创建函数比较表\n\n\n\n函数名称\n描述\n主要参数\n用途示例\n\n\n\n\nnp.array\n从列表、元组或其他序列创建数组\nobject (要转换的序列), dtype (数据类型), copy (是否复制)\nnp.array([1,2,3]), np.array([[1,2], [3,4]])\n\n\nnp.zeros\n创建一个用零填充的数组\nshape (数组形状), dtype (数据类型)\nnp.zeros((2, 3)), np.zeros(5, dtype=int)\n\n\nnp.ones\n创建一个用一填充的数组\nshape (数组形状), dtype (数据类型)\nnp.ones((3, 2)), np.ones((2, 2), dtype=float)\n\n\nnp.empty\n创建一个未初始化的数组\nshape (数组形状), dtype (数据类型)\nnp.empty((2, 2)), np.empty(3, dtype=complex)\n\n\nnp.arange\n在给定范围内创建均匀间隔的值的数组\nstart (起始值), stop (结束值), step (步长), dtype (数据类型)\nnp.arange(0, 10, 2), np.arange(5)\n\n\nnp.linspace\n在指定间隔内创建均匀间隔的数字序列\nstart (起始值), stop (结束值), num (元素数量), dtype (数据类型)\nnp.linspace(0, 1, 5), np.linspace(0, np.pi, 10)\n\n\nnp.full\n创建一个用指定值填充的数组\nshape (数组形状), fill_value (填充值), dtype (数据类型)\nnp.full((2, 2), 7), np.full(5, 'test', dtype=object)\n\n\nnp.eye\n创建一个单位矩阵\nN (行数), M (列数，可选), k (对角线索引), dtype (数据类型)\nnp.eye(3), np.eye(4, M=5, k=1)\n\n\nnp.diag\n提取对角线或创建对角数组\nv (对角线元素), k (对角线索引)\nnp.diag([1,2,3]), np.diag(np.array([[1,2], [3,4]]))\n\n\n\n基本算术通用函数比较表\n\n\n\n运算符\n等效通用函数\n描述\n\n\n\n\n+\nnp.add\n逐元素相加\n\n\n-\nnp.subtract\n逐元素相减\n\n\n*\nnp.multiply\n逐元素相乘\n\n\n/\nnp.divide\n逐元素相除\n\n\n**\nnp.power\n逐元素乘方\n\n\n%\nnp.mod\n逐元素取模（余数）\n\n\n\n数组扁平化方法比较表\n\n\n\n方法\n返回值\n内存效率\n对原始数组的影响\n适用场景\n\n\n\n\nflatten()\n原始数组的副本\n较低\n不影响\n需要一个原始数组的独立副本时\n\n\nravel()\n原始数组的视图\n较高\n可能影响\n当不需要副本且希望尽可能节省内存时\n\n\n\n","categories":["数据分析"],"tags":["python","数据操作"]},{"title":"Pandas操作方式笔记","url":"/post/pandas.html","content":"Pandas 操作方式笔记\n1. Pandas 简介\nPandas 是一个在 Python 编程语言中广泛使用的数据操作和分析的开源库。它建立在另一个基础库 NumPy 之上，NumPy 主要用于数值计算。Pandas 的出现极大地简化了使用 Python 进行数据清洗、转换和分析的过程，提供了高性能且易于使用的数据结构和数据分析工具。在当前数据科学和机器学习的工作流程中，Pandas 扮演着至关重要的角色。\nPandas 依赖于 NumPy，这意味着理解一些基本的 NumPy 概念对于优化 Pandas 的操作非常有益，尤其是在处理大型数据集时。例如，NumPy 的数组操作和广播规则直接影响着 Pandas 的性能。因此，在掌握 Pandas 的基础知识后，进一步探索 NumPy 将有助于用户编写更高效的 Pandas 代码。\n此外，Pandas 在数据科学领域被广泛采用，这使得精通 Pandas 成为任何希望在 Python 中处理数据的人的一项非常有价值的技能。无论是进行学术研究、商业分析还是开发机器学习模型，Pandas 都是一个不可或缺的工具。因此，学习 Pandas 的长期收益是显著的，它将为用户打开数据相关职业发展的大门。\n相较于标准的 Python 数据结构（如列表和字典），使用 Pandas 进行数据分析具有显著的优势。Pandas 提供了表格数据的表示方式，即 DataFrame，它类似于电子表格和数据库中的表结构。这种结构使得数据的组织和理解更加直观。此外，Pandas 具有带标签的轴（行和列），这使得数据的访问更加方便和有意义。\nPandas 提供了强大且灵活的数据操作功能，包括数据过滤、排序、合并等。它还内置了处理缺失数据的功能，并提供了数据对齐和整合的工具。更重要的是，Pandas 可以与其他 Python 库（如 NumPy、Matplotlib 和 Scikit-learn）无缝集成，形成一个强大的数据分析生态系统。最后，Pandas 在处理大型数据集时也表现出高效性，这使得它成为处理各种规模数据的理想选择。\nPandas DataFrame 中带标签的轴相比于 NumPy 数组或列表的列表仅使用数字索引，极大地提高了数据的可读性和操作性。对于初学者来说，使用有意义的列名和行索引进行复杂的数据操作会更加直观，减少出错的可能性。传统的 Python 数据结构通常依赖于位置索引，当数据集变得复杂时，这种方式可能会显得笨拙。而 Pandas 的标签索引允许用户通过名称引用数据，从而提高了代码的清晰度和可维护性。\nPandas 与其他数据科学库的无缝集成创建了一个强大的端到端数据分析工作流程。从数据加载和清洗到可视化和模型构建，Pandas 都可以作为核心组件。例如，Pandas 可以轻松地将数据传递给 Matplotlib 进行绘图，或传递给 Scikit-learn 进行机器学习模型的训练。这种集成性突显了 Pandas 在更广泛的 Python 数据科学领域中的核心地位。\n2. Pandas 数据结构：Series 和 DataFrame\nPandas 中最核心的两个数据结构是 Series 和 DataFrame。理解这两种数据结构是掌握 Pandas 的关键。\nSeries 介绍\nSeries 是一种一维的带标签的数组，它可以存储任何数据类型（整数、字符串、浮点数、Python 对象等）。可以将 Series 想象成电子表格中的一列，或者一个带标签的列表。\n一个 Series 由两个主要部分组成：索引（Index） 和 值（Values）。索引是数据的标签，可以是整数、字符串或任何其他可哈希的 Python 对象。如果创建 Series 时没有明确指定索引，Pandas 会自动创建一个默认的整数索引，从 0 开始递增。值是 Series 中存储的实际数据。\n与普通的 Python 列表不同，Series 拥有显式的索引。这种显式的索引使得数据的访问和对齐更加有意义。尤其是在处理时间序列数据或具有内在标签的数据时，Series 的优势更加明显。例如，在一个存储产品价格的 Series 中，可以使用产品名称作为索引，这样就可以直接通过产品名称来查找其价格，而不需要记住它在列表中的位置。\nDataFrame 介绍\nDataFrame 是一种二维的带标签的数据结构，可以看作是由多个 Series 组成的表格。DataFrame 的每一列可以是不同的数据类型。它是 Pandas 中最核心的数据结构，用于表示表格数据。\nDataFrame 由三个主要部分组成：索引（Index）、列（Columns） 和 值（Values）。索引是行的标签，类似于 Series 中的索引。列是数据的标签，每一列都可以看作是一个 Series。值是实际的数据，以表格的形式排列在行和列中。\n可以将 DataFrame 类比为一个电子表格或一个 SQL 数据库中的表。它提供了一种非常直观的方式来组织和处理结构化数据。例如，在一个存储学生信息的 DataFrame 中，每一行可能代表一个学生，而每一列可能代表学生的姓名、年龄、成绩等信息。\nDataFrame 能够容纳不同数据类型的列，这与 NumPy 数组通常要求所有元素具有相同类型形成了鲜明的对比。现实世界中的数据往往包含各种不同的类型，例如数值型的测量数据、类别型的标签以及日期时间信息。Pandas DataFrame 的这种灵活性使其非常适合表示和处理各种真实世界的数据集。\n此外，Pandas 中一个非常重要的概念是按照索引和列标签对齐数据。这简化了涉及多个 Series 或 DataFrame 的操作。当对两个 Pandas 对象进行操作时（例如，将两个 DataFrame 相加），Pandas 会自动根据它们的行和列标签对齐数据。即使这些对象的初始顺序不同或存在缺失的标签，这种自动对齐也能确保操作在对应的数据点上执行，从而避免了常见的错误，并使得数据操作更加健壮。\n3. 创建 Series 和 DataFrame\nPandas 提供了多种灵活的方法来创建 Series 和 DataFrame 对象。了解这些方法对于开始使用 Pandas 至关重要。\n创建 Series\n\n\n从列表创建： 可以使用 Python 列表来创建一个 Series。Pandas 会自动为列表中的每个元素分配一个从 0 开始的整数索引。\nimport pandas as pddata = s = pd.Series(data)print(s)\n输出结果会显示每个值及其对应的默认整数索引。\n\n\n从 NumPy 数组创建： 也可以从 NumPy 数组创建 Series。数据会直接从 NumPy 数组转移到 Series 中。\nimport numpy as nparr = np.array()s = pd.Series(arr)print(s)\n与从列表创建类似，Pandas 会为数组中的每个元素分配一个默认的整数索引。\n\n\n从字典创建： 从 Python 字典创建 Series 是一种非常强大的方式。字典的键会成为 Series 的索引标签，而字典的值会成为 Series 的值。\ndata = &#123;&#x27;Alice&#x27;: 10, &#x27;Bob&#x27;: 20, &#x27;Charlie&#x27;: 30&#125;s = pd.Series(data)print(s)\n在这种情况下，Series 的索引将是 ‘Alice’, ‘Bob’, ‘Charlie’，对应的值分别是 10, 20, 30。这种方式非常适合表示带有明确标签的数据。\n\n\n指定索引： 在从列表或 NumPy 数组创建 Series 时，可以显式地指定索引。\ndata = index =s = pd.Series(data, index=index)print(s)\n通过 index 参数，我们可以自定义 Series 的索引标签。\n\n\n从字典创建 Series 是一种表示带有内在含义标签的数据的强大方法，例如将产品名称映射到价格。字典本身就存储着键值对，当转换为 Pandas Series 时，这些键会直接转化为有意义的索引标签，使得数据更具描述性。例如，一个字典 &#123;'apple': 2.5, 'banana': 1.0, 'orange': 1.5&#125; 转换为 Series 后，可以直接通过产品名称（如 ‘apple’）来访问其价格（2.5）。\n创建 DataFrame\n\n\n从字典列表创建： 可以使用包含字典的列表来创建 DataFrame。列表中的每个字典代表 DataFrame 中的一行，字典的键会成为列名。\ndata =df = pd.DataFrame(data)print(df)\nDataFrame 将会包含 ‘name’ 和 ‘age’ 两列，每一行对应列表中的一个字典。\n\n\n从列表的字典或 NumPy 数组的字典创建： 可以使用字典来创建 DataFrame，其中字典的每个键代表一个列名，而对应的值是一个列表或 NumPy 数组，包含该列的数据。需要确保所有列表或数组的长度相同。\ndata = &#123;&#x27;name&#x27;:, &#x27;age&#x27;: &#125;df = pd.DataFrame(data)print(df)\n这里，‘name’ 列对应一个包含姓名的列表，‘age’ 列对应一个包含年龄的列表。\n\n\n从 Series 的字典创建： 还可以使用字典来创建 DataFrame，其中字典的每个键代表一个列名，而对应的值是一个 Series。DataFrame 的索引将与 Series 的索引对齐。\ns1 = pd.Series(, index=[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;])s2 = pd.Series(, index=[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;d&#x27;])data = &#123;&#x27;col1&#x27;: s1, &#x27;col2&#x27;: s2&#125;df = pd.DataFrame(data)print(df)\n在这个例子中，s1 和 s2 的索引略有不同。Pandas 会根据索引进行对齐，对于 s2 中没有 ‘c’ 索引，以及 s1 中没有 ‘d’ 索引的地方，会填充缺失值（NaN）。\n\n\n从 NumPy 数组创建： 可以从一个二维 NumPy 数组创建 DataFrame。可以指定列名。\narr = np.array([, , ])columns =df = pd.DataFrame(arr, columns=columns)print(df)\n这里，NumPy 数组的数据被放入 DataFrame 中，并使用指定的列名 ‘A’, ‘B’, ‘C’。\n\n\n从另一个 Series 或 DataFrame 创建： 可以通过复制或修改现有的 Series 或 DataFrame 来创建新的 DataFrame。\ns = pd.Series()df1 = pd.DataFrame(s)print(df1)df2 = df.DataFrame(&#123;&#x27;col1&#x27;: , &#x27;col2&#x27;: &#125;)df3 = pd.DataFrame(df2) # 复制 df2print(df3)\n这些方法提供了创建 DataFrame 的多种途径，可以根据不同的数据来源和结构选择最合适的方法。\n\n\n从 Series 的字典创建 DataFrame 提供了处理具有潜在不同索引的数据的灵活性，因为 Pandas 会自动对齐这些索引，并在必要时填充缺失值。当使用不同来源的数据创建 DataFrame 时，各个 Series 可能具有不同的索引标签。Pandas 在将这些 Series 合并为 DataFrame 的列时，会根据它们的索引进行对齐。如果某个 Series 在 DataFrame 的索引中缺少某个标签，Pandas 会在该位置填充 NaN（Not a Number），表示缺失值。这种自动对齐的功能对于整合来自不同来源、可能存在不一致标签的数据非常有用。\n创建 DataFrame 的各种方法能够适应不同的数据输入格式，这使得 Pandas 在处理来自各种来源的数据时非常通用。无论数据是以记录列表的形式存在，还是以命名列的集合，或者是一个原始的数值数组，Pandas 都提供了便捷的方式将其导入到 DataFrame 中，而 DataFrame 是进行后续分析的核心数据结构。\n创建 Series 和 DataFrame 的方法小结\n\n\n\n方法\n数据来源\n描述\n示例代码片段\n\n\n\n\npd.Series(data)\n列表，NumPy 数组\n从列表或 NumPy 数组创建 Series，自动生成整数索引。\npd.Series()\n\n\npd.Series(data, index=index)\n列表，NumPy 数组\n从列表或 NumPy 数组创建 Series，并指定索引。\npd.Series(, index=['a', 'b', 'c'])\n\n\npd.Series(data)\n字典\n从字典创建 Series，字典的键成为索引，值成为 Series 的值。\npd.Series(&#123;'a': 1, 'b': 2&#125;)\n\n\npd.DataFrame(data)\n字典列表\n从字典列表创建 DataFrame，每个字典代表一行，键成为列名。\npd.DataFrame([&#123;'a': 1, 'b': 2&#125;, &#123;'a': 3, 'b': 4&#125;])\n\n\npd.DataFrame(data)\n字典（列表或 NumPy 数组的值）\n从字典创建 DataFrame，每个键代表一列名，值是列表或 NumPy 数组。\npd.DataFrame(&#123;'col1': , 'col2': &#125;)\n\n\npd.DataFrame(data)\n字典（Series 的值）\n从字典创建 DataFrame，每个键代表一列名，值是 Series，DataFrame 的索引与 Series 的索引对齐。\npd.DataFrame(&#123;'col1': pd.Series(), 'col2': pd.Series()&#125;)\n\n\npd.DataFrame(data)\n二维 NumPy 数组\n从二维 NumPy 数组创建 DataFrame，可以指定列名。\npd.DataFrame(np.array([, ]), columns=)\n\n\npd.DataFrame(series)\nSeries\n从一个 Series 创建 DataFrame，Series 成为 DataFrame 的一列。\npd.DataFrame(pd.Series())\n\n\npd.DataFrame(dataframe)\nDataFrame\n复制现有的 DataFrame。\npd.DataFrame(existing_df)\n\n\n\n4. 索引和选择数据\n一旦创建了 Series 或 DataFrame，接下来的重要步骤就是如何访问和选择其中的数据。Pandas 提供了多种灵活的方式来实现这一点。\nSeries 的索引和选择\n对于 Series，可以使用索引标签或位置进行数据访问。\n\n\n使用标签索引： 如果 Series 有明确的标签索引，可以直接使用这些标签来访问数据。\ns = pd.Series(, index=)print(s[&#x27;A&#x27;])  # 输出 10print(s[[&#x27;A&#x27;, &#x27;C&#x27;]]) # 输出包含索引 &#x27;A&#x27; 和 &#x27;C&#x27; 的 Series\n\n\n使用位置索引： 即使 Series 有标签索引，仍然可以使用整数位置索引（从 0 开始）来访问数据，类似于 Python 列表。\nprint(s)   # 输出 10print(s[]) # 输出包含位置 0 和 2 的 Series\n\n\n切片： 可以使用标签或位置进行切片操作来选择 Series 的一部分。\nprint(s) # 使用标签切片，注意包含结束标签 &#x27;B&#x27;print(s[0:2])   # 使用位置切片，不包含结束位置 2\n\n\n布尔索引： 可以使用布尔条件来选择满足条件的元素。\ns = pd.Series()print(s[s &gt; 20]) # 输出值大于 20 的元素\n\n\nDataFrame 的索引和选择\nDataFrame 的数据选择更加复杂，因为它是二维结构。主要有以下几种方法：\n\n\n选择列： 可以像访问字典的键一样，使用列名来选择 DataFrame 的单个列，返回一个 Series。\ndata = &#123;&#x27;name&#x27;:, &#x27;age&#x27;: &#125;df = pd.DataFrame(data)print(df[&#x27;name&#x27;]) # 输出 &#x27;name&#x27; 列的 Series\n也可以使用属性访问的方式选择列（当列名是有效的 Python 标识符时）。\nprint(df.name) # 与 df[&#x27;name&#x27;] 等效\n要选择多个列，可以使用包含列名的列表。\nprint(df[[&#x27;name&#x27;, &#x27;age&#x27;]]) # 输出包含 &#x27;name&#x27; 和 &#x27;age&#x27; 列的 DataFrame\n\n\n选择行： 选择行主要使用 .loc 和 .iloc 索引器。\n\n\n.loc： 基于标签进行索引。可以使用行索引标签选择单行或多行。\ndf = pd.DataFrame(data, index=[&#x27;row1&#x27;, &#x27;row2&#x27;, &#x27;row3&#x27;])print(df.loc[&#x27;row1&#x27;])       # 输出标签为 &#x27;row1&#x27; 的行，以 Series 形式print(df.loc[[&#x27;row1&#x27;, &#x27;row3&#x27;]]) # 输出标签为 &#x27;row1&#x27; 和 &#x27;row3&#x27; 的行，以 DataFrame 形式\n也可以使用标签进行切片。\nprint(df.loc[&#x27;row1&#x27;:&#x27;row2&#x27;]) # 选择标签从 &#x27;row1&#x27; 到 &#x27;row2&#x27; 的行（包含 &#x27;row2&#x27;）\n\n\n.iloc： 基于整数位置进行索引。可以使用整数位置选择单行或多行。\nprint(df.iloc)        # 输出第一行（位置索引为 0），以 Series 形式print(df.iloc[])     # 输出第一行和第三行，以 DataFrame 形式\n也可以使用整数位置进行切片。\nprint(df.iloc[0:2])      # 选择位置索引从 0 到 1 的行（不包含 2）\n\n\n\n\n选择特定单元格： 可以结合行和列的选择来访问 DataFrame 中的特定单元格。\n\n\n使用 .loc：先指定行标签，再指定列标签。\nprint(df.loc[&#x27;row1&#x27;, &#x27;name&#x27;]) # 输出标签为 &#x27;row1&#x27; 的行的 &#x27;name&#x27; 列的值print(df.loc[[&#x27;row1&#x27;, &#x27;row2&#x27;], [&#x27;name&#x27;, &#x27;age&#x27;]]) # 选择指定行和列的子集\n\n\n使用 .iloc：先指定行位置，再指定列位置。\nprint(df.iloc)      # 输出第一行第一列的值print(df.iloc[, ]) # 选择指定位置的行和列的子集\n\n\n\n\n布尔索引： 可以使用列的条件来选择满足条件的行。\nprint(df[df[&#x27;age&#x27;] &gt; 25]) # 输出 &#x27;age&#x27; 列中值大于 25 的所有行\n可以组合多个条件，使用 &amp; (and) 和 | (or) 运算符。\nprint(df[(df[&#x27;age&#x27;] &gt; 25) &amp; (df[&#x27;name&#x27;]!= &#x27;Bob&#x27;)])\n\n\n理解不同的索引和选择方法是有效使用 Pandas 进行数据分析的关键。.loc 基于标签，更易于理解数据的含义，而 .iloc 基于位置，更类似于传统的数组索引。在实际应用中，根据具体的需求选择合适的方法。\n5. 数据操作\nPandas 提供了丰富的功能来操作 Series 和 DataFrame 中的数据，包括过滤、排序、添加或删除列、以及应用函数等。\n过滤数据\n在前面的索引和选择部分已经介绍过布尔索引，这是过滤 DataFrame 中数据的常用方法。通过创建一个布尔 Series，根据条件判断每一行是否保留。\ndata = &#123;&#x27;name&#x27;:, &#x27;age&#x27;: , &#x27;city&#x27;:&#125;df = pd.DataFrame(data)# 选择年龄大于 25 的行older_than_25 = df[df[&#x27;age&#x27;] &gt; 25]print(older_than_25)# 选择城市为 &#x27;New York&#x27; 或 &#x27;Paris&#x27; 的行in_ny_or_paris = df[df[&#x27;city&#x27;].isin([&#x27;New York&#x27;, &#x27;Paris&#x27;])]print(in_ny_or_paris)\n排序数据\n可以使用 .sort_values() 方法根据一个或多个列的值对 DataFrame 进行排序。对于 Series，可以使用 .sort_values() 方法按值排序，或使用 .sort_index() 方法按索引排序。\n# 按 &#x27;age&#x27; 列升序排序sorted_by_age = df.sort_values(by=&#x27;age&#x27;)print(sorted_by_age)# 按 &#x27;age&#x27; 列降序排序sorted_by_age_desc = df.sort_values(by=&#x27;age&#x27;, ascending=False)print(sorted_by_age_desc)# 按多个列排序，先按 &#x27;age&#x27; 升序，再按 &#x27;name&#x27; 升序sorted_by_age_name = df.sort_values(by=[&#x27;age&#x27;, &#x27;name&#x27;])print(sorted_by_age_name)s = pd.Series(, index=[&#x27;c&#x27;, &#x27;a&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;b&#x27;])# 按值排序sorted_series_values = s.sort_values()print(sorted_series_values)# 按索引排序sorted_series_index = s.sort_index()print(sorted_series_index)\n添加或删除列\n\n\n添加新列： 可以像操作字典一样，直接为 DataFrame 添加新的列。\ndf[&#x27;salary&#x27;] = print(df)# 基于现有列计算新列df[&#x27;age_plus_5&#x27;] = df[&#x27;age&#x27;] + 5print(df)\n\n\n删除列： 可以使用 .drop() 方法删除列。需要指定 axis=1 来表示删除的是列。\ndf_dropped_salary = df.drop(&#x27;salary&#x27;, axis=1)print(df_dropped_salary)# 删除多个列columns_to_drop = [&#x27;age_plus_5&#x27;, &#x27;city&#x27;]df_dropped_multiple = df.drop(columns_to_drop, axis=1)print(df_dropped_multiple)\n\n\n应用函数\nPandas 提供了将函数应用于 Series 或 DataFrame 的强大功能，包括 .apply(), .map() 和 .applymap() 方法。\n\n\n.apply()： 可以应用于 Series 的每个值或 DataFrame 的每一行或每一列。\ndef square(x):    return x * xs = pd.Series()squared_series = s.apply(square)print(squared_series)# 应用于 DataFrame 的列df_sum_age = df[[&#x27;age&#x27;]].apply(sum)print(df_sum_age)# 应用于 DataFrame 的行def describe_row(row):    return f&quot;&#123;row[&#x27;name&#x27;]&#125; is &#123;row[&#x27;age&#x27;]&#125; years old and lives in &#123;row[&#x27;city&#x27;]&#125;.&quot;row_descriptions = df.apply(describe_row, axis=1)print(row_descriptions)\n\n\n.map()： 主要用于 Series，将函数或字典映射应用于 Series 的每个元素。\ncity_map = &#123;&#x27;New York&#x27;: &#x27;NY&#x27;, &#x27;London&#x27;: &#x27;LDN&#x27;, &#x27;Paris&#x27;: &#x27;PR&#x27;, &#x27;Tokyo&#x27;: &#x27;TK&#x27;&#125;df[&#x27;city_code&#x27;] = df[&#x27;city&#x27;].map(city_map)print(df)\n\n\n.applymap()： 只能应用于 DataFrame，将函数应用于 DataFrame 的每个元素。\ndf_numeric = df[[&#x27;age&#x27;, &#x27;salary&#x27;]]def add_100(x):    return x + 100df_added = df_numeric.applymap(add_100)print(df_added)\n\n\n这些数据操作功能使得 Pandas 成为处理和转换数据的强大工具。通过灵活地组合这些操作，可以完成复杂的数据清洗和准备任务。\n6. 基本数据分析\nPandas 不仅用于数据操作，还提供了进行基本数据分析的功能，例如统计计算、聚合和分组等。\n统计计算\nPandas Series 和 DataFrame 提供了许多内置的统计方法，用于快速计算数据的描述性统计信息。\n\n\n常用统计方法：\n\n.count()：计算非缺失值的数量。\n.sum()：计算总和。\n.mean()：计算均值。\n.median()：计算中位数。\n.min()：计算最小值。\n.max()：计算最大值。\n.std()：计算标准差。\n.describe()：生成包含计数、均值、标准差、最小值、四分位数和最大值的描述性统计信息。\n\ns = pd.Series([1, 2, 3, 4, 5, np.nan])print(s.count())   # 输出 5print(s.sum())     # 输出 15.0print(s.mean())    # 输出 3.0print(s.median())  # 输出 3.0print(s.describe()) # 输出 Series 的描述性统计信息data = &#123;&#x27;col1&#x27;: [1, 2, 3, np.nan], &#x27;col2&#x27;: &#125;df = pd.DataFrame(data)print(df.mean())   # 输出每列的均值print(df.describe()) # 输出 DataFrame 的描述性统计信息\n\n\n聚合\n聚合操作是指将多个值汇总为一个值的过程。Pandas 提供了 .agg() 方法来执行各种聚合操作。\nprint(df.agg([&#x27;sum&#x27;, &#x27;mean&#x27;, &#x27;max&#x27;])) # 对 DataFrame 的每一列应用多个聚合函数print(df.agg(&#123;&#x27;col1&#x27;: [&#x27;sum&#x27;, &#x27;min&#x27;], &#x27;col2&#x27;: [&#x27;mean&#x27;, &#x27;max&#x27;]&#125;)) # 对不同的列应用不同的聚合函数\n分组\n分组是指根据一个或多个列的值将数据分成不同的组，然后对每个组应用聚合或其他操作。Pandas 使用 .groupby() 方法来实现分组操作。\ndata = &#123;&#x27;team&#x27;:,        &#x27;player&#x27;: [&#x27;P1&#x27;, &#x27;P2&#x27;, &#x27;P3&#x27;, &#x27;P4&#x27;, &#x27;P5&#x27;, &#x27;P6&#x27;, &#x27;P7&#x27;],        &#x27;points&#x27;: &#125;df = pd.DataFrame(data)# 按 &#x27;team&#x27; 列分组，并计算每个组的平均 pointsgrouped_by_team = df.groupby(&#x27;team&#x27;)[&#x27;points&#x27;].mean()print(grouped_by_team)# 按 &#x27;team&#x27; 列分组，并计算每个组的 points 的总和和最大值grouped_agg = df.groupby(&#x27;team&#x27;)[&#x27;points&#x27;].agg([&#x27;sum&#x27;, &#x27;max&#x27;])print(grouped_agg)# 按多个列分组grouped_multiple = df.groupby([&#x27;team&#x27;, &#x27;player&#x27;])[&#x27;points&#x27;].sum()print(grouped_multiple)\n分组操作是数据分析中非常重要的技术，可以帮助我们理解数据中不同类别之间的差异和关系。\n7. 处理缺失数据\n在实际数据分析中，经常会遇到缺失数据。Pandas 使用 NaN（Not a Number）来表示浮点数和非浮点数组中的缺失值。Python 本身也有一个 None 值，Pandas 在某些情况下也会将其视为缺失值。\n检测缺失数据\n可以使用 .isnull() 和 .notnull() 方法来检测 DataFrame 或 Series 中的缺失值。这两个方法会返回一个布尔型的 DataFrame 或 Series，指示每个值是否为缺失值。\ndata = &#123;&#x27;col1&#x27;: [1, 2, np.nan, 4], &#x27;col2&#x27;: [np.nan, 6, 7, 8]&#125;df = pd.DataFrame(data)print(df.isnull())print(df.notnull())\n可以使用 .sum() 方法结合 .isnull() 或 .notnull() 来统计每列或每行的缺失值数量。\nprint(df.isnull().sum()) # 统计每列的缺失值数量print(df.isnull().sum(axis=1)) # 统计每行的缺失值数量\n处理缺失数据的方法\nPandas 提供了几种处理缺失数据的方法：\n\n\n删除缺失值： 可以使用 .dropna() 方法删除包含缺失值的行或列。\n# 删除包含任何缺失值的行df_dropped_rows = df.dropna()print(df_dropped_rows)# 删除包含任何缺失值的列df_dropped_cols = df.dropna(axis=1)print(df_dropped_cols)# 删除所有值都缺失的行df_dropped_all_na_rows = df.dropna(how=&#x27;all&#x27;)print(df_dropped_all_na_rows)# 删除至少有两个非缺失值的行df_dropped_thresh_rows = df.dropna(thresh=2)print(df_dropped_thresh_rows)\n\n\n填充缺失值： 可以使用 .fillna() 方法用指定的值或方法填充缺失值。\n# 用 0 填充所有缺失值df_filled_zero = df.fillna(0)print(df_filled_zero)# 用列的均值填充缺失值df_filled_mean = df.fillna(df.mean())print(df_filled_mean)# 使用前一个有效值填充（向前填充）df_filled_ffill = df.fillna(method=&#x27;ffill&#x27;)print(df_filled_ffill)# 使用后一个有效值填充（向后填充）df_filled_bfill = df.fillna(method=&#x27;bfill&#x27;)print(df_filled_bfill)\n\n\n选择哪种方法处理缺失数据取决于具体的数据和分析需求。删除缺失值可能会导致数据丢失，而填充缺失值则需要选择合适的填充策略，避免引入偏差。\n8. 合并和连接 DataFrame\nPandas 提供了将多个 DataFrame 合并或连接在一起的功能，类似于 SQL 中的 JOIN 操作。主要使用 pd.merge() 和 pd.concat() 函数。\npd.merge()\npd.merge() 函数用于基于一个或多个共同的列将两个 DataFrame 连接起来。\ndf1 = pd.DataFrame(&#123;&#x27;key&#x27;:, &#x27;value&#x27;: &#125;)df2 = pd.DataFrame(&#123;&#x27;key&#x27;:, &#x27;value2&#x27;: &#125;)# 内连接：只保留两个 DataFrame 中 &#x27;key&#x27; 列都存在的行merged_inner = pd.merge(df1, df2, on=&#x27;key&#x27;)print(merged_inner)# 左连接：保留左边的 DataFrame 的所有行，右边的 DataFrame 中匹配的行。如果右边没有匹配，则填充 NaN。merged_left = pd.merge(df1, df2, on=&#x27;key&#x27;, how=&#x27;left&#x27;)print(merged_left)# 右连接：保留右边的 DataFrame 的所有行，左边的 DataFrame 中匹配的行。如果左边没有匹配，则填充 NaN。merged_right = pd.merge(df1, df2, on=&#x27;key&#x27;, how=&#x27;right&#x27;)print(merged_right)# 外连接：保留两个 DataFrame 的所有行。如果某个键在一个 DataFrame 中不存在，则填充 NaN。merged_outer = pd.merge(df1, df2, on=&#x27;key&#x27;, how=&#x27;outer&#x27;)print(merged_outer)# 基于多个列进行连接df3 = pd.DataFrame(&#123;&#x27;key1&#x27;:, &#x27;key2&#x27;: [&#x27;X&#x27;, &#x27;Y&#x27;, &#x27;Z&#x27;, &#x27;W&#x27;], &#x27;value&#x27;: &#125;)df4 = pd.DataFrame(&#123;&#x27;key1&#x27;:, &#x27;key2&#x27;: [&#x27;Y&#x27;, &#x27;W&#x27;, &#x27;V&#x27;, &#x27;U&#x27;], &#x27;value2&#x27;: &#125;)merged_multi_key = pd.merge(df3, df4, on=[&#x27;key1&#x27;, &#x27;key2&#x27;])print(merged_multi_key)\npd.concat()\npd.concat() 函数用于沿着指定的轴将多个 Series 或 DataFrame 拼接在一起。\ns1 = pd.Series()s2 = pd.Series()concatenated_series = pd.concat([s1, s2])print(concatenated_series)df5 = pd.DataFrame(&#123;&#x27;col1&#x27;: , &#x27;col2&#x27;: &#125;)df6 = pd.DataFrame(&#123;&#x27;col1&#x27;: , &#x27;col2&#x27;: &#125;)concatenated_df_rows = pd.concat([df5, df6]) # 默认按行拼接 (axis=0)print(concatenated_df_rows)concatenated_df_cols = pd.concat([df5, df6], axis=1) # 按列拼接print(concatenated_df_cols)# 使用 keys 参数为拼接后的 DataFrame 添加一个额外的层级索引concatenated_keys = pd.concat([df5, df6], keys=[&#x27;first&#x27;, &#x27;second&#x27;])print(concatenated_keys)\n合并和连接操作是整合来自不同数据源的数据的关键步骤，使得我们可以进行更全面的分析。\n9. 输入与输出\nPandas 提供了方便的方法来读取和写入各种格式的文件，例如 CSV、Excel、SQL 数据库等。\n读取文件\n\n\nCSV 文件： 使用 pd.read_csv() 函数读取 CSV 文件。\n# df = pd.read_csv(&#x27;your_file.csv&#x27;)# 可以指定分隔符、编码等参数# df = pd.read_csv(&#x27;your_file.csv&#x27;, sep=&#x27;,&#x27;, encoding=&#x27;utf-8&#x27;)\n\n\nExcel 文件： 使用 pd.read_excel() 函数读取 Excel 文件。\n# df = pd.read_excel(&#x27;your_file.xlsx&#x27;)# 可以指定 sheet 名称或索引# df = pd.read_excel(&#x27;your_file.xlsx&#x27;, sheet_name=&#x27;Sheet1&#x27;)\n\n\n其他格式： Pandas 还支持读取 JSON (pd.read_json())、HTML (pd.read_html())、SQL 数据库 (pd.read_sql()) 等多种格式的文件。\n\n\n写入文件\n\n\nCSV 文件： 使用 .to_csv() 方法将 DataFrame 写入 CSV 文件。\n# df.to_csv(&#x27;output.csv&#x27;)# 可以设置是否包含索引、分隔符等参数# df.to_csv(&#x27;output.csv&#x27;, index=False, sep=&#x27;;&#x27;)\n\n\nExcel 文件： 使用 .to_excel() 方法将 DataFrame 写入 Excel 文件。\n# df.to_excel(&#x27;output.xlsx&#x27;)# 可以设置 sheet 名称、是否包含索引等参数# df.to_excel(&#x27;output.xlsx&#x27;, sheet_name=&#x27;Sheet2&#x27;, index=False)\n\n\n其他格式： 类似地，Pandas 也提供了将 DataFrame 写入 JSON (.to_json())、HTML (.to_html())、SQL 数据库 (.to_sql()) 等格式的方法。\n\n\n输入输出功能使得 Pandas 能够方便地与外部数据进行交互，是数据分析流程中不可或缺的一环。\n10. 总结\nPandas 是 Python 中用于数据操作和分析的核心库。本指南介绍了 Pandas 的基本概念，包括其核心数据结构 Series 和 DataFrame，以及如何创建、索引、选择、操作、分析、处理缺失数据、合并连接数据以及进行文件输入输出。掌握这些基本操作是使用 Pandas 进行更高级数据分析的基础。\n对于 Python 初学者来说，Pandas 提供了一种强大且直观的方式来处理和理解数据。通过不断地练习和应用，可以更深入地掌握 Pandas 的各种功能，并将其应用于实际的数据分析项目中。建议在掌握本指南中的内容后，进一步探索 Pandas 的高级特性，例如时间序列分析、更复杂的数据聚合和转换等，以提升数据分析的能力。\n","categories":["数据分析"],"tags":["python","数据操作"]},{"title":"SQL常用函数补充","url":"/post/SQLfunc.html","content":"SQL 执行顺序与常用函数\n🔄 SQL 语句执行顺序\n\nFROM\n从数据库复制原始表（生成临时表）\nWHERE\n在临时表中筛选符合条件的数据行\nGROUP BY\n按指定字段分组（类似Excel数据透视表的行标签）\nHAVING\n筛选满足条件的分组\nORDER BY\n对结果进行排序\nLIMIT\n限制显示行数\nSELECT\n最终提取显示的字段\n\n\n📝 注意：SELECT *实际在最后阶段执行\n\n\n常用函数汇总\n一、数学函数\nCEIL(x) / CEILING(x)\n\n\n功能：向上取整，返回大于或等于x的最小整数\n\n\n参数：\n\nx：要取整的数值\n\n\n\n示例：\n\n\n\n表达式\n结果\n\n\n\n\nCEIL(3.14)\n4\n\n\nCEIL(-3.14)\n-3\n\n\nCEILING(2.01)\n3\n\n\n\n\n\n\nFLOOR(x)\n\n\n功能：向下取整，返回小于或等于x的最大整数\n\n\n参数：\n\nx：要取整的数值\n\n\n\n示例：\n\n\n\n表达式\n结果\n\n\n\n\nFLOOR(3.97)\n3\n\n\nFLOOR(-3.14)\n-4\n\n\n\n\n\n\nROUND(x, y)\n\n\n功能：四舍五入\n\n\n参数：\n\ny&gt;0：保留小数点后y位\ny=0：取整数\ny&lt;0：小数点左侧指定位变0\n\n\n\n示例：\n\n\n\n表达式\n结果\n\n\n\n\nROUND(3.15, 1)\n3.2\n\n\nROUND(14.15, -1)\n10\n\n\n\n\n\n\n二、字符串函数\n\n\n\n函数名/用法\n功能说明\n示例\n示例结果\n\n\n\n\nCONCAT(s1, s2, ...)\n连接字符串（含NULL则返回NULL）\nCONCAT(‘My’,’ ',‘SQL’)\nMy SQL\n\n\n\n\nCONCAT(‘My’, NULL, ‘SQL’)\nNULL\n\n\nREPLACE(s, s1, s2)\n全量替换字符串\nREPLACE(‘MySQL’,‘SQL’,‘sql’)\nMysql\n\n\nLEFT(s, n)\n截取左侧n字符\nLEFT(‘abcdefg’, 3)\nabc\n\n\nRIGHT(s, n)\n截取右侧n字符\nRIGHT(‘abcdefg’, 3)\nefg\n\n\nSUBSTRING(s, n, len)\n从位置n截取len长度（支持负数位置）\nSUBSTRING(‘abcdefg’, -2, 3)\nfg\n\n\n\n\nSUBSTRING(‘abcdefg’, 2)\nbcdefg\n\n\nLOWER(s)\n将字母变为小写\nLOWER(‘A’)\na\n\n\nUPPER(s)\n将字母变为大写\nUPPER(‘a’)\nA\n\n\nCHAR_LENGTH(s)\n返回字符串的字符数\nCHAR_LENGTH(‘数’)\n1\n\n\nLENGTH(s)\n返回字符串的字节数，对于 ASCII 字符，与CHAR_LENGTH的结果是相同的\nLENGTH(‘数’)\n3\n\n\nLOCATE(substr, s, [pos])\n返回substr在s中首次出现的位置，pos为起始\nLOCATE(‘b’, ‘abcde’)\n2\n\n\n\n\nLOCATE(‘b’, ‘abcdebcd’, 3)\n6\n\n\nPOSITION(substr IN s)\n返回substr在s中首次出现的位置\nPOSITION(‘b’ IN ‘abcde’)\n2\n\n\nSUBSTRING_INDEX(s, d, n)\n以分隔符d分割，取第n段（正/负数）\nSUBSTRING_INDEX(‘a,b,c’, ‘,’, 2)\na,b\n\n\n\n\nSUBSTRING_INDEX(‘a,b,c’, ‘,’, -2)\nb,c\n\n\nTRIM(s)\n去除字符串两端的空格\nTRIM(’ abc ')\nabc\n\n\nTRIM([remstr FROM] s)\n去除字符串两端的指定字符\nTRIM(‘a’ FROM ‘aaabcaa’)\nbc\n\n\nTRIM(LEADING remstr FROM s)\n去除字符串左侧的指定字符\nTRIM(LEADING ‘a’ FROM ‘aaabcaa’)\nbcaa\n\n\nTRIM(TRAILING remstr FROM s)\n去除字符串右侧的指定字符\nTRIM(TRAILING ‘a’ FROM ‘aaabcaa’)\naaabc\n\n\n\n补充：GROUP_CONCAT 函数\n功能说明\n将分组内的多个字符串值合并为一个字符串，常用于多值拼接（需配合 GROUP BY 使用）。\nGROUP_CONCAT(    [DISTINCT] 字段名     [ORDER BY 排序字段 [ASC|DESC]]     [SEPARATOR &#x27;分隔符&#x27;])\n示例数据（表 students）：\n\n\n\nclass\nname\n\n\n\n\nA\n张三\n\n\nA\n李四\n\n\nB\n王五\n\n\n\nSELECT     class,    GROUP_CONCAT(name) AS membersFROM studentsGROUP BY class;\n结果：\n\n\n\nclass\nmembers\n\n\n\n\nA\n张三,李四\n\n\nB\n王五\n\n\n\n-- 去重 + 自定义分隔符 + 排序SELECT     class,    GROUP_CONCAT(        DISTINCT name        ORDER BY name DESC        SEPARATOR &#x27;|&#x27;    ) AS membersFROM studentsGROUP BY class;\n\n注意事项\n\n长度限制：受 group_concat_max_len 参数限制（默认1024字节），超长部分被截断\nNULL处理：自动忽略 NULL 值\n跨数据库差异：\n\nMySQL：GROUP_CONCAT\nPostgreSQL：STRING_AGG\nSQL Server：STRING_AGG（2017+版本）\n\n\n\n\n典型应用场景\n\n\n标签聚合\n-- 文章表+标签表联查，合并文章的所有标签SELECT     a.title,    GROUP_CONCAT(t.tag_name) AS tagsFROM articles aJOIN article_tags at ON a.id = at.article_idJOIN tags t ON at.tag_id = t.idGROUP BY a.id;\n\n\n路径生成\n-- 生成层级路径（部门树结构）SELECT     dept_id,    GROUP_CONCAT(parent_name SEPARATOR &#x27; &gt; &#x27;) AS full_pathFROM department_hierarchyGROUP BY dept_id;\n\n\n动态SQL拼接\n-- 生成批量更新语句（示例用途）SELECT     CONCAT(        &#x27;UPDATE users SET status=1 WHERE id IN (&#x27;,        GROUP_CONCAT(id SEPARATOR &#x27;,&#x27;),        &#x27;);&#x27;    ) AS sql_statementFROM temp_ids;\n\n\n补充：正则表达式函数\n1. 字符集（[] 内可用的符号）\n\n\n\n符号\n含义\n示例\n匹配示例\n\n\n\n\na-z\n任意小写字母\n[a-z]\na, b, …, z\n\n\nA-Z\n任意大写字母\n[A-Z]\nA, B, …, Z\n\n\n0-9\n任意数字\n[0-9]\n0, 1, …, 9\n\n\n.\n字面量点（需转义 \\.）\n[a-z.]\na, b, .\n\n\n_\n下划线\n[a-z_]\na, _\n\n\n%\n百分号\n[a-z%]\na, %\n\n\n+\n加号（在 [] 内是普通字符）\n[a-z+]\na, +\n\n\n-\n减号（需放在开头或结尾，否则表示范围如 a-z）\n[-a-z] 或 [a-z-]\n-, a\n\n\n^\n在 [] 内开头表示否定（如 [^a-z] 匹配非小写字母）\n[^0-9]\nA, !（不匹配 1）\n\n\n\\w\n等价于 [a-zA-Z0-9_]（单词字符）\n[\\w]\na, 1, _\n\n\n\\d\n等价于 [0-9]（数字）\n[\\d]\n0, 1\n\n\n\\s\n空白字符（空格、制表符 \\t、换行 \\n 等）\n[\\s]\n``, \\t\n\n\n\\b\n匹配 单词和非单词字符之间的位置（如空格、标点符号、字符串开头/结尾等）\n\\\\bwordword\\\\b\\\\bword\\\\b\n匹配单词开头、结尾和整个单词\n\n\n\n\n2. 量词（控制出现次数，单个字符不用加）\n\n\n\n量词\n含义\n示例\n匹配示例\n\n\n\n\n*\n零次或多次\na*\n&quot;&quot;, a, aa（允许空字符串）\n\n\n+\n一次或多次\na+\na, aa（不匹配空字符串）\n\n\n?\n零次或一次（可选）\na?\n&quot;&quot;, a\n\n\n&#123;n&#125;\n恰好 n 次\na&#123;2&#125;\naa\n\n\n&#123;n,&#125;\n至少 n 次\na&#123;2,&#125;\naa, aaa\n\n\n&#123;n,m&#125;\nn 到 m 次\na&#123;2,4&#125;\naa, aaa, aaaa\n\n\n\n\n3. 边界和转义\n\n\n\n符号\n含义\n示例\n作用\n\n\n\n\n^\n匹配字符串开头\n^[a-z]\n必须以小写字母开头\n\n\n$\n匹配字符串结尾\n[a-z]$\n必须以小写字母结尾\n\n\n\\\n转义特殊字符（如 \\\\. 匹配点）\nexample\\\\.com\n避免 . 被解释为&quot;任意字符&quot;\n\n\n`\n`\n或逻辑（匹配左边或右边）\n`cat\n\n\n\n\n4. 组合用法示例\n\n\n\n正则表达式\n含义\n匹配示例\n\n\n\n\n^[a-zA-Z0-9._%+-]+@\n邮箱本地部分（字母/数字/._%±，至少1字符）\nuser, name+123\n\n\n@[a-zA-Z0-9.-]+\\\\.[a-z]&#123;2,&#125;$\n域名部分（含点和至少2字母TLD）\n@example.com, @sub.domain.co\n\n\n\n\n\n注意事项\n\n减号 -：在 [] 内如果不是开头/结尾，表示范围（如 a-z）。\n\n✅ 正确：[a-z-] 或 [-a-z]\n❌ 错误：[a-z-0-9]（会被解析为 z 到 - 的范围）\n\n\n点 .：在 [] 外是通配符（匹配任意字符），需转义 \\. 才能匹配字面量点。\n大小写敏感：默认区分大小写，添加 i 标志可忽略（如 /^[a-z]+$/i）。\n\n\n1. 正则匹配检测\n\n\n\n函数/操作符\n功能说明\n数据库支持\n示例\n\n\n\n\nREGEXP_LIKE(str, pattern)\n检查字符串是否匹配正则模式\nOracle, MySQL 8.0+,\nSELECT * FROM users WHERE REGEXP_LIKE(email, '^[a-z0-9]+@[a-z]+\\.com$')\n\n\nstr REGEXP pattern\n简写匹配操作符\nMySQL, MariaDB\nSELECT 'abc123' REGEXP '^[a-z]+[0-9]+$' → 1 (匹配)\n\n\n~\n正则匹配操作符\nPostgreSQL\nSELECT 'abc' ~ '^a' → true\n\n\n\n2. 正则替换\n\n\n\n函数\n功能说明\n示例\n\n\n\n\nREGEXP_REPLACE(str, pattern, replacement)\n替换匹配正则的内容\nREGEXP_REPLACE('Tel: 010-12345678', '[^0-9]', '') → '01012345678'\n\n\n\n3. 子串提取\n\n\n\n函数\n功能说明\n示例\n\n\n\n\nREGEXP_SUBSTR(str, pattern)\n提取第一个匹配的子串\nREGEXP_SUBSTR('2023Q4 Report', '[0-9]+Q[1-4]') → '2023Q4'\n\n\n\n4. 常用正则模式\n\n\n\n模式\n说明\n应用场景示例\n\n\n\n\n^abc\n以&quot;abc&quot;开头\n验证身份证号开头\n\n\nxyz$\n以&quot;xyz&quot;结尾\n检测文件扩展名\n\n\n[0-9]&#123;4&#125;\n连续4位数字\n提取年份信息\n\n\n\\d&#123;3&#125;-\\d&#123;8&#125;\n匹配电话号码格式\n010-12345678\n\n\n[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]&#123;2,&#125;\n邮箱格式验证\n过滤无效邮箱地址\n\n\n\n5. 跨数据库语法对比\n\n\n\n操作\nMySQL/MariaDB\nPostgreSQL\nOracle\nSQL Server\n\n\n\n\n匹配检测\nREGEXP / RLIKE\n~\nREGEXP_LIKE\nLIKE（有限支持）\n\n\n替换\nREGEXP_REPLACE\nREGEXP_REPLACE\nREGEXP_REPLACE\n无内置函数\n\n\n提取子串\nREGEXP_SUBSTR\nSUBSTRING(str FROM pattern)\nREGEXP_SUBSTR\nPATINDEX+SUBSTRING\n\n\n\n6. 使用示例\n-- 验证手机号格式（11位数字）SELECT *FROM customers WHERE phone REGEXP &#x27;^1[3-9][0-9]&#123;9&#125;$&#x27;;-- 提取带区号的电话号码SELECT   REGEXP_SUBSTR(contact_info, &#x27;\\([0-9]&#123;3&#125;\\) [0-9]&#123;8&#125;&#x27;) AS phone FROM contacts;-- 清理混合文本中的字母SELECT REGEXP_REPLACE(&#x27;a1b2c3&#x27;, &#x27;[A-Za-z]&#x27;, &#x27;&#x27;) → &#x27;123&#x27;;-- 查找包含价格的描述SELECT * FROM products WHERE description ~ &#x27;\\$[0-9]+\\.[0-9]&#123;2&#125;&#x27;;\n\n\n字符集敏感：注意数据库字符集设置（如中文匹配需用[一-龥]）\n特殊字符转义：需用\\\\转义（如匹配点号需写\\\\.）\n\n\n\n三、日期函数\n时间计算\nDATE_ADD(date, INTERVAL expr type)  -- 时间加法DATE_SUB(date, INTERVAL expr type)  -- 时间减法\n\n示例：\n\nSELECT DATE_ADD(&#x27;2021-08-03 23:59:59&#x27;, INTERVAL 1 SECOND) → &#x27;2021-08-04 00:00:00&#x27;SELECT DATE_SUB(&#x27;2021-08-03&#x27;, INTERVAL 2 MONTH) → &#x27;2021-06-03&#x27;\n时间差与格式化\n\n\n\n函数\n功能说明\n示例\n\n\n\n\nDATEDIFF(date1, date2)\n计算日期差（忽略时间）\nDATEDIFF(‘2021-06-08’,‘2021-06-01’) →7\n\n\nDATE_FORMAT(date, format)\n日期格式化\nDATE_FORMAT(NOW(),‘%Y-%m’) → 2023-12\n\n\n\n📅 DATE_FORMAT 格式符对照表\n\n\n\n格式符\n描述\n示例值\n\n\n\n\n日期相关\n\n\n\n\n%Y\n四位年份\n2023\n\n\n%y\n两位年份\n23\n\n\n%m\n两位月份（01-12）\n07\n\n\n%c\n月份（1-12，无前导零）\n7\n\n\n%M\n月份英文全称\nJanuary, December\n\n\n%b\n月份缩写\nJan, Dec\n\n\n%d\n两位日期（01-31）\n09\n\n\n%e\n日期（1-31，无前导零）\n9\n\n\n%D\n英文后缀日期（1st, 2nd…）\n1st, 22nd\n\n\n时间相关\n\n\n\n\n%H\n24小时制小时（00-23）\n15\n\n\n%h\n12小时制小时（01-12）\n03\n\n\n%i\n分钟（00-59）\n08\n\n\n%S\n秒（00-59）\n45\n\n\n%p\nAM/PM\nAM, PM\n\n\n星期相关\n\n\n\n\n%W\n星期全称\nMonday, Sunday\n\n\n%a\n星期缩写\nMon, Sun\n\n\n%w\n数字星期（0=周日, 1=周一…）\n1 (周一), 0 (周日)\n\n\n组合格式\n\n\n\n\n%T\n时间（HH:mm:ss）\n23:59:58\n\n\n%r\n带AM/PM的时间（hh:mm:ss AM）\n11:59:58 PM\n\n\n%x\n年份周编号（年份部分）\n2023 (用于周计算)\n\n\n%v\n周编号（周一为周起始）\n52\n\n\n\n使用示例\n-- 原始时间：2023-07-25 14:30:45DATE_FORMAT(date, &#x27;%Y/%m/%d %H:%i&#x27;)    → 2023/07/25 14:30DATE_FORMAT(date, &#x27;%b %D %Y %h:%i %p&#x27;) → Jul 25th 2023 02:30 PMDATE_FORMAT(date, &#x27;%W, %M %e&#x27;)         → Tuesday, July 25\n\n四、条件判断函数\nIF 函数\nIF(expr, v1, v2)  -- expr为真返回v1，否则v2\n\n示例：IF(1&gt;2, 'Y', 'N') → N\n\nCASE 表达式\n-- 简单CASECASE expr     WHEN v1 THEN r1     WHEN v2 THEN r2     ELSE rn END-- 搜索CASECASE     WHEN condition1 THEN r1     WHEN condition2 THEN r2     ELSE rn END\n\n示例：\n\nCASE WHEN 1&lt;0 THEN &#x27;T&#x27; ELSE &#x27;F&#x27; END → F\nNULLIF vs. IFNULL\n\n\n\n特性\nNULLIF\nIFNULL\n\n\n\n\n功能\n比较两个值，相等时返回 NULL\n检查一个值是否为 NULL，并提供替代值\n\n\n返回值\n返回 NULL 或 expression1\n返回 expression1 或 expression2\n\n\n常见用途\n避免除零错误、处理重复值\n提供默认值、数据清洗\n\n\n示例\nNULLIF(a, b)：如果 a = b，返回 NULL\nIFNULL(a, b)：如果 a 是 NULL，返回 b\n\n\n\nCOALESCE 函数\n功能说明\n返回参数列表中第一个非 NULL 的值，常用于处理缺失值替换。\n语法\nCOALESCE(v1, v2, v3, ..., vn)\n执行逻辑\n\n从左到右依次检查参数\n返回第一个不为 NULL 的值\n如果所有参数均为 NULL，则返回 NULL\n\n示例\n-- 数据示例：name字段为NULL，nickname=&#x27;小张&#x27;，default_name=&#x27;匿名用户&#x27;COALESCE(NULL, &#x27;小张&#x27;, &#x27;匿名用户&#x27;) → &#x27;小张&#x27;COALESCE(NULL, NULL, &#x27;2023-01-01&#x27;) → &#x27;2023-01-01&#x27;COALESCE(NULL, NULL, NULL) → NULL\n与 IFNULL 的对比\n\n\n\n特性\nCOALESCE\nIFNULL\n\n\n\n\n参数数量\n支持多个参数\n仅支持两个参数\n\n\n功能范围\n多条件NULL处理\n简单双值替换\n\n\n可读性\n更适合多字段优先级选择\n适合简单场景\n\n\n\n等价写法\nCOALESCE(a, b, c) -- 等价于 CASE     WHEN a IS NOT NULL THEN a     WHEN b IS NOT NULL THEN b     ELSE c END\n常见使用场景\n\n\n多级备用值选择\n-- 优先显示用户昵称，其次邮箱，最后显示&#x27;未知用户&#x27;SELECT COALESCE(nickname, email, &#x27;未知用户&#x27;) AS display_name FROM users;\n\n\nNULL值数据清洗\n-- 将NULL金额转换为0计算总和SELECT SUM(COALESCE(amount, 0)) AS total FROM orders;\n\n\n多字段优先级合并\n-- 合并地址信息（优先使用详细地址，没有时使用区域地址）SELECT COALESCE(detail_address, area_address) AS full_address FROM locations;\n\n\n五、类型转换函数\nCAST(x AS type)\n\n支持类型：CHAR(n), DATE, TIME,DATETIME,DECIMAL等\n示例：CAST('2023' AS DECIMAL) → 2023\n\n六、表连接补充自连接\n自连接介绍\n自连接是一种特殊的连接查询，指的是同一个表自己与自己进行连接。常用于处理具有层级关系的数据，例如员工与经理、分类的父类与子类等场景。自连接实际上是将同一个表视为两个不同的实例，通过别名进行区分，并根据关联条件进行连接。\n自连接语法\n自连接可以使用内连接或外连接语法，核心是为同一表赋予不同的别名：\n-- 内自连接（查询匹配条件的记录）SELECT 字段 FROM 表 AS 别名1 INNER JOIN 表 AS 别名2 ON 别名1.字段 = 别名2.关联字段;-- 左自连接（以左表为主，查询右表可能不存在的记录）SELECT 字段 FROM 表 AS 别名1 LEFT JOIN 表 AS 别名2 ON 别名1.字段 = 别名2.关联字段;\n自连接示例\n场景：假设有员工表 employees，结构如下：\n\n\n\nid\nname\nmanager_id\n\n\n\n\n1\n张三\nNULL\n\n\n2\n李四\n1\n\n\n3\n王五\n1\n\n\n4\n赵六\n2\n\n\n\n需求：查询每个员工及其对应经理的名字（包括没有经理的员工）。\nSQL语句：\nSELECT     e1.name AS employee_name,    e2.name AS manager_nameFROM employees e1LEFT JOIN employees e2 ON e1.manager_id = e2.id;\n查询结果：\n\n\n\nemployee_name\nmanager_name\n\n\n\n\n张三\nNULL\n\n\n李四\n张三\n\n\n王五\n张三\n\n\n赵六\n李四\n\n\n\n自连接应用场景\n\n层级关系：如组织架构、分类层级（父类与子类）。\n数据对称性分析：如社交网络中的用户关系（用户A和用户B互为好友）。\n路径查询：如地铁站点之间的连接关系。\n\n注意事项\n\n别名必要性：必须为表指定不同的别名以区分左、右表。\n性能优化：自连接可能引发较大的计算开销，尤其是大表操作时，建议在关联字段上创建索引。\n连接类型选择：\n\n使用 内自连接 时，只返回满足条件的记录（如“有经理的员工”）。\n使用 左自连接 时，会包含左表所有记录，右表无匹配则填充 NULL（如“包括无经理的员工”）。\n\n\n\n七、交叉连接 CROSS JOIN\n功能说明\n生成两个表的笛卡尔积（所有行的组合），无关联条件。\n特点：\n\n结果集行数 = 表A行数 × 表B行数\n不需要连接条件（无ON子句）\n常用于生成组合数据、测试数据等场景\n\n语法形式\n-- 显式语法SELECT * FROM table1 CROSS JOIN table2;-- 隐式语法（等同于CROSS JOIN）SELECT * FROM table1, table2;\n典型应用场景\n\n生成组合数据\n如：颜色与尺寸组合、日期与产品组合\n数据模拟测试\n快速生成大量测试数据\n全量关联分析\n计算所有可能的组合关系\n\n与INNER JOIN的区别\n\n\n\n特性\nCROSS JOIN\nINNER JOIN\n\n\n\n\n连接条件\n无需ON子句\n必须使用ON子句\n\n\n结果集逻辑\n强制所有行组合\n仅匹配关联条件的行\n\n\n数据量\n可能极大（慎用）\n通常较小\n\n\n\n八、集合操作符 UNION ALL\n功能说明\n用于合并多个查询结果，保留所有记录（包括重复行）\n基本语法\nSELECT 字段列表 FROM 表1UNION ALLSELECT 字段列表 FROM 表2...\n与UNION的区别\n\n\n\n特性\nUNION ALL\nUNION\n\n\n\n\n去重处理\n保留所有记录，包括重复行\n自动去重\n\n\n排序操作\n不排序\n默认进行排序\n\n\n性能\n更高（无去重、排序开销）\n较低\n\n\n\n使用场景\n\n合并分表数据（如按年份拆分的订单表）\n需要保留重复记录的统计场景\n明确知道数据无重复时的性能优化选择\n\n注意事项\n\n合并的SELECT语句必须包含相同数量的字段\n对应字段的数据类型必须兼容\n最终结果集的字段名以第一个SELECT语句为准\n\n使用示例\n-- 合并两个季度的销售数据（保留重复）SELECT product_id, sales FROM Q1_salesUNION ALLSELECT product_id, sales FROM Q2_sales;-- 组合不同表结构数据（使用别名统一字段）SELECT id, name, &#x27;employee&#x27; AS type FROM employeesUNION ALLSELECT customer_id, company_name, &#x27;customer&#x27; FROM customers;\n\n小结\n\n自连接本质：同一表通过别名模拟两个表的连接操作，支持内连接或外连接语法。\n核心步骤：\n\n为同一表赋予不同别名（如 e1, e2）。\n指定连接条件（如 e1.manager_id = e2.id）。\n\n\n适用场景：处理数据内部的层级或对称关系。\n优化建议：合理使用索引，避免全表扫描带来的性能问题。\n\n👀 窗口函数详解\n一、什么是窗口函数？\n窗口函数（Window Function）是一种对查询结果集进行逐行计算的特殊函数，能够：\n\n在保留原始数据行的同时进行聚合/排序等操作\n实现复杂的分组统计需求（如：累计值、移动平均值、排名等）\n不会像GROUP BY那样合并结果集\n\n二、标准语法\n函数名() OVER (    [PARTITION BY 字段]  -- 定义分组窗口    [ORDER BY 字段 [ASC|DESC]]  -- 定义排序规则)\n三、核心组件\n1. PARTITION BY\n\n作用：将数据按指定字段分组，每组称为一个窗口\n类似GROUP BY但不合并结果集\n示例：PARTITION BY department 按部门分组\n\n2. ORDER BY\n\n作用：在窗口内指定排序规则\n示例：ORDER BY sales DESC 按销售额降序排列\n\n四、常用窗口函数\n1. 排序函数\n\n\n\n函数\n特点\n示例结果（相同值处理）\n\n\n\n\nRANK()\n出现并列时跳号（1,1,3）\n1,1,3,4\n\n\nDENSE_RANK()\n出现并列时不跳号（1,1,2）\n1,1,2,3\n\n\nROW_NUMBER()\n强制生成唯一序号\n1,2,3,4\n\n\n\n📝 示例数据（按成绩排序）：\nSELECT     name,    score,    RANK() OVER(ORDER BY score DESC) AS rank,    DENSE_RANK() OVER(ORDER BY score DESC) AS dense_rank,    ROW_NUMBER() OVER(ORDER BY score DESC) AS row_numFROM students;\n\n\n\nname\nscore\nrank\ndense_rank\nrow_num\n\n\n\n\n张三\n95\n1\n1\n1\n\n\n李四\n95\n1\n1\n2\n\n\n王五\n90\n3\n2\n3\n\n\n\n2. 偏移分析函数\n\n\n\n函数\n功能说明\n参数说明\n\n\n\n\nLAG(字段, 偏移量[, 默认值])\n获取当前行向上偏移的值\n默认偏移量=1，默认值=NULL\n\n\nLEAD(字段, 偏移量[, 默认值])\n获取当前行向下偏移的值\n默认偏移量=1，默认值=NULL\n\n\n\n📝 示例（查看相邻订单金额）：\nSELECT     order_date,    amount,    LAG(amount, 1) OVER(ORDER BY order_date) AS prev_amount,    LEAD(amount, 1) OVER(ORDER BY order_date) AS next_amountFROM orders;\n\n\n\norder_date\namount\nprev_amount\nnext_amount\n\n\n\n\n2023-01-01\n100\nNULL\n150\n\n\n2023-01-02\n150\n100\n200\n\n\n2023-01-03\n200\n150\nNULL\n\n\n\n3.滑动窗口（窗口框架）\n核心概念\n通过定义窗口框架（Window Frame），动态控制计算范围。支持两种模式：\n\n基于行数（ROWS）：物理行偏移\n基于数值范围（RANGE）：逻辑值偏移\n\n标准语法\n函数() OVER (    PARTITION BY ...     ORDER BY ...    [ROWS|RANGE BETWEEN 起始点 AND 结束点])\n框架边界定义\n\n\n\n关键词\n说明\n\n\n\n\nUNBOUNDED PRECEDING\n窗口起始位置（第一行/最小值）\n\n\nUNBOUNDED FOLLOWING\n窗口结束位置（最后一行/最大值）\n\n\nCURRENT ROW\n当前行\n\n\nn PRECEDING\n当前行向前n行/n值（包含当前行）\n\n\nn FOLLOWING\n当前行向后n行/n值（包含当前行）\n\n\n\n常用模式示例\n1. 累计计算（默认模式）\nSUM(sales) OVER (    ORDER BY date     ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) -- 等价简写：SUM(sales) OVER (ORDER BY date)\n2. 移动平均（近3天）\nAVG(temperature) OVER (    ORDER BY date     ROWS BETWEEN 2 PRECEDING AND CURRENT ROW)\n3. 对称窗口（前后各1行）\nMAX(score) OVER (    ORDER BY id     ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)\nROWS vs RANGE 对比\n\n\n\n对比项\nROWS\nRANGE\n\n\n\n\n计算逻辑\n按物理行偏移\n按ORDER BY字段的数值偏移\n\n\n适用场景\n明确行数移动（如近3行）\n按数值区间计算（如3天范围）\n\n\n性能\n更高\n较低（需排序计算）\n\n\n数据要求\n无特殊要求\nORDER BY字段需为数值/日期类型\n\n\n\n-- ROWS模式（物理行）SUM(amount) OVER (    ORDER BY date     ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) → 当前行+前1行-- RANGE模式（逻辑值）SUM(amount) OVER (    ORDER BY date     RANGE BETWEEN INTERVAL 1 DAY PRECEDING AND CURRENT ROW) → 当天+前一天的所有记录\n典型应用场景\n\n金融分析\n\n7日移动平均线\n滚动波动率计算\n\n\n电商分析\n\n近30天消费趋势\n周环比增长率\n\n\n运营监控\n\n每小时累计UV\n滑动窗口异常检测\n\n\n\n高级用法示例\n动态最近N条记录统计\nSELECT     order_id,    order_time,    AVG(amount) OVER (        ORDER BY order_time         ROWS BETWEEN 9 PRECEDING AND CURRENT ROW    ) AS last_10_avgFROM orders;\n时间段累计（日期类型）\nSELECT     report_date,    SUM(revenue) OVER (        ORDER BY report_date         RANGE BETWEEN INTERVAL 6 DAY PRECEDING AND CURRENT ROW    ) AS 7day_revenue FROM daily_stats;\n\n注意事项\n\n性能优化\n\n避免大范围窗口（如UNBOUNDED+大数据量表）\n优先使用ROWS模式\n配合合适的索引（ORDER BY字段）\n\n\n边界处理\n\n窗口起始前的行返回NULL\n使用COALESCE处理空值\n\n\n框架限制\n\nRANGE模式不支持n FOLLOWING（MySQL限制）\n不同数据库实现细节可能有差异\n\n\n\n\n五、综合应用场景\n案例：部门薪资排名\nSELECT     department,    name,    salary,    RANK() OVER(PARTITION BY department ORDER BY salary DESC) AS dept_rankFROM employees;\n\n\n\ndepartment\nname\nsalary\ndept_rank\n\n\n\n\n技术部\n张三\n15000\n1\n\n\n技术部\n李四\n12000\n2\n\n\n市场部\n王五\n13000\n1\n\n\n\n六、注意事项\n\n窗口函数执行顺序：在WHERE、GROUP BY之后，ORDER BY之前\n可以组合使用多个窗口函数\n不同数据库支持情况可能不同（MySQL 8.0+支持）\n大数据量时注意性能优化\n\n","categories":["大数据"],"tags":["数据操作","SQL","数据库"]},{"title":"Python 与数据清洗","url":"/post/data-cleaning.html","content":"Python 与数据清洗\n1. 数据清洗的重要性\n在机器学习项目中，数据清洗是至关重要的第一步。它指的是识别并修正数据集中的错误、不一致性、不准确性或缺失部分，以保证数据的质量和适用性。高质量的数据是构建可靠机器学习模型的基石。如果输入到模型中的数据存在缺陷，即使是最先进的算法也无法产生有意义的结果。这正如一句谚语所说：“垃圾进，垃圾出”。\n不良的数据质量可能导致：\n\n模型训练不准确\n预测结果不可靠\n最终损害整个项目的价值与可用性\n\n因此，投入时间和精力进行彻底的数据清洗，是项目成功的先决条件。\n1.1 “脏数据”的常见来源\n\n人为错误\n\n拼写错误\n数值录入失误\n\n\n测量设备故障或精度限制\n\n传感器数据偏差\n仪器读数不稳定\n\n\n数据记录不完整\n\n用户注册时未填写某些字段\n采集过程丢失数据\n\n\n多源数据格式不一致\n\n日期格式（如 YYYY-MM-DD vs DD/MM/YYYY）\n单位表示差异（如米 vs 英尺）\n\n\n\n\n2. 处理缺失值\n缺失值是指在数据集中某些观测的特定特征没有记录或无法获取的情况。理解缺失值的类型对于选择合适的处理方法至关重要。\n2.1 缺失值的类型\n\n\n完全随机缺失（MCAR，Missing Completely At Random）\n\n数据缺失的概率与其他任何观测或特征都无关。\n例如：实验室设备偶然故障导致部分测量结果丢失。\n\n\n\n随机缺失（MAR，Missing At Random）\n\n数据缺失的概率可能与某些已观测到的特征有关，但与缺失值本身无关。\n例如：收入高的人倾向于不填写“家庭收入”字段，但缺失并不依赖于收入数值本身。\n\n\n\n非随机缺失（MNAR，Missing Not At Random）\n\n数据缺失的概率与缺失值本身有关。\n例如：抑郁症患者可能因为症状严重而不愿意填写精神健康调查。\n\n\n\n2.2 处理缺失值的主要方法\n\nTip: 选择何种方法，要综合考虑数据量、缺失比例及其分布机制。\n\n2.2.1 删除（Deletion）\n\n\n行删除\n\n删除包含任何缺失值的整行。\n优点：简单易行；\n缺点：可能丢失大量信息，尤其在缺失比例较高时容易引入偏差。\n适用场景：数据集很大且缺失值非常少时。\n\nimport pandas as pd# 读取示例 DataFramedf = pd.DataFrame(&#123;    &#x27;A&#x27;: [1, 2, None, 4],    &#x27;B&#x27;: [5, None, 7, 8],    &#x27;C&#x27;: [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, None]&#125;)# 删除任何含有缺失值的行df_drop_rows = df.dropna()print(df_drop_rows)\n\n\n列删除\n\n删除缺失值比例超过某个阈值的列。\n优点：避免模型被缺失信息大规模干扰；\n缺点：可能丢失重要特征，需要谨慎判断。\n适用场景：某个特征缺失比例过高且无法合理填充时。\n\n# 假设阈值为 50%threshold = 0.5df_drop_cols = df.dropna(axis=1, thresh=int((1 - threshold) * len(df)))print(df_drop_cols)\n\n\n2.2.2 填充（Imputation）\n\n\n统计填充\n\n\n均值填充：用该特征的平均值替换缺失值。\ndf_mean = df.copy()df_mean[&#x27;A&#x27;] = df_mean[&#x27;A&#x27;].fillna(df_mean[&#x27;A&#x27;].mean())print(df_mean)\n\n\n中位数填充：用该特征的中位数替换缺失值，对异常值更鲁棒。\ndf_median = df.copy()df_median[&#x27;A&#x27;] = df_median[&#x27;A&#x27;].fillna(df_median[&#x27;A&#x27;].median())print(df_median)\n\n\n众数填充：常用于类别型特征，用最频繁出现的值替换缺失值。\ndf_mode = df.copy()mode_value = df_mode[&#x27;C&#x27;].mode()[0]df_mode[&#x27;C&#x27;] = df_mode[&#x27;C&#x27;].fillna(mode_value)print(df_mode)\n\n\n\n\n基于模型的填充\n\n使用回归、KNN 等模型，根据其他特征预测缺失值。\n优点：能够捕捉各变量之间的关系，更准确；\n缺点：实现复杂、计算成本高。\n\nfrom sklearn.impute import KNNImputerimputer = KNNImputer(n_neighbors=3)df_knn = pd.DataFrame(imputer.fit_transform(df[[&#x27;A&#x27;, &#x27;B&#x27;]]), columns=[&#x27;A&#x27;, &#x27;B&#x27;])print(df_knn)\n\n\n创建缺失值指示器（Missing Indicator）\n\n不直接填充缺失值，而是生成一个二元特征，标记原始位置是否缺失。\n优点：保留了“缺失”本身的信息，有时缺失就是一个信号；\n缺点：增加数据维度。\n\ndf_indicator = df.copy()# 创建指示器列，1 表示原始值缺失，0 表示不缺失df_indicator[&#x27;A_missing&#x27;] = df_indicator[&#x27;A&#x27;].isnull().astype(int)df_indicator[&#x27;B_missing&#x27;] = df_indicator[&#x27;B&#x27;].isnull().astype(int)# 对缺失值进行填充（这里以均值为例）df_indicator[&#x27;A&#x27;] = df_indicator[&#x27;A&#x27;].fillna(df_indicator[&#x27;A&#x27;].mean())df_indicator[&#x27;B&#x27;] = df_indicator[&#x27;B&#x27;].fillna(df_indicator[&#x27;B&#x27;].mean())print(df_indicator)\n\n\n2.3 小结\n\n没有“万能方法”，要根据数据缺失类型和业务场景选择合适策略。\n如果缺失不随机，简单的统计填充会扭曲数据分布；\n理解缺失背后的原因，才能做出明智的处理决定。\n\n表 1: 处理缺失值的常用技术\n\n\n\n技术\n描述\n优点\n缺点\n典型应用场景\n\n\n\n\n行删除\n删除包含任何缺失值的行\n简单易行\n可能丢失宝贵信息，引入偏差\n数据集很大且缺失值很少\n\n\n列删除\n删除包含大量缺失值的列\n可以避免模型被缺失值干扰\n可能丢失重要特征\n某特征缺失值过多，难以合理填充\n\n\n均值填充\n使用特征的平均值填充缺失值\n简单快速\n降低方差，对异常值敏感\n缺失值较少，数据分布近似正态\n\n\n中位数填充\n使用特征的中位数填充缺失值\n对异常值不敏感\n可能改变原始数据分布\n数据存在较多异常值\n\n\n众数填充\n使用特征的众数填充缺失值\n适用于类别型特征\n可能引入偏差\n类别型特征存在缺失值\n\n\n基于模型的填充\n使用统计模型预测缺失值\n可以捕捉变量间关系，填充更准确\n实现复杂，计算成本高\n缺失值模式复杂，需要更精确的填充\n\n\n缺失值指示器\n创建一个二元特征标记缺失情况\n保留缺失信息\n增加数据维度\n缺失本身可能包含有用信息\n\n\n\n3. 处理异常值\n异常值指的是与其他观测值显著不同的数据点。它们可能源于测量误差、录入错误，也可能是真实世界中罕见事件的反映。异常值会对模型产生扰动，扭曲分布、降低性能，甚至导致错误结论。\n3.1 检测异常值的方法\n3.1.1 可视化方法\n\n\n箱线图（Box Plot）\n\n显示数据的四分位数（Q1、Q2、Q3）和四分位距（IQR）。\n将超出 Q1 - 1.5·IQR 或 Q3 + 1.5·IQR 的点视为潜在异常值。\n\nimport matplotlib.pyplot as pltplt.boxplot(df[&#x27;A&#x27;].dropna())plt.title(&quot;Boxplot of A&quot;)plt.show()\n\n\n散点图（Scatter Plot）\n\n适用于双变量数据，直观发现与其他点显著分离的观测。\n\nplt.scatter(df[&#x27;A&#x27;], df[&#x27;B&#x27;])plt.xlabel(&quot;A&quot;)plt.ylabel(&quot;B&quot;)plt.title(&quot;Scatter Plot of A vs B&quot;)plt.show()\n\n\n直方图（Histogram）\n\n显示数据分布，可观察尾部是否有孤立的条柱。\n\nplt.hist(df[&#x27;A&#x27;].dropna(), bins=10)plt.xlabel(&quot;A&quot;)plt.ylabel(&quot;Frequency&quot;)plt.title(&quot;Histogram of A&quot;)plt.show()\n\n\n3.1.2 统计方法\n\n\nZ-分数（Z-Score）\n\n计算每个数据点与均值的距离，以标准差为单位。\n通常 |Z| &gt; 3 的值被认为是异常。\n\nimport numpy as npmean_A = df[&#x27;A&#x27;].mean()std_A = df[&#x27;A&#x27;].std()df[&#x27;A_zscore&#x27;] = (df[&#x27;A&#x27;] - mean_A) / std_A# 标记异常值outliers_z = df[np.abs(df[&#x27;A_zscore&#x27;]) &gt; 3]print(outliers_z)\n\n\nIQR 方法\n\n基于箱线图思想，将落在 Q1 - 1.5·IQR 或 Q3 + 1.5·IQR 之外的值视为异常。\n\nQ1 = df[&#x27;A&#x27;].quantile(0.25)Q3 = df[&#x27;A&#x27;].quantile(0.75)IQR = Q3 - Q1lower_bound = Q1 - 1.5 * IQRupper_bound = Q3 + 1.5 * IQRoutliers_iqr = df[(df[&#x27;A&#x27;] &lt; lower_bound) | (df[&#x27;A&#x27;] &gt; upper_bound)]print(outliers_iqr)\n\n\nIsolation Forest（孤立森林）\n\n基于树的集成方法，通过不断随机切分特征空间来“隔离”异常值。\n适用于高维数据，检测复杂模式的异常。\n\nfrom sklearn.ensemble import IsolationForestiso = IsolationForest(contamination=0.1, random_state=42)df_nonull = df[[&#x27;A&#x27;, &#x27;B&#x27;]].dropna()iso.fit(df_nonull)df_nonull[&#x27;anomaly_score&#x27;] = iso.decision_function(df_nonull)df_nonull[&#x27;anomaly_flag&#x27;] = iso.predict(df_nonull)  # -1 为异常，1 为正常print(df_nonull[df_nonull[&#x27;anomaly_flag&#x27;] == -1])\n\n\n3.2 处理异常值的策略\n\n\n删除\n\n直接移除被识别的异常点。\n适用于确认是数据输入错误或设备误差时，需谨慎避免丢失真实但极端的观测。\n\ndf_clean = df[~((df[&#x27;A&#x27;] &lt; lower_bound) | (df[&#x27;A&#x27;] &gt; upper_bound))]\n\n\n转换\n\n使用 对数转换、截尾（Winsorizing） 等方法，减小极端值影响。\n例如，对数转换：A_log = np.log(df['A'])，适用于正值且偏态分布的数据。\n\ndf[&#x27;A_log&#x27;] = np.log(df[&#x27;A&#x27;].replace(0, np.nan).dropna())\n\n\n填充\n\n用更合理的边界值或均值、中位数替换异常值。\n\ndf[&#x27;A_clipped&#x27;] = df[&#x27;A&#x27;].clip(lower=lower_bound, upper=upper_bound)\n\n\n保留\n\n不做处理，将异常值视为潜在信号。\n常见于 异常检测、欺诈识别 等场景。\n\n\n\n表 2: 检测和处理异常值的常用技术\n\n\n\n技术\n描述\n优点\n缺点\n典型应用场景\n\n\n\n\n箱线图\n可视化数据的分布和潜在异常值\n直观易懂\n对高维数据不适用\n初步探索性数据分析\n\n\nZ-分数\n衡量数据点距离均值的标准差个数\n易于计算\n对数据分布有要求，对异常值敏感\n数据分布近似正态\n\n\nIQR方法\n基于四分位数间距识别异常值\n对异常值不敏感\n可能遗漏极端异常值\n数据存在异常值\n\n\n孤立森林\n基于树的集成方法，通过隔离异常值进行检测\n适用于高维数据，性能较好\n参数调整可能复杂\n复杂数据集的异常值检测\n\n\n删除\n移除被识别为异常值的数据点\n简单直接\n可能丢失信息\n明显的错误数据或噪声\n\n\n转换\n使用数学函数（如对数）调整数据分布\n降低极端值的影响\n可能改变数据的原始含义\n数据偏态分布\n\n\n填充\n用其他值（如均值、中位数或边界值）替换异常值\n保留数据量\n可能引入偏差\n异常值数量不多，且有合理的替换值\n\n\n保留\n不对异常值进行处理\n避免丢失潜在重要信息\n异常值可能影响模型性能\n异常值可能代表重要事件或模式\n\n\n\n4. 数据转换技术\n数据转换是将原始数据转换为更适合模型处理的格式或分布。合理的转换能够提升模型性能与稳定性。\n4.1 缩放与归一化\n\n\n最小–最大缩放（Min–Max Scaling）\n\n\n将数值线性映射到 [0, 1] 区间：\nxscaled=x−xminxmax−xminx_{\\text{scaled}} = \\frac{x - x_{\\text{min}}}{x_{\\text{max}} - x_{\\text{min}}}\nxscaled​=xmax​−xmin​x−xmin​​\n\n\n优点：直观；\n\n\n缺点：对异常值敏感。\n\n\nfrom sklearn.preprocessing import MinMaxScalerscaler = MinMaxScaler()df_scaled = scaler.fit_transform(df[[&#x27;A&#x27;, &#x27;B&#x27;]].dropna())print(df_scaled[:5])\n\n\n标准化（Standardization，Z-Score Scaling）\n\n\n转换为均值为 0、标准差为 1 的分布：\nxstandardized=x−μσx_{\\text{standardized}} = \\frac{x - \\mu}{\\sigma}\nxstandardized​=σx−μ​\n\n\n对异常值相对鲁棒一些，但对极端值仍有影响。\n\n\nfrom sklearn.preprocessing import StandardScalerstd_scaler = StandardScaler()df_standard = std_scaler.fit_transform(df[[&#x27;A&#x27;, &#x27;B&#x27;]].dropna())print(df_standard[:5])\n\n\n鲁棒缩放（Robust Scaling）\n\n基于中位数和四分位数进行缩放，对异常值更不敏感。\n\nfrom sklearn.preprocessing import RobustScalerrobust_scaler = RobustScaler()df_robust = robust_scaler.fit_transform(df[[&#x27;A&#x27;, &#x27;B&#x27;]].dropna())print(df_robust[:5])**鲁棒缩放**是一种对异常值不太敏感的缩放方法，例如scikit-learn中的`RobustScaler`，它基于数据的百分位数进行缩放。\n\n\n4.2 非线性转换\n\n\n对数转换（Log Transformation）\n\n用于处理偏态分布，将大值压缩。\n仅适用于正值数据。\n\ndf[&#x27;A_log&#x27;] = np.log(df[&#x27;A&#x27;].replace(0, np.nan)).dropna()\n\n\n幂转换（Power Transformation，如 Box–Cox、Yeo–Johnson）\n\n更通用的方法，常用于稳定方差、使数据更接近正态分布。\n\nfrom sklearn.preprocessing import PowerTransformerpt = PowerTransformer(method=&#x27;yeo-johnson&#x27;)df_power = pt.fit_transform(df[[&#x27;A&#x27;, &#x27;B&#x27;]].dropna())print(df_power[:5])\n\n\n4.3 类别型变量编码\n\n\n独热编码（One-Hot Encoding）\n\n对于机器学习模型，类别型变量通常需要转换为数值形式。独热编码是一种常用的方法，它为每个类别创建一个新的二元特征，如果某个观测属于该类别，则该特征的值为1，否则为0。\n为每个类别生成一个二元特征。\n适用于无序类别变量，但会增加维度。\n\ndf_cat = pd.DataFrame(&#123;&#x27;color&#x27;: [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, None]&#125;)df_cat_onehot = pd.get_dummies(df_cat[&#x27;color&#x27;], dummy_na=True)print(df_cat_onehot)\n\n\n标签编码（Label Encoding）\n\n标签编码将每个类别分配一个唯一的整数。\n将类别变量映射为整数。\n适用于有序类别，可能会引入无意义的顺序关系。\n\nfrom sklearn.preprocessing import LabelEncoderle = LabelEncoder()df_cat[&#x27;color_encoded&#x27;] = le.fit_transform(df_cat[&#x27;color&#x27;].astype(str))print(df_cat)\n\n\n4.4 选择合适的转换方法\n\n基于距离的算法（如 KNN、K-Means）：对特征尺度敏感，通常需要缩放\n因为基于距离的算法依赖于特征之间的距离计算，尺度较大的特征可能会在距离计算中占据主导地位，即使它们的重要性并非更高。缩放可以确保所有特征对距离计算的贡献更加均衡。\n树模型（如 决策树、随机森林）：对尺度不敏感，但对异常值和分布可能敏感。\n树模型基于单个特征内部值的顺序进行决策，因此对整体尺度不敏感\n\nPython实现示例\nPandas的isnull()和sum()方法来检查缺失值，使用fillna()方法进行填充，使用dropna()方法删除缺失值。\n可以使用Matplotlib和Seaborn库进行可视化以检测异常值，并使用NumPy进行统计计算。\n可以使用sklearn.preprocessing模块中的各种类进行数据缩放、归一化和编码。\n一个简单的数据清洗工作流程包括以下步骤：\n首先，加载数据并使用Pandas进行初步的探索性分析，例如查看数据的基本统计信息和缺失值情况。\n然后，根据数据的特性和业务需求，选择合适的缺失值处理方法，并使用Pandas或scikit-learn进行填充或删除。\n接下来，可以使用可视化方法和统计方法检测异常值，并根据情况选择删除、转换或保留。\n最后，根据所选的机器学习算法的要求，对数据进行缩放、归一化或编码等转换。\n下面展示一个端到端的数据清洗示例，包含：加载数据、检查/处理缺失值、检测/处理异常值、数据转换。\nimport pandas as pdimport numpy as npimport matplotlib.pyplot as pltfrom sklearn.impute import SimpleImputer, KNNImputerfrom sklearn.preprocessing import StandardScaler, OneHotEncoderfrom sklearn.ensemble import IsolationForest# 1. 加载示例数据df = pd.DataFrame(&#123;    &#x27;age&#x27;: [25, 30, np.nan, 22, 40, 120, 28],    &#x27;income&#x27;: [50000, 60000, 55000, np.nan, 65000, 70000, 58000],    &#x27;gender&#x27;: [&#x27;M&#x27;, &#x27;F&#x27;, &#x27;F&#x27;, &#x27;M&#x27;, np.nan, &#x27;M&#x27;, &#x27;F&#x27;]&#125;)# 2. 初步探索print(&quot;缺失值情况：&quot;)print(df.isnull().sum())# 3. 处理缺失值# 3.1 对数值特征使用均值填充num_cols = [&#x27;age&#x27;, &#x27;income&#x27;]imp_mean = SimpleImputer(strategy=&#x27;mean&#x27;)df[num_cols] = imp_mean.fit_transform(df[num_cols])# 3.2 对类别特征使用众数填充imp_mode = SimpleImputer(strategy=&#x27;most_frequent&#x27;)df[[&#x27;gender&#x27;]] = imp_mode.fit_transform(df[[&#x27;gender&#x27;]])print(&quot;\\n填充后数据：&quot;)print(df)# 4. 检测异常值（Isolation Forest）iso = IsolationForest(contamination=0.15, random_state=42)df[[&#x27;age&#x27;, &#x27;income&#x27;]] = df[[&#x27;age&#x27;, &#x27;income&#x27;]].astype(float)iso.fit(df[[&#x27;age&#x27;, &#x27;income&#x27;]])df[&#x27;anomaly_flag&#x27;] = iso.predict(df[[&#x27;age&#x27;, &#x27;income&#x27;]])  # -1 异常，1 正常print(&quot;\\n异常检测结果：&quot;)print(df[df[&#x27;anomaly_flag&#x27;] == -1])# 5. 处理异常值（这里以删除为例）df_clean = df[df[&#x27;anomaly_flag&#x27;] == 1].drop(columns=[&#x27;anomaly_flag&#x27;])print(&quot;\\n删除异常值后的数据：&quot;)print(df_clean)# 6. 数据转换# 6.1 连续特征标准化scaler = StandardScaler()df_clean[[&#x27;age&#x27;, &#x27;income&#x27;]] = scaler.fit_transform(df_clean[[&#x27;age&#x27;, &#x27;income&#x27;]])# 6.2 类别特征独热编码encoder = OneHotEncoder(sparse=False, handle_unknown=&#x27;ignore&#x27;)gender_encoded = encoder.fit_transform(df_clean[[&#x27;gender&#x27;]])df_gender = pd.DataFrame(gender_encoded, columns=encoder.get_feature_names_out([&#x27;gender&#x27;]))# 合并特征df_final = pd.concat([df_clean.drop(columns=[&#x27;gender&#x27;]).reset_index(drop=True),                      df_gender.reset_index(drop=True)], axis=1)print(&quot;\\n最终处理后数据：&quot;)print(df_final)\n\n注释解读：\n\n使用 SimpleImputer 分别对数值特征（均值）和类别特征（众数）进行填充。\nIsolationForest 标记异常值，并将异常样本剔除。\n对数值特征进行标准化、类别特征进行独热编码，得到最终可用于建模的数据集。\n\n\n总结\n\n数据清洗是机器学习流程中的核心步骤，良好的数据清洗能显著提升模型质量与稳定性。\n针对 缺失值 要区分 MCAR、MAR、MNAR，不盲目删除或填充。\n对 异常值 的处理需结合业务背景，可能选择删除、转换、填充或保留。\n数据转换（缩放、编码）应根据所用算法特点进行选择。\n在 Python 中，Pandas、NumPy、Scikit-learn 等库提供了便捷的接口，能够高效地完成各类数据清洗操作。\n\n","categories":["数据分析"],"tags":["python","数据操作"]},{"title":"Tableau分析与可视化看板","url":"/post/Tableau.html","content":"Tableau数据连接与可视化分析\n本文主要介绍 Tableau 的基础连接与使用，包括数据可视化的原理以及常用的图表制作，针对不同分析使用的图表类型，BI看板的搭建等内容。\n目录\n\n数据连接\n数据可视化原理\n基础图表制作\n数据可视化原则\nBI仪表盘搭建\n\n\n社区大佬可视化方案参考学习\nTableau能做什么？\n\n\n数据赋能\n让业务一线也可以轻松使用最新数据\n\n\n分析师可以直接将数据看板发布到线上\n\n\n自动更新看板\n\n\n自由下载数据\n\n\n线上修改图表\n\n\n邮箱发送数据\n\n\n设置数据预警\n\n\n\n\n数据探索\n通过统计分析和数据可视化，从数据发现问题，用数据验证假设\n\n\n支持亿级数据的连接和处理\n\n\n自由地对字段进行各种计算\n\n\n拖拽就可以轻松制作图表\n\n\n数据可以随意聚合下钻\n\n\n图表类型可以灵活转换\n\n\n内置算法智能建模\n\n\n\n\n\n1. 数据连接\n1.1 连接类型\n1.1.1 本地文件\n\n\n\n文件类型\n连接方式\n\n\n\n\nCSV\n文本连接\n\n\nExcel (xls/xlsx)\nExcel文件连接\n\n\nJSON\n直接连接JSON文件\n\n\n\n\n\n1.1.2数据库\n\n驱动配置\n下载对应数据库驱动后，配置地址、端口、认证等参数\n数据连接\n数据库连接方法与SQL相似\n\n\n1.2 连接方式\n\n智能连接（默认）\n\n自动识别字段类型，只需选择连接字段\n✅支持字段计算和编辑\n✅支持排序、重命名、拆分等操作\n\n\n字段计算：连接字段可通过函数进行计算和编辑（动态）\n\n# 示例函数计算字段  DATE_TRUNC(&#x27;day&#x27;, &quot;下单日期&quot;) AS 订单日维度\n\n表格连接：表格之间的连接原理同SQL\n连接原理\n\n多表连接机制同SQL\n✅支持多条件组合连接\n\n\n\n\n操作示例：\n\n连接 shop 表 → 拖拽 cpc 表，设置连接条件：\n\n门店ID = 门店ID\n日期 = 日期\n\n\n连接 orders 表→ 拖拽 shop表，设置连接条件：\n\n门店ID = 门店ID\n日期 = 下单日期\n\n\n\n\n1.3 提取方式\n\n\n\n方式\n特点\n适用场景\n\n\n\n\n实时查询\n每次操作触发数据库查询（查询语言VizQL）\n小数据量/频繁更新\n\n\n数据提取\n1.提取连接数据，保存为.hyper文件，支持增量刷新2..twbx 文件会将 .hyper 数据打包3.修改数据源后需重新提取数据，实时连接则无此限制4.一般大型数据推荐提取，除非频繁修改连接字段\n大数据量/离线分析\n\n\n\n\n注意事项：\n\n\n上传Tableau Server必须使用数据提取\n\n\n提取数据后可进行预筛选，仅保留需要的数据用于视图操作\n\n\n❌预筛选建议在连接阶段设置，而非视图层过滤\n\n\n\n提取选项支持增量刷新策略（基于字段/函数）\n# 示例：每日仅更新新增行EXTRACT_INCREMENTAL ON &quot;last_updated_date&quot; &gt; DATEADD(&#x27;day&#x27;, -1, CURRENT_DATE())\n\n\n.twb文件不包含数据仅保存连接与视图信息，.twbx打包数据，可打包共享（Tableau Server发布必须使用.twbx）\n\n\n⚠️百万级数据建议使用增量刷新\n\n\n1.4 数据处理\n\n\n查看、排序、重命名、拆分等操作\n\n\n\n\n图表界面也可完成大部分数据操作，包括预测，趋势线，描述性统计分析指标等\n\n\n\n2. 数据可视化原理\n2.1 核心概念\n\n为什么要可视化\n\n\n图表能让人更快理解最大/最小值等信息\n人类具备视觉优势，图比字更易识别\n文字源自象形，图形表达更直观\n\n\n\n\n度量与维度\n\n度量（Measures）：数值型变量 → 图形面积/长度/颜色深浅 → 数轴\n维度（Dimensions）：类别型变量 → 图形颜色/位置/分类 → 标签\n\n\n\n\n\n\n类型\n特征描述\n典型示例\n\n\n\n\n度量\n数值型可计算变量\nGMV总和, 订单数量\n\n\n维度\n非数值分类变量（如城市、性别）\n用户ID, 源渠道\n\n\n\n\nTableau 自动识别变量类型，类型可互相转换\n\n\n2.2 Tableau 可视化基础操作\n\n\n拖拽操作\n\n\n行/列：决定图表坐标轴\n\n\n标记卡：控制图形颜色、大小、标签等\n\n\n\n筛选器：设定可视条件\n\n\n\n\n\n五大可视化原理\n\n\n度量默认聚合运算（SUM/AVG）\n\n\n拖动“消耗”到行 → 自动生成柱状图（求和）\n\n\nTableau 会自动聚合度量（默认总和）\n\n\n\n\n\n图形标记自由切换\n\n\n标记卡中可选择不同图形（柱状图、饼图、折线图等）\n\n\n一个度量只有一个值无法形成折线（需多个点）\n\n\n拖拽度量至行/列形成图表，拖拽至标签区域形成表格\n\n\n\n\n\n\n\n维度增加信息密度（多层级对比）\n\n\n拖入维度字段 → 将一个点拆解为多个 → 可连成线\n\n\n维度可拖至：颜色、标签、详细信息、行、列，会增强信息密度\n\n\n示例：将日期字段转换为字符串 → 拖至列 → 形成折线图\n\n\n\n拖日期 → 标签、拖消耗 → 大小、选“文本” → 形成词云图、选“圆形” → 形成气泡图\n\n\n\n\n\n\n图表类型决定坐标轴形态（有轴图表 vs 无轴图表（极坐标图表））\n\n\n有轴：折线图、柱状图（需数轴）\n\n\n无轴：饼图、树地图、词云、气泡图（极坐标）\n\n\n示例饼图制作：将 GMV 拖到大小，门店拖到颜色 → 树地图(树地图是升级版的饼图，按照顺序展示大小，还能增加颜色等维度)；\n更改标记类型为饼图 → 映射角度与面积\n\n\n\n\n\n\n连续变量生成坐标轴，离散变量生成标签\n\n连续度量 → 数轴（逻辑连续参考系）\n离散维度 → 标签（顺序可调的参考系）\n\n\n\n\n类型\n作用\n\n\n\n\n离散变量（维度）\n形成标签，构成表格\n\n\n连续变量（度量）\n形成数轴，构成图形\n\n\n\n\n示例：拖维度构建表格（如日期、门店、品牌）\n将度量字段设置为离散 → 变为维度\n拖度量至列或行 → 生成图形（数轴）\n\n\n\n\n\n2.3 视觉映射类型\n可视化辞典Github仓库与Web\n\n\n\n视觉元素\n适用场景\n示例\n适用图表\n\n\n\n\n位置\nx/y 轴呈现度量，分布趋势分析\n人均收入与寿命关系\n散点图\n\n\n长度\n长度反映数值对比\n地区销售额对比\n柱状图/条形\n\n\n角度\n用于表示部分与整体的占比关系\n性别比例分析\n饼图/玫瑰图/环形\n\n\n颜色\n分类/数值密度，饱和度/色调表现维度分类或度量高低\n地理区域分布\n热力图\n\n\n面积 &amp; 体积\n多维度占比，面积/体积与度量成正比\n通过大小表示数值\n树地图\n\n\n方向\n展示度量随维度（如时间）变化趋势\n四季电力消耗趋势\n折线图\n\n\n\n\n形状可用于标记不同组别（维度），如散点图标记点形状\n\n\n3. 基础图表制作\n3.1 对比分析\n\n\n\n图表类型\n制作要点\n适用场景\n\n\n\n\n柱状图\n维度→列，度量→行\n≤5个分类对比\n\n\n条形图\n维度→行，度量→列\n≥5个分类对比\n\n\n热力图\n文本表+颜色映射，使用合计%\n多维度交叉对比\n\n\n气泡图/词云\n度量→大小，维度→颜色/标签\n百级分类对比\n\n\n\n\n\n创建分层结构可以在拖动标签时将整个结构组都拖动，并根据需要点击+或-在工作表内展示数据的量\n\n\n\n筛选器选项可以自定义筛选器单项或多项的样式\n\n\n\n热力图设置标记为方形，适用于多【维度】下多变量的同时对比，并且需要同时查看对比效果和数值，如各组/商品类别之间的销售额、利润同时对比\n\n\n\n3.2 变化/趋势分析\n\n\n\n图表类型\n制作要点\n适用场景\n\n\n\n\n折线图\n时间→列（连续），度量→行季节性调整需手动添加移动平均线\n趋势分析\n\n\n面积图\n折线图→区域填充\n累计值分析\n\n\n\n\n\n给折线图添加趋势线可以增加内容的丰富程度，并提升专业性，还可以增加预测（实际应用中一般都是高维数据，R²低误差高，参考性不大）\n\n\n\n将画折线图时的标记从线改为区域，即可形成面积图。适用于有内部累计关系的值，并会随时间变化，不强调趋势，强调绝对值\n\n\n\n3.3 构成/占比分析\n\n\n\n图表类型\n制作要点\n适用场景\n\n\n\n\n饼图\n维度→颜色，度量→角度\n≤3分类占比\n\n\n树地图\n维度→颜色/标签，度量→大小\n多层级（维度）占比\n\n\n堆积图\n维度→颜色，主维度→轴\n多维度累计占比\n\n\n\n\n\n饼图需要设置合计百分比显示占比（百分比差异类似同比环比计算）\n\n\n\n\n堆积图适用于相同【度量】下，比较一个【维度】下另一个【维度】的占比。堆积图显示合计百分比需要在快速表计算后再编辑表计算并选择计算依据为&quot;表(向下)&quot;，否则会显示占整体数据的百分比，再按住CTRL将该计算字段拖动至’行’，即可看到占整体的比例（只能看到占比，忽略绝对值大小）\n\n\n\n因此一般需要同时查看值的大小和占比，在标记区域选择未使用快速计算的字段（没有Δ），然后将其中的标签移除并更换为原始字段\n\n\n\n3.4 分布分析\n\n\n\n图表类型\n制作要点\n适用场景\n\n\n\n\n散点图\nX/Y轴→度量，维度→颜色\n相关性分析\n\n\n直方图\n度量→自动分箱\n单变量分布\n\n\n地图\n地理角色→详细信息，度量→大小/颜色\n空间分布分析\n\n\n\n\n\n散点图：将Cpc总费用拖入列，GMV拖入行，然后将字符串形式的日期放入标记的详细信息，门店名称放入颜色，即可看到各个店铺的投放效果（斜率越大投放效果越好）\n\n\n\n还可以对散点图进行聚类，，具有相同分布特征的变量会被分为一类，可选自动或手动设置聚类(Cluster)数 (K-means聚类算法，基于欧式距离计算)\n\n\n\n直方图与数据桶：在数据型字段右键 → 创建 → 数据桶。数据桶本质是根据设定的数据桶大小作为间隔(箱宽度)，将离散的点分类并计数。用于查看单一度量下的数据分布\n\n\n常见分布；2/8法则；马太效应；40-20-10（如果你想让你的APP保持增长势头，那么你的新用户次日留存率，7天留存率和30天留存率应该分别维持在40%、20%和10%左右）\n\n\n\n地图：对于数据中的城市，需要将字段的属性设置为地理角色中的某个值，然后双击即可在工作表中显示地图。\n\n对于经纬度坐标，则需要将地理角色设置为经纬度，然后分别双击，即可在工作表显示地图\n\n\n\n由于多数情况下数据会经过脱敏处理，原来可表示唯一值的订单id等字段会有重复值出现，因此需要创建主键来自行计算出一个唯一值。左键点击创建计算字段，拖拽选择合适的字段进行计算，表达式需要确保计算的字段格式相同，因此对于数值型变量可以使用STR()函数将其转换为字符串进行计算\n\n\n\n使用计算出的&quot;主键&quot;作为详细信息，距离作为颜色，用户实付作为大小，即可在地图上画出大小、颜色均进行区分的散点地图\n\n\n\n\n\n\n例：南丁格尔玫瑰图实现步骤（用色块圆饼展示战地死亡率，促进英国军方改善医疗条件）：\n\n将角度字段设置为度量值\n在标记卡选择&quot;极坐标系&quot;\n添加颜色区分分类变量（如月份）\n\n\n\n4. 数据可视化原则\n\n\n用户导向\n\n\n区分观众层级（执行/管理/决策）\n\n\n\n\n\n信息层级\n\n主指标放大，辅助指标弱化\n\n\n\n视觉真实\n\n坐标轴从0开始\n避免3D变形\n\n\n\n认知适配\n\n使用行业通用图表类型(地理位置用地图、随时间变化用折线图等)\n\n\n\n设计规范\n\n颜色≤8种，简化设计，突出重点，少即是多\n图表需在 5 秒内传达核心信息\n\n\n\n辅助说明\n\n添加标题/图例/数据标签/结论等(右键数据添加注释)\n\n\n\n多到Tableau社区去学习好的方案\n\n\n5. BI仪表盘搭建\n5.1 设计流程\n\n\n明确主题\n\n受众是谁？关注点是什么？\n例：每日营收监控 → GMV/转化率/订单分布\n\n\n\n数据准备/拆解指标\n\n\n营收数据：GMV、商家实收、用户实付、总订单数、cpc总费用、各平台数据对比\n\n\n流量数据：曝光人数、进店人数、下单人数、进店转化率、下单转化率、新客数、老客数、复购率\n\n\n关键指标：GMV、流量数据*（每日营收）进店率、复购率（用户行为）*\n\n\n辅助指标：CPC费用、无效订单*（投放效果）*\n\n\n先设计好要使用的元素，后进行可视化的调整，与Excel相同，下面是某店铺外卖的营收数据设计\n\n首先需要将筛选器设置为联动(使用相关数据源的所有项)，实现图表间的数据统一\n\n\n\n\n需要一个经营状况总览，拖动字段直至出现智能显示即可在数据的左右加入新的列，也可直接拖入度量值中，若出现其它图形，可以先尝试更改字段类型为离散\n\n\n\n\n新建工作表，用同样的方式制作详情表，'行’中字段根据需要添加\n\n\n\n每日营收数据，需要多条曲线时，添加多个度量值将字段直接拖到纵轴上\n\n\n\n并非所有有用的字段都会在业务数据中直接提供，因此有时需要添加计算字段\n\n\n\n\n多曲线的单位差异会导致在同一张图中显示时，某一或多条曲线因值过小而导致可视化效果差，不具备参考意义，这时可以设置双轴\n\n\n\n多曲线共同影响的字段可以作为背景展示，通过调整颜色、大小、不透明度等方式隐式的显示在曲线后（可选面积图或条形图）\n\n\n\n\n根据数据ORDER90，我们自定义90天内未下单的用户为新客，用于展示新老客对比\n\n\n\nTableau没有内置的环形图，需要自己手动设置实现近似效果\n环形图：双击行 → 输入0 → 右键双轴 → 将其中一个的视觉元素全部移除 → 颜色改为白色 → 调整两个饼图的大小 → 环形图 → 取消零值线和取消显示标题（调整完成后使用CTRL+←或→可以调整环形图整体的大小，此功能不局限于饼图）需要多个环形图时，为保证一致性，可以使用拷贝工作表，然后更改字段\n\n\n\n有时业务数据的标签并不是想要展示的值，可以通过右键设置别名来更改为想要的值\n\n\n\n\n纵轴设置为GMV，横轴设置cpc总费用，可以看到各门店的投放情况，斜率越高效果越好\n\n\n\n面积图可以展示订单分布时间段（根据需要将下单日期格式设置为小时）与整体订单趋势\n\n\n\n分组设置：在想要分组的位置按住shift单击，并点击分组，即可选中以上的全部数据分为一组，同时可以给组进行命名，可以使用if函数实现相同效果\n\n\n\n\n\n\n布局设计\n\nF型视线布局：关键指标置于左上区域\n动态筛选器统一放置顶部中央\n数据钻取深度不超过三级\n\n[仪表盘布局示例]| 经营总览 | 趋势分析 ||----------|----------|| 占比分析 | 分布地图 |\n经营总览-&gt;数据详情-&gt;趋势分析-&gt;占比分析-&gt;分布分析\n\n总览：文本突出显示\n趋势：多轴折线图\n分布：热力图 / 地图\n\n仪表盘大小可以选择通用桌面1366 * 768，然后手动调整高度，从左边的工作表区域拖动需要的表到仪表盘，手动调整位置和大小\n\n\n\n\n交互优化\n\n逻辑顺序：从上到下 / 从主到次\n交互设计：主题明确 + 交互友好，纵/横布局，强制设置所有图表共享联动筛选器\n图表联动（通过筛选器）\n动态参数（通过筛选器）\n细节优化：统一字体、配色（参考Tableau 社区）\n图表选择：4 大金刚（散点图、柱状图、饼图、折线图），大多数数据可视化都可用这四种组合完成，人感知最强的可视化字典（位置、长度、角度/方向、面积/颜色）\n\n\n\n\n\n5.2 开发规范\n\n配色方案\n\n主色≤3种，辅色≤2种，推荐组合：#2A5E8F（深蓝）+ #FF6B35（橙红）+ #4ECDC4（青绿）\n使用企业VI色系\n参考：Color Hunt\n\n\n字体规范\n\n中文：微软雅黑\n英文：Arial\n文字标注使用12pt的微软雅黑字体\n\n\n性能优化\n\n数据提取预处理\n隐藏非必要细节\n\n\n\n细节优化过程\n\n\n设置边框提升专业性\n\n\n\n去掉一些数据表的行列分隔边线，提升美观度\n\n\n\n更改地图背景，使其简洁，提升视觉效果，修改冲蚀更改背景透明度\n\n\n\n最后优化各工作表在仪表盘的标题、数据信息的格式，设置字体微软雅黑，颜色风格统一，如需更改标题的背景颜色，可以在布局中修改\n\n\n\n\n优化各工作表的色调，使风格统一\n\n\n\nTableau社区案例参考\n最终效果：\n\n参考文档\n","categories":["数据分析"],"tags":["数据操作","可视化","看板与报表"]},{"title":"Typecho创建","url":"/post/typechocreate.html","content":"在写完Halo博客搭建后，决定再记录一下主站typecho博客的搭建过程。typecho是一款轻量化博客程序，系统内存占用少，性能良好，搭建方便，操作简单。在多年前就是口碑良好的博客程序。遗憾的是在2017年就已经停止更新了（似乎又恢复更新了），并且缺点是所有插件需要自己安装，主题切换不保存设置数据，且不支持在博客页面编辑主题信息，编写文章时没有预览功能等。但是非常节省内存资源，加上宝塔面板占用才200-300M，相比之下Halo就需要800M左右的空间来保证运行，在Haxio白嫖的Kvm的机器内存非常(没)好用(钱)，只是内存只有可怜的450M，用来做typecho再合适不过（随便玩玩，随时寄），毕竟是原生IP，只是用来做节点有点浪费。\n注意，虚拟化方式为Openvz的vps建议先开启tun，以hax为例（hax账号注册需要tg账号，搜索HAX_bot得到id，在登录页面输入id后，bot会发送一串校验码，复制到登录页内重置密码即可，这里不过多赘述），登录后点击Poweroff &amp; Restart VPS\n\n点击Enable TUN，然后在终端输入 cat /dev/net/tun，显示in bad state或者Finalshell显示文件处于错误的描述阶段就表示开启成功（halo博客文中已提及）\n安装宝塔面板\n请保证是纯净的系统，未安装任何环境\nyum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh\ntypecho博客之所以简单在于基本只需要这一行代码即可完成博客部署\n具体步骤Halo文中已经写过\n安装LNMP套件，PHP版本请选择7.2（typecho最高支持7.2）\n一键部署\n在软件商店-宝塔插件内安装宝塔一键部署源码\n\n点击设置，选择博客，点击typecho一键部署\n\n输入域名之后很快，会弹出MySQL的账号和密码,复制好保存备用（halo博客使用的是H2 Database，所以LNMP套件可以不安装MySQL及其相关）\n\n点击网站，在创建好的域名后点击设置，设置伪静态，选择typecho模板并保存\n\n主题和插件上传\n保存完点击网站目录-usr-themes，上传自己喜欢的主题，网站目录-usr-plugins上传插件。这里提供两个typecho主题和插件的下载网站1站和2站，建议上传压缩包上传后解压，不然上传速度很慢\n\n使用域名访问博客并进行初始化，输入之前保存的数据库信息，设置后台访问的账号密码，安装成功\n\n\n进入主页即可撰写文章，更换主题，安装插件\n\n这里提供一个有众多live2d看板娘模型的网站，推荐的其他插件有代码高亮，动态线条聚合等，需要数学公式的请在footer.php中手动添加mathjax（或Katex），具体方式自行搜索\n&lt;script type=&quot;text/x-mathjax-config&quot;&gt;    MathJax.Hub.Config(&#123;      extensions: [&quot;tex2jax.js&quot;],      jax: [&quot;input/TeX&quot;, &quot;output/HTML-CSS&quot;],      tex2jax: &#123;        inlineMath:  [ [&quot;$&quot;, &quot;$&quot;],  [&quot;\\(&quot;,&quot;\\)&quot;] ],        displayMath: [ [&quot;$$&quot;,&quot;$$&quot;], [&quot;\\[&quot;,&quot;\\]&quot;] ],        processEscapes: true      &#125;,      &quot;HTML-CSS&quot;: &#123; availableFonts: [&quot;TeX&quot;] &#125;    &#125;);  &lt;/script&gt;  &lt;script type=&quot;text/javascript&quot;     src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;  &lt;/script&gt;\n开启ssl\n详情请见Halo\nlets encrypt申请失败的话可以自行去阿里云/腾讯云申请后粘贴到其他证书内\n关于开启代理后的问题\n开启cf代理的目的是使只有IPv6地址的服务器能够被纯IPv4访问\ncf代理开启方式\ntypecho在开启代理后请不要在宝塔面板打开强制https，第二点是打开代理后博客后台可能会出现无法登录的情况，点登录后仍然返回登录界面，因为本地没有开启强制https导致cf cdn重定向错误无法登录typecho后台\n这时候需要在网站目录的config.inc.php的代码注释过后（大约第9-10行）加入\ndefine(&#x27;__TYPECHO_SECURE__&#x27;,true);\n\n更多功能还请读者自行探索，文章若有错误还望大佬评论区告知谢谢\n","categories":["旧日"],"tags":["blog","nginx","vps"]},{"title":"XGBoost内容补充","url":"/post/XGBoost.html","content":"XGB内容补充\n1. 集成学习 (Ensemble Learning)\n\n2. Boosting 方法的核心优化思想\nBoosting 方法，尤其是像 GBDT 和 XGBoost 这样的梯度提升算法，其核心在于迭代优化一个目标函数（通常是训练数据的损失函数加上可能的正则化项）。与传统的机器学习模型（如线性回归、SVM）在参数空间中寻找最优解不同，Boosting 是在函数空间中进行优化，即每一步迭代添加一个函数（弱学习器，通常是决策树）来改进当前的集成模型。\n2.1 从参数空间到函数空间 (From Parameter Space to Function Space)\n\n参数空间优化: 大多数机器学习模型通过调整模型内部的参数（如线性模型的系数、神经网络的权重）来最小化损失函数。例如，线性回归 y=wTx+by = w^T x + by=wTx+b，优化的是参数 www 和 bbb。目标函数通常是 min⁡L(y,f(x;w,b))=min⁡L(y,wTx+b)\\min L(y, f(x; w, b)) = \\min L(y, w^T x + b)minL(y,f(x;w,b))=minL(y,wTx+b)。\n函数空间优化: Boosting 的思想是将模型表示为一系列函数的加法：F(x)=∑t=1Tht(x)F(x) = \\sum_{t=1}^T h_t(x)F(x)=∑t=1T​ht​(x)。每一步迭代 ttt，我们固定前面 t−1t-1t−1 步得到的模型 Ft−1(x)=∑k=1t−1hk(x)F_{t-1}(x) = \\sum_{k=1}^{t-1} h_k(x)Ft−1​(x)=∑k=1t−1​hk​(x)，然后寻找一个新的函数 ht(x)h_t(x)ht​(x)，使得加入 ht(x)h_t(x)ht​(x) 后，整体模型 Ft(x)=Ft−1(x)+ht(x)F_t(x) = F_{t-1}(x) + h_t(x)Ft​(x)=Ft−1​(x)+ht​(x) 的目标函数最小化。目标函数是 min⁡L(y,Ft−1(x)+ht(x))\\min L(y, F_{t-1}(x) + h_t(x))minL(y,Ft−1​(x)+ht​(x)).\n\n2.2 梯度下降与牛顿法 (Gradient Descent vs. Newton’s Method)\n优化目标函数常用的迭代方法是梯度下降。\n\n梯度下降 (Gradient Descent):\n\n基本思想: 在当前点沿着函数梯度的反方向移动，因为梯度指向函数值增加最快的方向。\n更新规则 (参数空间): wk+1=wk−η∇J(wk)w_{k+1} = w_k - \\eta \\nabla J(w_k)wk+1​=wk​−η∇J(wk​)，其中 JJJ 是目标函数，η\\etaη 是学习率。\n在函数空间中，梯度提升（GBDT）可以理解为在函数空间中应用梯度下降。要找到下一个要添加的函数 ht(x)h_t(x)ht​(x)，我们希望它能最大程度地降低目标函数 L(y,Ft−1(x)+ht(x))L(y, F_{t-1}(x) + h_t(x))L(y,Ft−1​(x)+ht​(x))。如果我们将 ht(x)h_t(x)ht​(x) 视为“函数步长”，最快的下降方向是负梯度方向。所以，GBDT 训练的下一棵树就是去拟合当前模型的负梯度。\n\n\n牛顿法 (Newton’s Method):\n\n基本思想: 使用函数的二阶导数（Hessian 矩阵）信息。它通过在当前点用二次函数近似目标函数，然后跳到二次函数的最低点。\n更新规则 (参数空间): wk+1=wk−[HJ(wk)]−1∇J(wk)w_{k+1} = w_k - [H J(w_k)]^{-1} \\nabla J(w_k)wk+1​=wk​−[HJ(wk​)]−1∇J(wk​)，其中 HHH 是 Hessian 矩阵（二阶导数矩阵）。牛顿法通常比梯度下降收敛更快，尤其是在目标函数接近二次函数时。\n牛顿法使用了一阶和二阶导数信息。这启发了 XGBoost 的目标函数优化。\n\n\n\n2.3 误差函数的二阶泰勒展开 (Second-order Taylor Expansion of the Loss Function)\n为了更精确地优化目标函数 L(yi,y^i(t−1)+ht(xi))L(y_i, \\hat{y}_i^{(t-1)} + h_t(x_i))L(yi​,y^​i(t−1)​+ht​(xi​)) 关于 ht(xi)h_t(x_i)ht​(xi​)，XGBoost 借鉴了牛顿法的思想，使用了二阶泰勒展开来近似损失函数。\n对于一个在点 x0x_0x0​ 附近可微的函数 f(x)f(x)f(x)，其在 x0x_0x0​ 处的泰勒展开式为：\nf(x)=f(x0)+f′(x0)(x−x0)+12f′′(x0)(x−x0)2+R2(x)f(x) = f(x_0) + f&#x27;(x_0)(x-x_0) + \\frac{1}{2} f&#x27;&#x27;(x_0)(x-x_0)^2 + R_2(x)\nf(x)=f(x0​)+f′(x0​)(x−x0​)+21​f′′(x0​)(x−x0​)2+R2​(x)\n其中 R2(x)R_2(x)R2​(x) 是余项。\n在 XGBoost 中，我们将损失函数 L(yi,y^i)L(y_i, \\hat{y}_i)L(yi​,y^​i​) 视为关于当前预测值 y^i\\hat{y}_iy^​i​ 的函数，并在 y^i(t−1)\\hat{y}_i^{(t-1)}y^​i(t−1)​ 处进行泰勒展开，展开变量是我们要添加的函数 ht(xi)h_t(x_i)ht​(xi​) 的输出。令 x0=y^i(t−1)x_0 = \\hat{y}_i^{(t-1)}x0​=y^​i(t−1)​，变量为 Δx=ht(xi)\\Delta x = h_t(x_i)Δx=ht​(xi​)，则：\nL(yi,y^i(t−1)+ht(xi))≈L(yi,y^i(t−1))+[∂L(yi,y^)∂y^]y^=y^i(t−1)ht(xi)+12[∂2L(yi,y^)∂y^2]y^=y^i(t−1)ht(xi)2L(y_i, \\hat{y}_i^{(t-1)} + h_t(x_i)) \\approx L(y_i, \\hat{y}_i^{(t-1)}) + \\left[ \\frac{\\partial L(y_i, \\hat{y})}{\\partial \\hat{y}} \\right]_{\\hat{y}=\\hat{y}_i^{(t-1)}} h_t(x_i) + \\frac{1}{2} \\left[ \\frac{\\partial^2 L(y_i, \\hat{y})}{\\partial \\hat{y}^2} \\right]_{\\hat{y}=\\hat{y}_i^{(t-1)}} h_t(x_i)^2\nL(yi​,y^​i(t−1)​+ht​(xi​))≈L(yi​,y^​i(t−1)​)+[∂y^​∂L(yi​,y^​)​]y^​=y^​i(t−1)​​ht​(xi​)+21​[∂y^​2∂2L(yi​,y^​)​]y^​=y^​i(t−1)​​ht​(xi​)2\n记 gi=[∂L(yi,y^)∂y^]y^=y^i(t−1)g_i = \\left[ \\frac{\\partial L(y_i, \\hat{y})}{\\partial \\hat{y}} \\right]_{\\hat{y}=\\hat{y}_i^{(t-1)}}gi​=[∂y^​∂L(yi​,y^​)​]y^​=y^​i(t−1)​​ 为损失函数对当前预测的一阶偏导数（梯度），hi=[∂2L(yi,y^)∂y^2]y^=y^i(t−1)h_i = \\left[ \\frac{\\partial^2 L(y_i, \\hat{y})}{\\partial \\hat{y}^2} \\right]_{\\hat{y}=\\hat{y}_i^{(t-1)}}hi​=[∂y^​2∂2L(yi​,y^​)​]y^​=y^​i(t−1)​​ 为二阶偏导数（Hessian）。则近似公式变为：\nL(yi,y^i(t−1)+ht(xi))≈L(yi,y^i(t−1))+giht(xi)+12hiht(xi)2L(y_i, \\hat{y}_i^{(t-1)} + h_t(x_i)) \\approx L(y_i, \\hat{y}_i^{(t-1)}) + g_i h_t(x_i) + \\frac{1}{2} h_i h_t(x_i)^2\nL(yi​,y^​i(t−1)​+ht​(xi​))≈L(yi​,y^​i(t−1)​)+gi​ht​(xi​)+21​hi​ht​(xi​)2\n这个近似形式是一个关于 ht(xi)h_t(x_i)ht​(xi​) 的二次函数，类似于牛顿法中的目标函数近似。\n2.4 回归树的学习策略（作为基学习器）\n在 Boosting 中，个体学习器通常是回归树（即使解决分类问题，也是拟合伪残差或负梯度等数值）。回归树的学习策略是：\n\n从根节点开始，遍历所有特征和所有可能的分裂点。\n对于每个分裂点，计算分裂后两个子节点的“纯度”或“损失减少量”。\n选择能够带来最大损失减少（或增益）的分裂点。\n将节点分裂，递归进行，直到满足停止条件（如达到最大深度、叶子节点样本数少于阈值、分裂增益小于阈值等）。\n对于每个叶子节点，其输出值（预测值）是落在该节点上所有样本的目标值的某种聚合（如平均值，或在 Boosting 中是经过优化的值）。\n在 GBDT 中，回归树拟合的是当前模型的负梯度。在 XGBoost 中，回归树拟合的是一个可以使目标函数（包含一阶和二阶导数）最小化的值。\n\n3. XGBoost (eXtreme Gradient Boosting)\nXGBoost (eXtreme Gradient Boosting) 是由陈天奇等人提出的一种高效、灵活且可移植的梯度提升算法实现。它在 GBDT 的基础上进行了多方面的优化和改进，使其在许多机器学习任务中表现出色，尤其是在结构化数据上的应用。\n\n核心思想: XGBoost 仍然基于梯度提升框架，通过迭代地添加决策树来优化目标函数。但它对目标函数和优化过程进行了深度优化，并加入了正则化项，使其在性能和计算效率上远超标准 GBDT。\n\n3.1 与标准 GBDT 的主要区别和改进\n\n正则化 (Regularization): 在目标函数中加入了正则化项 (L1 和 L2 正则化)，用于控制模型的复杂度，有效防止过拟合。这是 XGBoost 区别于传统 GBDT 的一个重要特性。\n目标函数优化 (Objective Function): 使用了二阶泰勒展开来近似损失函数，这使得目标函数不仅考虑了一阶导数（梯度），还考虑了二阶导数（Hessian），从而可以更精确地找到下降方向，加快收敛。\n分裂策略 (Split Finding): 引入了新的最优分裂点查找算法，包括精确贪婪算法 (Exact Greedy) 和近似算法 (Approximate) / 直方图算法 (Hist)，可以在考虑正则化的情况下选择最佳分裂点。分裂的衡量标准是增益 (Gain)。\n对稀疏值处理 (Sparse Value Handling): XGBoost 对稀疏值（包括缺失值）有内置的处理机制。在特征分裂时，它可以自动学习将缺失值样本划分到左子树或右子树，无需额外的填充或预处理。\n工程优化 (Engineering Optimizations): 进行了多项工程优化，如并行计算 (Parallelism)、列块存储 (Column Block)、核外计算 (Out-of-Core Computing) 等，显著提高了训练速度和对大规模数据的处理能力。\n收缩 (Shrinkage): 同样使用学习率 (eta) 对每棵树的贡献进行收缩，帮助防止过拟合。\n列采样 (Column Subsampling): 借鉴了随机森林的思想，支持在构建每棵树或每个节点分裂时进行特征采样，进一步减少过拟合和提高计算速度。\n早期停止 (Early Stopping): 支持在验证集上监控性能并提前停止训练，有效控制迭代次数，防止过拟合。\n\n3.2 XGBoost 的目标函数\nXGBoost 在第 ttt 轮迭代中要训练第 ttt 棵树 ht(x)h_t(x)ht​(x)，以最小化整体目标函数。目标函数包括训练损失和正则化项：\nObj(t)=∑i=1nL(yi,y^i(t−1)+ht(xi))+Ω(ht)\\text{Obj}^{(t)} = \\sum_{i=1}^n L(y_i, \\hat{y}_i^{(t-1)} + h_t(x_i)) + \\Omega(h_t)\nObj(t)=i=1∑n​L(yi​,y^​i(t−1)​+ht​(xi​))+Ω(ht​)\n其中：\n\nL(yi,y^i)L(y_i, \\hat{y}_i)L(yi​,y^​i​) 是损失函数，衡量预测值 y^i\\hat{y}_iy^​i​ 与真实值 yiy_iyi​ 的差异。\ny^i(t−1)\\hat{y}_i^{(t-1)}y^​i(t−1)​ 是前 t−1t-1t−1 棵树的集成预测结果。\nht(xi)h_t(x_i)ht​(xi​) 是第 ttt 棵树的预测结果。\nΩ(ht)\\Omega(h_t)Ω(ht​) 是第 ttt 棵树的正则化项。\n\n为了优化这个目标函数，XGBoost 使用二阶泰勒展开来近似损失函数。对损失函数在当前模型 y^i(t−1)\\hat{y}_i^{(t-1)}y^​i(t−1)​ 处进行二阶泰勒展开：\nL(yi,y^i(t−1)+ht(xi))≈L(yi,y^i(t−1))+giht(xi)+12hiht(xi)2L(y_i, \\hat{y}_i^{(t-1)} + h_t(x_i)) \\approx L(y_i, \\hat{y}_i^{(t-1)}) + g_i h_t(x_i) + \\frac{1}{2} h_i h_t(x_i)^2\nL(yi​,y^​i(t−1)​+ht​(xi​))≈L(yi​,y^​i(t−1)​)+gi​ht​(xi​)+21​hi​ht​(xi​)2\n其中 gig_igi​ 是损失函数对 y^i(t−1)\\hat{y}_i^{(t-1)}y^​i(t−1)​ 的一阶导数（梯度），hih_ihi​ 是二阶导数（Hessian）：\ngi=∂L(yi,y^i)∂y^i∣y^i=y^i(t−1),hi=∂2L(yi,y^i)∂y^i2∣y^i=y^i(t−1)g_i = \\frac{\\partial L(y_i, \\hat{y}_i)}{\\partial \\hat{y}_i} \\Big|_{\\hat{y}_i = \\hat{y}_i^{(t-1)}} \\quad, \\quad h_i = \\frac{\\partial^2 L(y_i, \\hat{y}_i)}{\\partial \\hat{y}_i^2} \\Big|_{\\hat{y}_i = \\hat{y}_i^{(t-1)}}\ngi​=∂y^​i​∂L(yi​,y^​i​)​​y^​i​=y^​i(t−1)​​,hi​=∂y^​i2​∂2L(yi​,y^​i​)​​y^​i​=y^​i(t−1)​​\n将泰勒展开代入目标函数，并忽略常数项 L(yi,y^i(t−1))L(y_i, \\hat{y}_i^{(t-1)})L(yi​,y^​i(t−1)​)，得到简化后的目标函数：\nObj(t)≈∑i=1n[giht(xi)+12hiht(xi)2]+Ω(ht)\\text{Obj}^{(t)} \\approx \\sum_{i=1}^n \\left[ g_i h_t(x_i) + \\frac{1}{2} h_i h_t(x_i)^2 \\right] + \\Omega(h_t)\nObj(t)≈i=1∑n​[gi​ht​(xi​)+21​hi​ht​(xi​)2]+Ω(ht​)\n这个目标函数只与当前要学习的树 hth_tht​ 有关，是关于树结构和叶子节点权重的函数。\n3.3 XGBoost 的正则化项\n正则化项 Ω(ht)\\Omega(h_t)Ω(ht​) 用于控制树的复杂度，定义为：\nΩ(ht)=γT+12λ∑j=1Twj2+α∑j=1T∣wj∣\\Omega(h_t) = \\gamma T + \\frac{1}{2}\\lambda \\sum_{j=1}^T w_j^2 + \\alpha \\sum_{j=1}^T |w_j|\nΩ(ht​)=γT+21​λj=1∑T​wj2​+αj=1∑T​∣wj​∣\n在提供的笔记中只包含了 L2 正则化，标准 XGBoost 也支持 L1 正则化，对应参数 reg_alpha。\n其中：\n\nTTT 是树中叶子节点的数量。\nwjw_jwj​ 是第 jjj 个叶子节点的预测值（权重）。\nγ\\gammaγ (gamma 参数) 是一个惩罚系数，惩罚叶子节点的数量。树的叶子节点越多，复杂度越高，惩罚越大。\nλ\\lambdaλ (reg_lambda 参数) 是 L2 正则化系数，惩罚叶子节点权重的平方和。叶子节点权重越大，模型越可能过度依赖个别样本，惩罚越大。\nα\\alphaα (reg_alpha 参数) 是 L1 正则化系数，惩罚叶子节点权重的绝对值和。有助于产生稀疏的叶子节点权重，实现特征选择。\n\n3.4 树结构与叶子节点权重的确定 (打分函数)\n对于一个已经确定的树结构，我们将简化目标函数按叶子节点进行分组求和。每个叶子节点 jjj 上的所有样本 i∈Iji \\in I_ji∈Ij​ 具有相同的预测值 wj=ht(xi)w_j = h_t(x_i)wj​=ht​(xi​)。结合正则化项，目标函数可以重写为：\nObj(t)=∑j=1T[(∑i∈Ijgi)wj+12(∑i∈Ijhi+λ)wj2+α∣wj∣]+γT\\text{Obj}^{(t)} = \\sum_{j=1}^T \\left[ \\left( \\sum_{i \\in I_j} g_i \\right) w_j + \\frac{1}{2} \\left( \\sum_{i \\in I_j} h_i + \\lambda \\right) w_j^2 + \\alpha |w_j| \\right] + \\gamma T\nObj(t)=j=1∑T​​​i∈Ij​∑​gi​​wj​+21​​i∈Ij​∑​hi​+λ​wj2​+α∣wj​∣​+γT\n为了使目标函数最小化，对于每个叶子节点 jjj，我们可以独立地找到最优的权重 wjw_jwj​。忽略 L1 项（为了简化推导，L1 项使得导数在 0 处不可导，但可以通过次梯度或坐标下降求解），对只包含 L2 正则化的目标函数求导并令导数等于 0：\n∂∂wj[(∑i∈Ijgi)wj+12(∑i∈Ijhi+λ)wj2]=∑i∈Ijgi+(∑i∈Ijhi+λ)wj=0\\frac{\\partial}{\\partial w_j} \\left[ \\left( \\sum_{i \\in I_j} g_i \\right) w_j + \\frac{1}{2} \\left( \\sum_{i \\in I_j} h_i + \\lambda \\right) w_j^2 \\right] = \\sum_{i \\in I_j} g_i + (\\sum_{i \\in I_j} h_i + \\lambda) w_j = 0\n∂wj​∂​​​i∈Ij​∑​gi​​wj​+21​​i∈Ij​∑​hi​+λ​wj2​​=i∈Ij​∑​gi​+(i∈Ij​∑​hi​+λ)wj​=0\n解出最优的叶子节点权重 wj∗w_j^*wj∗​ (只考虑 L2 正则化)：\nwj∗=−∑i∈Ijgi∑i∈Ijhi+λw_j^* = - \\frac{\\sum_{i \\in I_j} g_i}{\\sum_{i \\in I_j} h_i + \\lambda}\nwj∗​=−∑i∈Ij​​hi​+λ∑i∈Ij​​gi​​\n将最优权重 wj∗w_j^*wj∗​ 代回目标函数（仅 L2 正则化部分），得到在给定树结构下，每个叶子节点 jjj 对整体目标函数的贡献（不含 γT\\gamma TγT），也称为该节点的打分 (Score)：\nScorej=−12(∑i∈Ijgi)2∑i∈Ijhi+λ\\text{Score}_j = - \\frac{1}{2} \\frac{(\\sum_{i \\in I_j} g_i)^2}{\\sum_{i \\in I_j} h_i + \\lambda}\nScorej​=−21​∑i∈Ij​​hi​+λ(∑i∈Ij​​gi​)2​\n整个树结构的最终打分（即最优目标函数值）是所有叶子节点打分之和，加上叶子节点数量的惩罚：\nObj(t)∗=∑j=1TScorej+γT=∑j=1T[−12(∑i∈Ijgi)2∑i∈Ijhi+λ]+γT\\text{Obj}^{(t)*} = \\sum_{j=1}^T \\text{Score}_j + \\gamma T = \\sum_{j=1}^T \\left[ - \\frac{1}{2} \\frac{(\\sum_{i \\in I_j} g_i)^2}{\\sum_{i \\in I_j} h_i + \\lambda} \\right] + \\gamma T\nObj(t)∗=j=1∑T​Scorej​+γT=j=1∑T​[−21​∑i∈Ij​​hi​+λ(∑i∈Ij​​gi​)2​]+γT\n最小化这个打分函数就是 XGBoost 学习树结构的目标。\n3.5 树节点分裂方法与增益计算 (Split Finding and Gain Calculation)\nXGBoost 在构建树时，会从根节点开始，递归地寻找最佳分裂点。寻找最佳分裂点的策略是贪婪算法：在当前节点，遍历所有特征和该特征所有可能的分裂阈值，计算分裂后的目标函数下降量（即增益），选择增益最大的分裂作为当前节点的最佳分裂。\n对于一个节点，假设分裂前包含样本集合 III，分裂后变为左子节点 ILI_LIL​ 和右子节点 IRI_RIR​ (I=IL∪IRI = I_L \\cup I_RI=IL​∪IR​)。分裂带来的增益 (Gain) 计算公式为：\nGain=Objbefore split−(Objafter split)\\text{Gain} = \\text{Obj}_{\\text{before split}} - (\\text{Obj}_{\\text{after split}})\nGain=Objbefore split​−(Objafter split​)\n根据前面推导的叶子节点打分公式，分裂前的节点可以看作只有一个叶子节点 IL∪IRI_L \\cup I_RIL​∪IR​，分裂后变成两个叶子节点 ILI_LIL​ 和 IRI_RIR​。其对应的目标函数值变化为：\nGain=[−12(∑i∈IL∪IRgi)2∑i∈IL∪IRhi+λ+γ]−[(−12(∑i∈ILgi)2∑i∈ILhi+λ+γ)+(−12(∑i∈IRgi)2∑i∈IRhi+λ+γ)]\\text{Gain} = \\left[ - \\frac{1}{2} \\frac{(\\sum_{i \\in I_L \\cup I_R} g_i)^2}{\\sum_{i \\in I_L \\cup I_R} h_i + \\lambda} + \\gamma \\right] - \\left[ \\left( - \\frac{1}{2} \\frac{(\\sum_{i \\in I_L} g_i)^2}{\\sum_{i \\in I_L} h_i + \\lambda} + \\gamma \\right) + \\left( - \\frac{1}{2} \\frac{(\\sum_{i \\in I_R} g_i)^2}{\\sum_{i \\in I_R} h_i + \\lambda} + \\gamma \\right) \\right]\nGain=[−21​∑i∈IL​∪IR​​hi​+λ(∑i∈IL​∪IR​​gi​)2​+γ]−[(−21​∑i∈IL​​hi​+λ(∑i∈IL​​gi​)2​+γ)+(−21​∑i∈IR​​hi​+λ(∑i∈IR​​gi​)2​+γ)]\n化简后得到：\nGain=12[(∑i∈ILgi)2∑i∈ILhi+λ+(∑i∈IRgi)2∑i∈IRhi+λ−(∑i∈IL∪IRgi)2∑i∈IL∪IRhi+λ]−γ\\text{Gain} = \\frac{1}{2} \\left[ \\frac{(\\sum_{i \\in I_L} g_i)^2}{\\sum_{i \\in I_L} h_i + \\lambda} + \\frac{(\\sum_{i \\in I_R} g_i)^2}{\\sum_{i \\in I_R} h_i + \\lambda} - \\frac{(\\sum_{i \\in I_L \\cup I_R} g_i)^2}{\\sum_{i \\in I_L \\cup I_R} h_i + \\lambda} \\right] - \\gamma\nGain=21​[∑i∈IL​​hi​+λ(∑i∈IL​​gi​)2​+∑i∈IR​​hi​+λ(∑i∈IR​​gi​)2​−∑i∈IL​∪IR​​hi​+λ(∑i∈IL​∪IR​​gi​)2​]−γ\n增益越大，表示分裂带来的目标函数下降越多。 −γ-\\gamma−γ 项是引入新叶子节点的惩罚，如果计算出的最大增益小于 γ\\gammaγ，则这个分裂不值得进行，节点将停止分裂。\nXGBoost 提供了多种分裂点查找算法 (tree_method 参数)：\n\n精确贪婪算法 (Exact Greedy Algorithm): (tree_method='exact') 在每个节点遍历所有特征和所有可能的取值作为分裂点。适用于小到中等数据集。\n近似算法 (Approximate Algorithm): (tree_method='approx') 对连续特征根据分位数构造候选分裂点，在候选点中寻找最佳分裂。适用于大数据集。\n直方图算法 (Histograms): (tree_method='hist') 将连续特征离散化为多个离散桶，基于直方图计算增益。进一步提高了效率，在大数据集上表现出色，类似 LightGBM。\n\n3.6 稀疏值处理 (Sparse Value Handling)\nXGBoost 对稀疏特征（包括缺失值 NaN）有内置的支持，无需额外的填充。\n\n机制: 在进行特征分裂时，XGBoost 不仅考虑将非缺失值样本根据阈值划分，还会同时计算将所有缺失值样本统一放入左子节点或右子节点所带来的增益。\n学习: 通过比较将缺失值放入左、右子节点的增益，算法自动选择增益更大的方向作为缺失值的默认分裂方向。\n优点: 这种基于数据学习的处理方式通常比简单的填充更有效。\n\n3.7 工程优化：核外计算与并行化 (Engineering Optimizations: Out-of-Core Computation and Parallelism)\nXGBoost 进行了大量工程优化，使其能够高效地处理大规模数据集：\n\n列块存储 (Column Block): 训练数据按列存储并在内存块中预先排序。方便快速按特征访问数据和计算梯度统计量。\n核外计算 (Out-of-Core Computing): 支持处理无法完全载入内存的数据集，通过独立的线程将数据块流式读入内存进行计算。\n并行计算 (Parallelism): 支持多核 CPU 并行。特征并行（分裂点查找时并行计算不同特征）、数据并行（近似算法/直方图算法时分块并行处理）。\n\n3.8 XGBoost 参数解释 (部分关键参数)\nXGBoost 参数众多，下表列举一些重要的参数：\n\n\n\n参数/属性\n描述\n默认值\n类型/选项\n重要性级别\n\n\n\n\nobjective\n定义学习任务及相应的损失函数。重要！ 例如 'reg:squarederror' (回归)，'binary:logistic' (二分类概率)，'multi:softmax' (多分类类别)。\n'reg:squarederror'\nstring\n高\n\n\neval_metric\n验证数据所使用的评估指标。重要！ 用于早期停止。例如 'rmse' (回归), 'logloss' (分类), 'error' (分类错误率), 'auc' (AUC)。\n根据 objective 自动设置\nstring or list of strings\n高 (用于评估)\n\n\neta\n学习率 (Learning Rate)。 缩放每棵树的贡献。小值通常需要更多树，但泛化能力更好。\n0.3\nfloat\n高\n\n\nn_estimators\nBoosting 迭代次数，即树的数量。 通常设置较大值，配合早期停止。\n100\nint\n高\n\n\nmax_depth\n树的最大深度。 控制单棵树的复杂度。通常设置在 3-10 之间。\n6\nint\n高\n\n\nmin_child_weight\n子节点中样本的二阶导数（Hessian）之和的最小值。 如果一个分裂导致的子节点的 Hessian 和小于此值，则分裂被放弃。类似于 min_samples_leaf，但基于二阶信息。值越大，模型越保守。\n1\nfloat\n高\n\n\ngamma\n在节点分裂时，只有分裂后损失函数的减少量大于等于 γ\\gammaγ 时，才会进行分裂。 控制树的剪枝（或最小增益分裂）。值越大，模型越保守。\n0\nfloat\n高\n\n\nsubsample\n训练每棵树时，随机采样的训练样本比例。 ([0, 1]) 小于 1.0 用于行采样，防止过拟合。\n1\nfloat\n中\n\n\ncolsample_bytree\n训练每棵树时，随机采样的特征比例。 ([0, 1]) 用于列采样，防止过拟合。\n1\nfloat\n中\n\n\ncolsample_bylevel\n在树的每个层级分裂时，随机采样的特征比例。 ([0, 1]) 更细粒度的列采样。\n1\nfloat\n低\n\n\ncolsample_bynode\n在树的每个节点分裂时，随机采样的特征比例。 ([0, 1]) 最细粒度的列采样。\n1\nfloat\n低\n\n\nreg_alpha\nL1 正则化系数。 ([0, $\\infty$)) 惩罚叶子节点权重的 L1 范数。\n0\nfloat\n中\n\n\nreg_lambda\nL2 正则化系数。 ([0, $\\infty$)) 惩罚叶子节点权重的 L2 范数。等同于公式中的 λ\\lambdaλ。\n1\nfloat\n高\n\n\ntree_method\n构建树的算法。 'auto', 'exact', 'approx', 'hist'. 'hist' 通常更快且内存占用低，推荐用于大数据集。\n'auto'\nstring\n实用\n\n\nn_jobs\n并行计算使用的CPU数量。 -1 表示使用所有可用处理器。\n1\nint\n实用\n\n\nrandom_state\n随机种子。 控制数据采样等随机性，确保结果可复现。\n0\nint\n实用\n\n\nearly_stopping_rounds\n[fit 方法参数] 早期停止轮数。 在 fit 方法中指定。如果在验证集上经过此轮数后评估指标没有提升，训练停止。非常重要！\nN/A\nint\n高 (用于早期停止)\n\n\neval_set\n[fit 方法参数] 验证集列表。 格式为 [(X_val, y_val), ...]. 用于早期停止和评估。非常重要！\nN/A\nlist of tuples\n高 (用于早期停止)\n\n\n\n3.9 Scikit-learn API 示例 (XGBoost)\nXGBoost 提供了与 scikit-learn 兼容的 API (XGBClassifier 和 XGBRegressor)，使用非常方便。\n# 导入 XGBoost 的 Scikit-learn APIimport xgboost as xgbfrom sklearn.model_selection import train_test_splitfrom sklearn.metrics import accuracy_score, classification_reportfrom sklearn.datasets import load_iris # 假设使用 Iris 数据集import warnings # 用于忽略一些警告# 忽略 XGBoost 相关的警告warnings.filterwarnings(&quot;ignore&quot;, category=UserWarning, module=&#x27;xgboost&#x27;)# 加载数据集iris = load_iris()X, y = iris.data, iris.targetfeature_names = iris.feature_namestarget_names = iris.target_names# 分割数据集X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)print(&quot;\\n--- XGBoost Classifier 示例 ---&quot;)# 初始化 XGBoost 分类器# objective=&#x27;multi:softmax&#x27; 用于多分类，返回预测类别索引# eval_metric=&#x27;mlogloss&#x27; 是多分类常用的评估指标# num_class 需要指定多分类的类别数量xgb_clf = xgb.XGBClassifier(objective=&#x27;multi:softmax&#x27;,                            num_class=3, # 多分类时需要指定类别数量                            eval_metric=&#x27;mlogloss&#x27;, # 评估指标                            n_estimators=500, # 初始设置多一些树，配合 early stopping                            learning_rate=0.1, # 学习率                            max_depth=3, # 最大深度                            subsample=0.8, # 样本采样比例                            colsample_bytree=0.8, # 列采样比例 (每棵树)                            gamma=0.1, # 最小分裂增益                            reg_alpha=0.1, # L1 正则化                            reg_lambda=1, # L2 正则化                            n_jobs=-1, # 使用所有CPU                            random_state=42 # 随机种子                            )# 使用 Early Stopping 进行训练# 需要提供评估数据集和评估指标# eval_set 是包含 (X_val, y_val) 的列表eval_set = [(X_test, y_test)] # 这里使用测试集作为验证集演示，实际应使用单独验证集print(&quot;开始训练 (可能因 Early Stopping 提前结束)...&quot;)xgb_clf.fit(X_train, y_train,            eval_set=eval_set,            early_stopping_rounds=10, # 连续10轮验证集分数没有提升则停止            verbose=False # 关闭详细训练日志，设置为 True 会打印每轮结果            )# 预测y_pred_xgb = xgb_clf.predict(X_test)accuracy_xgb = accuracy_score(y_test, y_pred_xgb)print(f&quot;准确率: &#123;accuracy_xgb:.4f&#125;&quot;)print(&quot;分类报告:&quot;)print(classification_report(y_test, y_pred_xgb, target_names=target_names))# 打印实际训练的树数量 (如果使用了 Early Stopping)if hasattr(xgb_clf, &#x27;best_iteration&#x27;):    print(f&quot;实际训练的树数量 (Early Stopped): &#123;xgb_clf.best_iteration + 1&#125;&quot;)else:     print(f&quot;实际训练的树数量: &#123;xgb_clf.n_estimators&#125;&quot;) # 未 Early Stop 则使用全部树# 打印特征重要性 (默认基于 &#x27;gain&#x27;)print(&quot;\\n特征重要性 (XGBoost - Gain):&quot;)for name, importance in zip(feature_names, xgb_clf.feature_importances_):     print(f&quot;  &#123;name&#125;: &#123;importance:.4f&#125;&quot;)# 也可以获取其他类型的特征重要性 (&#x27;weight&#x27;, &#x27;cover&#x27;, &#x27;total_gain&#x27;, &#x27;total_cover&#x27;)# booster = xgb_clf.get_booster()# importance_weight = booster.get_score(importance_type=&#x27;weight&#x27;)# print(&quot;\\n特征重要性 (XGBoost - Weight):&quot;)# for name in feature_names:#      # Use .get(key, default_value) as some features might have 0 weight#      print(f&quot;  &#123;name&#125;: &#123;importance_weight.get(name, 0):.0f&#125;&quot;)\n3.10 XGBoost 的优点和缺点\n\n优点:\n\n高性能: 在许多结构化数据任务中通常能达到最先进的精度。\n鲁棒性: 通过二阶泰勒展开、正则化、列采样、子样本采样等技术，有效控制过拟合。\n高效: 工程优化（如列块存储、核外计算、并行计算）使其训练速度快，能处理大规模数据。\n灵活: 支持自定义损失函数和评估指标。\n处理稀疏值: 内置缺失值等稀疏数据的处理机制。\n丰富的参数: 提供了细粒度的控制，可以针对不同问题进行调优。\n\n\n缺点:\n\n参数众多: 调参难度较大，需要经验和交叉验证。\n模型可解释性相对差: 与决策树本身类似，集成后可解释性更差。\n训练仍然是串行的核心: 虽然内部计算并行化，但树与树之间依赖前一棵树的结果，整体 Boosting 过程是串行的。\n对内存要求较高: 特别是当使用精确分裂算法或处理高基数类别特征时，需要存储排序后的列块或直方图信息。\n\n\n\n3.11 小结\nXGBoost 作为 GBDT 的一个强大升级版本，通过在目标函数中引入基于二阶泰勒展开的优化、增加正则化项、改进分裂点查找算法、内置稀疏值处理以及大量的工程优化（如列块存储、核外计算、并行化），极大地提升了模型性能和训练效率。它在实践中被广泛应用并成为许多数据竞赛的首选算法。理解其基于二阶信息的目标函数、控制复杂度的正则化、以及高效的分裂策略和工程实现对于高效使用 XGBoost 至关重要。Early Stopping 是防止过拟合和提高效率的必备技巧。\n","categories":["机器学习"],"tags":["python","决策树"]},{"title":"决策树学习笔记","url":"/post/decision-tree.html","content":"决策树学习笔记\n1. 什么是决策树？\n决策树（Decision Tree）是一种基本的分类与回归方法。它是一种监督学习算法，其模型呈树形结构，可以看作是基于特征对实例进行分类或回归的过程。\n\n结构:\n\n根节点 (Root Node): 包含样本全集。\n内部节点 (Internal Node): 代表一个特征或属性的测试。\n分支 (Branch) / 边 (Edge): 代表测试的输出（特征的某个值或范围）。\n叶节点 (Leaf Node) / 终端节点 (Terminal Node): 代表最终的决策结果（类别或数值）。\n\n\n目标: 生成一棵泛化能力强，即处理未见示例能力强的决策树。\n决策过程: 从根节点开始，根据实例的特征值，沿着树的分支向下移动，直到到达叶节点，该叶节点的类别或值即为预测结果。\n\n2. 决策树学习原理\n决策树学习的本质是从训练数据中归纳出一组分类规则，或者说是由训练数据集估计条件概率模型。其核心思想是 “分而治之” (Divide and Conquer)。\n学习过程是一个 递归地选择最优特征，并根据该特征对训练数据进行分割，使得各个子数据集有一个最好的分类的过程。\n2.1 学习步骤概览\n\n开始: 构建根节点，所有训练数据都放在根节点。\n特征选择: 选择一个最优特征，按照该特征将训练数据集分割成子集，使得各个子集在当前条件下有最好的分类。\n生成子节点: 如果某个子集已能够被基本正确分类（达到停止条件），则构建叶节点，并将这些子集分到所对应的叶节点中去。\n递归: 如果子集不能被基本正确分类，则对这些子集选择新的最优特征，继续对其进行分割，构建相应的节点。\n结束: 递归地进行步骤 2-4，直到所有训练数据子集都被基本正确分类，或者没有合适的特征为止。\n\n2.2 如何选择最优特征？—— 划分选择\n选择最优特征是决策树学习的关键。目标是选择一个特征进行划分后，各子集的“纯度” (Purity) 最高。纯度越高，意味着子集中的样本尽可能属于同一类别。\n常用的衡量纯度的指标有：\na) 信息熵 (Information Entropy)\n熵是度量随机变量不确定性的指标。熵越大，随机变量的不确定性就越大，纯度越低。\n假设当前样本集合 D 中第 k 类样本所占的比例为 p_k (k=1, 2, …, |Y|，|Y|是类别总数)，则 D 的信息熵定义为：\nEnt(D)=−∑k=1∣Y∣pklog⁡2(pk)\\mathrm{Ent}(D) = - \\sum_{k=1}^{|Y|} p_k \\log_2(p_k)\nEnt(D)=−k=1∑∣Y∣​pk​log2​(pk​)\n\nEnt(D) 的值越小，D 的纯度越高。\n\nb) 信息增益 (Information Gain) - ID3 算法\n信息增益表示得知特征 A 的信息而使得数据集 D 的不确定性减少的程度。选择信息增益最大的特征作为划分特征。\n假设用离散特征 A 对样本集 D 进行划分，A 有 V 个可能的取值 &#123;a¹, a², ..., aᵛ&#125;。若使用 A 来对 D 进行划分，则会产生 V 个分支节点，其中第 v 个分支节点包含了 D 中所有在特征 A 上取值为 aᵛ 的样本，记为 Dᵛ。\n我们可以计算出用特征 A 对 D 进行划分所获得的“信息增益”：\nGain(D,a)=Ent(D)−∑v=1V∣Dv∣∣D∣Ent(Dv)\\text {Gain}(D, a) = \\text {Ent}(D) - \\sum_{v=1}^{V} \\frac{|D^v|}{|D|} \\text {Ent}(D^v)\nGain(D,a)=Ent(D)−v=1∑V​∣D∣∣Dv∣​Ent(Dv)\n\n|Dᵛ| / |D| 是分支 v 的权重，样本数越多的分支节点影响越大。\nEnt(Dᵛ) 是分支节点 v 的信息熵。\nID3 算法 就是以信息增益为准则来选择划分属性的决策树算法。\n\n缺点: 信息增益准则对可取值数目较多的特征有所偏好（例如，如果一个特征是 ID，那么每个样本一个取值，划分出的每个子集纯度都是最高的，信息增益会很大，但这没有泛化能力）。\nc) 增益率 (Gain Ratio) - C4.5 算法\n为了减少信息增益对多取值特征的偏好，C4.5 算法 使用“增益率”来选择最优划分特征。\n增益率定义为：\nGain_ratio(D,A)=Gain(D,A)IV(A)\\mathrm{Gain\\_ratio}(D, A) = \\frac{\\mathrm{Gain}(D, A)}{IV(A)}\nGain_ratio(D,A)=IV(A)Gain(D,A)​\n其中 IV(A) 称为特征 A 的“固有值” (Intrinsic Value)：\nIV(A)=−∑v=1V∣Dv∣∣D∣log⁡2(∣Dv∣∣D∣)IV(A) = - \\sum_{v=1}^{V} \\frac{|D^v|}{|D|} \\log_2 \\left( \\frac{|D^v|}{|D|} \\right)\nIV(A)=−v=1∑V​∣D∣∣Dv∣​log2​(∣D∣∣Dv∣​)\n\n特征 A 的可能取值数目越多（即 V 越大），IV(A) 的值通常会越大。\n\n注意: 增益率准则对可取值数目较少的特征有所偏好。因此 C4.5 算法并非直接选择增益率最大的特征，而是使用一个启发式：先从候选划分特征中找出信息增益高于平均水平的特征，再从中选择增益率最高的。\nd) 基尼指数 (Gini Index) - CART 算法\nCART (Classification and Regression Tree) 算法使用“基尼指数”来选择划分属性。\n数据集 D 的纯度也可以用基尼值来度量：\nGini(D)=∑k=1∣Y∣∑k′≠kpkpk′=1−∑k=1∣Y∣pk2Gini(D) = \\sum_{k=1}^{|Y|} \\sum_{k&#x27; \\neq k} p_k p_{k&#x27;} = 1 - \\sum_{k=1}^{|Y|} p_k^2\nGini(D)=k=1∑∣Y∣​k′=k∑​pk​pk′​=1−k=1∑∣Y∣​pk2​\n\nGini(D) 反映了从数据集 D 中随机抽取两个样本，其类别标记不一致的概率。\nGini(D) 越小，数据集 D 的纯度越高。\n\n特征 A 的基尼指数定义为 (假设 A 是离散特征，有 V 个取值)：\nGini_index(D,A)=∑v=1V∣Dv∣∣D∣⋅Gini(Dv)Gini\\_index(D, A) = \\sum_{v=1}^{V} \\frac{|D^v|}{|D|} \\cdot Gini(D^v)\nGini_index(D,A)=v=1∑V​∣D∣∣Dv∣​⋅Gini(Dv)\n\n选择那个使得划分后基尼指数最小的特征作为最优划分特征，即 A_* = arg min_&#123;A&#125; Gini_index(D, A)。\n\n特点: CART 生成的是 二叉树。对于连续特征，它会尝试所有可能的二分点；对于离散特征，它也会找出最优的二分组合。\n2.2.1 连续特征的处理\n在决策树中，特征可以是离散的（类别型）或连续的。对于连续特征，决策树的算法需要确定一个分割点，即根据特征值的大小将数据划分为两部分。\n\n\n对于连续特征 (A)，先对所有样本按该特征值排序，记排序后的不同取值为\n{v1,v2,…,vm}\\{v_1, v_2, \\dots, v_m\\}\n{v1​,v2​,…,vm​}\n\n\n决策树在构建过程中会选择一个合适的分割点 t（即 A ≤ t）来将数据分为两部分\n(vi,vi+1)之间取中点(t=(vi+vi+1)/2),(v_i, v_{i+1}) \\text{之间取中点} (t = (v_i + v_{i+1})/2),\n(vi​,vi+1​)之间取中点(t=(vi​+vi+1​)/2),\n将数据分为(A≤t)和(A&gt;t)两部分。\\text{将数据分为} (A \\le t) \\text{和} (A &gt; t) \\text{两部分}。\n将数据分为(A≤t)和(A&gt;t)两部分。\n\n\n选择 t 的方法通常是通过计算划分后的纯度指标（如信息增益、增益率、基尼指数或其他标准），选出最优的 t∗t^*t∗。\n\n\n2.2.2 线搜索 (Line Search) 过程\n线搜索（Line Search）是一种通过遍历所有可能的分割点来寻找最优分割点的过程。对于每个连续特征，我们会按照其特征值进行排序，然后计算每个分割点的纯度（例如信息增益或基尼指数），并选择使得纯度最大化的分割点。\n2.2.2 二类分类中三种纯度度量的关系\n\n\n基尼指数 Gini(p)=2p(1−p)Gini(p) = 2p(1-p)Gini(p)=2p(1−p)\n\n其中 p 和 1-p 分别是属于两个类别的样本的比例。当 p 或 1-p 趋近于 0 时，基尼指数会接近 0，说明数据集非常纯净。\n\n\n\n熵 Ent(p)=−plog⁡2p−(1−p)log⁡2(1−p)Ent(p) = -p\\log_2 p - (1-p)\\log_2(1-p)Ent(p)=−plog2​p−(1−p)log2​(1−p)\n\n同样，当 p 或 1-p 为 0 或 1 时，熵的值接近 0，表明数据集是纯净的。\n\n\n\n分类误差率 Err(p)=1−max⁡(p,1−p)Err(p) = 1 - \\max(p,1-p)Err(p)=1−max(p,1−p)\n\n它的特点是非常直观，但对于不平衡数据（例如，一个类别占大多数）可能会给出较差的评估。\n\n\n\n熵和基尼指数都能很好地衡量不确定性，二者通常产生相似的结果。\n分类误差率通常不会作为选择特征的标准，因为它在纯度较高时变化较小，无法敏感地反映数据的变化。\n对二分类问题，三者随 p∈[0,1]p\\in[0,1]p∈[0,1] 的曲线关系为\nErr(p)≤12Ent(p)≤Gini(p)∀ p,Err(p)\\le \\frac{1}{2}Ent(p)\\le Gini(p)\\quad\\forall\\,p,\nErr(p)≤21​Ent(p)≤Gini(p)∀p,\n\n2.3 停止条件\n递归划分过程何时停止？\n\n当前节点包含的样本全属于同一类别: 无需划分，该节点成为叶节点。\n当前属性集为空，或者所有样本在所有属性上取值相同: 无法划分，将该节点标记为叶节点，类别设定为该节点所含样本最多的类别（或根据具体问题定义）。\n当前节点包含的样本集合为空: 不能划分，标记为叶节点，类别设定为其父节点所含样本最多的类别。\n\n2.4 缺失值的处理\n在决策树学习中，处理缺失值是一个需要解决的问题。不同的算法有不同的处理方式。\n2.4.1 在算法层面如何处理缺失值\n有几种常见的方法来处理缺失值：\n\n\n数据插补： 在训练决策树之前，将缺失的值使用该特征的均值、中位数或众数进行填充。\n\n注意： scikit-learn 的决策树实现不内置对缺失值的处理，需要用户在训练前进行预处理（如使用 SimpleImputer）。\n\n\n\n忽略样本： 直接忽略包含缺失值的样本。如果缺失值不多，这可能是一个简单有效的方案，但如果缺失样本较多，可能丢失大量信息。\n\n\n基于树的缺失值处理方法（某些算法支持）： 一些决策树实现（如 C4.5）允许在划分时处理缺失值。\n\n计算纯度时： 仅使用该特征上非缺失的样本子集来计算信息增益（或其他纯度指标）。\n划分样本时： 对于在当前划分特征上有缺失值的样本，可以采用以下策略分配到子节点：\n\n将其分配到最有可能的分支（例如，根据已知值样本在各分支的比例）。\n将其分配到多个子节点，并赋予不同的权重。例如，如果一个样本在该特征上缺失，且已知值样本根据该特征分成了 A、B 两个分支，已知值样本中 70%去了 A，30%去了 B，那么可以将这个缺失值样本以 0.7 的权重分到 A 分支，以 0.3 的权重分到 B 分支。\n将“缺失”本身视为一个独立的特征取值或分支。\n\n\n\n\n\n2.4.2 如何选择划分特征（当特征有缺失值时）\n当考虑用一个有缺失值的特征进行划分时，传统的纯度计算方法需要调整：\n\n计算缺失值的概率： 可以在计算纯度指标时，对特征的缺失值情况进行惩罚。例如，C4.5 在计算增益率时会考虑样本在当前特征上已知值的比例。\n调整纯度计算： 只使用该特征上非缺失值的样本来计算纯度（如信息增益、基尼指数）。计算信息增益时，通常会乘以一个系数，这个系数等于当前节点中该特征非缺失样本的比例。\n\n2.5 处理过拟合 (剪枝与 Bagging)\n为了防止决策树 过拟合 (Overfitting)，即模型在训练数据上表现很好，但在新数据上表现差，需要进行剪枝。过拟合通常是因为树生长得过于复杂，学习了训练数据中过多的噪声或特性。\na) 预剪枝 (Pre-pruning)\n在决策树生成过程中，对每个节点在划分前先进行估计。若当前节点的划分不能带来决策树泛化性能提升（例如，在验证集上精度下降），则停止划分并将当前节点标记为叶节点。\n\n优点: 降低过拟合风险，减少训练时间和测试时间开销。\n缺点: 基于“贪心”本质，可能带来欠拟合风险（有些划分暂时看可能不优，但后续划分可能显著提升性能）。\n\n常用判断条件：\n\n节点内样本数量小于阈值 (min_samples_split, min_samples_leaf)。\n树的深度达到预设值 (max_depth)。\n划分后信息增益（或其他指标）的提升小于阈值。\n划分后在独立的验证集上精度下降。\n\nb) 后剪枝 (Post-pruning)\n先从训练集生成一棵完整的决策树，然后自底向上地对非叶节点进行考察。若将该节点对应的子树替换为叶节点能带来决策树泛化性能提升，则将该子树替换为叶节点。\n\n优点: 通常比预剪枝保留了更多分支，欠拟合风险小，泛化性能往往优于预剪枝决策树。\n缺点: 训练时间开销比未剪枝和预剪枝决策树都要大得多。\n\n常用方法：\n\n降低错误剪枝 (Reduced Error Pruning, REP): 使用验证集，将子树替换为叶节点后，如果验证集错误率降低或不变，则剪枝。\n代价复杂度剪枝 (Cost Complexity Pruning, CCP): 定义损失函数=经验熵+正则化项（树的复杂度），通过调整正则化系数 α (ccp_alpha) 来权衡模型复杂度和拟合度，生成一系列树，最后通过交叉验证选择最优子树。Scikit-learn 中常用此方法。\n\nc) Bagging (Bootstrap Aggregating)\n除了传统的预剪枝和后剪枝，我们还可以使用 Bagging (Bootstrap Aggregating) 技术来处理过拟合。Bagging 是通过从原始训练集中进行有放回抽样（Bootstrap），生成多个不同的训练集，然后基于每个训练集独立地训练一棵决策树，并将它们的预测结果进行集成（例如，分类任务投票，回归任务平均）来减少过拟合风险。\n\n思想： 对训练集做多次有放回抽样，训练多棵决策树，将其预测结果取平均（回归）或投票（分类）。\n优点： 显著降低高方差，缓解单棵树过拟合；增强了模型的稳定性；并行化简单。\n缺点： 牺牲了模型的解释性（因为是多个树的集成）。\n常用实现： sklearn.ensemble.BaggingClassifier（分类）和 sklearn.ensemble.BaggingRegressor（回归），以及特别针对决策树的 随机森林（Random Forest） (sklearn.ensemble.RandomForestClassifier/Regressor)。随机森林在 Bagging 的基础上进一步引入了特征随机性（在每个节点划分时只考虑特征的一个随机子集），进一步提升了性能和鲁棒性。。\n\n2.6 二叉树和多叉树\n2.6.1 二叉树与多叉树的区别\n\n二叉树：每个节点最多有两个子节点（通常表示为左右子节点），即每个决策都只能有两个结果。CART 算法生成的树通常是二叉树。\n多叉树：每个节点可以有多个子节点，表示每次决策有多个选择。ID3 和 C4.5 算法可以生成多叉树（对于离散特征，每个取值对应一个分支）。\n\n2.6.2 选择二叉树还是多叉树\n\n二叉树 在算法实现上通常更简单，且对计算机资源的消耗更少。许多库（包括 scikit-learn）默认或只支持二叉树。\n多叉树 能处理更多的选择，但计算复杂度较高。对于离散特征，多叉划分虽然直观，但在某些情况下（如特征取值非常多）可能不够灵活。二叉树可以通过多次二分裂来模拟多叉分裂。\n\n2.7 二分类和多分类\n2.7.1 二分类\n决策树在二分类问题中，通过划分使得子节点的样本尽可能只属于两个类别中的一个。可以使用信息增益、增益率或基尼指数作为纯度标准。常见的二分类问题如癌症检测、垃圾邮件分类等。\n2.7.2 多分类\n对于多分类问题，决策树会通过逐步划分的方式将样本集划分成多个子集。对于每个子集，决策树会重复上述过程，直到所有的样本被完全分类。可以使用 一对一 或 一对多 的方法来构建多分类树。纯度计算方法（信息熵、基尼指数等）自然地扩展到多类别情况。\n3. 决策树的优缺点\n3.1 优点\n\n易于理解和解释: 可以可视化，符合人类的直观思维。\n数据预处理要求低: 不需要数据归一化或标准化（但处理缺失值仍需注意）。可以同时处理数值型和类别型数据（不同算法支持度不同）。\n能够处理多输出问题。\n计算复杂度相对较低: 预测阶段的复杂度是 O(log₂m)，m 是样本数。\n可以验证模型: 使用统计测试来验证模型的可靠性。\n鲁棒性: 对于缺失值不敏感（某些算法如 C4.5 可以处理，但 scikit-learn 需要预处理）。\n\n3.2 缺点\n\n容易过拟合: 尤其是在数据有噪声或样本量不足时，可能生成过于复杂的树。需要剪枝或集成方法来缓解。\n不稳定性: 数据微小的变动可能导致生成完全不同的树。可以通过集成方法（如随机森林）改善。\n最优决策树学习是 NP 难问题: 实际算法通常采用启发式方法（如贪心算法），只能得到局部最优解。\n可能创建有偏的树: 如果某些类别的样本数量远多于其他类别，生成的树可能会偏向于这些数量多的类别。建议先平衡数据集。\n对线性关系表达能力弱: 对于变量间存在复杂线性关系的问题，决策树可能需要很深的树才能拟合。\n\n\n4. 使用 Scikit-learn 实现决策树 (Iris 数据集示例)\n我们将使用经典的 Iris (鸢尾花) 数据集来演示如何用 Python 的 Scikit-learn 库构建决策树分类器。\n目标: 根据鸢尾花的花萼长度 (Sepal Length)、花萼宽度 (Sepal Width)、花瓣长度 (Petal Length)、花瓣宽度 (Petal Width) 这四个特征来预测鸢尾花的种类 (Setosa, Versicolour, Virginica)。\n4.0 决策树在 Scikit-learn 中的主要参数、属性与方法\n在 Scikit-learn 中，DecisionTreeClassifier 和 DecisionTreeRegressor 类提供了多种超参数来调整决策树的构建方式。\n\n参数（DecisionTreeClassifier/DecisionTreeRegressor）\n\ncriterion：用于划分的标准。\n分类树可选 'gini'（基尼指数）或 'entropy'（信息增益）。\n回归树可选 'mse' (均方误差, 已废弃, 推荐使用 'squared_error')，'friedman_mse' 或 'mae' (平均绝对误差)。\n默认是分类树 'gini'，回归树 'squared_error'。\nsplitter：划分策略。'best' 表示选择最好的特征进行划分（默认）。\n'random' 表示随机选择部分特征后再从中选择最好的进行划分（随机森林常用）适用于样本量非常大的情况。\nmax_depth: 决策树的最大深度。控制树的复杂度，避免过拟合（预剪枝）。默认 None，表示不限制深度。\nmin_samples_split：内部节点再划分所需最小样本数。\n较高的值有助于避免过拟合（预剪枝）。可以是整数或小数（表示比例）。默认是 2。\nmin_samples_leaf：叶子节点最少样本数。\n一个分割点只有在左右分支都满足这个最少样本数条件时，才能进行划分（预剪枝）。可以是整数或小数。默认是 1。\nmin_weight_fraction_leaf：叶子节点最小的样本权重和，小于这个值会和兄弟节点一起被剪枝，默认为0不考虑权重，当较多样本有缺失值或样本分布类别偏差很大需要考虑\nmax_features：每次分割考虑的最大特征数（随机森林常用）。\n可以是整数、浮点数（比例）、&quot;auto&quot;/&quot;sqrt&quot; (等于 sqrt(n_features))、&quot;log2&quot; (等于 log2(n_features)) 或 None (考虑所有特征)。\nmax_leaf_nodes：最大叶子节点数，可以防止过拟合，默认None\nmin_impurity_decrease：分裂所减小的不纯度小于等于该值才会分裂\nmin_impurity_split：建树时候早停的基尼不纯度阈值，限制决策树的增长\nclass_weight：类别样重，指定样本各类别的权重\nccp_alpha：代价复杂度剪枝参数（后剪枝）。取值越大，剪枝越强。默认是 0.0 (不剪枝)。\n\n\n重要属性 (训练后可用)\n\nfeature_importances_: 一个 numpy 数组，表示每个特征的重要性评分（总和为 1）。重要性基于该特征在树中降低纯度（信息增益或基尼不纯度）的总量。\ntree_：底层的 _tree.Tree 对象，包含了树结构的详细信息（节点索引、左右子节点、特征索引、阈值、不纯度等）。\nn_features_in_: 训练时输入的特征数量。\nclasses_: 分类树独有，训练期间遇到的类标签数组。\nn_classes_: 分类树独有，类别的数量。、\nn_outputs_: 模型输出的数量（对于多输出问题）。\nn_node_samples_: 每个节点中的训练样本数量数组。\n\n\n常用方法\n\n.fit(X, y)：使用训练数据 X 和目标变量 y 训练决策树模型。\n.predict(X)：对新数据 X 进行预测。分类树返回类别标签，回归树返回预测值。\n.predict_proba(X)：分类树独有，预测每个样本属于各个类别的概率。\n.score(X, y)：返回模型的评估分数。分类树返回在 (X, y) 上的准确率，回归树返回 R2R^2R2 分数。\napply(X): 返回每个样本所属的叶节点索引。\nget_params([deep]): 获取模型的超参数。\nset_params(**params): 设置模型的超参数。\nexport_text(decision_tree[, …])、将决策树导出为文本规则表示。\nplot_tree(decision_tree[, …])：将决策树可视化（需要 Matplotlib）。\n\n\n\n\n4.1 导入所需库\nimport pandas as pdimport numpy as npfrom sklearn.datasets import load_irisfrom sklearn.model_selection import train_test_splitfrom sklearn.tree import DecisionTreeClassifier, plot_tree, export_textfrom sklearn.metrics import accuracy_score, classification_report, confusion_matriximport matplotlib.pyplot as plt# 注意：Scikit-learn &gt;= 0.20 版本需要# from sklearn.impute import SimpleImputer\n4.2 加载和准备数据\n# 加载 Iris 数据集iris = load_iris()X = iris.data  # 特征数据 (numpy array)y = iris.target # 目标标签 (numpy array)feature_names = iris.feature_names # 特征名称target_names = iris.target_names   # 类别名称# （可选）处理缺失值示例 (如果数据有缺失值)# 例如，使用均值填充# imputer = SimpleImputer(missing_values=np.nan, strategy=&#x27;mean&#x27;)# X_imputed = imputer.fit_transform(X)# X = X_imputed # 使用填充后的数据# （可选）将数据转换为 Pandas DataFrame 以便查看# df = pd.DataFrame(X, columns=feature_names)# df[&#x27;species&#x27;] = y# df[&#x27;species_name&#x27;] = df[&#x27;species&#x27;].map(&#123;0: target_names[0], 1: target_names[1], 2: target_names[2]&#125;)# print(df.head())# print(df[&#x27;species_name&#x27;].value_counts())# 分割数据集为训练集和测试集# random_state 保证每次分割结果一致，便于复现# stratify=y 保证训练集和测试集中各类样本的比例与原始数据集一致 (重要!)X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)print(f&quot;训练集大小: &#123;X_train.shape[0]&#125; samples&quot;)print(f&quot;测试集大小: &#123;X_test.shape[0]&#125; samples&quot;)\n4.3 创建和训练决策树模型\n# 创建决策树分类器实例# criterion=&#x27;gini&#x27;: 使用基尼指数作为划分标准 (默认)# criterion=&#x27;entropy&#x27;: 使用信息增益作为划分标准# max_depth: 树的最大深度 (预剪枝参数)# min_samples_split: 内部节点再划分所需最小样本数 (预剪枝参数)# min_samples_leaf: 叶子节点最少样本数 (预剪枝参数)# ccp_alpha: 代价复杂度剪枝的参数 (后剪枝相关)dt_classifier = DecisionTreeClassifier(criterion=&#x27;gini&#x27;, max_depth=None, random_state=42) # 先不加预剪枝# 使用训练数据训练模型dt_classifier.fit(X_train, y_train)print(&quot;决策树模型训练完成!&quot;)# 查看特征重要性 (属性示例)print(&quot;\\n特征重要性:&quot;)for name, importance in zip(feature_names, dt_classifier.feature_importances_):    print(f&quot;&#123;name&#125;: &#123;importance:.4f&#125;&quot;)\n4.4 模型预测与评估\n# 使用训练好的模型对测试集进行预测y_pred = dt_classifier.predict(X_test)# 评估模型性能# 准确率accuracy = accuracy_score(y_test, y_pred)print(f&quot;\\n模型在测试集上的准确率: &#123;accuracy:.4f&#125;&quot;)# 分类报告 (包含精确率、召回率、F1分数)print(&quot;\\n分类报告:&quot;)print(classification_report(y_test, y_pred, target_names=target_names))# 混淆矩阵print(&quot;\\n混淆矩阵:&quot;)cm = confusion_matrix(y_test, y_pred)print(cm)# 可视化混淆矩阵 (可选)# import seaborn as sns# plt.figure(figsize=(6, 4))# sns.heatmap(cm, annot=True, fmt=&#x27;d&#x27;, cmap=&#x27;Blues&#x27;, xticklabels=target_names, yticklabels=target_names)# plt.xlabel(&#x27;Predicted Label&#x27;)# plt.ylabel(&#x27;True Label&#x27;)# plt.title(&#x27;Confusion Matrix&#x27;)# plt.show()\n4.5 可视化决策树\n理解决策树如何做出决策的一个好方法是将其可视化。\na) 使用 plot_tree (需要 Matplotlib)\nplt.figure(figsize=(20, 10)) # 设置图形大小plot_tree(dt_classifier,          filled=True, # 填充颜色以表示类别纯度          feature_names=feature_names, # 显示特征名称          class_names=target_names, # 显示类别名称          rounded=True, # 节点框使用圆角          fontsize=10) # 字体大小plt.title(&quot;Decision Tree for Iris Classification (Gini)&quot;)plt.show()\nb) 使用 export_text 输出文本表示\ntree_rules = export_text(dt_classifier, feature_names=list(feature_names))print(&quot;\\n决策树规则 (文本表示):&quot;)print(tree_rules)\n4.6 探索剪枝 (示例)\n尝试添加预剪枝参数，例如限制最大深度。\n# 创建带预剪枝的决策树dt_classifier_pruned = DecisionTreeClassifier(criterion=&#x27;gini&#x27;, max_depth=3, random_state=42)# 训练dt_classifier_pruned.fit(X_train, y_train)# 预测y_pred_pruned = dt_classifier_pruned.predict(X_test)# 评估accuracy_pruned = accuracy_score(y_test, y_pred_pruned)print(f&quot;\\n剪枝后 (max_depth=3) 模型准确率: &#123;accuracy_pruned:.4f&#125;&quot;)# 可视化剪枝后的树plt.figure(figsize=(12, 6))plot_tree(dt_classifier_pruned, filled=True, feature_names=feature_names, class_names=target_names, rounded=True, fontsize=10)plt.title(&quot;Pruned Decision Tree (max_depth=3)&quot;)plt.show()\n剪枝后的树通常更简单，有时准确率可能会略有下降，但泛化能力可能更好（在这个简单的 Iris 数据集上可能不明显）。\n5. 决策树回归\n决策树不仅能用于分类问题，还能用于回归问题。**\n5.1 最小二乘回归树\n对于回归问题，决策树会在每个叶节点保存该节点的均值。在构建过程中，决策树将选择能够最小化节点内部 均方误差（MSE） 的特征和分割点作为划分标准。\n\n\n目标： 通过递归划分，使得每个子集（节点）内的目标值（y）尽可能接近其平均值，从而最小化整体的平方误差。\n\n\n损失函数： 用于衡量一个节点（数据集 D）的“不纯度”或方差，即节点内所有样本目标值与该节点目标值均值之间的平方误差之和。\nL(D)=∑i∈D(yi−yˉD)2L(D) = \\sum_{i \\in D} (y_i - \\bar{y}_D)^2\nL(D)=i∈D∑​(yi​−yˉ​D​)2\n其中，yiy_iyi​ 是节点 D 中第 i 个样本的真实目标值，yˉD\\bar{y}_Dyˉ​D​ 是节点 D 中所有样本目标值的均值。\n\n\n划分标准： 在选择特征和分割点时，回归树会遍历所有可能的特征和分割点，计算按该点划分后，左右子节点加权后的总均方误差（或称为平方误差的减少量）。选择使总均方误差最小的划分点。\nmin⁡A,s[∑i∈D1(A,s)(yi−yˉD1)2+∑i∈D2(A,s)(yi−yˉD2)2]\\min_{A, s} \\left[ \\sum_{i \\in D_1(A, s)} (y_i - \\bar{y}_{D_1})^2 + \\sum_{i \\in D_2(A, s)} (y_i - \\bar{y}_{D_2})^2 \\right]\nA,smin​​i∈D1​(A,s)∑​(yi​−yˉ​D1​​)2+i∈D2​(A,s)∑​(yi​−yˉ​D2​​)2​\n其中，AAA 是特征，sss 是分割点，D1D_1D1​ 和 D2D_2D2​ 是划分后的两个子集，yˉ∗D1\\bar{y}*{D_1}yˉ​∗D1​ 和 yˉ∗D2\\bar{y}*{D_2}yˉ​∗D2​ 分别是子集 D1D_1D1​ 和 D2D_2D2​ 的目标值均值。\n\n\n实现示例： Scikit-learn 中使用 DecisionTreeRegressor 类。\nfrom sklearn.tree import DecisionTreeRegressorfrom sklearn.metrics import mean_squared_error, r2_score# 假设 y_train_continuous 是连续的目标值# reg = DecisionTreeRegressor(criterion=&#x27;squared_error&#x27;, max_depth=5, random_state=42)# reg.fit(X_train, y_train_continuous)# y_pred_reg = reg.predict(X_test)# 评估回归模型# mse = mean_squared_error(y_test_continuous, y_pred_reg)# r2 = r2_score(y_test_continuous, y_pred_reg)# print(f&quot;\\n回归树 MSE: &#123;mse:.4f&#125;, R2: &#123;r2:.4f&#125;&quot;)\n\n\n评估指标： 均方误差（MSE）、均方根误差（RMSE）、R2R^2R2 分数。\n\n\n5.2 分类树与回归树的区别\n\n目标变量类型:\n\n分类树: 离散型（类别标签）。\n回归树: 连续型（数值）。\n\n\n叶节点输出:\n\n分类树: 叶节点通常代表一个类别标签（该节点中样本最多的类别）或类别的概率分布。\n回归树: 叶节点代表一个预测数值，通常是该节点中所有样本目标值的均值。\n\n\n划分标准/损失函数:\n\n分类树: 使用衡量“纯度”的指标，如信息增益、增益率、基尼指数，目标是最大化纯度（最小化不纯度）。\n回归树: 使用衡量“方差”或“误差”的指标，如均方误差（MSE）或平均绝对误差（MAE），目标是最小化节点内误差。\n\n\n\n\n\n\n对比维度\n分类树（Classification Tree）\n回归树（Regression Tree）\n\n\n\n\n目标变量类型\n离散型（类别标签）\n连续型（数值）\n\n\n叶节点输出\n类别标签（或类别概率分布）\n预测数值（如均值、中位数等）\n\n\n划分标准/损失函数\n信息增益、增益率、基尼指数（衡量纯度）\n均方误差（MSE）、平均绝对误差（MAE）（衡量误差）\n\n\n适用问题类型\n分类问题（如判断是否购买商品）\n回归问题（如预测房价、温度等）\n\n\n示例应用场景\n客户流失预测、垃圾邮件识别\n房价预测、销售额预测\n\n\n\n\n6. 小结\n决策树是一种强大且直观的机器学习模型。理解其核心原理（信息熵、信息增益、基尼指数）、构建过程（递归划分）以及防止过拟合的方法（剪枝）至关重要。通过 Scikit-learn 等库可以方便地实现和应用决策树解决分类和回归问题。\n","categories":["机器学习"],"tags":["python","决策树"]},{"title":"交叉验证与模型堆叠混合","url":"/post/cross-stack-blend.html","content":"交叉验证与模型堆叠混合\n1. 交叉验证 (Cross-Validation)\n交叉验证是一种用于评估模型性能和鲁棒性的技术。它通过将数据集划分为多个子集，并在不同的子集组合上进行训练和验证，从而更可靠地估计模型在未知数据上的表现。\n\n目的 (重点内容):\n\n更准确地评估模型泛化能力: 避免模型评估结果对特定训练/测试集划分的依赖。\n防止过拟合评估集: 在模型开发和调参过程中，如果反复使用同一验证集来评估和调整模型，模型可能会“记住”验证集的特征，导致在真正的未知数据上性能下降。交叉验证通过使用不同的验证集来减轻这个问题。\n充分利用数据: 在数据集较小的情况下，交叉验证可以确保所有数据都用于训练和验证。\n\n\n基本思想:\n\n将整个数据集随机分成 kkk 个互斥的子集（称为“折”或“folds”）。\n进行 kkk 轮训练和验证：\n\n每一轮，选择其中一个子集作为验证集，剩下的 k−1k-1k−1 个子集作为训练集。\n在训练集上训练模型。\n在验证集上评估模型性能。\n\n\n最终的模型性能评估是 kkk 轮验证结果的平均值。\n\n\n常用类型 (重点内容):\n\nk-Fold Cross-Validation: 将数据集分成 kkk 等份。最常用。\nStratified k-Fold Cross-Validation: 在分类问题中，确保每一折中的类别分布与整个数据集的类别分布大致相同。对于不平衡数据集尤其重要。\nLeave-One-Out Cross-Validation (LOOCV): kkk 等于样本数量 nnn。每一轮用 n−1n-1n−1 个样本训练，1个样本验证。计算量巨大，适用于极小数据集。\nGroup K-Fold: 根据样本的分组进行划分，确保同一组的样本不会同时出现在训练集和验证集中（例如，患者 ID）。用于避免数据泄露。\n\n\n在 GBDT/Tree Models 中的应用:\n\n模型评估: 使用交叉验证来获取模型性能的平均分数和标准差，作为模型泛化能力的估计。\n超参数调优: 与网格搜索、随机搜索等结合使用，在交叉验证的每一折上评估一组超参数的效果，选择平均性能最好的参数组合。\n早期停止 (Early Stopping): 在 GBDT 的训练过程中，通常会在训练时提供一个单独的验证集（或在交叉验证中使用某一折作为验证集），监控模型在该验证集上的性能，如果连续多轮性能没有提升，则提前停止训练。这是防止过拟合的重要手段。XGBoost 的 cv 函数，以及 XGBoost, LightGBM, CatBoost 的 fit 方法中，都可以指定 eval_set 和 early_stopping_rounds/callbacks 来实现。\n\n\n\n2. 网格搜索 (Grid Search)\n网格搜索是一种超参数优化技术。它通过在预先指定的超参数值网格中进行穷举搜索，找到在指定评估标准下性能最好的参数组合。\n\n目的 (重点内容): 寻找模型的最佳超参数组合，以最大化模型在未知数据上的性能。\n基本思想:\n\n定义一个字典，指定要调优的超参数名称以及每个参数要尝试的值列表。\n网格搜索会生成所有可能的超参数组合。\n对于每个超参数组合，使用交叉验证（通常是 k-fold CV）来评估模型性能。\n选择在交叉验证中平均性能最好的超参数组合。\n\n\n与交叉验证结合 (重点内容):\n\n网格搜索通常与交叉验证一起使用。例如，在使用 scikit-learn 的 GridSearchCV 时，它会自动对参数网格中的每个组合进行交叉验证。\n在每一折交叉验证中，模型都在该折的训练集上训练，并在对应的验证集上评估。\n最终选择的参数是使交叉验证平均得分最高的那个组合。\n\n\n在 GBDT/Tree Models 中的应用: 用于调优 XGBoost, LightGBM, CatBoost 等模型的参数，例如 n_estimators, learning_rate, max_depth/num_leaves/depth, subsample, colsample_bytree, reg_alpha, reg_lambda/l2_leaf_reg 等。\n优缺点:\n\n优点: 简单易懂，保证找到网格中最好的参数组合。\n缺点: 计算量巨大，特别是当参数数量多或每个参数尝试的值范围大时；无法探索网格之外的参数空间。对于计算资源有限或数据集很大的情况可能不实用。\n\n\n\n3. 模型堆叠 (Stacking)\n模型堆叠 (Stacking) 是一种集成学习技术，它结合了多个不同模型（称为基础模型或第一层模型）的预测，然后使用另一个模型（称为元模型或第二层模型）来学习如何最佳地组合这些预测。\n\n目的 (重点内容): 通过结合多个模型来提高预测性能，特别是当基础模型具有不同的优势和劣势时。\n核心思想: 使用基础模型的预测作为新的特征，训练一个元模型来做出最终预测。\n过程 (重点内容):\n\n训练集划分: 将原始训练集划分为两部分（例如，使用交叉验证）。\n训练基础模型 (Layer 1):\n\n对原始训练集使用 kkk-fold 交叉验证。\n在每一折中，用 k−1k-1k−1 折的数据训练基础模型（例如，XGBoost, Logistic Regression, SVM 等）。\n用训练好的模型对剩余的 1 折数据进行预测（这部分数据在训练当前模型时是未见过的）。\n重复 kkk 次，将所有折的预测结果拼接起来，得到与原始训练集大小相同的“out-of-fold (OOF) 预测”数据集。这些 OOF 预测将作为元模型的训练数据。\n（可选）在整个原始训练集上训练基础模型，用于对测试集进行预测。\n\n\n生成元模型训练数据: 将所有基础模型在训练集上生成的 OOF 预测结果作为新的特征集 Xmeta_trainX_{\\mathrm{meta\\_train}}Xmeta_train​。原始训练集的标签 ytrainy_{\\mathrm{train}}ytrain​ 作为元模型的标签。\n训练元模型 (Layer 2): 在 Xmeta_trainX_{\\mathrm{meta\\_train}}Xmeta_train​ 和 ytrainy_{\\mathrm{train}}ytrain​ 上训练元模型（例如，简单的线性模型、树模型、神经网络等）。\n对测试集进行预测:\n\n用所有基础模型对原始测试集进行预测。\n将所有基础模型在测试集上的预测结果作为新的特征集 Xmeta_testX_{\\mathrm{meta\\_test}}Xmeta_test​。\n使用训练好的元模型对 Xmeta_testX_{\\mathrm{meta\\_test}}Xmeta_test​ 进行预测，得到最终的预测结果。\n\n\n\n\n在 GBDT/Tree Models 中的应用:\n\nGBDT/Tree Models (XGBoost, LightGBM, CatBoost) 可以用作强大的基础模型。\n简单的模型（如 Logistic Regression, Ridge Regression）或 Tree Models 也可以用作元模型。简单的元模型有助于防止过拟合。\n\n\n优缺点:\n\n优点: 通常能获得比任何单个基础模型更好的性能，是 Kaggle 比赛等场景中常用的技术。\n缺点: 过程复杂，需要训练多个模型；训练时间较长；如果基础模型相似或元模型选择不当，可能提升不明显甚至过拟合。\n\n\n\n4. 模型混合 (Blending)\n模型混合 (Blending) 是一种比 Stacking 更简单的集成技术，也可以用来组合多个模型的预测。它与 Stacking 的主要区别在于，它使用一个单独的保持集 (Hold-out Set) 来生成元模型的训练数据，而不是使用交叉验证。\n\n目的 (重点内容): 类似于 Stacking，通过组合多个模型的预测来提高性能，但实现更简单快捷。\n核心思想: 将一部分数据完全分离出来作为“混合集”，用于训练元模型。\n过程 (重点内容):\n\n数据集划分: 将原始数据集划分为三个不重叠的部分：训练集 (Training Set)、混合集 (Blending Set) 和 测试集 (Test Set)。\n训练基础模型 (Layer 1): 在训练集上训练所有基础模型。\n生成元模型训练数据: 用在训练集上训练好的基础模型对混合集进行预测。这些预测结果作为新的特征集 Xmeta_blendX_{\\mathrm{meta\\_blend}}Xmeta_blend​。混合集的标签 yblendy_{\\text{blend}}yblend​ 作为元模型的标签。\n训练元模型 (Layer 2): 在 Xmeta_blendX_{\\mathrm{meta\\_blend}}Xmeta_blend​ 和 yblendy_{\\mathrm{blend}}yblend​ 上训练元模型。\n对测试集进行预测:\n\n用在训练集上训练好的所有基础模型对测试集进行预测。\n将所有基础模型在测试集上的预测结果作为新的特征集 Xmeta_testX_{\\mathrm{meta\\_test}}Xmeta_test​。\n使用训练好的元模型对 Xmeta_testX_{\\mathrm{meta\\_test}}Xmeta_test​ 进行预测，得到最终的预测结果。\n\n\n\n\n在 GBDT/Tree Models 中的应用:\n\nGBDT/Tree Models (XGBoost, LightGBM, CatBoost) 可以用作强大的基础模型。\n简单的模型（如 Logistic Regression, Ridge Regression）或 Tree Models 也可以用作元模型。\n\n\n优缺点:\n\n优点: 实现简单快捷，避免了 Stacking 中的 OOF 预测计算复杂性；对训练集和混合集有明确的分离，避免了信息泄露。\n缺点: 基础模型只在训练集上训练，可能没有充分利用所有可用数据；混合集的大小对元模型的训练效果影响很大；容易过拟合到特定的混合集划分。\n\n\n\n数据、公式与示例列表 (交叉验证, 网格搜索, Stacking, Blending)\n数据与数值:\n\nk-Fold 交叉验证的折数: kkk (通常取 5 或 10)\nLOOCV 的折数: nnn (样本数量)\nGrid Search: 需要指定参数网格（例如 &#123;'param_name': [value1, value2, ...], ...&#125;）\nStacking: 需要 kkk-fold 交叉验证 (通常 k≥5k \\ge 5k≥5)\nBlending 数据集划分比例: 没有固定比例，常见如 60% 训练，20% 混合，20% 测试。\n\n公式:\n\n\n交叉验证平均分数:\nAvgScore=1k∑i=1kScorei\\text{AvgScore} = \\frac{1}{k} \\sum_{i=1}^k \\text{Score}_i\nAvgScore=k1​i=1∑k​Scorei​\n(Scorei\\text{Score}_iScorei​ 是第 iii 轮交叉验证在验证集上的得分)\n\n\nStacking 元模型输入:\nXmeta=[PredictionBaseModel1,PredictionBaseModel2,… ]X_{\\text{meta}} = [\\text{Prediction}_{\\text{BaseModel}_1}, \\text{Prediction}_{\\text{BaseModel}_2}, \\dots]\nXmeta​=[PredictionBaseModel1​​,PredictionBaseModel2​​,…]\n\n\nBlending 元模型输入:\nXmeta_blend=[PredictionBaseModel1(BlendingSet),PredictionBaseModel2(BlendingSet),… ]X_{\\mathrm{meta\\_blend}} = [\\mathrm{Prediction}_{\\mathrm{BaseModel}_1}(\\mathrm{BlendingSet}), \\mathrm{Prediction}_{\\mathrm{BaseModel}_2}(\\mathrm{BlendingSet}), \\dots]\nXmeta_blend​=[PredictionBaseModel1​​(BlendingSet),PredictionBaseModel2​​(BlendingSet),…]\n\n\n示例:\n\n\nk-Fold Cross-Validation (Scikit-learn):\nfrom sklearn.model_selection import cross_val_score, KFold# model = ... # 你的模型 (e.g., lgb.LGBMClassifier)# X, y = ... # 数据kf = KFold(n_splits=5, shuffle=True, random_state=42)scores = cross_val_score(model, X, y, cv=kf, scoring=&#x27;accuracy&#x27;)print(f&quot;CV Scores: &#123;scores&#125;&quot;)print(f&quot;Mean Accuracy: &#123;scores.mean():.4f&#125;&quot;)\n\n\nGrid Search with Cross-Validation (Scikit-learn):\nfrom sklearn.model_selection import GridSearchCV# model = ... # 你的模型# param_grid = &#123;&#x27;param1&#x27;: [v1, v2], &#x27;param2&#x27;: [v3, v4]&#125;# X, y = ... # 数据grid_search = GridSearchCV(model, param_grid, cv=5, scoring=&#x27;accuracy&#x27;, n_jobs=-1)grid_search.fit(X, y)print(f&quot;Best Parameters: &#123;grid_search.best_params_&#125;&quot;)print(f&quot;Best Cross-validated Score: &#123;grid_search.best_score_:.4f&#125;&quot;)\n\n\nStacking (概念性示例 - 实际实现通常使用更高级库或手动编写):\n# 假设 base_models 是一个基础模型列表# 假设 meta_model 是一个元模型# 使用 KFold 生成 OOF 预测# train_meta_features = np.zeros((X_train.shape[0], len(base_models)))# test_meta_features = np.zeros((X_test.shape[0], len(base_models)))# for i, model in enumerate(base_models):#     oof_preds = cross_val_predict(model, X_train, y_train, cv=5, method=&#x27;predict_proba&#x27;) # 或 predict#     test_preds = model.fit(X_train, y_train).predict_proba(X_test) # 或 predict#     train_meta_features[:, i] = oof_preds[:, 1] # 对于二分类#     test_meta_features[:, i] = test_preds[:, 1] # 对于二分类# meta_model.fit(train_meta_features, y_train)# final_predictions = meta_model.predict(test_meta_features)\n(注意: scikit-learn 提供了 StackingClassifier 和 StackingRegressor，但需要 Python 3.6+ 和较新版本。)\n\n\nBlending (概念性示例 - 实际代码):\n# 假设 X_train, X_blend, X_test, y_train, y_blend 是已经划分好的数据# base_models = [...] # 基础模型列表# meta_model = ... # 元模型# # 训练基础模型# trained_base_models = [model.fit(X_train, y_train) for model in base_models]# # 生成混合集上的预测 (元模型的训练数据)# blend_meta_features = np.column_stack([#     model.predict_proba(X_blend)[:, 1] for model in trained_base_models # 二分类# ])# # 训练元模型# meta_model.fit(blend_meta_features, y_blend)# # 生成测试集上的预测 (元模型的测试数据)# test_meta_features = np.column_stack([#     model.predict_proba(X_test)[:, 1] for model in trained_base_models # 二分类# ])# # 最终预测# final_predictions = meta_model.predict(test_meta_features)\n\n","categories":["机器学习"],"tags":["python"]},{"title":"数字跑表","url":"/post/4a12443.html","content":"一、课程设计的地位与任务\n《系统设计与仿真课程设计》是电子信息、通信工程专业安排的必修的一门电子电路综合技能训练课程。通过本课程的学习，使同学们掌握常用电子元器件的应用，熟练掌握模拟集成电路、数字集成电路、单片机集成电路的设计方法与应用；理解中规模、大规模集成电路的可靠性设计的概念和方法，学会电子产品的系统设计方法，为学习智能仪器等后续课程和专业技术工作打下良好的基础。\n二、课程设计的基本内容和要求\n第一部分： EDA技术仿真\n用Verilog HDL语言设计如下数字电路，并仿真验证：\n1. 多人表决器\n设计1个多人表决器，同意为1，不同意为0，同意者过半则表决通过，指示灯亮，否则指示灯灭。表决人数和描述方式自行选择。\nmodule vote7(input [7:1] vote,output reg pass);reg [2:0] sum;integer i;always@(vote)begin sum=0;for(i=1;i&lt;=7;i=i+1)if(vote[i]) sum=sum+1;if(sum[2]) pass=1;else pass=0;endendmodule\n7人表决器，大于4人通过(0100)\n激励文件\nmodule tb_vote7();reg [7:1] vote;wire pass;vote7 i1(.pass(pass),.vote(vote));initial beginvote=7&#x27;b1110001;#50 vote=7&#x27;b1100000;#50 vote=7&#x27;b1101101;  #50 $finish;endendmodule\n2. 流水灯控制器\n流水灯控制器包含三个输入端口：时钟端，使能端和清零端。\n采用有限状态机实现流水灯控制器，控制LED灯实现多种花型.\n\n从左到右依次逐个点亮，全灭；\n从两边往中间逐个亮，全灭；\n循环执行上诉过程。\n学生选定题目后，查找相关资料，熟悉课程题目的方向和设计要求与具体基本指标，确定可行的方案。首先进行在仿真软件，得出正确合理的仿真结果；然后进行下载和调试，最后运行其实现的功能。在基本的功能上，学生可以自我扩展电路功能，创新设计效果，完善电路实现功能。\n\nmodule flow(clk,clr,led,rst);input clk,clr,rst;output reg [7:0] led;integer i;always@(posedge clk)begin if(!rst) begin led&lt;=8&#x27;h00;endif(!clr) begin led&lt;=8&#x27;h80;i&lt;=4&#x27;b0000;endelsebegin case(i)4&#x27;b0000:begin led&lt;=8&#x27;h80;i=4&#x27;b0001;end4&#x27;b0001:begin led&lt;=8&#x27;h40;i=4&#x27;b0010;end4&#x27;b0010:begin led&lt;=8&#x27;h20;i=4&#x27;b0011;end4&#x27;b0011:begin led&lt;=8&#x27;h10;i=4&#x27;b0100;end4&#x27;b0100:begin led&lt;=8&#x27;h08;i=4&#x27;b0101;end4&#x27;b0101:begin led&lt;=8&#x27;h04;i=4&#x27;b0110;end4&#x27;b0110:begin led&lt;=8&#x27;h02;i=4&#x27;b0111;end4&#x27;b0111:begin led&lt;=8&#x27;h01;i=4&#x27;b1000;end4&#x27;b1000:begin led&lt;=8&#x27;h00;i=4&#x27;b1001;end4&#x27;b1001:begin led&lt;=8&#x27;h81;i=4&#x27;b1010;end4&#x27;b1010:begin led&lt;=8&#x27;h42;i=4&#x27;b1011;end4&#x27;b1011:begin led&lt;=8&#x27;h24;i=4&#x27;b1100;end4&#x27;b1100:begin led&lt;=8&#x27;h18;i=4&#x27;b1101;end4&#x27;b1101:begin led&lt;=8&#x27;h00;i=4&#x27;b0000;endendcaseendendendmodule\n这里使用16进制表示灯的花型，使用顺序编码编号状态，状态编码也可采用格雷码等实现，花型可采用一位热码编码、约翰逊编码，8421BCD等实现\n激励文件\nmodule tb_flow();parameter DELY=20;reg clk;reg clr;reg rst;wire[7:0] led;flow i1(    .clk(clk),    .clr(clr),    .rst(rst),    .led(led));initial beginclk=1&#x27;b0;clr=1&#x27;b0;rst=1&#x27;b1;#(DELY*2) clr=1&#x27;b1;endalways begin#(DELY/2) clk=\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\x7eclk;endendmodule\n第二部分：综合设计\n综合设计分二部分的内容：CPLD/FPGA仿真设计。综合题目有5个，学生可以自行选择其中一个题目进行，也可以自己拟订题目，但必须征得指导老师的同意方能进行。学生选定题目后，查找相关资料，熟悉课程题目的方向和设计要求与具体基本指标，确定可行的方案。在基本的功能上，学生可以自我扩展电路功能，创新设计效果，完善电路实现功能。\n1、 基于Verilog HDL数字频率计的设计\n技术要求：\n\n频率测量范围：     10hz—1Mhz\n测量分辨率：       1hz\n测量误差：         ±1\n测量显示：         6位数码管显示\n设计任务：\n说明设计具体思路。\n画出系统模块框图。\n画出系统顶层原理图。\n按设计技术要求编写程序。\n画出系统功能仿真波形图。\n设计出硬件实现电路图，下载测试。\n完成课程设计报告一份。\n\n2、 基于Verilog HDL数字交通灯的设计\n技术要求：\n交通灯的基本工作状态：\n\n(主干道)绿灯：车辆前行；\n(次干道）红灯：禁止通行；\n(主干道)黄灯：过渡状态；\n(主干道)红灯：禁止车辆通行；\n(次干道)绿灯：车辆前行。\n● 注：红黄绿等均为前行方向的信号指示灯。\n设计任务：\n说明设计具体思路。\n画出系统模块框图。\n画出系统顶层原理图。\n按设计技术要求编写程序。\n画出系统功能仿真波形图。\n设计出硬件实现电路图，下载测试。\n完成课程设计报告一份。\n\n3、 基于Verilog HDL数字钟的设计\n技术要求：\n\n该时钟具有校准时间、闹铃、整点报时等功能。\n秒表至少有3个输入端，分别为时钟输入、校准信号、复位按键，也可以考虑一些扩展功能。\n秒、分钟信号、小时采用BCD码计数方式。\n设计任务：\n说明设计具体思路。\n画出系统模块框图。\n画出系统顶层原理图。\n按设计技术要求编写程序。\n画出系统功能仿真波形图。\n设计出硬件实现电路图，下载测试。\n完成课程设计报告一份。\n\n4、 基于Verilog HDL数字跑表的设计\n设计任务：设计一个以0.01s为基准计时信号的实用数字式跑表\n技术要求：\n\n跑表计时显示范围0.01s-59min59.99s，计时精度为10ms。\n具有清零、启动计时、暂停计时功能。\n时钟源误差不超过0.01s。\n设计任务：\n说明设计具体思路。\n画出系统模块框图。\n画出系统顶层原理图。\n按设计技术要求编写程序。\n画出系统功能仿真波形图。\n设计出硬件实现电路图，下载测试。\n完成课程设计报告一份。\n\n5、 基于Verilog HDL 汽车尾灯控制器的设计\n设计任务：汽车尾灯控制器\n技术要求：\n\n正常行驶时，指示灯不亮；\n刹车时，指示灯亮；\n左转时，左侧的一盏灯闪烁，亮1s，灭1s；\n右转时，右侧的一盏灯闪烁，亮1s，灭1s；\n发生故障和事故时，双侧的灯都闪烁，亮0.5s，灭0.5s；\n设计任务：\n说明设计具体思路。\n画出系统模块框图。\n画出系统顶层原理图。\n按设计技术要求编写程序。\n画出系统功能仿真波形图。\n设计出硬件实现电路图，下载测试。\n完成课程设计报告一份。\n\n这里我选择的是数字跑表设计\n在完成基本功能后添加了从当前时间开始倒计时，60秒倒计时，每计时1分钟短暂蜂鸣，倒计时结束持续蜂鸣功能\n\n`timescale 1ns / 1ps//////////////////////////////////////////////////////////////////////////////////module chronograph(input   clk,pause,reset,reversal,cnt,    output  reg[3:0] bai1,bai2,miao1,miao2,fen1,fen2,buzzer=0);//buzzer蜂鸣不用4位寄存器，懒得另外写了  always @(posedge clk, posedge reset)//百分秒计时if(!reversal)    begin        if(reset)begin bai1&lt;=0;bai2&lt;=0; end  //复位信号               //else if(pause);//begin bai1&lt;=bai1;a&lt;=bai1;end        else if(!pause)            begin   if(bai2==9&amp;&amp;bai1==9) begin bai2&lt;=0;bai1&lt;=0;miao1&lt;=miao1+1; end   //百分秒计满后秒进位                    else begin                        if(bai1==9) begin bai1&lt;=0;bai2&lt;=bai2+1;end  //百分秒第一位进位                        else begin bai1&lt;=bai1+1;end                                             end            end    endelse if(reversal)  //倒计时begin        if(reset)begin bai1&lt;=0;bai2&lt;=0; end//复位        else if(!pause&amp;&amp;cnt==0)//从当前时间倒计时            begin   if(bai2==0&amp;&amp;bai1==0&amp;&amp;miao1&gt;0) begin bai2&lt;=9;bai1&lt;=9;miao1&lt;=miao1-1; end                     else if(bai2==0&amp;&amp;bai1==0&amp;&amp;miao1==0&amp;&amp;miao2&gt;0)begin miao1&lt;=9;bai1&lt;=9;bai2&lt;=9;miao2&lt;=miao2-1;end//代码有瑕疵，其实还有别的情况，但是懒得改了，功能基本完成                    else begin//同正常计时的逆向                        if(bai1==0&amp;&amp;bai2&gt;0) begin bai1&lt;=9;bai2&lt;=bai2-1;end                        else if(bai2==0&amp;&amp;bai1==0&amp;&amp;miao1==0);                        else begin bai1&lt;=bai1-1;end                                             end            end               else if(!pause&amp;&amp;cnt)            begin fen2&lt;=0;fen1&lt;=0;miao2&lt;=6;miao1&lt;=0;bai2&lt;=0;bai1&lt;=0;endendelse if(reset)begin bai1&lt;=0;bai2&lt;=0; endalways @(bai1,bai2,pause,reset)//秒计时，基本和百分秒相同if(!reversal)                               begin        if(reset)begin miao1&lt;=0;miao2&lt;=0;end                        //else if(pause);//begin miao1&lt;=miao1;end        else if(!pause)            begin   if(miao2==5&amp;&amp;miao1&gt;9) begin miao2&lt;=0;miao1&lt;=0;fen1&lt;=fen1+1;  end                    else begin                        if(miao1&gt;9) begin miao1&lt;=0;miao2&lt;=miao2+1;end                        end                        if(miao1==9&amp;&amp;miao2==5&amp;&amp;bai1==9&amp;&amp;bai2==9) buzzer&lt;=1;//在每次计时到59秒99时短暂蜂鸣                        else buzzer&lt;=0;            end               endelse if(reversal)                               begin        if(reset)begin miao1&lt;=0;miao2&lt;=0;end        else if(!pause&amp;&amp;cnt==0)            begin   if(miao2==0&amp;&amp;miao1==0&amp;&amp;(fen1&gt;0||fen2&gt;0)) begin miao2&lt;=5;miao1&lt;=9; bai2&lt;=9;bai1&lt;=9;fen1&lt;=fen1-1;  end                    else begin                        if(miao1==0&amp;&amp;miao2&gt;0) begin miao1&lt;=9;miao2&lt;=miao2-1;end                        if(miao1==0&amp;&amp;miao2==0&amp;&amp;bai1==0&amp;&amp;bai2==0) buzzer&lt;=1;//倒计时结束后持续蜂鸣，可能还要加上分也等于0？                        else buzzer&lt;=0;                        end            end            else if(!pause&amp;&amp;cnt)            begin fen2&lt;=0;fen1&lt;=0;miao2&lt;=6;miao1&lt;=0;bai2&lt;=0;bai1&lt;=0;end//cnt信号表示进行60秒倒计时    end else if(reset)begin miao1&lt;=0;miao2&lt;=0;endalways @(miao1,miao2,pause,reset)//分计时if(!reversal)         begin        if(reset)            begin fen1&lt;=0;fen2&lt;=0;end                                    //else if(pause);//begin fen1&lt;=fen1;end        else if(!pause)            begin   if(fen2==5&amp;&amp;fen1&gt;9)begin fen2&lt;=0;fen1&lt;=0;end                    else begin                        if(fen1&gt;9)begin  fen1&lt;=0; fen2&lt;=fen2+1;end                        end            end    endelse if(reversal)       begin        if(reset)begin fen1&lt;=0;fen2&lt;=0;end        else if(!pause&amp;&amp;cnt==0)            begin if(fen1==0&amp;&amp;fen2&gt;0)begin  fen1&lt;=9;miao2&lt;=5;miao1&lt;=9; bai2&lt;=9;bai1&lt;=9;fen2&lt;=fen2-1;end                                   end    end    else if(!pause&amp;&amp;cnt)            begin fen2&lt;=0;fen1&lt;=0;miao2&lt;=6;miao1&lt;=0;bai2&lt;=0;bai1&lt;=0;endelse if(reset) begin fen1&lt;=0;fen2&lt;=0;endendmodule\n激励文件\n`timescale 1ns / 1ps//////////////////////////////////////////////////////////////////////////////////module tb_chronograph();reg clk,pause,reset,reversal,cnt;wire [3:0] bai1,bai2,miao1,miao2,fen1,fen2,buzzer;chronograph i1(        .clk(clk),        .pause(pause),        .reset(reset),        .bai1(bai1),        .bai2(bai2),        .miao1(miao1),        .miao2(miao2),        .fen1(fen1),        .fen2(fen2),        .reversal(reversal),        .cnt(cnt),        .buzzer(buzzer)        );initial begin    clk = 1;reset = 1;pause = 0;reversal=0;cnt=0;#1;reset = 0;#5;pause = \\x7epause;//时延可以设置为相同，之前以为这个数字是连续的正常时间才把间隔越搞越大，实际上就是时间间隔#10;pause = \\x7epause;#15;pause = \\x7epause;#20;pause = \\x7epause;#3000;reset=0;reversal=1;#7000;reversal=0;#15000;reset=0;reversal=1;cnt=1;#15010;cnt=0;endalways begin    #1 clk=\\x7eclk;endendmodule\n仿真波形图\n\n基础计时 重置时间和暂停功能\n\n从当前时间倒计时\n\n正常计时至59秒99时短暂蜂鸣\n\n倒计时状态下计时结束持续蜂鸣\n\n60秒信号停止输入且倒计时信号继续输入开始从60秒倒计时\n\n取消倒计时后正常计时停止蜂鸣\n\n倒计时和60秒信号同时触发60秒倒计时未设置上升沿触发导致不同步\n\n整体情况\n一次比较简单的课程设计，主要考察Verilog HDL的基础运用，时间原因未设计编译码模块并连接开发板测试实际效果，文章如有错误还望指出！\n","categories":["旧日"],"tags":["Verilog","电子"]},{"title":"SQL基础","url":"/post/SQLba.html","content":"一、数据库概述\n1、数据库介绍\n数据库就是存储数据的仓库，其本质是一个文件系统，按照特定的格式将数据存储起来，用户可以对数据库中的数据进行增加，修改，删除及查询操作。\n随着互联网的高速发展，大量的数据在不断的产生，伴随而来的是如何高效安全的存储数据和处理数据，而这一问题成为了信息时代的一个非常大的问题，而使用数据库可以高效的有条理的储存数据。\n\n可以结构化存储大量的数据；\n可以有效的保持数据的一致性、完整性；\n读写效率极高。\n\n2、数据库分类\n数据库又分为关系型数据库和非关系型数据库\n关系型数据库RDBMS\n关系型数据库：指采用了关系模型来组织数据的数据库。\n关系模型指的就是二维表格模型，而一个关系型数据库就是由二维表及其之间的联系所组成的一个数据组织。\n非关系型数据库NoSQL\n非关系型数据库：又被称为NoSQL（Not Only SQL )，意为不仅仅是SQL，对NoSQL 最普遍的定义是“非关联型的”，强调 Key-Value 的方式存储数据。\nKey-Value结构存储： Key-value数据库是一种以键值对存储数据的一种数据库，类似Java中的map。可以将整个数据库理解为一个大的map，每个键都会对应一个唯一的值。\n\n关系型数据库（RDBMS）和非关系型数据库（NoSQL）是两种不同类型的数据库管理系统，用于存储和管理数据的方式不同，它们之间的一些主要区别如下：\n\n数据结构：关系型数据库使用表格（表）来组织数据，每个表都有固定的列和行。表之间可以建立关系，通过键（键值对）进行连接。而非关系型数据库则没有固定的表结构，数据可以以文档、键值对、列族或者图等形式存储。\n可扩展性：非关系型数据库通常具有更好的可扩展性，可以更容易地处理大规模和高并发的数据。关系型数据库在处理大量数据和高并发请求时可能会面临性能瓶颈。\n数据一致性：关系型数据库通常具有强一致性，即数据在数据库中的状态是一致的。而非关系型数据库则可能具有弱一致性或最终一致性，即在某一时刻数据在不同节点之间可能存在不一致，但最终会达到一致状态。\n灵活性：非关系型数据库通常更加灵活，可以在不需要事先定义数据结构的情况下存储和处理各种不同类型的数据。而关系型数据库需要事先定义表结构，并在存储数据之前进行严格的模式设计。\n查询语言：关系型数据库通常使用结构化查询语言（SQL）来查询和操作数据。而非关系型数据库使用不同的查询语言，例如键值对数据库使用键（key）来查询数据，文档数据库使用类似于JSON的查询语法，列族数据库使用列族和列来查询数据。\n数据库设计：关系型数据库通常适用于复杂的事务性应用，需要保持数据的一致性和完整性，如金融系统、人力资源管理系统等。而非关系型数据库通常适用于需要处理大量半结构化或非结构化数据、需要高度可扩展性和灵活性的应用，如社交媒体、物联网应用、日志数据等。\n\n3、常见数据库介绍\n关系型数据库\n\n\n\n数据库\n介绍\n\n\n\n\nMySQL\n开源免费的中型数据库,已经被Oracle收购.MySQL6.x版本也开始收费。\n\n\nOracle\n收费的大型数据库，Oracle公司的产品。Oracle收购SUN公司，收购MYSQL。\n\n\nDB2\nIBM公司的数据库产品,收费的。常应用在银行系统中.\n\n\nSQLserver\nMicroSoft 公司收费的中型的数据库。C#、.net等语言常使用。\n\n\nSQLite\n嵌入式的小型数据库，应用在手机端。\n\n\n\n非关系型数据库\n\n\n\n数据库\n介绍\n\n\n\n\nRedis\n是一个小而美的数据库，主要用在key-value的内存缓存，读写性能极佳\n\n\nHBase\nHBase是列式数据库，目标是高效存储大量数据\n\n\nMongoDB\nMongoDB是文档型数据库，非常接近关系型数据库的。\n\n\n\n二、MySQL数据库\n1、MySQL介绍\nMySQL是一个关系型数据库管理系统，在 WEB 应用方面，MySQL是最好的 RDBMS (Relational Database Management System，关系数据库管理系统) 应用软件，它是由瑞典MySQL AB 公司开发，目前属于 Oracle 旗下产品，MySQL 是最流行的关系型数据库管理系统中的一个。\n2、MySQL特点\n1.MySQL支持大型的数据库。可以处理拥有上千万条记录的大型数据库。\n2.MySQL使用标准的SQL数据语言形式。\n3.MySQL可以安装在不同的操作系统，并且提供多种编程语言的操作接口。这些编程语言包括C、C++、Python、Java、Ruby等等。\n3、MySQL版本\nMySQL Community Server：社区版本，开源免费，但不提供官方技术支持。\nMySQL Enterprise Edition：企业版本，需付费，可以试用30天。\nMySQL Cluster：集群版，开源免费。可将几个MySQL Server封装成一个Server。\nMySQL Cluster CGE：高级集群版，需付费。\nMySQL Workbench（GUITOOL）：一款专为MySQL设计的ER/数据库建模工具。它是著名的数据库设计工具DBDesigner4的继任者。MySQL Workbench又分为两个版本，分别是社区版（MySQL Workbench OSS）、商用版（MySQL WorkbenchSE）。\n三、Linux系统MySQL使用\n1、登陆MySQL数据库\nMySQL是一个需要账户名密码登录的数据库，登陆后使用，它提供了一个默认的root账号，使用安装时设置的密码即可登录，目前有两种登录场景：\n本地登录\n# mysql -uroot –p 回车  password：输入密码\n-u 后面是登录的用户名\n-p 后面是登录密码, 如果不填写, 回车之后会提示输入密码\n远程登录\n# mysql -h 远程服务器IP地址 -P 端口号 -u用户名 -p 回车password：输入密码\n退出\nmysql&gt; exitmysql&gt; quit快捷键Ctrl + d\n2.DataGrip使用\n创建工程\n点击File-&gt;New-&gt;Project新建DataGrip工程\n输入项目名称，点击确定。\n选择新项目打开方式：This Windows（在本窗口中打开），New Windows（在新窗口中打开）， Attach（附加模式）\n连接数据库\n选择Database下的➕，点击DataSource菜单下的MySQL。\n填写对应的参数，连接数据库：连接名，IP，用户名，密码等，点击OK完成连接。\n如果是第一次使用，需要下载mysql驱动文件。\n设置数据库时区：\n\n点击Advanced按钮；\n在VM options后面写入`-Duser.timezone=Asia/Shanghai\n\n设置完成后，单击Apply（应用），单击OK，连接完成\n选择要使用的数据库\n点击连接名称之后的按钮可以选择所要使用的数据库：\nDataGrip软件设置\n设置字体大小\n设置文字大小： File—&gt;settings—&gt;Editor----&gt;Font，可以设置文字尺寸Size和行高Line height\n设置关键字大写\n设置关键字大写： File—&gt;settings—&gt;Editor----&gt;Code Style—&gt;SQL—&gt;MySql(需要设置的数据库)—&gt;Case\n\n自动排版\n自动排版布局： File—&gt;settings—&gt;Editor----&gt;Code Style—&gt;SQL—&gt;MySql(需要设置的数据库)—&gt;Queries\n自动排版快捷键：Ctrl+ Alt + L\n四、SQL语句\n1、连接数据库\n结构化查询语言(Structured Query Language)简称SQL，是关系型数据库管理系统都需要遵循的规范，是数据库认识的语句。不同的数据库生产厂商都支持SQL语句，但都有特有内容。\n举例：\n普通话：各数据库厂商都遵循的ISO标准\n方言：数据库特有的关键字\n2、SQL语句分类\nDDL\nDDL（Data Definition Language）用于定义和管理数据库中的数据结构，包括表、视图、索引、触发器、存储过程、用户等。\nDDL通常包括以下几种常见的语句：\n\nCREATE：用于创建数据库中的各种对象，如创建表、视图、索引、触发器、存储过程等。例如，CREATE TABLE用于创建表，CREATE VIEW用于创建视图。\nALTER：用于修改数据库中已存在的对象，如修改表结构、修改视图定义等。例如，ALTER TABLE用于修改表结构，ALTER VIEW用于修改视图定义。\nDROP：用于删除数据库中的对象，如删除表、删除视图等。例如，DROP TABLE用于删除表，DROP VIEW用于删除视图。\nTRUNCATE：用于删除表中的所有数据，并且保留表结构和属性。例如，TRUNCATE TABLE用于删除表中的所有数据。\nRENAME：用于修改数据库中对象的名称，如修改表名、修改视图名等。例如，RENAME TABLE用于修改表名，RENAME VIEW用于修改视图名。\nGRANT和REVOKE：用于授权和撤销数据库对象的权限，如授权用户对表进行增、删、改、查操作等。例如，GRANT SELECT, INSERT, UPDATE, DELETE ON table_name TO user_name用于授权用户对表进行查询、插入、更新、删除操作。\n\nDDL语句通常由数据库管理员或具有相应权限的用户执行，用于定义数据库的结构和元数据，对数据库的整体架构进行管理和控制。\nDML\nDML（Data Manipulation Language）用于对数据库中的数据进行操作，包括查询、插入、更新、删除等操作。\nDML通常包括以下几种常见的语句：\n\nSELECT：用于查询数据库中的数据，包括单表查询、多表查询、嵌套查询、聚合查询、排序、分组等操作。例如，SELECT * FROM table_name用于查询表中的所有数据，SELECT column1, column2 FROM table_name用于查询表中指定列的数据。\nINSERT：用于向数据库中插入新数据，包括单行插入和多行插入。例如，INSERT INTO table_name (column1, column2) VALUES (value1, value2)用于向表中插入一行数据。\nUPDATE：用于更新数据库中的数据，可以更新单表或多表中的数据。例如，UPDATE table_name SET column1 = value1, column2 = value2 WHERE condition用于更新表中符合条件的数据。\nDELETE：用于删除数据库中的数据，可以删除单表或多表中的数据。例如，DELETE FROM table_name WHERE condition用于删除表中符合条件的数据。\n\nDML语句用于对数据库中的数据进行增、删、改、查等操作，由应用程序或数据库用户执行，用于操作数据库中的具体数据记录。DML操作可以通过执行DML语句来实现对数据库中数据的增加、删除、修改和查询。\nDQL\nDQL（Data Query Language）用于查询数据库中的数据，即实现从数据库中获取数据的操作。\nDQL通常包括以下几种常见的语句：\n\nSELECT：用于查询数据库中的数据，包括单表查询、多表查询、嵌套查询、聚合查询、排序、分组等操作。SELECT语句可以通过指定要查询的表、列、条件、排序方式等来获取数据。例如，SELECT * FROM table_name用于查询表中的所有数据，SELECT column1, column2 FROM table_name用于查询表中指定列的数据。\nFROM：用于指定要查询的表名，可以查询单个表或多个表的数据。例如，SELECT * FROM table1, table2用于从table1和table2两个表中获取数据。\nWHERE：用于指定查询的条件，可以使用逻辑运算符、比较运算符、通配符等来定义查询条件。例如，SELECT * FROM table_name WHERE column1 = 'value’用于查询column1等于特定值的数据。\nORDER BY：用于指定查询结果的排序方式，可以按照一个或多个列进行升序或降序排序。例如，SELECT * FROM table_name ORDER BY column1 ASC用于按照column1列的升序排序。\nGROUP BY：用于将查询结果按照一个或多个列进行分组，并对每个分组进行聚合计算。例如，SELECT column1, SUM(column2) FROM table_name GROUP BY column1用于按照column1列的值进行分组，并计算每个分组中column2列的和。\nJOIN：用于连接多个表的数据，可以通过不同的连接方式（如内连接、外连接、自连接等）来获取联接后的结果。例如，SELECT * FROM table1 INNER JOIN table2 ON table1.id = table2.id用于执行内连接操作，连接两个表的id列相等的记录。\n\nDQL语句用于查询数据库中的数据，并通过结果集返回查询结果。DQL语句可以通过执行查询操作来实现从数据库中获取数据，并支持丰富的查询功能，用于满足应用程序或用户对数据库中数据的查询需求。\nDCL\nDCL（Data Control Language用于控制数据库中的数据访问和权限管理。\nDCL主要包括以下两种常见的语句：\n\nGRANT：用于授权用户或角色对数据库对象（如表、视图、存储过程等）进行特定的操作权限。GRANT语句可以授权用户或角色执行SELECT、INSERT、UPDATE、DELETE等数据库操作，也可以授权用户或角色对特定的数据库对象进行操作。例如，GRANT SELECT, INSERT ON table_name TO user_name或GRANT UPDATE ON table_name TO role_name用于授权用户或角色对表进行SELECT、INSERT或UPDATE操作。\nREVOKE：用于撤销用户或角色对数据库对象的操作权限。REVOKE语句可以撤销之前通过GRANT语句授权的权限。例如，REVOKE SELECT ON table_name FROM user_name或REVOKE INSERT ON table_name FROM role_name用于撤销用户或角色对表的SELECT或INSERT权限。\n\nDCL语句用于对数据库中的数据访问进行控制，包括授权用户或角色对数据库对象的操作权限，以及撤销之前授权的权限。通过DCL语句，数据库管理员可以灵活地管理用户或角色对数据库的操作权限，确保数据库的安全性和数据的合法性。\n要点\n① SQL语句可以单行或多行书写，以分号结尾\n② 可使用空格和缩进来增强语句的可读性\n③ MySQL数据库的SQL语句不区分大小写，关键字建议使用大写\n④ 可以使用单行与多行注释（#和/*）\n五、DDL数据库操作\n1、MySQL的组成结构\n\n一个MySQL DBMS可以同时存放多个数据库，理论上一个项目就对应一个数据库\n一个数据库中还可以同时包含多个数据表，而数据表才是真正用于存放数据的位置。（类似Office软件中的Excel表格），理论上一个功能就对应一个数据表。如博客系统中的用户管理功能，就需要一个user数据表、博客中的文章就需要一个article数据表、博客中的评论就需要一个message数据表\n一个数据表又可以拆分为多个字段，每个字段就是一个属性\n一个数据表除了字段以外，还有很多行，每一行都是一条完整的数据（记录）\n2、数据库的基本操作\n① 创建数据库\ncreate database 数据库名称(字母+数字+下划线组成，以字母开头，不能出现中文以及特殊字符，不能重名)\nmysql&gt; create database 数据库名称 [设置编码格式];create database if not exists db_itheima default character set utf8 指定默认字符集设置编码格式\n国内汉字无法通过256个字符进行描述，所以国内开发了自己的编码格式gb2312，升级gbk\n中国台湾业开发了一套自己的编码格式big5\n很多项目并不仅仅只在本地使用，也可能支持多国语言，标准化组织开发了一套通用编码utf8，后来5.6版本以后又进行了升级utf8mb4\n\n编写SQL语句是一个比较细致工作，不建议直接在终端中输入SQL语句，可以先把要写的SQL语句写入一个记事本中，然后拷贝执行。\n\n② 查询数据库\n基本语法：显示所有数据库\nmysql&gt; show databases;\n③ 删除数据库\n基本语法：\nmysql&gt; drop database 数据库名称;\n④ 选择数据库\n从数据库列表中查找需要使用的数据库 格式：\nmysql&gt; use datab;\n查看正在使用的数据库（8.0以后版本需要基于select查询来获取当前数据库）\nmysql&gt; select database();\n六、DDL数据表操作\n特别注意：创建数据表必须有一个前提，首先要明确选择某一个数据库。\n1、数据表的基本操作\n数据表的创建\n基本语法：\nmysql&gt; create table 数据表名称(\t字段1 字段类型 [字段约束],\t字段2 字段类型 [字段约束],\t...); \n\nuse在MySQL中的含义代表选择，use 数据库名称相当于选择指定的数据库。而且use比较特殊，其选择结束后，其尾部可以不加分号；但是强烈建议所有的SQL语句都要加分号，养成一个好习惯。\n\nmysql&gt; create table aa(\tid tinyint,    username varchar(20),    password char(32)) engine=innodb default charset=utf8;\n\ntinyint ：微整型，范围-128 ~ 127，无符号型，则表示0 ~ 255\n\n\n表示字符串类型可以使用char与varchar，char代表固定长度的字段，varchar代表变化长度的字段。\n\n创建一个article文章表，拥有4个字段（编号、标题、作者、内容）\nmysql&gt; use datab;mysql&gt; create table article(\tid int,\ttitle varchar(50),\tauthor varchar(20),\tcontent text) engine=innodb default charset=utf8;\n\ntext ：文本类型，一般情况下，用varchar存储不了的字符串信息，都建议使用text文本进行处理。\n\n\nvarchar存储的最大长度，理论值65535个字符。但是实际上，有几个字符是用于存放内容的长度的，所以真正可以使用的不足65535个字符，另外varchar类型存储的字符长度还和编码格式有关。1个GBK格式的占用2个字节长度，1个UTF8格式的字符占用3个字节长度。GBK = 65532~65533/2，UTF8 = 65532~65533/3\n\n查询已创建数据表\n显示所有数据表（当前数据库）\nmysql&gt; use 数据库名称;mysql&gt; show tables;\n显示数据表的（编码格式、字段等信息）\nmysql&gt; desc 数据表名称;\n修改数据表信息\n① 数据表字段添加\nmysql&gt; alter table 数据表名称 add 新字段名称 字段类型 first|after 其他字段名称;选项说明：first：把新添加字段放在第一位after 字段名称：把新添加字段放在指定字段的后面\n案例：在tb_article文章表中添加一个addtime字段，类型为date(年-月-日)\nmysql&gt; alter table tb_article add addtime date after content;mysql&gt; desc tb_article;\n② 修改字段名称或字段类型\n修改字段名称与字段类型（也可以只修改名称）\nmysql&gt; alter table tb_admin change username user varchar(40);mysql&gt; desc tb_admin;\n仅修改字段的类型\nmysql&gt; alter table tb_admin modify user varchar(20mysql&gt; desc tb_admin;\n③ 删除某个字段\nmysql&gt; alter table tb_article drop 字段名称;mysql&gt; desc tb_article;\n④ 修改数据表名称\nrename table 旧名称 to 新名称;\n删除数据表\nmysql&gt; drop table IF EXISTS 数据表名称;\n2、字段类型详解\n① 整数类型\n\n\n\n分类\n类型名称\n说明\n\n\n\n\ntinyint\n很小的整数\n-128 ~ 127\n\n\nsmallint\n小的整数\n-32768 ~ 32767\n\n\nmediumint\n中等大小的整数\n-8388608 ~ 8388607\n\n\nint(integer)\n普通大小的整数\n-2147483648 ~ 2147483647\n\n\n\n② 浮点类型\n浮点类型（精度失真情况）和定点类型（推荐使用定点类型）\n\n\n\n分类\n类型名称\n\n\n\n\nfloat\n单精度浮点数\n\n\ndouble\n双精度浮点数\n\n\ndecimal(m,d)\n定点数，decimal(10,2)\n\n\n\n\ndecimal(10,2) ：代表这个数的总长度为10 = 整数长度 + 小数长度，2代表保留2位小数\n\n③ 日期类型\n\n\n\n分类\n类型名称\n\n\n\n\nyear\nYYYY 1901~2155\n\n\ntime\nHH:MM:SS -838:59:59~838:59:59\n\n\ndate\nYYYY-MM-DD  1000-01-01~9999-12-3\n\n\ndatetime\nYYYY-MM-DD  HH:MM:SS 1000-01-01 00:00:00~ 9999-12-31 23:59:59\n\n\ntimestamp\nYYYY-MM-DD  HH:MM:SS 1970~01~01 00:00:01  UTC~2038-01-19 03:14:07UTC\n\n\n\n④ 文本\n\n\n\n类型名称\n说明\n\n\n\n\nchar(m)\nm为0~255之间的整数定长（固定长度）\n\n\nvarchar(m)\nm为0~65535之间的整数变长（变化长度）\n\n\ntext\n允许长度0~65535字节\n\n\nmediumtext\n允许长度0~167772150字节\n\n\nlongtext\n允许长度0~4294967295字节\n\n\n\n七、DML数据操作语言\n1、DML的SQL语句\ninsert插入、update更新、delete删除\n2、数据的增删改\n数据的增加操作\nmysql&gt; insert into 数据表名称([字段1,字段2,字段3...]) values (字段1的值,字段2的值,字段3的值...);\n\n特别注意：在SQL语句中，除了数字，其他类型的值，都需要使用引号引起来，否则插入时会报错。\n\n第一步：准备一个数据表\nmysql&gt; use aa;mysql&gt; create table tb_user(\tid int,\tusername varchar(20),\tage tinyint unsigned,\tgender enum(&#x27;男&#x27;,&#x27;女&#x27;,&#x27;保密&#x27;),\taddress varchar(255)) engine=innodb default charset=utf8;\n\nunsigned代表无符号型，只有0到正数。tinyint unsigned无符号型，范围0 ~ 255\n\n\nenum枚举类型，多选一。只能从给定的值中选择一个\n\n第二步：使用insert语句插入数据\nmysql&gt; insert into tb_user values (1,&#x27;刘备&#x27;,34,&#x27;男&#x27;,&#x27;广州市天河区&#x27;);mysql&gt; insert into tb_user(id,username,age) values (2,&#x27;关羽&#x27;,33);\n第三步：批量插入多条数据\nmysql&gt; insert into tb_user values (3,&#x27;大乔&#x27;,19,&#x27;女&#x27;,&#x27;上海市浦东新区&#x27;),(4,&#x27;小乔&#x27;,18,&#x27;女&#x27;,&#x27;上海市浦东新区&#x27;),(5,&#x27;马超&#x27;,26,&#x27;男&#x27;,&#x27;北京市昌平区&#x27;);INSERT INTO aaa(name)VALUES (&#x27;heheh&#x27;);                               #单独插入一个数据INSERT INTO aaa(name,gender,age)VALUES (&#x27;hehe&#x27;,&#x27;male&#x27;,18);           #插入多个列出数据INSERT INTO aaa VALUES (&#x27;hehe1&#x27;,&#x27;male&#x27;,18);                          #插入一条完整数据INSERT INTO aaa VALUES (&#x27;hehe2&#x27;,&#x27;male&#x27;,18),(&#x27;hehehe&#x27;,&#x27;female&#x27;,18);   #插入多条完整数据INSERT INTO aaa(name,gender)VALUES (&#x27;hehe3&#x27;,&#x27;male&#x27;),(&#x27;hehe4&#x27;,&#x27;male&#x27;);#插入多条列出数据\n数据的修改操作\nmysql&gt; update 数据表名称 set 字段1=更新后的值,字段2=更新后的值,... where 更新条件;\n\n特别说明：如果在更新数据时，不指定更新条件，则其会把这个数据表的所有记录全部更新一遍。\n\n案例：修改username='马鹏’这条记录，将其性别更新为男，家庭住址更新为广东省深圳市\nmysql&gt; update tb_user set gender=&#x27;男&#x27;,address=&#x27;广东省深圳市&#x27; where username=&#x27;马鹏&#x27;;\n案例：今年是2020年，假设到了2021年，现在存储的学生年龄都差1岁，整体进行一次更新\nmysql&gt; update tb_user set age=age+1;\n数据的删除操作\nmysql&gt; delete from 数据表名称 [where 删除条件];\n删除tb_user表中，id=1的用户信息\nmysql&gt; delete from tb_user where id=1;\ndelete from与truncate清空数据表操作\nmysql&gt; delete from 数据表;或mysql&gt; truncate 数据表;\ndelete from与truncate区别\n\ndelete：删除数据记录\n\n数据操作语言（DML）\n删除大量记录速度慢，只删除数据，主键自增序列不清零，100 =&gt; 新插入 =&gt; 101\n可以带条件删除\n\n\ntruncate：删除所有数据记录\n\n数据定义语言（DDL）\n清里大量数据速度快，主键自增序列清零, 100 =&gt; 新插入 =&gt; 1\n不能带条件删除\n\n\n\n八、SQL约束\n1、主键约束\n1、PRIMARY KEY 约束唯一标识数据库表中的每条记录。\n2、主键必须包含唯一的值。\n3、主键列不能包含 NULL 值。\n4、每个表都应该有一个主键，并且每个表只能有一个主键。\n遵循原则：\n1）主键应当是对用户没有意义的\n2）永远也不要更新主键。\n3）主键不应包含动态变化的数据，如时间戳、创建时间列、修改时间列等。\n4） 主键应当由计算机自动生成。\n创建主键约束：创建表时，在字段描述处，声明指定字段为主键\n\n如：创建一个学生信息表tb_students，包含编号id、学生姓名name、年龄age、性别gender以及家庭住址address等字段，然后将id设置为主键。\ncreate table tb_students(\tid int primary key,    name varchar(20),    age tinyint unsigned,    gender enum(&#x27;男&#x27;, &#x27;女&#x27;),    address varchar(255)) engine=innodb default charset=utf8;\n删除主键约束：如需撤销 PRIMARY KEY 约束，请使用下面的 SQL\nalter table persons2 drop primary key;\n删除tb_students数据表的主键\nalter table tb_students drop primary key;\n\n自动增长\n\n我们通常希望在每次插入新记录时，数据库自动生成字段的值。\n我们可以在表中使用 auto_increment（自动增长列）关键字，自动增长列类型必须是整型，自动增长列必须为键(一般是主键)。\n下列 SQL 语句把 “Persons” 表中的 “Id” 列定义为 auto_increment 主键\ncreate table persons3(\tid int primary key auto_increment,\tfirst_name varchar(255),\tlast_name varchar(255),\taddress varchar(255),\tcity varchar(255)) default charset=utf8;\n向persons添加数据时，可以不为Id字段设置值，也可以设置成null，数据库将自动维护主键值：\ninsert into persons3(first_name,last_name) values(&#x27;Bill&#x27;,&#x27;Gates&#x27;);insert into persons3(id,first_name,last_name) values(null,&#x27;Bill&#x27;,&#x27;Gates&#x27;);\n如：创建一个学生信息表tb_students，包含编号id、学生姓名name、年龄age、性别gender以及家庭住址address等字段，然后将id设置为主键自动增长列。\ndrop table tb_students;create table tb_students(\tid int auto_increment primary key,    name varchar(20),    age tinyint unsigned,    gender enum(&#x27;男&#x27;, &#x27;女&#x27;),    address varchar(255)) engine=innodb default charset=utf8;或create table tb_students(\tid int auto_increment,    name varchar(20),    age tinyint unsigned,    gender enum(&#x27;男&#x27;, &#x27;女&#x27;),    address varchar(255),    primary key(id)) engine=innodb default charset=utf8;-- 插入测试数据insert into tb_students values (null, &#x27;吕布&#x27;, 30, &#x27;男&#x27;, &#x27;内蒙古包头市&#x27;);insert into tb_students values (null, &#x27;貂蝉&#x27;, 19, &#x27;女&#x27;, &#x27;山西忻州市&#x27;);-- 删除auto_incrementalter table 表名 change 列名 列名 类型; ALTER TABLE 表名 CHANGE 列名 列名 类型;ALTER TABLE 表名 DROP PRIMARY KEY ;#删除主键自增的值需要先更改主键类型\n2、非空约束\nNOT NULL 约束强制列不接受 NULL 值。\nNOT NULL 约束强制字段始终包含值。这意味着，如果不向字段添加值，就无法插入新记录或者更新记录。\n下面的 SQL 语句强制 “id” 列和 “last_name” 列不接受 NULL 值：\n\n创建一个tb_news新闻表，包含id主键列、title新闻标题、description描述、content新闻内容以及addtime添加时间，要求为title字段添加非空约束。\ncreate table tb_news(\tid int auto_increment,    title varchar(80) not null,    description varchar(255),    content text,    addtime datetime,    primary key(id)) engine=innodb default charset=utf8;\n3、唯一约束\nUNIQUE 约束唯一标识数据库表中的每条记录。\nUNIQUE 和 PRIMARY KEY 约束均为列或列集合提供了唯一性的保证。\nPRIMARY KEY 拥有自动定义的 UNIQUE 约束。\n请注意：\n每个表可以有多个 UNIQUE 约束，但是每个表只能有一个 PRIMARY KEY 约束。\n\n创建一个tb_member会员表 ，包含字段有id主键、username用户名、password密码（密码必须使用密文保存，长度为固定的32位），由于用户名不允许出现重复的情况，所以请为username添加唯一约束。\ncreate table tb_member(\tid int auto_increment,    username varchar(20) unique,    password char(32),    primary key(id)) engine=innodb default charset=utf8;\n4、默认值约束\n关键字：default\n用来指定某列的默认值。在表中插入一条新记录时，如果没有为这个字段赋值，系统就会自动为这个字段插入默认值。\n创建一个tb_department部门表，包含字段id主键、name部门名称以及location部门位置。由于我们的部门位置位于北京的较多，所以部门位置就可以默认为“Beijing”。\ncreate table tb_department(\tid int auto_increment,    name varchar(20),    location varchar(50) default &#x27;Beijing&#x27;,    primary key(id)) engine=innodb default charset=utf8;\n5、外键约束\n外键约束：关键字foreign key（主要用于多表关联使用）\n用于保持不同表之间的数据一致性和完整性。它是一种规定，用于确保在一个表中的外键（Foreign Key）值必须存在于另一个表中的主键（Primary Key）中。\n外键约束的主要目的是建立表之间的关联关系，以确保表之间的数据一致性。外键约束可以在数据库设计时定义，并且可以由数据库管理系统（DBMS）自动执行，以防止不符合约束条件的数据插入或更新操作。\n比如：有两张数据表，这两个数据表之间有联系，通过了某个字段可以建立连接，这个字段在其中一个表中是主键，在另外一张表中，我们就把其称之为==外键==。\n\n外键约束可以有以下特性：\n\n引用完整性：外键约束可以确保表之间的关联关系是有效的，即在外键列中的值必须在主键列中存在。这可以防止插入或更新数据时出现无效的外键值，从而保持数据的完整性。\n数据一致性：外键约束可以确保在关联表之间的数据一致性，因为它要求外键值与主键值相匹配。这可以防止在不同表中出现不一致的数据，从而保持数据的一致性。\n数据操作控制：外键约束可以限制对外键列的插入、更新和删除操作，从而控制对关联表的数据操作。这可以帮助防止不正确的数据操作，从而提高数据的质量和准确性。\n\n外键约束可能会对数据库的性能和灵活性产生影响，因为它会增加对数据的检查和验证操作。在设计数据库时，需要仔细考虑外键约束的使用，并根据具体情况进行权衡。\n6、小结\n① 主键约束：唯一标示，不能重复，不能为空。\n1）主键应当是对用户没有意义的\n2）永远也不要更新主键。\n3）主键不应包含动态变化的数据，如时间戳、创建时间列、修改时间列等。\n4） 主键应当由计算机自动生成。\n自动增长：\n我们可以在表中使用 auto_increment（自动增长列）关键字，自动增长列类型必须是整型，自动增长列必须为键(一般是主键)。\n② 非空约束：\nNOT NULL 约束强制列不接受 NULL 值。\n③ 唯一约束：\nUNIQUE 约束唯一标识数据库表中的每条记录。\nUNIQUE 和 PRIMARY KEY 约束均为列或列集合提供了唯一性的保证。\nPRIMARY KEY 拥有自动定义的 UNIQUE 约束。\n④ 默认值约束\ndefault 默认值\n用来指定某列的默认值。在表中插入一条新记录时，如果没有为这个字段赋值，系统就会自动为这个字段插入默认值。\n⑤ 外键约束\n主要用于指定两张表之间的关联关系。\n九、DQL数据查询语言\n1、数据集准备\nCREATE TABLE product(    pid         INT PRIMARY KEY,    pname       VARCHAR(20),    price       DOUBLE,    category_id VARCHAR(32));\n插入数据：\nINSERT INTO product VALUES (1,&#x27;联想&#x27;,5000,&#x27;c001&#x27;);INSERT INTO product VALUES (2,&#x27;海尔&#x27;,3000,&#x27;c001&#x27;);INSERT INTO product VALUES (3,&#x27;雷神&#x27;,5000,&#x27;c001&#x27;);INSERT INTO product VALUES (4,&#x27;杰克琼斯&#x27;,800,&#x27;c002&#x27;);INSERT INTO product VALUES (5,&#x27;真维斯&#x27;,200,&#x27;c002&#x27;);INSERT INTO product VALUES (6,&#x27;花花公子&#x27;,440,&#x27;c002&#x27;);INSERT INTO product VALUES (7,&#x27;劲霸&#x27;,2000,&#x27;c002&#x27;);INSERT INTO product VALUES (8,&#x27;香奈儿&#x27;,800,&#x27;c003&#x27;);INSERT INTO product VALUES (9,&#x27;相宜本草&#x27;,200,&#x27;c003&#x27;);INSERT INTO product VALUES (10,&#x27;面霸&#x27;,5,&#x27;c003&#x27;);INSERT INTO product VALUES (11,&#x27;好想你枣&#x27;,56,&#x27;c004&#x27;);INSERT INTO product VALUES (12,&#x27;香飘飘奶茶&#x27;,1,&#x27;c005&#x27;);INSERT INTO product VALUES (13,&#x27;海澜之家&#x27;,1,&#x27;c002&#x27;);\n2、select查询\n基础查询：\n# 根据某些条件从某个表中查询指定字段的内容格式：select [distinct]*| 列名,列名 from 表 where 条件\n高级查询：SQL查询五子句\nselect */列名,列名 from 数据表 where 子句 group by 子句 having 子句 order by 子句 limit 子句;① where子句② group by子句③ having子句④ order by子句⑤ limit子句\n3、简单查询\n# 1.查询所有的商品.  select *  from product;# 2.查询商品名和商品价格. select pname,price from product;# 3.查询结果是表达式（运算查询）：将所有商品的价格+10元进行显示.select pname,price+10 from product;\n4、条件查询\n\n比较查询\n# 查询商品名称为“花花公子”的商品所有信息：SELECT * FROM product WHERE pname = &#x27;花花公子&#x27;;# 查询价格为800商品SELECT * FROM product WHERE price = 800;# 查询价格不是800的所有商品SELECT * FROM product WHERE price != 800;SELECT * FROM product WHERE price &lt;&gt; 800;# 查询商品价格大于60元的所有商品信息SELECT * FROM product WHERE price &gt; 60;# 查询商品价格小于等于800元的所有商品信息SELECT * FROM product WHERE price &lt;= 800;\n范围查询\n# 查询商品价格在200到1000之间所有商品SELECT * FROM product WHERE price BETWEEN 200 AND 1000;# 查询商品价格是200或800的所有商品SELECT * FROM product WHERE price IN (200,800);\n逻辑查询\n# 查询商品价格在200到1000之间所有商品SELECT * FROM product WHERE price &gt;= 200 AND price &lt;=1000;# 查询商品价格是200或800的所有商品SELECT * FROM product WHERE price = 200 OR price = 800;# 查询价格不是800的所有商品SELECT * FROM product WHERE NOT(price = 800);\n模糊查询\n# 查询以&#x27;香&#x27;开头的所有商品SELECT * FROM product WHERE pname LIKE &#x27;香%&#x27;;# 查询第二个字为&#x27;想&#x27;的所有商品SELECT * FROM product WHERE pname LIKE &#x27;_想%&#x27;;\n非空查询\n# 查询没有分类的商品SELECT * FROM product WHERE category_id IS NULL;# 查询有分类的商品SELECT * FROM product WHERE category_id IS NOT NULL;\n5、排序查询\n# 通过order by语句，可以将查询出的结果进行排序。暂时放置在select语句的最后。格式：SELECT * FROM 表名 ORDER BY 排序字段 ASC|DESC;ASC 升序 (默认)DESC 降序# 1.使用价格排序(降序)SELECT * FROM product ORDER BY price DESC;# 2.在价格排序(降序)的基础上，以分类排序(降序)SELECT * FROM product ORDER BY price DESC,category_id DESC;\n6、聚合查询\n之前我们做的查询都是横向查询，它们都是根据条件一行一行的进行判断，而使用聚合函数查询是纵向查询，它是对一列的值进行计算，然后返回一个单一的值；另外聚合函数会忽略空值。\n今天我们学习如下五个聚合函数：\n\n\n\n聚合函数\n作用\n\n\n\n\ncount()\n统计指定列不为NULL的记录行数；\n\n\nsum()\n计算指定列的数值和，如果指定列类型不是数值类型，则计算结果为0\n\n\nmax()\n计算指定列的最大值，如果指定列是字符串类型，使用字符串排序运算；\n\n\nmin()\n计算指定列的最小值，如果指定列是字符串类型，使用字符串排序运算；\n\n\navg()\n计算指定列的平均值，如果指定列类型不是数值类型，则计算结果为0\n\n\n\n演示：\n# 1、查询商品的总条数SELECT COUNT(*) FROM product;# 2、查询价格大于200商品的总条数SELECT COUNT(*) FROM product WHERE price &gt; 200;# 3、查询分类为&#x27;c001&#x27;的所有商品的总和SELECT SUM(price) FROM product WHERE category_id = &#x27;c001&#x27;;# 4、查询分类为&#x27;c002&#x27;所有商品的平均价格SELECT AVG(price) FROM product WHERE categ ory_id = &#x27;c002&#x27;;# 5、查询商品的最大价格和最小价格SELECT MAX(price),MIN(price) FROM product;\n7、分组查询与having子句\n分组查询介绍\n分组查询就是将查询结果按照指定字段进行分组，字段中数据相等的分为一组。\n分组查询基本的语法格式如下：\nGROUP BY 列名 [HAVING 条件表达式] [WITH ROLLUP]\n说明:\n\n列名: 是指按照指定字段的值进行分组。\nHAVING 条件表达式: 用来过滤分组后的数据。\nWITH ROLLUP：在所有记录的最后加上一条记录，显示select查询时聚合函数的统计和计算结果\n\ngroup by的使用\n创建数据集\ncreate table students(\tid int auto_increment,\tname varchar(20),\tage tinyint unsigned,\tgender enum(&#x27;male&#x27;, &#x27;female&#x27;),\theight float(5,2),\tprimary key(id)) engine=innodb default charset=utf8;insert into students values (null,&#x27;郭靖&#x27;,33,&#x27;male&#x27;,1.80);insert into students values (null,&#x27;黄蓉&#x27;,19,&#x27;female&#x27;,1.65);insert into students values (null,&#x27;柯镇恶&#x27;,45,&#x27;male&#x27;,1.61);insert into students values (null,&#x27;黄药师&#x27;,50,&#x27;male&#x27;,1.72);insert into students values (null,&#x27;华筝&#x27;,18,&#x27;female&#x27;,1.60);\ngroup by可用于单个字段分组，也可用于多个字段分组\n-- 根据gender字段来分组select gender from students group by gender;-- 根据name和gender字段进行分组select name, gender from students group by name, gender;\n① group by可以实现去重操作\n② group by的作用是为了实现分组统计（group by + 聚合函数）\ngroup by + 聚合函数的使用\n-- 统计不同性别的人的平均年龄select gender,avg(age) from students group by gender;-- 统计不同性别的人的个数select gender,count(*) from students group by gender;\n执行原理图\n\ngroup by + having的使用\nhaving作用和where类似都是过滤数据的，但having是过滤分组数据的，只能用于group by\n-- 根据gender字段进行分组，统计分组条数大于2的select gender,count(*) from students group by gender having count(*)&gt;2;\n#1 统计各个分类商品的个数SELECT category_id ,COUNT(*) FROM product GROUP BY category_id ;#2 统计各个分类商品的个数,且只显示个数大于1的信息SELECT category_id ,COUNT(*) FROM product GROUP BY category_id HAVING COUNT(*) &gt; 1;\n8、limit分页查询\n作用：限制数据的查询数量\n基本语法：\nselect * from 数据表 limit 查询数量;\n案例：查询学生表中，身高最高的3名同学信息\nselect * from students order by height desc limit 3;\nlimit除了可以限制查询数量以外，其还可以指定从哪条数据开始查起，limit完整语法：\nselect * from students limit offset,count;offset：索引，默认从0开始count：查询总数量\n如：查询学生表中，身高第2、3高的同学信息\nselect * from students order by height desc limit 1,2;\nlimit子句典型应用场景：\n分页查询在项目开发中常见，由于数据量很大，显示屏长度有限，因此对数据需要采取分页显示方式。例如数据共有30条，每页显示5条，第一页显示1-5条，第二页显示6-10条。\n格式：\nSELECT 字段1，字段2... FROM 表名 LIMIT M,NM: 整数，表示从第几条索引开始，计算方式 （当前页-1）* 每页显示条数N: 整数，表示查询多少条数据SELECT 字段1，字段2... FROM 表名 LIMIT 0,5SELECT 字段1，字段2... FROM 表名 LIMIT 5,5\n9、小结\nSQL查询五子句：select * from 表名 where子句 group by子句 having子句 order by子句 limit子句;特别注意：查询五子句中，五子句的顺序一定要严格按照以上格式。条件查询：SELECT *|字段名 FROM 表名 WHERE 条件；排序查询：SELECT * FROM 表名 ORDER BY 排序字段 ASC|DESC;聚合查询函数：count()，sum()，max()，min()，avg()。分组查询：SELECT 字段1,字段2… FROM 表名 GROUP BY 分组字段 HAVING 分组条件;分页查询：SELECT 字段1，字段2... FROM 表名 LIMIT M,NM: 整数，表示从第几条索引开始，计算方式 （当前页-1）*每页显示条数N: 整数，表示查询多少条数据\n十、多表查询\n数据集准备\nclasses班级表\ncreate table classes(\tcls_id tinyint auto_increment,    cls_name varchar(20),    primary key(cls_id)) engine=innodb default charset=utf8;-- 插入测试数据insert into classes values (null, &#x27;ui&#x27;);insert into classes values (null, &#x27;java&#x27;);insert into classes values (null, &#x27;python&#x27;);\nstudents学生表\ncreate table students(\tid int auto_increment,    name varchar(20),    age tinyint unsigned,    gender enum(&#x27;male&#x27;,&#x27;female&#x27;),    score float(5,1),\tcls_id tinyint,    primary key(id)) engine=innodb default charset=utf8;-- 插入测试数据insert into students values (null,&#x27;刘备&#x27;,34,&#x27;male&#x27;,90.0,2);insert into students values (null,&#x27;貂蝉&#x27;,18,&#x27;female&#x27;,75.0,1);insert into students values (null,&#x27;赵云&#x27;,28,&#x27;male&#x27;,95.0,3);insert into students values (null,&#x27;关羽&#x27;,32,&#x27;male&#x27;,98.0,3);insert into students values (null,&#x27;大乔&#x27;,19,&#x27;female&#x27;,80.0,1);\n交叉连接\n是所有连接的基础。其功能就是将表1和表2中的每一条数据进行连接。\n结果：\n字段数 = 表1字段 + 表2的字段\n记录数 = 表1中的总数量 * 表2中的总数量（笛卡尔积）\nselect * from students cross join classes;或select * from students, classes;\n1、内连接\n连接查询的介绍\n连接查询可以实现多个表的查询，当查询的字段数据来自不同的表就可以使用连接查询来完成。\n连接查询可以分为:\n\n内连接查询\n左外连接查询\n右外连接查询\n\n内连接查询\n查询两个表中符合条件的共有记录\n\n内连接查询语法格式:\nselect 字段 from 表1 inner join 表2 on 表1.字段1 = 表2.字段2\n说明:\n\ninner join 就是内连接查询关键字\non 就是连接查询条件\n\n例1：使用内连接查询学生表与班级表:\nselect * from students as s inner join classes as c on s.cls_id = c.id;\n小结\n\n内连接使用inner join … on …, on 表示两个表的连接查询条件\n内连接根据连接查询条件取出两个表的 “交集”\n\n2、左外连接\n左连接查询\n以左表为主根据条件查询右表数据，如果根据条件查询右表数据不存在使用null值填充\n\n左连接查询语法格式:\nselect 字段 from 表1 left join 表2 on 表1.字段1 = 表2.字段2\n说明:\n\nleft join 就是左连接查询关键字\non 就是连接查询条件\n表1 是左表\n表2 是右表\n\n例1：使用左连接查询学生表与班级表:\nselect * from students as s left join classes as c on s.cls_id = c.id;\n例2：查询学生表中每一位学生（包括没有对应班级的学生）所属的班级信息\n前提：\n在students学生表中，插入一条测试数据\ninsert into students values (null,&#x27;林黛玉&#x27;,19,&#x27;female&#x27;,96.0,99);\n执行左外连接查询：\nselect * from students as s left join classes as c on s.cls_id = c.id;\n小结\n\n左连接使用left join … on …, on 表示两个表的连接查询条件\n左连接以左表为主根据条件查询右表数据，右表数据不存在使用null值填充。\n\n3、右外连接\n右连接查询\n以右表为主根据条件查询左表数据，如果根据条件查询左表数据不存在使用null值填充\n\n右连接查询语法格式:\nselect 字段 from 表1 right join 表2 on 表1.字段1 = 表2.字段2\n说明:\n\nright join 就是右连接查询关键字\non 就是连接查询条件\n表1 是左表\n表2 是右表\n\n例1：使用右连接查询学生表与班级表:\nselect * from students as s right join classes as c on s.cls_id = c.id;\n小结\n\n右连接使用right join … on …, on 表示两个表的连接查询条件\n右连接以右表为主根据条件查询左表数据，左表数据不存在使用null值填充。\n\n十一、子查询\n1、子查询（嵌套查询）的介绍\n在一个 select 语句中,嵌入了另外一个 select 语句, 那么被嵌入的 select 语句称之为子查询语句，外部那个select语句则称为主查询.\n主查询和子查询的关系:\n\n子查询是嵌入到主查询中\n子查询是辅助主查询的,要么充当条件,要么充当数据源(数据表)\n子查询是可以独立存在的语句,是一条完整的 select 语句\n\n2、子查询的使用\n例1. 查询学生表中大于平均年龄的所有学生:\n需求：查询年龄 &gt; 平均年龄的所有学生\n前提：① 获取所有学生的平均年龄\n​\t   ② 查询表中的所有记录，判断哪个同学 &gt; 平均年龄值\n第一步：写子查询\nselect avg(age) from students;\n第二步：写主查询\nselect * from students where age &gt; (平均值);\n第三步：第一步和第二步进行合并\nselect * from students where age &gt; (select avg(age) from students);\n例2. 查询学生在班的所有班级名字:\n需求：显示所有有学生的班级名称\n前提：① 先获取所有学员都属于那些班级\n​\t         ② 查询班级表中的所有记录，判断是否出现在①结果中，如果在，则显示，不在，则忽略。\n第一步：编写子查询\nselect distinct cls_id from students is not null;\n第二步：编写主查询\nselect * from classes where cls_id in (1, 2, 3);\n第三步：把主查询和子查询合并\nselect * from classes where cls_id in (select distinct cls_id from students where cls_id is not null);\n例3. 查找年龄最小,成绩最低的学生:\n第一步：获取年龄最小值和成绩最小值\nselect min(age), min(score) from student;\n第二步：查询所有学员信息（主查询）\nselect * from students where (age, score) = (最小年龄, 最少成绩);\n第三步：把第一步和第二步合并\nselect * from students where (age, score) = (select min(age), min(score) from students);\n十二、练习部分\n练习使用 微软的Northwind数据集, 零售业务，包含了客户，供应商和订单数据。原始数据集可以在 微软GitHub 仓库下载。当前使用数据库数据在原始数据基础上做了微调，放在了文末。\n基于此份数据，通过SQL来创建数据报表，满足业务需求。\n本项目中一共用到7张表\n\nemployees 员工表 记录了Northwind所有员工信息.\ncustomers 客户表，记录了客户相关信息.\nproducts 记录了商品信息.\ncategories 记录了商品类别信息.\nsuppliers 记录了商品供应商信息.\norders 记录了Northwind的顾客下的订单.\norder_items 记录了订单中的每一件商品明细.\n\n数据表结构及表关系\n\n\n1.1 员工表(employees)\n\n\n保存员工基本信息：\n\n唯一ID (employee_id).\n姓，名(first_name and last_name).\n职务 (title).\n\n\n需要注意的是 reports_to这一列, 保存的是员工所对应的直属领导的员工ID (也在这张表中保存) ，此外还有其它列包括入职时间，生日… …\n\n练习1\n\n选中employees 表的所有数据\n\nselect * from employees\n\n1.2 顾客表(customers)\n\n\n每一个顾客都有唯一IDcustomer_id, 顾客的ID是公司全名的缩写，用5个字母表示\n\n\n公司全名在 company_name 列中保存\n\n\ncontact_name 和 contact_title 两列代表了客户公司的联系人信息（名字和职务）\n除此之外还保存了顾客的地址信息和联系方式city, region, postal_code, country, fax\n\n\n练习2\n\n查询每个客户的 ID, company name, contact name, contact title, city, 和 country.并按照国家名字排序\n\nselect customer_id,  company_name,  contact_name,  contact_title,  city,  country from customers  order by country\n\n1.3 商品(products)和商品类别(categories)表\n\n商品表中保存了在Northwind商店中出售的商品信息\n\n每一种商品都有唯一的 product_id 和商品名字product_name.\n每一种商品都有一个供应商 (supplier_id)\n每一种商品都有一个商品类别 (category_id).\n每一种商品都有确定的单价 unit_price.\n字段 discontinued 代表商品是否缺货， false (有货)   true (缺货)\n\n\n商品类别表 categories ，保存了所有商品的类别\n\n每个类别都有唯一的id\n每个类别都有自己的名称 category_name\n字段description 存储了类别的简短描述信息\n\n\n商品表中包含了  category_id 字段，所以可以使用join 将商品表中的信息与商品类别表中的信息进行关联查询\n\n练习3\n\n查询每一个商品的product_name，category_name，quantity_per_unit，unit_price，units_in_stock 并且通过 unit_price 字段排序\n\nSELECT  product_name,  category_name,  quantity_per_unit,  unit_price,  units_in_stockFROM productsJOIN categories  ON products.category_id = categories.category_idORDER BY unit_price;\n\n1.4 供应商表（supplier）\n\n供应商表与用户表类似\n每个供应商都有唯一ID supplier_id\n每个供应商都有公司名字company_name\n表中还记录了供应商的地址信息 address，city，region，postal_code，country\n\n练习4\n\n列出所有提供了4种以上不同商品的供应商列表\n所需字段：supplier_id, company_name, and products_count (提供的商品种类数量).\n\nSELECT  s.supplier_id,   s.company_name,   COUNT(*) AS products_countFROM products pJOIN suppliers s   ON p.supplier_id = s.supplier_idGROUP BY s.supplier_id,  s.company_nameHAVING COUNT(*) &gt; 4;\n\n1.5 订单和订单明细表\n\n订单表 orders 中的每一条数据包含了一个订单的基本信息：\n\n订单ID order_id，顾客ID customer_id, 销售员的员工ID employee_id\n订单相关的时间信息  (下单日期order_date 和配送日期 shipped_date) 和其他配送相关信息\n\nship_via 运输方式\nfreight   运费\nship_address  收货地址\nship_city   收货城市\nship_region 收货地区\nship_postal_code 收货地址邮编\nship_country 收货国家\n\n\n\n\n\n练习5\n\n\n提取订单编号为10250的订单详情，显示如下信息：\nproduct_name, quantity, unit_price （ order_items 表)discount ，order_date ,按商品名字排序\n\n\nSELECT  product_name,  quantity,  order_items.unit_price,  discount,  order_dateFROM order_itemsJOIN products  ON order_items.product_id = products.product_idJOIN orders  ON orders.order_id = order_items.order_idWHERE orders.order_id = 10250ORDER BY product_name;\n2.1 详细报告\n\n将一个或者多个业务对象的详细信息汇总到一张表中是一种比较常见的报表形式\n我们需要的信息可能分散在多张表中，在写SQL时可以通过一个或者多个JOIN子句将信息进行汇总\n\nSELECT  c.company_name AS customer_company_name,   e.first_name AS employee_first_name,   e.last_name AS employee_last_name,  o.order_date,  o.shipped_date,  o.ship_countryFROM orders oJOIN employees e  ON o.employee_id = e.employee_idJOIN customers c  ON o.customer_id = c.customer_idWHERE o.ship_country = &#x27;France&#x27;;\n\n在上面的SQL查询中，我们想收集运输到法国的订单的相关信息，包括订单涉及的顾客和员工信息，下单和发货日期等\n由于相关数据保存在不同的表中，所以需要将orders 表， employees 表和 customers 表连接在一起\n注意在写SQL时，我们可以为每一张表都起了一个别名，可以减少输入的字符数\n\n练习6\n\n需求：提供订单编号为10248的相关信息，包括product name,  unit price (在 order_items 表中),  quantity（数量）,company_name（供应商公司名字 ，起别名 supplier_name).\n\nSELECT  product_name,  oi.unit_price,  oi.quantity,  company_name AS supplier_nameFROM order_items oiJOIN products p   ON oi.product_id = p.product_idJOIN suppliers s  ON s.supplier_id = p.supplier_idWHERE oi.order_id = 10248;\n练习7\n\n需求：提取每件商品的详细信息，包括  商品名称（product_name）, 供应商的公司名称  (company_name，在 suppliers 表中), 类别名称 category_name, 商品单价unit_price, 和每单位商品数量quantity per unit\n\nSELECT   p.product_name,  s.company_name,  c.category_name,  p.unit_price,  p.quantity_per_unitFROM products pJOIN suppliers s  ON p.supplier_id = s.supplier_idJOIN categories c  ON c.category_id = p.category_id;\n2.2 带时间限制的报表\n\n另一种常见的报表需求是查询某段时间内的业务指标\n\nSELECT  COUNT(*)FROM ordersWHERE order_date &gt;= &#x27;2016-07-01&#x27; AND  order_date &lt; &#x27;2016-08-01&#x27;;\n\n在上面的查询中，我们统计了2016年7月的订单数量，\n需要注意SQL中的日期总是放在单引号内，格式通常为“ YYYY-MM-DD”（年-月-日）\n\n练习8\n\n统计2013年入职的员工数量，统计字段起别名 number_of_employees\n\nSELECT  COUNT(*) AS number_of_employeesFROM employeesWHERE hire_date &gt;= &#x27;2013-01-01&#x27; AND hire_date &lt; &#x27;2014-01-01&#x27;;\n2.3 计算多个对象\n\n在业务报表中，我们通常希望同时计算多个业务对象的某些指标。\n\nSELECT    order_id,    COUNT(*) AS order_items_countFROM    order_itemsWHERE    order_id BETWEEN 10200 AND 10300GROUP BY    order_id;\n\n在上面的查询中，我们统计了指定范围内的order_id，计算每个订单中的商品数量\n\n通过连接orders 和order_items表，在同一行显示单个订单商品及其父订单的信息\n按照父顺序对所有行进行分组\n使用COUNT（*）统计每个订单的商品数量\n\n\n\n练习9\n\n需求：统计每个供应商供应的商品总数量\n\n结果返回供应商IDsupplier_id ，公司名字company_name ，商品种类数量（起别名products_count )\n使用 products 和 suppliers 表.\n\n\n\nSELECT  s.supplier_id,  company_name,  COUNT(*) AS products_countFROM products pJOIN suppliers s  ON p.supplier_id = s.supplier_id GROUP BY s.supplier_id,company_name;\n需求：统计每个供应商分别供应每类商品的数量\nSELECT    count(*) AS `products_count`,    s.supplier_id,    s.company_name,    category_idFROM    products AS p        INNER JOIN suppliers AS s ON p.supplier_id = s.supplier_idGROUP BY    s.supplier_id, s.company_name, category_id ;\n2.4 总订单金额\n\n在销售报表中,我们经常需要计算订单的总付款额。\n\nSELECT    sum(unit_price * quantity) AS total_priceFROM    order_itemsWHERE    order_id = 10250;\n\n我们要查找ID为10250的订单的总价（折扣前），SUM(unit_price * quantity)\n\n练习10\n\nNorthwind商店某些产品会不定期做打折促销\n每个商品的折扣都存储在 order_items 表的discount 列中\n例如，“ 0.20”折扣意味着客户支付原始价格的“ 1-0.2 = 0.8”\n在下面的代码中添加第二个名为total_price_after_discount的列，计算打折后的商品价格\n\nSELECT  SUM(unit_price * quantity) AS total_priceFROM orders oJOIN order_items oi   ON o.order_id = oi.order_idWHERE o.order_id = 10250;\nSELECT    SUM(unit_price * quantity) AS total_price,    SUM(unit_price * quantity * (1 - discount)) AS total_price_after_discountFROM    order_itemsWHERE        order_id = 10250\n2.5 计算多个订单的订单金额\n\n上面的案例中我们计算了单个订单的订单总金额，接下来我们统计多个订单的总金额\n\nSELECT  o.order_id,  c.company_name AS customer_company_name,   SUM(unit_price * quantity) AS total_priceFROM orders oJOIN customers c  ON o.customer_id = c.customer_idJOIN order_items oi  ON o.order_id = oi.order_idWHERE o.ship_country = &#x27;France&#x27;GROUP BY o.order_id, c.company_name;\n\n我们想计算运输到法国的所有订单的总订单金额\n在结果中，我们想保留订单ID和订单公司名字，可以通过GROUP BY 实现\n注意：通过GROUP BY  我们只需要对 order_id 进行分组就可以了，但MySQL 5.7之后要求，在使用GROUP BY分组时，SELECT 后的字段，如果没有在聚合函数中使用，就必须在GROUP BY 后出现\n\n练习11\n\n统计每个员工处理的订单总数\n结果包含员工IDemployee_id，姓名first_name 和 last_name，处理的订单总数(别名 orders_count)\n\nSELECT  e.employee_id,  e.first_name,  e.last_name,  COUNT(*) AS orders_countFROM orders oJOIN employees e  ON e.employee_id = o.employee_idGROUP BY e.employee_id,  e.first_name,  e.last_name;\n2.6 不同类别商品的库存\n\n统计每个类别中的库存产品值多少钱？\n\n显示三列：category_id, category_name, 和 category_total_value\n如何计算库存商品总价：SUM(unit_price * units_in_stock)。\n\n\n\nSELECT  c.category_id,  c.category_name,  SUM(unit_price * units_in_stock) AS category_total_valueFROM products pJOIN categories c  ON p.category_id = c.category_idGROUP BY c.category_id,  c.category_name;\n2.7 Group by分组\n\n接下来，我们来了解每个员工的业绩：计算每个员工的订单数量\n看下面的SQL是否有问题\n\nSELECT  e.first_name,  e.last_name,  COUNT(*) AS orders_countFROM orders oJOIN employees e  ON o.employee_id = e.employee_idGROUP BY e.first_name,  e.last_name;\n\n上面的SQL貌似正确，但是没有考虑到员工重名的问题，所以需要做一个小调整：\n\nSELECT  e.employee_id,  e.first_name,  e.last_name,  COUNT(*) AS orders_countFROM orders oJOIN employees e  ON o.employee_id = e.employee_idGROUP BY e.employee_id,  e.first_name,  e.last_name;\n\n在SELECT 和 GROUP BY 中添加了 员工ID employee_id字段后,重名的问题就可以解决了\n注意，在使用GROUP BY进行分组聚合统计时，需要考虑分组字段中的相同值的业务含义是否相同\n\n练习12\n\n需求：计算每个客户的下订单数\n结果包含：用户id、用户公司名称、订单数量（customer_id, company_name,  orders_count ）\n\nSELECT  c.customer_id,  c.company_name,  COUNT(*) AS orders_countFROM orders oJOIN customers c  ON o.customer_id = c.customer_idGROUP BY c.customer_id,  c.company_name;\n2.8 选择显示部分信息\n\n再看一下上面的例子\n\nSELECT  e.employee_id,  e.first_name,  e.last_name,  COUNT(*) AS orders_countFROM orders oJOIN employees e  ON o.employee_id = e.employee_idGROUP BY e.employee_id,  e.first_name,  e.last_name;\n\n我们通过 employee_id进行分组, 但是GROUP BY中的字段，不一定在SELECT中出现，例如下面的SQL：\n\nSELECT  e.first_name,  e.last_name,  COUNT(*) AS orders_countFROM orders oJOIN employees e  ON o.employee_id = e.employee_idGROUP BY e.employee_id,  e.first_name,  e.last_name;\n\n之前我们强调过，SELECT 中的字段，如果没在聚合函数中使用，就一定更要在GROUP BY 子句中出现\n但是，GROUPY BY子句中的字段，可以不用都出现在SELECT中\n\n练习13\n\n需求：统计2016年6月到2016年7月底用户的总下单金额并按金额从高到低排序\n结果包含：顾客公司名称company_name 和总下单金额（折后实付金额）total_paid\n提示：\n\n计算实际总付款金额： SUM(unit_price * quantity * (1 - discount))\n日期过滤 WHERE order_date &gt;= '2016-06-01' AND order_date &lt; '2016-08-01'\n\n\n\nSELECT  c.company_name,   SUM(unit_price * quantity * (1 - discount)) AS total_paidFROM orders oJOIN order_items oi  ON o.order_id = oi.order_idJOIN customers c  ON o.customer_id = c.customer_idWHERE order_date &gt;= &#x27;2016-06-01&#x27; AND order_date &lt; &#x27;2016-08-01&#x27;GROUP BY c.customer_id,  c.company_nameORDER BY total_paid DESC;\n2.9 COUNT()函数回顾\n\n当创建业务报表的时候，需要注意 COUNT(*) 和 COUNT(列名) 之间的区别\n假设我们要统计发货到不同国家/地区的订单数量以及已经发货的订单数量\n\nSELECT  ship_country,  COUNT(*) AS all_orders,  COUNT(shipped_date) AS shipped_ordersFROM ordersGROUP BY ship_country;\n\nCOUNT（*）将计算ship_country中的所有订单\nCOUNT（shipped_date）将仅计算shipped_date列值不为NULL的行\n在我们的数据库中， shipped_date 列中的NULL表示尚未发货，COUNT（shipped_date）` 仅计算已经发货的订单。\n\n练习14\n\n需求：统计客户总数和带有传真号码的客户数量\n需要字段：all_customers_count 和 customers_with_fax_count\n\nSELECT  COUNT(*) AS all_customers_count,   COUNT(fax) AS customers_with_fax_countFROM customers;\n3.1 使用CASE WHEN自定义分组\n\n需求：我们要在报表中显示每种产品的库存量，但我们不想简单地将“ units_in_stock”列放在报表中。报表中只需要一个总体级别，例如低，高：\n\nSELECT  product_id,  product_name,  units_in_stock,  CASE    WHEN units_in_stock &gt; 100 THEN &#x27;high&#x27;    WHEN units_in_stock &gt; 50 THEN &#x27;moderate&#x27;    WHEN units_in_stock &gt; 0 THEN &#x27;low&#x27;    WHEN units_in_stock = 0 THEN &#x27;none&#x27;  END AS availabilityFROM products;\n\n上面的SQL查询结果中，我们创建了一个新列availability， 通过 CASE WHEN 语句来对这一列赋值\nCASE WHEN 语法回顾\n上面的查询中，通过  units_in_stock 列的值来判断库存的可用性\n\n库存大于100 的可用性为高(high)\n50到100的可用性为中等(moderate)\n小于50的为低(low)\n零库存 为 (none)\n\n\n\n练习15\n运行上面的SQL，比较units_in_stock 和 availability两列的结果\n练习16\n\n需求： 创建一个报表，统计员工的经验水平\n显示字段：first_name, last_name, hire_date, 和 experience\n经验字段（experience ）：\n\n'junior'  2014年1月1日以后雇用的员工\n'middle' 在2013年1月1日之后至2014年1月1日之前雇用的员工\n'senior' 2013年1月1日或之前雇用的员工\n\n\n\nSELECT  first_name,  last_name,  hire_date,  CASE    WHEN hire_date &gt; &#x27;2014-01-01&#x27; THEN &#x27;junior&#x27;    WHEN hire_date &gt; &#x27;2013-01-01&#x27; THEN &#x27;middle&#x27;    WHEN hire_date &lt;= &#x27;2013-01-01&#x27; THEN &#x27;senior&#x27;  END AS experienceFROM employees;\n3.2 CASE WHEN中ELSE的使用\n\n我们的商店要针对北美地区的用户做促销活动：任何运送到北美地区（美国，加拿大) 的包裹免运费。\n创建报表，查询订单编号为10720~10730 活动后的运费价格\n\nSELECT   order_id,  customer_id,  ship_country,  CASE    WHEN ship_country = &#x27;USA&#x27; OR ship_country = &#x27;Canada&#x27; THEN 0.0  END AS shipping_costFROM ordersWHERE order_id BETWEEN 10720 AND 10730;\n\n上面的SQL中，只定义了美国和加拿大的运费，并没有处理其他目的地的运费信息\n\n练习17\n\n\n运行上面的SQL 观察 ship_country 和 shipping_cost 列，除了美国和加拿大之外，其他行的 shipping_cost  的值为NULL\n\n\n在上面的案例中，除了北美地区的以外的订单，运费统计为NULL, 如果将其他地区的运费设置为10美元，那么可以用如下方式处理：\nSELECT   order_id,  customer_id,  ship_country,  CASE    WHEN ship_country = &#x27;USA&#x27; OR ship_country = &#x27;Canada&#x27; THEN 0.0    ELSE 10.0  END AS shipping_costFROM ordersWHERE order_id BETWEEN 10720 AND 10730;\n\n我们在CASE WHEN结构中添加了ELSE\n如果不满足其他条件，则执行ELSE。 因此，所有其他国家/地区的 shipping_cost都将变为“ 10.0”，而不是NULL。\n\n\n\n练习18\n\n需求：创建客户基本信息报表\n包含字段：\n\n客户id customer_id\n公司名字 company_name\n所在国家 country\n使用语言language\n\n\n使用语言language 的取值按如下规则\n\nGermany, Switzerland, and Austria 语言为德语 'German'\nUK, Canada, the USA, and Ireland 语言为英语 'English'\n其他所有国家 'Other'\n\n\n\nSELECT   customer_id,  company_name,  country,  CASE    WHEN country IN (&#x27;Germany&#x27;, &#x27;Switzerland&#x27;, &#x27;Austria&#x27;) THEN &#x27;German&#x27;    WHEN country IN (&#x27;UK&#x27;, &#x27;Canada&#x27;, &#x27;USA&#x27;, &#x27;Ireland&#x27;) THEN &#x27;English&#x27;    ELSE &#x27;Other&#x27;  END AS languageFROM customers;\n练习19\n\n需求：创建报表将所有产品划分为素食和非素食两类\n报表中包含如下字段：\n\n产品名字 product_name\n类别名称 category_name\n膳食类型 diet_type:\n\n非素食 'Non-vegetarian'  商品类别字段的值为 'Meat/Poultry' 和 'Seafood'.\n素食\n\n\n\n\n\nSELECT  product_name,  category_name,  CASE    WHEN category_name IN (&#x27;Meat/Poultry&#x27;, &#x27;Seafood&#x27;) THEN &#x27;Non-vegetarian&#x27;    ELSE &#x27;Vegetarian&#x27;  END AS diet_typeFROM categories cJOIN products p  ON c.category_id = p.category_id;\n3.3 在GROUP BY中使用CASE WHEN\n\n在引入北美地区免运费的促销策略时，我们也想知道运送到北美地区和其它国家地区的订单数量\n\nSELECT   CASE    WHEN ship_country = &#x27;USA&#x27; OR ship_country = &#x27;Canada&#x27; THEN 0.0    ELSE 10.0  END AS shipping_cost,  COUNT(*) AS order_countFROM ordersGROUP BY  CASE    WHEN ship_country = &#x27;USA&#x27; OR ship_country = &#x27;Canada&#x27; THEN 0.0    ELSE 10.0  END;\n\n在SELECT子句和GROUP BY子句中，有相同的CASE WHEN出现在GROUP BY子句中\n这里并没有使用别名shipping_cost。 虽然在SELECT子句中指定了别名（shipping_cost），但标准SQL不允许在GROUP BY子句中引用别名，所以这里CASE WHEN 写了两次\nMySQL允许 在GROUP BY中使用列别名，在本案例中两种写法都可以\n注意：CASE WHEN语句在GROUP BY和SELECT` 子句中，写法必须相同\n\n练习20\n\n需求：创建报表统计供应商来自那个大洲\n报表中包含两个字段：供应商来自哪个大洲（supplier_continent ）和 供应产品种类数量（product_count）\n供应商来自哪个大洲（supplier_continent ）包含如下取值：\n\n'North America' （供应商来自 'USA' 和 'Canada'.）\n'Asia' （供应商来自 'Japan' 和 'Singapore')\n'Other' (其它国家)\n\n\n\nSELECT   CASE    WHEN country IN (&#x27;USA&#x27;, &#x27;Canada&#x27;) THEN &#x27;North America&#x27;    WHEN country IN (&#x27;Japan&#x27;, &#x27;Singapore&#x27;) THEN &#x27;Asia&#x27;    ELSE &#x27;Other&#x27;  END AS supplier_continent,  COUNT(*) AS product_countFROM products pJOIN suppliers s  ON p.supplier_id = s.supplier_idGROUP BY  CASE    WHEN country IN (&#x27;USA&#x27;, &#x27;Canada&#x27;) THEN &#x27;North America&#x27;    WHEN country IN (&#x27;Japan&#x27;, &#x27;Singapore&#x27;) THEN &#x27;Asia&#x27;    ELSE &#x27;Other&#x27;  END;\n练习21\n\n需求：创建一个简单的报表来统计员工的年龄情况\n报表中包含如下字段\n\n年龄（ age ）：生日大于1980年1月1日 'young' ，其余'old'\n员工数量 （ employee_count）\n\n\n\nSELECT  CASE    WHEN birth_date &gt; &#x27;1980-01-01&#x27; THEN &#x27;young&#x27;    ELSE &#x27;old&#x27;  END AS age,  COUNT(*) AS employee_countFROM employeesGROUP BY  CASE    WHEN birth_date &gt; &#x27;1980-01-01&#x27; THEN &#x27;young&#x27;    ELSE &#x27;old&#x27;  END;\n3.4 CASE WHEN 和 COUNT\n\n可以将 CASE WHEN 和 COUNT 结合使用，自定义分组并统计每组数据数量\n\nSELECT   COUNT(CASE     WHEN ship_country = &#x27;USA&#x27; OR ship_country = &#x27;Canada&#x27; THEN order_id   END) AS free_shipping,  COUNT(CASE    WHEN ship_country != &#x27;USA&#x27; AND ship_country != &#x27;Canada&#x27; THEN order_id  END) AS paid_shippingFROM orders;\n在上面的查询中，在COUNT（）函数中包含了一个CASE WHEN子句。\n\n对于每一行，CASE WHEN子句会检查ship_country中的值。 如果是“ USA”或“ Canada”，则将order_id传递给COUNT（）并进行计数。\n如果ship_country中的值不同，则CASE WHEN将返回NULL, COUNT（）不会统计NULL值。 free_shipping列将仅计算运往美国或加拿大的订单”\n paid_shipping列的构建方式与上述方式类似\n\n练习22\n\n需求：统计客户的contact_title 字段值为 ’Owner’ 的客户数量\n查询结果有两个字段：represented_by_owner 和 not_represented_by_owner\n\nSELECT   COUNT(CASE    WHEN contact_title = &#x27;Owner&#x27; THEN customer_id  END) AS represented_by_owner,  COUNT(CASE    WHEN contact_title != &#x27;Owner&#x27; THEN customer_id  END) AS not_represented_by_ownerFROM customers;\n练习23\n\n需求：Washington (WA) 是 Northwind的主要运营地区，统计有多少订单是由华盛顿地区的员工处理的，多少订单是有其它地区的员工处理的\n结果字段： orders_wa_employees 和 orders_not_wa_employees\n\nSELECT   COUNT(CASE    WHEN region = &#x27;WA&#x27; THEN order_id  END) AS orders_wa_employees,  COUNT(CASE    WHEN region != &#x27;WA&#x27; THEN order_id  END) AS orders_not_wa_employeesFROM employees eJOIN orders o  ON e.employee_id = o.employee_id;\n3.5 GROUP BY 和 CASE WHEN组合使用\nSELECT   ship_country,  COUNT(CASE    WHEN freight &lt; 40.0 THEN order_id  END) AS low_freight,  COUNT(CASE    WHEN freight &gt;= 40.0 AND freight &lt; 80.0 THEN order_id  END) AS avg_freight,  COUNT(CASE    WHEN freight &gt;= 80.0 THEN order_id  END) AS high_freightFROM ordersGROUP BY ship_country;\n\n将COUNT(CASE WHEN...) 和 GROUP BY 组合使用，可以创建更复杂的报表，在报表中，我们将运输到不同国家的订单根据运费高低进一步分成三组，并统计每组数量\n\n练习24\n\n需求：创建报表，统计不同类别产品的库存量，将库存量分成两类 &gt;30 和 &lt;=30 两档,分别统计这两档的商品数量\n报表包含三个字段\n\n类别名称  category_name,\n库存充足  high_availability\n库存紧张 low_availability\n\n\n\nSELECT   c.category_name,  COUNT(CASE    WHEN units_in_stock &gt; 30 THEN product_id  END) AS high_availability,  COUNT(CASE    WHEN units_in_stock &lt;= 30 THEN product_id  END) AS low_availabilityFROM products pJOIN categories c  ON p.category_id = c.category_idGROUP BY c.category_id,  c.category_name;\n3.6 SUM中使用CASE WHEN\n\n上面通过我们通过  COUNT() 函数 和CASE WHEN子句联合使用来创建的报表，也可以通过  SUM() 来替代 COUNT()\n\nSELECT   SUM(CASE    WHEN ship_country = &#x27;USA&#x27; OR ship_country = &#x27;Canada&#x27; THEN 1  END) AS free_shipping,  SUM(CASE    WHEN ship_country != &#x27;USA&#x27; AND ship_country != &#x27;Canada&#x27; THEN 1  END) AS paid_shippingFROM orders;\n\n在上面的查询中，我们将SUM（）与CASE WHEN一起使用，结果与使用 COUNT()相同\n\n练习25\nSELECT   COUNT(CASE    WHEN region = &#x27;WA&#x27; THEN order_id  END) AS orders_wa_employees,  COUNT(CASE    WHEN region != &#x27;WA&#x27; THEN order_id  END) AS orders_not_wa_employeesFROM employees eJOIN orders o  ON e.employee_id = o.employee_id;\n\n将上面的SQL修改成用 SUM（） 函数实现\n\nSELECT   SUM(CASE    WHEN region = &#x27;WA&#x27; THEN 1  END) AS orders_wa_employees,  SUM(CASE    WHEN region != &#x27;WA&#x27; THEN 1  END) AS orders_not_wa_employeesFROM employees eJOIN orders o  ON e.employee_id = o.employee_id;\n练习26\n\n需求：创建报表统计运输到法国的的订单中，打折和未打折订单的总数量\n结果包含两个字段：full_price （原价）和 discounted_price（打折）\n\nSELECT  SUM(CASE    WHEN discount = 0 THEN 1  END) AS full_price,  SUM(CASE    WHEN discount != 0 THEN 1  END) AS discounted_priceFROM orders oJOIN order_items oi  ON o.order_id = oi.order_idWHERE ship_country = &#x27;France&#x27;;\n3.7 SUM中使用CASE WHEN进行复杂计算\n\n我们现在要统计每个订单的总付款额以及非素食产品的总付款额。\n\n\n注: 非素食产品的产品ID （ category_id） 是 6 和 8\n\nSELECT  o.order_id,  SUM(oi.quantity * oi.unit_price * (1 - oi.discount)) AS total_price,  SUM(CASE    WHEN p.category_id in (6, 8) THEN oi.quantity * oi.unit_price * (1 - oi.discount)    ELSE 0  END) AS non_vegetarian_priceFROM orders oJOIN order_items oi  ON o.order_id = oi.order_idJOIN products p  ON p.product_id = oi.product_idGROUP BY o.order_id;\n\n之前的场景中，我们可以通过SUM(CASE WHEN...) 来替换COUNT(CASE WHEN...) ，但在上面的例子中，我们只能使用SUM(CASE WHEN...) ，因为涉及到不同值的累加，不能通过COUNT计数替代\n\n练习27\n\n需求：输出报表，统计不同供应商供应商品的总库存量，以及高价值商品的库存量（单价超过40定义为高价值）\n结果显示四列：\n\n供应商ID supplier_id\n供应商公司名 company_name\n由该供应商提供的总库存 all_units\n由该供应商提供的高价值商品库存 expensive_units\n\n\n\nSELECT   s.supplier_id,  s.company_name,  SUM(units_in_stock) AS all_units,  SUM(CASE    WHEN unit_price &gt; 40.0 THEN units_in_stock    ELSE 0  END) AS expensive_unitsFROM products pJOIN suppliers s  ON p.supplier_id = s.supplier_idGROUP BY s.supplier_id,  s.company_name;\n小结\n\n\nCASE WHEN语句检查一个或多个条件，并在找到第一个匹配条件时返回一个值。 如果没有ELSE子句并且没有匹配条件，则CASE WHEN返回NULL。\nCASE  WHEN condition_1 THEN result_1  WHEN condition_2 THEN result_2  ...  ELSE resultEND\n\n\n要添加新列，从而对业务数据进行自定义分组，可以在SELECT子句中使用CASE WHEN：\nSELECT   CASE    WHEN ... THEN ...  END AS sample_columnFROM table;\n\n\n可以在“ GROUP BY”子句中使用“ CASE WHEN”来创建自己的分组。 同样的CASE WHEN子句也必须出现在SELECT子句中：\nSELECT   CASE    WHEN ... THEN ...  END AS sample_column,  COUNT(*) AS sample_countFROM table  ...GROUP BY  CASE WHEN ... THEN ...  END;\n\n\n可以在COUNT()或SUM()函数内使用CASE WHEN来创建业务对象的自定义计数：\nSELECT   COUNT(CASE    WHEN ... THEN column_name  END) AS count_columnFROM table;\nSELECT   SUM(CASE    WHEN ... THEN 1  END) AS count_columnFROM table;\n\n\n练习28\n\n需求：创建报表来为每种商品添加价格标签，贵、中等、便宜\n结果包含如下字段：product_id, product_name, unit_price, 和 price_level\n价格等级price_level的取值说明：\n\n'expensive'  单价高于100的产品\n'average'  单价高于40但不超过100的产品\n'cheap'  其他产品\n\n\n\nSELECT   product_id,  product_name,  unit_price,  CASE    WHEN unit_price &gt; 100 THEN &#x27;expensive&#x27;    WHEN unit_price &gt; 40 THEN &#x27;average&#x27;    ELSE &#x27;cheap&#x27;  END AS price_levelFROM products;\n练习29\n\n需求：制作报表统计所有订单的总价（不计任何折扣）对它们进行分类。\n包含一下字段：\n\norder_id\ntotal_price（折扣前）\nprice_group\n\n\n字段 price_group 取值说明：\n\n总价超过2000美元\n'average'，总价在$ 600到$ 2,000之间，包括两端\n'low' 总价低于$ 600\n\n\n\nSELECT  order_id,  SUM(unit_price * quantity) AS total_price,  CASE    WHEN SUM(unit_price * quantity) &gt; 2000 THEN &#x27;high&#x27;    WHEN SUM(unit_price * quantity) &gt; 600 THEN &#x27;average&#x27;    ELSE &#x27;low&#x27;  END AS price_groupFROM order_itemsGROUP BY order_id;\n练习30\n\n需求：统计所有订单的运费，将运费高低分为三档\n报表中包含三个字段\n\nlow_freight freight值小于“ 40.0”的订单数\navg_freight  freight值大于或等于“ 40.0”但小于“ 80.0”的订单数\nhigh_freight   freight值大于或等于“ 80.0”的订单数\n\n\n\nSELECT  COUNT(CASE    WHEN freight &gt;= 80.0 THEN order_id  END) AS high_freight,  COUNT(CASE    WHEN freight &lt; 40.0 THEN order_id  END) AS low_freight,  COUNT(CASE    WHEN freight &gt;= 40.0 AND freight &lt; 80.0 THEN order_id  END) AS avg_freightFROM orders;\n数据\n/* Navicat Premium Data Transfer Source Server         : localhost Source Server Type    : MySQL Source Server Version : 80022 Source Host           : localhost:3306 Source Schema         : test Target Server Type    : MySQL Target Server Version : 80022 File Encoding         : 65001 Date: 27/04/2021 19:38:18*/SET NAMES utf8mb4;SET FOREIGN_KEY_CHECKS = 0;-- ------------------------------ Table structure for categories-- ----------------------------DROP TABLE IF EXISTS `categories`;CREATE TABLE `categories` (  `category_id` int NOT NULL,  `category_name` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `description` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci,  PRIMARY KEY (`category_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;-- ------------------------------ Records of categories-- ----------------------------BEGIN;INSERT INTO `categories` VALUES (1, &#x27;Beverages&#x27;, &#x27;Soft drinks, coffees, teas, beers, and ales&#x27;);INSERT INTO `categories` VALUES (2, &#x27;Condiments&#x27;, &#x27;Sweet and savory sauces, relishes, spreads, and seasonings&#x27;);INSERT INTO `categories` VALUES (3, &#x27;Confections&#x27;, &#x27;Desserts, candies, and sweet breads&#x27;);INSERT INTO `categories` VALUES (4, &#x27;Dairy Products&#x27;, &#x27;Cheeses&#x27;);INSERT INTO `categories` VALUES (5, &#x27;Grains/Cereals&#x27;, &#x27;Breads, crackers, pasta, and cereal&#x27;);INSERT INTO `categories` VALUES (6, &#x27;Meat/Poultry&#x27;, &#x27;Prepared meats&#x27;);INSERT INTO `categories` VALUES (7, &#x27;Produce&#x27;, &#x27;Dried fruit and bean curd&#x27;);INSERT INTO `categories` VALUES (8, &#x27;Seafood&#x27;, &#x27;Seaweed and fish&#x27;);COMMIT;-- ------------------------------ Table structure for customers-- ----------------------------DROP TABLE IF EXISTS `customers`;CREATE TABLE `customers` (  `customer_id` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,  `company_name` varchar(40) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `contact_name` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `contact_title` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `address` varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `city` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `region` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `postal_code` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `country` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `fax` varchar(24) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  PRIMARY KEY (`customer_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;-- ------------------------------ Records of customers-- ----------------------------BEGIN;INSERT INTO `customers` VALUES (&#x27;ALFKI&#x27;, &#x27;Alfreds Futterkiste&#x27;, &#x27;Maria Anders&#x27;, &#x27;Sales Representative&#x27;, &#x27;Obere Str. 57&#x27;, &#x27;Berlin&#x27;, NULL, &#x27;12209&#x27;, &#x27;Germany&#x27;, &#x27;030-0076545&#x27;);INSERT INTO `customers` VALUES (&#x27;ANATR&#x27;, &#x27;Ana Trujillo Emparedados y helados&#x27;, &#x27;Ana Trujillo&#x27;, &#x27;Owner&#x27;, &#x27;Avda. de la Constitución 2222&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;5021&#x27;, &#x27;Mexico&#x27;, &#x27;(5) 555-3745&#x27;);INSERT INTO `customers` VALUES (&#x27;ANTON&#x27;, &#x27;Antonio Moreno Taquería&#x27;, &#x27;Antonio Moreno&#x27;, &#x27;Owner&#x27;, &#x27;Mataderos 2312&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;5023&#x27;, &#x27;Mexico&#x27;, NULL);INSERT INTO `customers` VALUES (&#x27;AROUT&#x27;, &#x27;Around the Horn&#x27;, &#x27;Thomas Hardy&#x27;, &#x27;Sales Representative&#x27;, &#x27;120 Hanover Sq.&#x27;, &#x27;London&#x27;, NULL, &#x27;WA1 1DP&#x27;, &#x27;UK&#x27;, &#x27;(171) 555-6750&#x27;);INSERT INTO `customers` VALUES (&#x27;BERGS&#x27;, &#x27;Berglunds snabbköp&#x27;, &#x27;Christina Berglund&#x27;, &#x27;Order Administrator&#x27;, &#x27;Berguvsvägen 8&#x27;, &#x27;Luleå&#x27;, NULL, &#x27;S-958 22&#x27;, &#x27;Sweden&#x27;, &#x27;0921-12 34 67&#x27;);INSERT INTO `customers` VALUES (&#x27;BLAUS&#x27;, &#x27;Blauer See Delikatessen&#x27;, &#x27;Hanna Moos&#x27;, &#x27;Sales Representative&#x27;, &#x27;Forsterstr. 57&#x27;, &#x27;Mannheim&#x27;, NULL, &#x27;68306&#x27;, &#x27;Germany&#x27;, &#x27;0621-08924&#x27;);INSERT INTO `customers` VALUES (&#x27;BLONP&#x27;, &#x27;Blondesddsl père et fils&#x27;, &#x27;Frédérique Citeaux&#x27;, &#x27;Marketing Manager&#x27;, &#x27;24, place Kléber&#x27;, &#x27;Strasbourg&#x27;, NULL, &#x27;67000&#x27;, &#x27;France&#x27;, &#x27;88.60.15.32&#x27;);INSERT INTO `customers` VALUES (&#x27;BOLID&#x27;, &#x27;Bólido Comidas preparadas&#x27;, &#x27;Martín Sommer&#x27;, &#x27;Owner&#x27;, &#x27;C/ Araquil, 67&#x27;, &#x27;Madrid&#x27;, NULL, &#x27;28023&#x27;, &#x27;Spain&#x27;, &#x27;(91) 555 91 99&#x27;);INSERT INTO `customers` VALUES (&#x27;BONAP&#x27;, &#x27;Bon app\\&#x27;&#x27;, &#x27;Laurence Lebihan&#x27;, &#x27;Owner&#x27;, &#x27;12, rue des Bouchers&#x27;, &#x27;Marseille&#x27;, NULL, &#x27;13008&#x27;, &#x27;France&#x27;, &#x27;91.24.45.41&#x27;);INSERT INTO `customers` VALUES (&#x27;BOTTM&#x27;, &#x27;Bottom-Dollar Markets&#x27;, &#x27;Elizabeth Lincoln&#x27;, &#x27;Accounting Manager&#x27;, &#x27;23 Tsawassen Blvd.&#x27;, &#x27;Tsawassen&#x27;, &#x27;BC&#x27;, &#x27;T2F 8M4&#x27;, &#x27;Canada&#x27;, &#x27;(604) 555-3745&#x27;);INSERT INTO `customers` VALUES (&#x27;BSBEV&#x27;, &#x27;B\\&#x27;s Beverages&#x27;, &#x27;Victoria Ashworth&#x27;, &#x27;Sales Representative&#x27;, &#x27;Fauntleroy Circus&#x27;, &#x27;London&#x27;, NULL, &#x27;EC2 5NT&#x27;, &#x27;UK&#x27;, NULL);INSERT INTO `customers` VALUES (&#x27;CACTU&#x27;, &#x27;Cactus Comidas para llevar&#x27;, &#x27;Patricio Simpson&#x27;, &#x27;Sales Agent&#x27;, &#x27;Cerrito 333&#x27;, &#x27;Buenos Aires&#x27;, NULL, &#x27;1010&#x27;, &#x27;Argentina&#x27;, &#x27;(1) 135-4892&#x27;);INSERT INTO `customers` VALUES (&#x27;CENTC&#x27;, &#x27;Centro comercial Moctezuma&#x27;, &#x27;Francisco Chang&#x27;, &#x27;Marketing Manager&#x27;, &#x27;Sierras de Granada 9993&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;5022&#x27;, &#x27;Mexico&#x27;, &#x27;(5) 555-7293&#x27;);INSERT INTO `customers` VALUES (&#x27;CHOPS&#x27;, &#x27;Chop-suey Chinese&#x27;, &#x27;Yang Wang&#x27;, &#x27;Owner&#x27;, &#x27;Hauptstr. 29&#x27;, &#x27;Bern&#x27;, NULL, &#x27;3012&#x27;, &#x27;Switzerland&#x27;, NULL);INSERT INTO `customers` VALUES (&#x27;COMMI&#x27;, &#x27;Comércio Mineiro&#x27;, &#x27;Pedro Afonso&#x27;, &#x27;Sales Associate&#x27;, &#x27;Av. dos Lusíadas, 23&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05432-043&#x27;, &#x27;Brazil&#x27;, NULL);INSERT INTO `customers` VALUES (&#x27;CONSH&#x27;, &#x27;Consolidated Holdings&#x27;, &#x27;Elizabeth Brown&#x27;, &#x27;Sales Representative&#x27;, &#x27;Berkeley Gardens 12 Brewery&#x27;, &#x27;London&#x27;, NULL, &#x27;WX1 6LT&#x27;, &#x27;UK&#x27;, &#x27;(171) 555-9199&#x27;);INSERT INTO `customers` VALUES (&#x27;DRACD&#x27;, &#x27;Drachenblut Delikatessen&#x27;, &#x27;Sven Ottlieb&#x27;, &#x27;Order Administrator&#x27;, &#x27;Walserweg 21&#x27;, &#x27;Aachen&#x27;, NULL, &#x27;52066&#x27;, &#x27;Germany&#x27;, &#x27;0241-059428&#x27;);INSERT INTO `customers` VALUES (&#x27;DUMON&#x27;, &#x27;Du monde entier&#x27;, &#x27;Janine Labrune&#x27;, &#x27;Owner&#x27;, &#x27;67, rue des Cinquante Otages&#x27;, &#x27;Nantes&#x27;, NULL, &#x27;44000&#x27;, &#x27;France&#x27;, &#x27;40.67.89.89&#x27;);INSERT INTO `customers` VALUES (&#x27;EASTC&#x27;, &#x27;Eastern Connection&#x27;, &#x27;Ann Devon&#x27;, &#x27;Sales Agent&#x27;, &#x27;35 King George&#x27;, &#x27;London&#x27;, NULL, &#x27;WX3 6FW&#x27;, &#x27;UK&#x27;, &#x27;(171) 555-3373&#x27;);INSERT INTO `customers` VALUES (&#x27;ERNSH&#x27;, &#x27;Ernst Handel&#x27;, &#x27;Roland Mendel&#x27;, &#x27;Sales Manager&#x27;, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;, &#x27;7675-3426&#x27;);INSERT INTO `customers` VALUES (&#x27;FAMIA&#x27;, &#x27;Familia Arquibaldo&#x27;, &#x27;Aria Cruz&#x27;, &#x27;Marketing Assistant&#x27;, &#x27;Rua Orós, 92&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05442-030&#x27;, &#x27;Brazil&#x27;, NULL);INSERT INTO `customers` VALUES (&#x27;FISSA&#x27;, &#x27;FISSA Fabrica Inter. Salchichas S.A.&#x27;, &#x27;Diego Roel&#x27;, &#x27;Accounting Manager&#x27;, &#x27;C/ Moralzarzal, 86&#x27;, &#x27;Madrid&#x27;, NULL, &#x27;28034&#x27;, &#x27;Spain&#x27;, &#x27;(91) 555 55 93&#x27;);INSERT INTO `customers` VALUES (&#x27;FOLIG&#x27;, &#x27;Folies gourmandes&#x27;, &#x27;Martine Rancé&#x27;, &#x27;Assistant Sales Agent&#x27;, &#x27;184, chaussée de Tournai&#x27;, &#x27;Lille&#x27;, NULL, &#x27;59000&#x27;, &#x27;France&#x27;, &#x27;20.16.10.17&#x27;);INSERT INTO `customers` VALUES (&#x27;FOLKO&#x27;, &#x27;Folk och fä HB&#x27;, &#x27;Maria Larsson&#x27;, &#x27;Owner&#x27;, &#x27;Åkergatan 24&#x27;, &#x27;Bräcke&#x27;, NULL, &#x27;S-844 67&#x27;, &#x27;Sweden&#x27;, NULL);INSERT INTO `customers` VALUES (&#x27;FRANK&#x27;, &#x27;Frankenversand&#x27;, &#x27;Peter Franken&#x27;, &#x27;Marketing Manager&#x27;, &#x27;Berliner Platz 43&#x27;, &#x27;München&#x27;, NULL, &#x27;80805&#x27;, &#x27;Germany&#x27;, &#x27;089-0877451&#x27;);INSERT INTO `customers` VALUES (&#x27;FRANR&#x27;, &#x27;France restauration&#x27;, &#x27;Carine Schmitt&#x27;, &#x27;Marketing Manager&#x27;, &#x27;54, rue Royale&#x27;, &#x27;Nantes&#x27;, NULL, &#x27;44000&#x27;, &#x27;France&#x27;, &#x27;40.32.21.20&#x27;);INSERT INTO `customers` VALUES (&#x27;FRANS&#x27;, &#x27;Franchi S.p.A.&#x27;, &#x27;Paolo Accorti&#x27;, &#x27;Sales Representative&#x27;, &#x27;Via Monte Bianco 34&#x27;, &#x27;Torino&#x27;, NULL, &#x27;10100&#x27;, &#x27;Italy&#x27;, &#x27;011-4988261&#x27;);INSERT INTO `customers` VALUES (&#x27;FURIB&#x27;, &#x27;Furia Bacalhau e Frutos do Mar&#x27;, &#x27;Lino Rodriguez&#x27;, &#x27;Sales Manager&#x27;, &#x27;Jardim das rosas n. 32&#x27;, &#x27;Lisboa&#x27;, NULL, &#x27;1675&#x27;, &#x27;Portugal&#x27;, &#x27;(1) 354-2535&#x27;);INSERT INTO `customers` VALUES (&#x27;GALED&#x27;, &#x27;Galería del gastrónomo&#x27;, &#x27;Eduardo Saavedra&#x27;, &#x27;Marketing Manager&#x27;, &#x27;Rambla de Cataluña, 23&#x27;, &#x27;Barcelona&#x27;, NULL, &#x27;8022&#x27;, &#x27;Spain&#x27;, &#x27;(93) 203 4561&#x27;);INSERT INTO `customers` VALUES (&#x27;GODOS&#x27;, &#x27;Godos Cocina Típica&#x27;, &#x27;José Pedro Freyre&#x27;, &#x27;Sales Manager&#x27;, &#x27;C/ Romero, 33&#x27;, &#x27;Sevilla&#x27;, NULL, &#x27;41101&#x27;, &#x27;Spain&#x27;, NULL);INSERT INTO `customers` VALUES (&#x27;GOURL&#x27;, &#x27;Gourmet Lanchonetes&#x27;, &#x27;André Fonseca&#x27;, &#x27;Sales Associate&#x27;, &#x27;Av. Brasil, 442&#x27;, &#x27;Campinas&#x27;, &#x27;SP&#x27;, &#x27;04876-786&#x27;, &#x27;Brazil&#x27;, NULL);INSERT INTO `customers` VALUES (&#x27;GREAL&#x27;, &#x27;Great Lakes Food Market&#x27;, &#x27;Howard Snyder&#x27;, &#x27;Marketing Manager&#x27;, &#x27;2732 Baker Blvd.&#x27;, &#x27;Eugene&#x27;, &#x27;OR&#x27;, &#x27;97403&#x27;, &#x27;USA&#x27;, NULL);INSERT INTO `customers` VALUES (&#x27;GROSR&#x27;, &#x27;GROSELLA-Restaurante&#x27;, &#x27;Manuel Pereira&#x27;, &#x27;Owner&#x27;, &#x27;5ª Ave. Los Palos Grandes&#x27;, &#x27;Caracas&#x27;, &#x27;DF&#x27;, &#x27;1081&#x27;, &#x27;Venezuela&#x27;, &#x27;(2) 283-3397&#x27;);INSERT INTO `customers` VALUES (&#x27;HANAR&#x27;, &#x27;Hanari Carnes&#x27;, &#x27;Mario Pontes&#x27;, &#x27;Accounting Manager&#x27;, &#x27;Rua do Paço, 67&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;05454-876&#x27;, &#x27;Brazil&#x27;, &#x27;(21) 555-8765&#x27;);INSERT INTO `customers` VALUES (&#x27;HILAA&#x27;, &#x27;HILARION-Abastos&#x27;, &#x27;Carlos Hernández&#x27;, &#x27;Sales Representative&#x27;, &#x27;Carrera 22 con Ave. Carlos Soublette #8-35&#x27;, &#x27;San Cristóbal&#x27;, &#x27;Táchira&#x27;, &#x27;5022&#x27;, &#x27;Venezuela&#x27;, &#x27;(5) 555-1948&#x27;);INSERT INTO `customers` VALUES (&#x27;HUNGC&#x27;, &#x27;Hungry Coyote Import Store&#x27;, &#x27;Yoshi Latimer&#x27;, &#x27;Sales Representative&#x27;, &#x27;City Center Plaza 516 Main St.&#x27;, &#x27;Elgin&#x27;, &#x27;OR&#x27;, &#x27;97827&#x27;, &#x27;USA&#x27;, &#x27;(503) 555-2376&#x27;);INSERT INTO `customers` VALUES (&#x27;HUNGO&#x27;, &#x27;Hungry Owl All-Night Grocers&#x27;, &#x27;Patricia McKenna&#x27;, &#x27;Sales Associate&#x27;, &#x27;8 Johnstown Road&#x27;, &#x27;Cork&#x27;, &#x27;Co. Cork&#x27;, &#x27;null&#x27;, &#x27;Ireland&#x27;, &#x27;2967 3333&#x27;);INSERT INTO `customers` VALUES (&#x27;ISLAT&#x27;, &#x27;Island Trading&#x27;, &#x27;Helen Bennett&#x27;, &#x27;Marketing Manager&#x27;, &#x27;Garden House Crowther Way&#x27;, &#x27;Cowes&#x27;, &#x27;Isle of Wight&#x27;, &#x27;PO31 7PJ&#x27;, &#x27;UK&#x27;, NULL);INSERT INTO `customers` VALUES (&#x27;KOENE&#x27;, &#x27;Königlich Essen&#x27;, &#x27;Philip Cramer&#x27;, &#x27;Sales Associate&#x27;, &#x27;Maubelstr. 90&#x27;, &#x27;Brandenburg&#x27;, NULL, &#x27;14776&#x27;, &#x27;Germany&#x27;, NULL);INSERT INTO `customers` VALUES (&#x27;LACOR&#x27;, &#x27;La corne d\\&#x27;abondance&#x27;, &#x27;Daniel Tonini&#x27;, &#x27;Sales Representative&#x27;, &#x27;67, avenue de l\\&#x27;Europe&#x27;, &#x27;Versailles&#x27;, NULL, &#x27;78000&#x27;, &#x27;France&#x27;, &#x27;30.59.85.11&#x27;);INSERT INTO `customers` VALUES (&#x27;LAMAI&#x27;, &#x27;La maison d\\&#x27;Asie&#x27;, &#x27;Annette Roulet&#x27;, &#x27;Sales Manager&#x27;, &#x27;1 rue Alsace-Lorraine&#x27;, &#x27;Toulouse&#x27;, NULL, &#x27;31000&#x27;, &#x27;France&#x27;, &#x27;61.77.61.11&#x27;);INSERT INTO `customers` VALUES (&#x27;LAUGB&#x27;, &#x27;Laughing Bacchus Wine Cellars&#x27;, &#x27;Yoshi Tannamuri&#x27;, &#x27;Marketing Assistant&#x27;, &#x27;1900 Oak St.&#x27;, &#x27;Vancouver&#x27;, &#x27;BC&#x27;, &#x27;V3F 2K1&#x27;, &#x27;Canada&#x27;, &#x27;(604) 555-7293&#x27;);INSERT INTO `customers` VALUES (&#x27;LAZYK&#x27;, &#x27;Lazy K Kountry Store&#x27;, &#x27;John Steel&#x27;, &#x27;Marketing Manager&#x27;, &#x27;12 Orchestra Terrace&#x27;, &#x27;Walla Walla&#x27;, &#x27;WA&#x27;, &#x27;99362&#x27;, &#x27;USA&#x27;, &#x27;(509) 555-6221&#x27;);INSERT INTO `customers` VALUES (&#x27;LEHMS&#x27;, &#x27;Lehmanns Marktstand&#x27;, &#x27;Renate Messner&#x27;, &#x27;Sales Representative&#x27;, &#x27;Magazinweg 7&#x27;, &#x27;Frankfurt a.M.&#x27;, NULL, &#x27;60528&#x27;, &#x27;Germany&#x27;, &#x27;069-0245874&#x27;);INSERT INTO `customers` VALUES (&#x27;LETSS&#x27;, &#x27;Let\\&#x27;s Stop N Shop&#x27;, &#x27;Jaime Yorres&#x27;, &#x27;Owner&#x27;, &#x27;87 Polk St. Suite 5&#x27;, &#x27;San Francisco&#x27;, &#x27;CA&#x27;, &#x27;94117&#x27;, &#x27;USA&#x27;, NULL);INSERT INTO `customers` VALUES (&#x27;LILAS&#x27;, &#x27;LILA-Supermercado&#x27;, &#x27;Carlos González&#x27;, &#x27;Accounting Manager&#x27;, &#x27;Carrera 52 con Ave. Bolívar #65-98 Llano Largo&#x27;, &#x27;Barquisimeto&#x27;, &#x27;Lara&#x27;, &#x27;3508&#x27;, &#x27;Venezuela&#x27;, &#x27;(9) 331-7256&#x27;);INSERT INTO `customers` VALUES (&#x27;LINOD&#x27;, &#x27;LINO-Delicateses&#x27;, &#x27;Felipe Izquierdo&#x27;, &#x27;Owner&#x27;, &#x27;Ave. 5 de Mayo Porlamar&#x27;, &#x27;I. de Margarita&#x27;, &#x27;Nueva Esparta&#x27;, &#x27;4980&#x27;, &#x27;Venezuela&#x27;, &#x27;(8) 34-93-93&#x27;);INSERT INTO `customers` VALUES (&#x27;LONEP&#x27;, &#x27;Lonesome Pine Restaurant&#x27;, &#x27;Fran Wilson&#x27;, &#x27;Sales Manager&#x27;, &#x27;89 Chiaroscuro Rd.&#x27;, &#x27;Portland&#x27;, &#x27;OR&#x27;, &#x27;97219&#x27;, &#x27;USA&#x27;, &#x27;(503) 555-9646&#x27;);INSERT INTO `customers` VALUES (&#x27;MAGAA&#x27;, &#x27;Magazzini Alimentari Riuniti&#x27;, &#x27;Giovanni Rovelli&#x27;, &#x27;Marketing Manager&#x27;, &#x27;Via Ludovico il Moro 22&#x27;, &#x27;Bergamo&#x27;, NULL, &#x27;24100&#x27;, &#x27;Italy&#x27;, &#x27;035-640231&#x27;);INSERT INTO `customers` VALUES (&#x27;MAISD&#x27;, &#x27;Maison Dewey&#x27;, &#x27;Catherine Dewey&#x27;, &#x27;Sales Agent&#x27;, &#x27;Rue Joseph-Bens 532&#x27;, &#x27;Bruxelles&#x27;, NULL, &#x27;B-1180&#x27;, &#x27;Belgium&#x27;, &#x27;(02) 201 24 68&#x27;);INSERT INTO `customers` VALUES (&#x27;MEREP&#x27;, &#x27;Mère Paillarde&#x27;, &#x27;Jean Fresnière&#x27;, &#x27;Marketing Assistant&#x27;, &#x27;43 rue St. Laurent&#x27;, &#x27;Montréal&#x27;, &#x27;Québec&#x27;, &#x27;H1J 1C3&#x27;, &#x27;Canada&#x27;, &#x27;(514) 555-8055&#x27;);INSERT INTO `customers` VALUES (&#x27;MORGK&#x27;, &#x27;Morgenstern Gesundkost&#x27;, &#x27;Alexander Feuer&#x27;, &#x27;Marketing Assistant&#x27;, &#x27;Heerstr. 22&#x27;, &#x27;Leipzig&#x27;, NULL, &#x27;4179&#x27;, &#x27;Germany&#x27;, NULL);INSERT INTO `customers` VALUES (&#x27;NORTS&#x27;, &#x27;North/South&#x27;, &#x27;Simon Crowther&#x27;, &#x27;Sales Associate&#x27;, &#x27;South House 300 Queensbridge&#x27;, &#x27;London&#x27;, NULL, &#x27;SW7 1RZ&#x27;, &#x27;UK&#x27;, &#x27;(171) 555-2530&#x27;);INSERT INTO `customers` VALUES (&#x27;OCEAN&#x27;, &#x27;Océano Atlántico Ltda.&#x27;, &#x27;Yvonne Moncada&#x27;, &#x27;Sales Agent&#x27;, &#x27;Ing. Gustavo Moncada 8585 Piso 20-A&#x27;, &#x27;Buenos Aires&#x27;, NULL, &#x27;1010&#x27;, &#x27;Argentina&#x27;, &#x27;(1) 135-5535&#x27;);INSERT INTO `customers` VALUES (&#x27;OLDWO&#x27;, &#x27;Old World Delicatessen&#x27;, &#x27;Rene Phillips&#x27;, &#x27;Sales Representative&#x27;, &#x27;2743 Bering St.&#x27;, &#x27;Anchorage&#x27;, &#x27;AK&#x27;, &#x27;99508&#x27;, &#x27;USA&#x27;, &#x27;(907) 555-2880&#x27;);INSERT INTO `customers` VALUES (&#x27;OTTIK&#x27;, &#x27;Ottilies Käseladen&#x27;, &#x27;Henriette Pfalzheim&#x27;, &#x27;Owner&#x27;, &#x27;Mehrheimerstr. 369&#x27;, &#x27;Köln&#x27;, NULL, &#x27;50739&#x27;, &#x27;Germany&#x27;, &#x27;0221-0765721&#x27;);INSERT INTO `customers` VALUES (&#x27;PARIS&#x27;, &#x27;Paris spécialités&#x27;, &#x27;Marie Bertrand&#x27;, &#x27;Owner&#x27;, &#x27;265, boulevard Charonne&#x27;, &#x27;Paris&#x27;, NULL, &#x27;75012&#x27;, &#x27;France&#x27;, &#x27;(1) 42.34.22.77&#x27;);INSERT INTO `customers` VALUES (&#x27;PERIC&#x27;, &#x27;Pericles Comidas clásicas&#x27;, &#x27;Guillermo Fernández&#x27;, &#x27;Sales Representative&#x27;, &#x27;Calle Dr. Jorge Cash 321&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;5033&#x27;, &#x27;Mexico&#x27;, &#x27;(5) 545-3745&#x27;);INSERT INTO `customers` VALUES (&#x27;PICCO&#x27;, &#x27;Piccolo und mehr&#x27;, &#x27;Georg Pipps&#x27;, &#x27;Sales Manager&#x27;, &#x27;Geislweg 14&#x27;, &#x27;Salzburg&#x27;, NULL, &#x27;5020&#x27;, &#x27;Austria&#x27;, &#x27;6562-9723&#x27;);INSERT INTO `customers` VALUES (&#x27;PRINI&#x27;, &#x27;Princesa Isabel Vinhos&#x27;, &#x27;Isabel de Castro&#x27;, &#x27;Sales Representative&#x27;, &#x27;Estrada da saúde n. 58&#x27;, &#x27;Lisboa&#x27;, NULL, &#x27;1756&#x27;, &#x27;Portugal&#x27;, NULL);INSERT INTO `customers` VALUES (&#x27;QUEDE&#x27;, &#x27;Que Delícia&#x27;, &#x27;Bernardo Batista&#x27;, &#x27;Accounting Manager&#x27;, &#x27;Rua da Panificadora, 12&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;02389-673&#x27;, &#x27;Brazil&#x27;, &#x27;(21) 555-4545&#x27;);INSERT INTO `customers` VALUES (&#x27;QUEEN&#x27;, &#x27;Queen Cozinha&#x27;, &#x27;Lúcia Carvalho&#x27;, &#x27;Marketing Assistant&#x27;, &#x27;Alameda dos Canàrios, 891&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05487-020&#x27;, &#x27;Brazil&#x27;, NULL);INSERT INTO `customers` VALUES (&#x27;QUICK&#x27;, &#x27;QUICK-Stop&#x27;, &#x27;Horst Kloss&#x27;, &#x27;Accounting Manager&#x27;, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;1307&#x27;, &#x27;Germany&#x27;, NULL);INSERT INTO `customers` VALUES (&#x27;RANCH&#x27;, &#x27;Rancho grande&#x27;, &#x27;Sergio Gutiérrez&#x27;, &#x27;Sales Representative&#x27;, &#x27;Av. del Libertador 900&#x27;, &#x27;Buenos Aires&#x27;, NULL, &#x27;1010&#x27;, &#x27;Argentina&#x27;, &#x27;(1) 123-5556&#x27;);INSERT INTO `customers` VALUES (&#x27;RATTC&#x27;, &#x27;Rattlesnake Canyon Grocery&#x27;, &#x27;Paula Wilson&#x27;, &#x27;Assistant Sales Representative&#x27;, &#x27;2817 Milton Dr.&#x27;, &#x27;Albuquerque&#x27;, &#x27;NM&#x27;, &#x27;87110&#x27;, &#x27;USA&#x27;, &#x27;(505) 555-3620&#x27;);INSERT INTO `customers` VALUES (&#x27;REGGC&#x27;, &#x27;Reggiani Caseifici&#x27;, &#x27;Maurizio Moroni&#x27;, &#x27;Sales Associate&#x27;, &#x27;Strada Provinciale 124&#x27;, &#x27;Reggio Emilia&#x27;, NULL, &#x27;42100&#x27;, &#x27;Italy&#x27;, &#x27;0522-556722&#x27;);INSERT INTO `customers` VALUES (&#x27;RICAR&#x27;, &#x27;Ricardo Adocicados&#x27;, &#x27;Janete Limeira&#x27;, &#x27;Assistant Sales Agent&#x27;, &#x27;Av. Copacabana, 267&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;02389-890&#x27;, &#x27;Brazil&#x27;, NULL);INSERT INTO `customers` VALUES (&#x27;RICSU&#x27;, &#x27;Richter Supermarkt&#x27;, &#x27;Michael Holz&#x27;, &#x27;Sales Manager&#x27;, &#x27;Grenzacherweg 237&#x27;, &#x27;Genève&#x27;, NULL, &#x27;1203&#x27;, &#x27;Switzerland&#x27;, NULL);INSERT INTO `customers` VALUES (&#x27;ROMEY&#x27;, &#x27;Romero y tomillo&#x27;, &#x27;Alejandra Camino&#x27;, &#x27;Accounting Manager&#x27;, &#x27;Gran Vía, 1&#x27;, &#x27;Madrid&#x27;, NULL, &#x27;28001&#x27;, &#x27;Spain&#x27;, &#x27;(91) 745 6210&#x27;);INSERT INTO `customers` VALUES (&#x27;SANTG&#x27;, &#x27;Santé Gourmet&#x27;, &#x27;Jonas Bergulfsen&#x27;, &#x27;Owner&#x27;, &#x27;Erling Skakkes gate 78&#x27;, &#x27;Stavern&#x27;, NULL, &#x27;4110&#x27;, &#x27;Norway&#x27;, &#x27;07-98 92 47&#x27;);INSERT INTO `customers` VALUES (&#x27;SAVEA&#x27;, &#x27;Save-a-lot Markets&#x27;, &#x27;Jose Pavarotti&#x27;, &#x27;Sales Representative&#x27;, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;, NULL);INSERT INTO `customers` VALUES (&#x27;SEVES&#x27;, &#x27;Seven Seas Imports&#x27;, &#x27;Hari Kumar&#x27;, &#x27;Sales Manager&#x27;, &#x27;90 Wadhurst Rd.&#x27;, &#x27;London&#x27;, NULL, &#x27;OX15 4NB&#x27;, &#x27;UK&#x27;, &#x27;(171) 555-5646&#x27;);INSERT INTO `customers` VALUES (&#x27;SIMOB&#x27;, &#x27;Simons bistro&#x27;, &#x27;Jytte Petersen&#x27;, &#x27;Owner&#x27;, &#x27;Vinbæltet 34&#x27;, &#x27;Kobenhavn&#x27;, NULL, &#x27;1734&#x27;, &#x27;Denmark&#x27;, &#x27;31 13 35 57&#x27;);INSERT INTO `customers` VALUES (&#x27;SPECD&#x27;, &#x27;Spécialités du monde&#x27;, &#x27;Dominique Perrier&#x27;, &#x27;Marketing Manager&#x27;, &#x27;25, rue Lauriston&#x27;, &#x27;Paris&#x27;, NULL, &#x27;75016&#x27;, &#x27;France&#x27;, &#x27;(1) 47.55.60.20&#x27;);INSERT INTO `customers` VALUES (&#x27;SPLIR&#x27;, &#x27;Split Rail Beer &amp; Ale&#x27;, &#x27;Art Braunschweiger&#x27;, &#x27;Sales Manager&#x27;, &#x27;P.O. Box 555&#x27;, &#x27;Lander&#x27;, &#x27;WY&#x27;, &#x27;82520&#x27;, &#x27;USA&#x27;, &#x27;(307) 555-6525&#x27;);INSERT INTO `customers` VALUES (&#x27;SUPRD&#x27;, &#x27;Suprêmes délices&#x27;, &#x27;Pascale Cartrain&#x27;, &#x27;Accounting Manager&#x27;, &#x27;Boulevard Tirou, 255&#x27;, &#x27;Charleroi&#x27;, NULL, &#x27;B-6000&#x27;, &#x27;Belgium&#x27;, &#x27;(071) 23 67 22 21&#x27;);INSERT INTO `customers` VALUES (&#x27;THEBI&#x27;, &#x27;The Big Cheese&#x27;, &#x27;Liz Nixon&#x27;, &#x27;Marketing Manager&#x27;, &#x27;89 Jefferson Way Suite 2&#x27;, &#x27;Portland&#x27;, &#x27;OR&#x27;, &#x27;97201&#x27;, &#x27;USA&#x27;, NULL);INSERT INTO `customers` VALUES (&#x27;THECR&#x27;, &#x27;The Cracker Box&#x27;, &#x27;Liu Wong&#x27;, &#x27;Marketing Assistant&#x27;, &#x27;55 Grizzly Peak Rd.&#x27;, &#x27;Butte&#x27;, &#x27;MT&#x27;, &#x27;59801&#x27;, &#x27;USA&#x27;, &#x27;(406) 555-8083&#x27;);INSERT INTO `customers` VALUES (&#x27;TOMSP&#x27;, &#x27;Toms Spezialitäten&#x27;, &#x27;Karin Josephs&#x27;, &#x27;Marketing Manager&#x27;, &#x27;Luisenstr. 48&#x27;, &#x27;Münster&#x27;, NULL, &#x27;44087&#x27;, &#x27;Germany&#x27;, &#x27;0251-035695&#x27;);INSERT INTO `customers` VALUES (&#x27;TORTU&#x27;, &#x27;Tortuga Restaurante&#x27;, &#x27;Miguel Angel Paolino&#x27;, &#x27;Owner&#x27;, &#x27;Avda. Azteca 123&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;5033&#x27;, &#x27;Mexico&#x27;, NULL);INSERT INTO `customers` VALUES (&#x27;TRADH&#x27;, &#x27;Tradição Hipermercados&#x27;, &#x27;Anabela Domingues&#x27;, &#x27;Sales Representative&#x27;, &#x27;Av. Inês de Castro, 414&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05634-030&#x27;, &#x27;Brazil&#x27;, &#x27;(11) 555-2168&#x27;);INSERT INTO `customers` VALUES (&#x27;TRAIH&#x27;, &#x27;Trail\\&#x27;s Head Gourmet Provisioners&#x27;, &#x27;Helvetius Nagy&#x27;, &#x27;Sales Associate&#x27;, &#x27;722 DaVinci Blvd.&#x27;, &#x27;Kirkland&#x27;, &#x27;WA&#x27;, &#x27;98034&#x27;, &#x27;USA&#x27;, &#x27;(206) 555-2174&#x27;);INSERT INTO `customers` VALUES (&#x27;VAFFE&#x27;, &#x27;Vaffeljernet&#x27;, &#x27;Palle Ibsen&#x27;, &#x27;Sales Manager&#x27;, &#x27;Smagsloget 45&#x27;, &#x27;Århus&#x27;, NULL, &#x27;8200&#x27;, &#x27;Denmark&#x27;, &#x27;86 22 33 44&#x27;);INSERT INTO `customers` VALUES (&#x27;VICTE&#x27;, &#x27;Victuailles en stock&#x27;, &#x27;Mary Saveley&#x27;, &#x27;Sales Agent&#x27;, &#x27;2, rue du Commerce&#x27;, &#x27;Lyon&#x27;, NULL, &#x27;69004&#x27;, &#x27;France&#x27;, &#x27;78.32.54.87&#x27;);INSERT INTO `customers` VALUES (&#x27;VINET&#x27;, &#x27;Vins et alcools Chevalier&#x27;, &#x27;Paul Henriot&#x27;, &#x27;Accounting Manager&#x27;, &#x27;59 rue de l\\&#x27;Abbaye&#x27;, &#x27;Reims&#x27;, NULL, &#x27;51100&#x27;, &#x27;France&#x27;, &#x27;26.47.15.11&#x27;);INSERT INTO `customers` VALUES (&#x27;WANDK&#x27;, &#x27;Die Wandernde Kuh&#x27;, &#x27;Rita Müller&#x27;, &#x27;Sales Representative&#x27;, &#x27;Adenauerallee 900&#x27;, &#x27;Stuttgart&#x27;, NULL, &#x27;70563&#x27;, &#x27;Germany&#x27;, &#x27;0711-035428&#x27;);INSERT INTO `customers` VALUES (&#x27;WARTH&#x27;, &#x27;Wartian Herkku&#x27;, &#x27;Pirkko Koskitalo&#x27;, &#x27;Accounting Manager&#x27;, &#x27;Torikatu 38&#x27;, &#x27;Oulu&#x27;, NULL, &#x27;90110&#x27;, &#x27;Finland&#x27;, &#x27;981-443655&#x27;);INSERT INTO `customers` VALUES (&#x27;WELLI&#x27;, &#x27;Wellington Importadora&#x27;, &#x27;Paula Parente&#x27;, &#x27;Sales Manager&#x27;, &#x27;Rua do Mercado, 12&#x27;, &#x27;Resende&#x27;, &#x27;SP&#x27;, &#x27;08737-363&#x27;, &#x27;Brazil&#x27;, NULL);INSERT INTO `customers` VALUES (&#x27;WHITC&#x27;, &#x27;White Clover Markets&#x27;, &#x27;Karl Jablonski&#x27;, &#x27;Owner&#x27;, &#x27;305 - 14th Ave. S. Suite 3B&#x27;, &#x27;Seattle&#x27;, &#x27;WA&#x27;, &#x27;98128&#x27;, &#x27;USA&#x27;, &#x27;(206) 555-4115&#x27;);INSERT INTO `customers` VALUES (&#x27;WILMK&#x27;, &#x27;Wilman Kala&#x27;, &#x27;Matti Karttunen&#x27;, &#x27;Owner/Marketing Assistant&#x27;, &#x27;Keskuskatu 45&#x27;, &#x27;Helsinki&#x27;, NULL, &#x27;21240&#x27;, &#x27;Finland&#x27;, &#x27;90-224 8858&#x27;);INSERT INTO `customers` VALUES (&#x27;WOLZA&#x27;, &#x27;Wolski Zajazd&#x27;, &#x27;Zbyszek Piestrzeniewicz&#x27;, &#x27;Owner&#x27;, &#x27;ul. Filtrowa 68&#x27;, &#x27;Warszawa&#x27;, NULL, &#x27;01-012&#x27;, &#x27;Poland&#x27;, &#x27;(26) 642-7012&#x27;);COMMIT;-- ------------------------------ Table structure for employees-- ----------------------------DROP TABLE IF EXISTS `employees`;CREATE TABLE `employees` (  `employee_id` int NOT NULL,  `last_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `first_name` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `title` varchar(30) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `birth_date` datetime DEFAULT NULL,  `hire_date` datetime DEFAULT NULL,  `address` varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `city` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `region` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `postal_code` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `country` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `reports_to` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  PRIMARY KEY (`employee_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;-- ------------------------------ Records of employees-- ----------------------------BEGIN;INSERT INTO `employees` VALUES (1, &#x27;Davolio&#x27;, &#x27;Nancy&#x27;, &#x27;Sales Representative&#x27;, &#x27;1968-12-08 00:00:00&#x27;, &#x27;2012-05-01 00:00:00&#x27;, &#x27;507 - 20th Ave. E. Apt. 2A&#x27;, &#x27;Seattle&#x27;, &#x27;WA&#x27;, &#x27;98122&#x27;, &#x27;USA&#x27;, &#x27;2&#x27;);INSERT INTO `employees` VALUES (2, &#x27;Fuller&#x27;, &#x27;Andrew&#x27;, &#x27;Vice President, Sales&#x27;, &#x27;1972-02-19 00:00:00&#x27;, &#x27;2012-08-14 00:00:00&#x27;, &#x27;908 W. Capital Way&#x27;, &#x27;Tacoma&#x27;, &#x27;WA&#x27;, &#x27;98401&#x27;, &#x27;USA&#x27;, NULL);INSERT INTO `employees` VALUES (3, &#x27;Smith&#x27;, &#x27;John&#x27;, &#x27;Sales Representative&#x27;, &#x27;1983-08-30 00:00:00&#x27;, &#x27;2012-04-01 00:00:00&#x27;, &#x27;722 Moss Bay Blvd.&#x27;, &#x27;Kirkland&#x27;, &#x27;WA&#x27;, &#x27;98033&#x27;, &#x27;USA&#x27;, &#x27;2&#x27;);INSERT INTO `employees` VALUES (4, &#x27;Peacock&#x27;, &#x27;Margaret&#x27;, &#x27;Sales Representative&#x27;, &#x27;1957-09-19 00:00:00&#x27;, &#x27;2013-05-03 00:00:00&#x27;, &#x27;4110 Old Redmond Rd.&#x27;, &#x27;Redmond&#x27;, &#x27;WA&#x27;, &#x27;98052&#x27;, &#x27;USA&#x27;, &#x27;2&#x27;);INSERT INTO `employees` VALUES (5, &#x27;Buchanan&#x27;, &#x27;Steven&#x27;, &#x27;Sales Manager&#x27;, &#x27;1975-03-04 00:00:00&#x27;, &#x27;2013-10-17 00:00:00&#x27;, &#x27;14 Garrett Hill&#x27;, &#x27;London&#x27;, &#x27;null&#x27;, &#x27;SW1 8JR&#x27;, &#x27;UK&#x27;, &#x27;2&#x27;);INSERT INTO `employees` VALUES (6, &#x27;Suyama&#x27;, &#x27;Michael&#x27;, &#x27;Sales Representative&#x27;, &#x27;1983-07-02 00:00:00&#x27;, &#x27;2013-10-17 00:00:00&#x27;, &#x27;Coventry House Miner Rd.&#x27;, &#x27;London&#x27;, &#x27;null&#x27;, &#x27;EC2 7JR&#x27;, &#x27;UK&#x27;, &#x27;5&#x27;);INSERT INTO `employees` VALUES (7, &#x27;King&#x27;, &#x27;Robert&#x27;, &#x27;Sales Representative&#x27;, &#x27;1980-05-29 00:00:00&#x27;, &#x27;2014-01-02 00:00:00&#x27;, &#x27;Edgeham Hollow Winchester Way&#x27;, &#x27;London&#x27;, &#x27;null&#x27;, &#x27;RG1 9SP&#x27;, &#x27;UK&#x27;, &#x27;5&#x27;);INSERT INTO `employees` VALUES (8, &#x27;Callahan&#x27;, &#x27;Laura&#x27;, &#x27;Inside Sales Coordinator&#x27;, &#x27;1978-01-09 00:00:00&#x27;, &#x27;2014-03-05 00:00:00&#x27;, &#x27;4726 - 11th Ave. N.E.&#x27;, &#x27;Seattle&#x27;, &#x27;WA&#x27;, &#x27;98105&#x27;, &#x27;USA&#x27;, &#x27;2&#x27;);INSERT INTO `employees` VALUES (9, &#x27;Dodsworth&#x27;, &#x27;Anne&#x27;, &#x27;Sales Representative&#x27;, &#x27;1986-01-27 00:00:00&#x27;, &#x27;2014-11-15 00:00:00&#x27;, &#x27;7 Houndstooth Rd.&#x27;, &#x27;London&#x27;, &#x27;null&#x27;, &#x27;WG2 7LT&#x27;, &#x27;UK&#x27;, &#x27;5&#x27;);INSERT INTO `employees` VALUES (10, &#x27;Smith&#x27;, &#x27;John&#x27;, &#x27;Sales Representative&#x27;, &#x27;1994-08-30 00:00:00&#x27;, &#x27;2017-03-21 00:00:00&#x27;, &#x27;22 Abbey Rd&#x27;, &#x27;London&#x27;, &#x27;null&#x27;, &#x27;NW6 5JG&#x27;, &#x27;UK&#x27;, &#x27;2&#x27;);COMMIT;-- ------------------------------ Table structure for order_items-- ----------------------------DROP TABLE IF EXISTS `order_items`;CREATE TABLE `order_items` (  `order_id` int NOT NULL,  `product_id` int NOT NULL,  `unit_price` decimal(10,2) DEFAULT NULL,  `quantity` smallint DEFAULT NULL,  `discount` double(24,2) DEFAULT NULL,  PRIMARY KEY (`order_id`,`product_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;-- ------------------------------ Records of order_items-- ----------------------------BEGIN;INSERT INTO `order_items` VALUES (10248, 11, 14.00, 12, 0.00);INSERT INTO `order_items` VALUES (10248, 42, 9.80, 10, 0.00);INSERT INTO `order_items` VALUES (10248, 72, 34.80, 5, 0.00);INSERT INTO `order_items` VALUES (10249, 14, 18.60, 9, 0.00);INSERT INTO `order_items` VALUES (10249, 51, 42.40, 40, 0.00);INSERT INTO `order_items` VALUES (10250, 41, 7.70, 10, 0.00);INSERT INTO `order_items` VALUES (10250, 51, 42.40, 35, 0.15);INSERT INTO `order_items` VALUES (10250, 65, 16.80, 15, 0.15);INSERT INTO `order_items` VALUES (10251, 22, 16.80, 6, 0.05);INSERT INTO `order_items` VALUES (10251, 57, 15.60, 15, 0.05);INSERT INTO `order_items` VALUES (10251, 65, 16.80, 20, 0.00);INSERT INTO `order_items` VALUES (10252, 20, 64.80, 40, 0.05);INSERT INTO `order_items` VALUES (10252, 33, 2.00, 25, 0.05);INSERT INTO `order_items` VALUES (10252, 60, 27.20, 40, 0.00);INSERT INTO `order_items` VALUES (10253, 31, 10.00, 20, 0.00);INSERT INTO `order_items` VALUES (10253, 39, 14.40, 42, 0.00);INSERT INTO `order_items` VALUES (10253, 49, 16.00, 40, 0.00);INSERT INTO `order_items` VALUES (10254, 24, 3.60, 15, 0.15);INSERT INTO `order_items` VALUES (10254, 55, 19.20, 21, 0.15);INSERT INTO `order_items` VALUES (10254, 74, 8.00, 21, 0.00);INSERT INTO `order_items` VALUES (10255, 2, 15.20, 20, 0.00);INSERT INTO `order_items` VALUES (10255, 16, 13.90, 35, 0.00);INSERT INTO `order_items` VALUES (10255, 36, 15.20, 25, 0.00);INSERT INTO `order_items` VALUES (10255, 59, 44.00, 30, 0.00);INSERT INTO `order_items` VALUES (10256, 53, 26.20, 15, 0.00);INSERT INTO `order_items` VALUES (10256, 77, 10.40, 12, 0.00);INSERT INTO `order_items` VALUES (10257, 27, 35.10, 25, 0.00);INSERT INTO `order_items` VALUES (10257, 39, 14.40, 6, 0.00);INSERT INTO `order_items` VALUES (10257, 77, 10.40, 15, 0.00);INSERT INTO `order_items` VALUES (10258, 2, 15.20, 50, 0.20);INSERT INTO `order_items` VALUES (10258, 5, 17.00, 65, 0.20);INSERT INTO `order_items` VALUES (10258, 32, 25.60, 6, 0.20);INSERT INTO `order_items` VALUES (10259, 21, 8.00, 10, 0.00);INSERT INTO `order_items` VALUES (10259, 37, 20.80, 1, 0.00);INSERT INTO `order_items` VALUES (10260, 41, 7.70, 16, 0.25);INSERT INTO `order_items` VALUES (10260, 57, 15.60, 50, 0.00);INSERT INTO `order_items` VALUES (10260, 62, 39.40, 15, 0.25);INSERT INTO `order_items` VALUES (10260, 70, 12.00, 21, 0.25);INSERT INTO `order_items` VALUES (10261, 21, 8.00, 20, 0.00);INSERT INTO `order_items` VALUES (10261, 35, 14.40, 20, 0.00);INSERT INTO `order_items` VALUES (10262, 5, 17.00, 12, 0.20);INSERT INTO `order_items` VALUES (10262, 7, 24.00, 15, 0.00);INSERT INTO `order_items` VALUES (10262, 56, 30.40, 2, 0.00);INSERT INTO `order_items` VALUES (10263, 16, 13.90, 60, 0.25);INSERT INTO `order_items` VALUES (10263, 24, 3.60, 28, 0.00);INSERT INTO `order_items` VALUES (10263, 30, 20.70, 60, 0.25);INSERT INTO `order_items` VALUES (10263, 74, 8.00, 36, 0.25);INSERT INTO `order_items` VALUES (10264, 2, 15.20, 35, 0.00);INSERT INTO `order_items` VALUES (10264, 41, 7.70, 25, 0.15);INSERT INTO `order_items` VALUES (10265, 17, 31.20, 30, 0.00);INSERT INTO `order_items` VALUES (10265, 70, 12.00, 20, 0.00);INSERT INTO `order_items` VALUES (10266, 12, 30.40, 12, 0.05);INSERT INTO `order_items` VALUES (10267, 40, 14.70, 50, 0.00);INSERT INTO `order_items` VALUES (10267, 59, 44.00, 70, 0.15);INSERT INTO `order_items` VALUES (10267, 76, 14.40, 15, 0.15);INSERT INTO `order_items` VALUES (10268, 29, 99.00, 10, 0.00);INSERT INTO `order_items` VALUES (10268, 72, 27.80, 4, 0.00);INSERT INTO `order_items` VALUES (10269, 33, 2.00, 60, 0.05);INSERT INTO `order_items` VALUES (10269, 72, 27.80, 20, 0.05);INSERT INTO `order_items` VALUES (10270, 36, 15.20, 30, 0.00);INSERT INTO `order_items` VALUES (10270, 43, 36.80, 25, 0.00);INSERT INTO `order_items` VALUES (10271, 33, 2.00, 24, 0.00);INSERT INTO `order_items` VALUES (10272, 20, 64.80, 6, 0.00);INSERT INTO `order_items` VALUES (10272, 31, 10.00, 40, 0.00);INSERT INTO `order_items` VALUES (10272, 72, 27.80, 24, 0.00);INSERT INTO `order_items` VALUES (10273, 10, 24.80, 24, 0.05);INSERT INTO `order_items` VALUES (10273, 31, 10.00, 15, 0.05);INSERT INTO `order_items` VALUES (10273, 33, 2.00, 20, 0.00);INSERT INTO `order_items` VALUES (10273, 40, 14.70, 60, 0.05);INSERT INTO `order_items` VALUES (10273, 76, 14.40, 33, 0.05);INSERT INTO `order_items` VALUES (10274, 71, 17.20, 20, 0.00);INSERT INTO `order_items` VALUES (10274, 72, 27.80, 7, 0.00);INSERT INTO `order_items` VALUES (10275, 24, 3.60, 12, 0.05);INSERT INTO `order_items` VALUES (10275, 59, 44.00, 6, 0.05);INSERT INTO `order_items` VALUES (10276, 10, 24.80, 15, 0.00);INSERT INTO `order_items` VALUES (10276, 13, 4.80, 10, 0.00);INSERT INTO `order_items` VALUES (10277, 28, 36.40, 20, 0.00);INSERT INTO `order_items` VALUES (10277, 62, 39.40, 12, 0.00);INSERT INTO `order_items` VALUES (10278, 44, 15.50, 16, 0.00);INSERT INTO `order_items` VALUES (10278, 59, 44.00, 15, 0.00);INSERT INTO `order_items` VALUES (10278, 63, 35.10, 8, 0.00);INSERT INTO `order_items` VALUES (10278, 73, 12.00, 25, 0.00);INSERT INTO `order_items` VALUES (10279, 17, 31.20, 15, 0.25);INSERT INTO `order_items` VALUES (10280, 24, 3.60, 12, 0.00);INSERT INTO `order_items` VALUES (10280, 55, 19.20, 20, 0.00);INSERT INTO `order_items` VALUES (10280, 75, 6.20, 30, 0.00);INSERT INTO `order_items` VALUES (10281, 19, 7.30, 1, 0.00);INSERT INTO `order_items` VALUES (10281, 24, 3.60, 6, 0.00);INSERT INTO `order_items` VALUES (10281, 35, 14.40, 4, 0.00);INSERT INTO `order_items` VALUES (10282, 30, 20.70, 6, 0.00);INSERT INTO `order_items` VALUES (10282, 57, 15.60, 2, 0.00);INSERT INTO `order_items` VALUES (10283, 15, 12.40, 20, 0.00);INSERT INTO `order_items` VALUES (10283, 19, 7.30, 18, 0.00);INSERT INTO `order_items` VALUES (10283, 60, 27.20, 35, 0.00);INSERT INTO `order_items` VALUES (10283, 72, 27.80, 3, 0.00);INSERT INTO `order_items` VALUES (10284, 27, 35.10, 15, 0.25);INSERT INTO `order_items` VALUES (10284, 44, 15.50, 21, 0.00);INSERT INTO `order_items` VALUES (10284, 60, 27.20, 20, 0.25);INSERT INTO `order_items` VALUES (10284, 67, 11.20, 5, 0.25);INSERT INTO `order_items` VALUES (10285, 1, 14.40, 45, 0.20);INSERT INTO `order_items` VALUES (10285, 40, 14.70, 40, 0.20);INSERT INTO `order_items` VALUES (10285, 53, 26.20, 36, 0.20);INSERT INTO `order_items` VALUES (10286, 35, 14.40, 100, 0.00);INSERT INTO `order_items` VALUES (10286, 62, 39.40, 40, 0.00);INSERT INTO `order_items` VALUES (10287, 16, 13.90, 40, 0.15);INSERT INTO `order_items` VALUES (10287, 34, 11.20, 20, 0.00);INSERT INTO `order_items` VALUES (10287, 46, 9.60, 15, 0.15);INSERT INTO `order_items` VALUES (10288, 54, 5.90, 10, 0.10);INSERT INTO `order_items` VALUES (10288, 68, 10.00, 3, 0.10);INSERT INTO `order_items` VALUES (10289, 3, 8.00, 30, 0.00);INSERT INTO `order_items` VALUES (10289, 64, 26.60, 9, 0.00);INSERT INTO `order_items` VALUES (10290, 5, 17.00, 20, 0.00);INSERT INTO `order_items` VALUES (10290, 29, 99.00, 15, 0.00);INSERT INTO `order_items` VALUES (10290, 49, 16.00, 15, 0.00);INSERT INTO `order_items` VALUES (10290, 77, 10.40, 10, 0.00);INSERT INTO `order_items` VALUES (10291, 13, 4.80, 20, 0.10);INSERT INTO `order_items` VALUES (10291, 44, 15.50, 24, 0.10);INSERT INTO `order_items` VALUES (10291, 51, 42.40, 2, 0.10);INSERT INTO `order_items` VALUES (10292, 20, 64.80, 20, 0.00);INSERT INTO `order_items` VALUES (10293, 18, 50.00, 12, 0.00);INSERT INTO `order_items` VALUES (10293, 24, 3.60, 10, 0.00);INSERT INTO `order_items` VALUES (10293, 63, 35.10, 5, 0.00);INSERT INTO `order_items` VALUES (10293, 75, 6.20, 6, 0.00);INSERT INTO `order_items` VALUES (10294, 1, 14.40, 18, 0.00);INSERT INTO `order_items` VALUES (10294, 17, 31.20, 15, 0.00);INSERT INTO `order_items` VALUES (10294, 43, 36.80, 15, 0.00);INSERT INTO `order_items` VALUES (10294, 60, 27.20, 21, 0.00);INSERT INTO `order_items` VALUES (10294, 75, 6.20, 6, 0.00);INSERT INTO `order_items` VALUES (10295, 56, 30.40, 4, 0.00);INSERT INTO `order_items` VALUES (10296, 11, 16.80, 12, 0.00);INSERT INTO `order_items` VALUES (10296, 16, 13.90, 30, 0.00);INSERT INTO `order_items` VALUES (10296, 69, 28.80, 15, 0.00);INSERT INTO `order_items` VALUES (10297, 39, 14.40, 60, 0.00);INSERT INTO `order_items` VALUES (10297, 72, 27.80, 20, 0.00);INSERT INTO `order_items` VALUES (10298, 2, 15.20, 40, 0.00);INSERT INTO `order_items` VALUES (10298, 36, 15.20, 40, 0.25);INSERT INTO `order_items` VALUES (10298, 59, 44.00, 30, 0.25);INSERT INTO `order_items` VALUES (10298, 62, 39.40, 15, 0.00);INSERT INTO `order_items` VALUES (10299, 19, 7.30, 15, 0.00);INSERT INTO `order_items` VALUES (10299, 70, 12.00, 20, 0.00);INSERT INTO `order_items` VALUES (10300, 66, 13.60, 30, 0.00);INSERT INTO `order_items` VALUES (10300, 68, 10.00, 20, 0.00);INSERT INTO `order_items` VALUES (10301, 40, 14.70, 10, 0.00);INSERT INTO `order_items` VALUES (10301, 56, 30.40, 20, 0.00);INSERT INTO `order_items` VALUES (10302, 17, 31.20, 40, 0.00);INSERT INTO `order_items` VALUES (10302, 28, 36.40, 28, 0.00);INSERT INTO `order_items` VALUES (10302, 43, 36.80, 12, 0.00);INSERT INTO `order_items` VALUES (10303, 40, 14.70, 40, 0.10);INSERT INTO `order_items` VALUES (10303, 65, 16.80, 30, 0.10);INSERT INTO `order_items` VALUES (10303, 68, 10.00, 15, 0.10);INSERT INTO `order_items` VALUES (10304, 49, 16.00, 30, 0.00);INSERT INTO `order_items` VALUES (10304, 59, 44.00, 10, 0.00);INSERT INTO `order_items` VALUES (10304, 71, 17.20, 2, 0.00);INSERT INTO `order_items` VALUES (10305, 18, 50.00, 25, 0.10);INSERT INTO `order_items` VALUES (10305, 29, 99.00, 25, 0.10);INSERT INTO `order_items` VALUES (10305, 39, 14.40, 30, 0.10);INSERT INTO `order_items` VALUES (10306, 30, 20.70, 10, 0.00);INSERT INTO `order_items` VALUES (10306, 53, 26.20, 10, 0.00);INSERT INTO `order_items` VALUES (10306, 54, 5.90, 5, 0.00);INSERT INTO `order_items` VALUES (10307, 62, 39.40, 10, 0.00);INSERT INTO `order_items` VALUES (10307, 68, 10.00, 3, 0.00);INSERT INTO `order_items` VALUES (10308, 69, 28.80, 1, 0.00);INSERT INTO `order_items` VALUES (10308, 70, 12.00, 5, 0.00);INSERT INTO `order_items` VALUES (10309, 4, 17.60, 20, 0.00);INSERT INTO `order_items` VALUES (10309, 6, 20.00, 30, 0.00);INSERT INTO `order_items` VALUES (10309, 42, 11.20, 2, 0.00);INSERT INTO `order_items` VALUES (10309, 43, 36.80, 20, 0.00);INSERT INTO `order_items` VALUES (10309, 71, 17.20, 3, 0.00);INSERT INTO `order_items` VALUES (10310, 16, 13.90, 10, 0.00);INSERT INTO `order_items` VALUES (10310, 62, 39.40, 5, 0.00);INSERT INTO `order_items` VALUES (10311, 42, 11.20, 6, 0.00);INSERT INTO `order_items` VALUES (10311, 69, 28.80, 7, 0.00);INSERT INTO `order_items` VALUES (10312, 28, 36.40, 4, 0.00);INSERT INTO `order_items` VALUES (10312, 43, 36.80, 24, 0.00);INSERT INTO `order_items` VALUES (10312, 53, 26.20, 20, 0.00);INSERT INTO `order_items` VALUES (10312, 75, 6.20, 10, 0.00);INSERT INTO `order_items` VALUES (10313, 36, 15.20, 12, 0.00);INSERT INTO `order_items` VALUES (10314, 32, 25.60, 40, 0.10);INSERT INTO `order_items` VALUES (10314, 58, 10.60, 30, 0.10);INSERT INTO `order_items` VALUES (10314, 62, 39.40, 25, 0.10);INSERT INTO `order_items` VALUES (10315, 34, 11.20, 14, 0.00);INSERT INTO `order_items` VALUES (10315, 70, 12.00, 30, 0.00);INSERT INTO `order_items` VALUES (10316, 41, 7.70, 10, 0.00);INSERT INTO `order_items` VALUES (10316, 62, 39.40, 70, 0.00);INSERT INTO `order_items` VALUES (10317, 1, 14.40, 20, 0.00);INSERT INTO `order_items` VALUES (10318, 41, 7.70, 20, 0.00);INSERT INTO `order_items` VALUES (10318, 76, 14.40, 6, 0.00);INSERT INTO `order_items` VALUES (10319, 17, 31.20, 8, 0.00);INSERT INTO `order_items` VALUES (10319, 28, 36.40, 14, 0.00);INSERT INTO `order_items` VALUES (10319, 76, 14.40, 30, 0.00);INSERT INTO `order_items` VALUES (10320, 71, 17.20, 30, 0.00);INSERT INTO `order_items` VALUES (10321, 35, 14.40, 10, 0.00);INSERT INTO `order_items` VALUES (10322, 52, 5.60, 20, 0.00);INSERT INTO `order_items` VALUES (10323, 15, 12.40, 5, 0.00);INSERT INTO `order_items` VALUES (10323, 25, 11.20, 4, 0.00);INSERT INTO `order_items` VALUES (10323, 39, 14.40, 4, 0.00);INSERT INTO `order_items` VALUES (10324, 16, 13.90, 21, 0.15);INSERT INTO `order_items` VALUES (10324, 35, 14.40, 70, 0.15);INSERT INTO `order_items` VALUES (10324, 46, 9.60, 30, 0.00);INSERT INTO `order_items` VALUES (10324, 59, 44.00, 40, 0.15);INSERT INTO `order_items` VALUES (10324, 63, 35.10, 80, 0.15);INSERT INTO `order_items` VALUES (10325, 6, 20.00, 6, 0.00);INSERT INTO `order_items` VALUES (10325, 13, 4.80, 12, 0.00);INSERT INTO `order_items` VALUES (10325, 14, 18.60, 9, 0.00);INSERT INTO `order_items` VALUES (10325, 31, 10.00, 4, 0.00);INSERT INTO `order_items` VALUES (10325, 72, 27.80, 40, 0.00);INSERT INTO `order_items` VALUES (10326, 4, 17.60, 24, 0.00);INSERT INTO `order_items` VALUES (10326, 57, 15.60, 16, 0.00);INSERT INTO `order_items` VALUES (10326, 75, 6.20, 50, 0.00);INSERT INTO `order_items` VALUES (10327, 2, 15.20, 25, 0.20);INSERT INTO `order_items` VALUES (10327, 11, 16.80, 50, 0.20);INSERT INTO `order_items` VALUES (10327, 30, 20.70, 35, 0.20);INSERT INTO `order_items` VALUES (10327, 58, 10.60, 30, 0.20);INSERT INTO `order_items` VALUES (10328, 59, 44.00, 9, 0.00);INSERT INTO `order_items` VALUES (10328, 65, 16.80, 40, 0.00);INSERT INTO `order_items` VALUES (10328, 68, 10.00, 10, 0.00);INSERT INTO `order_items` VALUES (10329, 19, 7.30, 10, 0.05);INSERT INTO `order_items` VALUES (10329, 30, 20.70, 8, 0.05);INSERT INTO `order_items` VALUES (10329, 38, 210.80, 20, 0.05);INSERT INTO `order_items` VALUES (10329, 56, 30.40, 12, 0.05);INSERT INTO `order_items` VALUES (10330, 26, 24.90, 50, 0.15);INSERT INTO `order_items` VALUES (10330, 72, 27.80, 25, 0.15);INSERT INTO `order_items` VALUES (10331, 54, 5.90, 15, 0.00);INSERT INTO `order_items` VALUES (10332, 18, 50.00, 40, 0.20);INSERT INTO `order_items` VALUES (10332, 42, 11.20, 10, 0.20);INSERT INTO `order_items` VALUES (10332, 47, 7.60, 16, 0.20);INSERT INTO `order_items` VALUES (10333, 14, 18.60, 10, 0.00);INSERT INTO `order_items` VALUES (10333, 21, 8.00, 10, 0.10);INSERT INTO `order_items` VALUES (10333, 71, 17.20, 40, 0.10);INSERT INTO `order_items` VALUES (10334, 52, 5.60, 8, 0.00);INSERT INTO `order_items` VALUES (10334, 68, 10.00, 10, 0.00);INSERT INTO `order_items` VALUES (10335, 2, 15.20, 7, 0.20);INSERT INTO `order_items` VALUES (10335, 31, 10.00, 25, 0.20);INSERT INTO `order_items` VALUES (10335, 32, 25.60, 6, 0.20);INSERT INTO `order_items` VALUES (10335, 51, 42.40, 48, 0.20);INSERT INTO `order_items` VALUES (10336, 4, 17.60, 18, 0.10);INSERT INTO `order_items` VALUES (10337, 23, 7.20, 40, 0.00);INSERT INTO `order_items` VALUES (10337, 26, 24.90, 24, 0.00);INSERT INTO `order_items` VALUES (10337, 36, 15.20, 20, 0.00);INSERT INTO `order_items` VALUES (10337, 37, 20.80, 28, 0.00);INSERT INTO `order_items` VALUES (10337, 72, 27.80, 25, 0.00);INSERT INTO `order_items` VALUES (10338, 17, 31.20, 20, 0.00);INSERT INTO `order_items` VALUES (10338, 30, 20.70, 15, 0.00);INSERT INTO `order_items` VALUES (10339, 4, 17.60, 10, 0.00);INSERT INTO `order_items` VALUES (10339, 17, 31.20, 70, 0.05);INSERT INTO `order_items` VALUES (10339, 62, 39.40, 28, 0.00);INSERT INTO `order_items` VALUES (10340, 18, 50.00, 20, 0.05);INSERT INTO `order_items` VALUES (10340, 41, 7.70, 12, 0.05);INSERT INTO `order_items` VALUES (10340, 43, 36.80, 40, 0.05);INSERT INTO `order_items` VALUES (10341, 33, 2.00, 8, 0.00);INSERT INTO `order_items` VALUES (10341, 59, 44.00, 9, 0.15);INSERT INTO `order_items` VALUES (10342, 2, 15.20, 24, 0.20);INSERT INTO `order_items` VALUES (10342, 31, 10.00, 56, 0.20);INSERT INTO `order_items` VALUES (10342, 36, 15.20, 40, 0.20);INSERT INTO `order_items` VALUES (10342, 55, 19.20, 40, 0.20);INSERT INTO `order_items` VALUES (10343, 64, 26.60, 50, 0.00);INSERT INTO `order_items` VALUES (10343, 68, 10.00, 4, 0.05);INSERT INTO `order_items` VALUES (10343, 76, 14.40, 15, 0.00);INSERT INTO `order_items` VALUES (10344, 4, 17.60, 35, 0.00);INSERT INTO `order_items` VALUES (10344, 8, 32.00, 70, 0.25);INSERT INTO `order_items` VALUES (10345, 8, 32.00, 70, 0.00);INSERT INTO `order_items` VALUES (10345, 19, 7.30, 80, 0.00);INSERT INTO `order_items` VALUES (10345, 42, 11.20, 9, 0.00);INSERT INTO `order_items` VALUES (10346, 17, 31.20, 36, 0.10);INSERT INTO `order_items` VALUES (10346, 56, 30.40, 20, 0.00);INSERT INTO `order_items` VALUES (10347, 25, 11.20, 10, 0.00);INSERT INTO `order_items` VALUES (10347, 39, 14.40, 50, 0.15);INSERT INTO `order_items` VALUES (10347, 40, 14.70, 4, 0.00);INSERT INTO `order_items` VALUES (10347, 75, 6.20, 6, 0.15);INSERT INTO `order_items` VALUES (10348, 1, 14.40, 15, 0.15);INSERT INTO `order_items` VALUES (10348, 23, 7.20, 25, 0.00);INSERT INTO `order_items` VALUES (10349, 54, 5.90, 24, 0.00);INSERT INTO `order_items` VALUES (10350, 50, 13.00, 15, 0.10);INSERT INTO `order_items` VALUES (10350, 69, 28.80, 18, 0.10);INSERT INTO `order_items` VALUES (10351, 38, 210.80, 20, 0.05);INSERT INTO `order_items` VALUES (10351, 41, 7.70, 13, 0.00);INSERT INTO `order_items` VALUES (10351, 44, 15.50, 77, 0.05);INSERT INTO `order_items` VALUES (10351, 65, 16.80, 10, 0.05);INSERT INTO `order_items` VALUES (10352, 24, 3.60, 10, 0.00);INSERT INTO `order_items` VALUES (10352, 54, 5.90, 20, 0.15);INSERT INTO `order_items` VALUES (10353, 11, 16.80, 12, 0.20);INSERT INTO `order_items` VALUES (10353, 38, 210.80, 50, 0.20);INSERT INTO `order_items` VALUES (10354, 1, 14.40, 12, 0.00);INSERT INTO `order_items` VALUES (10354, 29, 99.00, 4, 0.00);INSERT INTO `order_items` VALUES (10355, 24, 3.60, 25, 0.00);INSERT INTO `order_items` VALUES (10355, 57, 15.60, 25, 0.00);INSERT INTO `order_items` VALUES (10356, 31, 10.00, 30, 0.00);INSERT INTO `order_items` VALUES (10356, 55, 19.20, 12, 0.00);INSERT INTO `order_items` VALUES (10356, 69, 28.80, 20, 0.00);INSERT INTO `order_items` VALUES (10357, 10, 24.80, 30, 0.20);INSERT INTO `order_items` VALUES (10357, 26, 24.90, 16, 0.00);INSERT INTO `order_items` VALUES (10357, 60, 27.20, 8, 0.20);INSERT INTO `order_items` VALUES (10358, 24, 3.60, 10, 0.05);INSERT INTO `order_items` VALUES (10358, 34, 11.20, 10, 0.05);INSERT INTO `order_items` VALUES (10358, 36, 15.20, 20, 0.05);INSERT INTO `order_items` VALUES (10359, 16, 13.90, 56, 0.05);INSERT INTO `order_items` VALUES (10359, 31, 10.00, 70, 0.05);INSERT INTO `order_items` VALUES (10359, 60, 27.20, 80, 0.05);INSERT INTO `order_items` VALUES (10360, 28, 36.40, 30, 0.00);INSERT INTO `order_items` VALUES (10360, 29, 99.00, 35, 0.00);INSERT INTO `order_items` VALUES (10360, 38, 210.80, 10, 0.00);INSERT INTO `order_items` VALUES (10360, 49, 16.00, 35, 0.00);INSERT INTO `order_items` VALUES (10360, 54, 5.90, 28, 0.00);INSERT INTO `order_items` VALUES (10361, 39, 14.40, 54, 0.10);INSERT INTO `order_items` VALUES (10361, 60, 27.20, 55, 0.10);INSERT INTO `order_items` VALUES (10362, 25, 11.20, 50, 0.00);INSERT INTO `order_items` VALUES (10362, 51, 42.40, 20, 0.00);INSERT INTO `order_items` VALUES (10362, 54, 5.90, 24, 0.00);INSERT INTO `order_items` VALUES (10363, 31, 10.00, 20, 0.00);INSERT INTO `order_items` VALUES (10363, 75, 6.20, 12, 0.00);INSERT INTO `order_items` VALUES (10363, 76, 14.40, 12, 0.00);INSERT INTO `order_items` VALUES (10364, 69, 28.80, 30, 0.00);INSERT INTO `order_items` VALUES (10364, 71, 17.20, 5, 0.00);INSERT INTO `order_items` VALUES (10365, 11, 16.80, 24, 0.00);INSERT INTO `order_items` VALUES (10366, 65, 16.80, 5, 0.00);INSERT INTO `order_items` VALUES (10366, 77, 10.40, 5, 0.00);INSERT INTO `order_items` VALUES (10367, 34, 11.20, 36, 0.00);INSERT INTO `order_items` VALUES (10367, 54, 5.90, 18, 0.00);INSERT INTO `order_items` VALUES (10367, 65, 16.80, 15, 0.00);INSERT INTO `order_items` VALUES (10367, 77, 10.40, 7, 0.00);INSERT INTO `order_items` VALUES (10368, 21, 8.00, 5, 0.10);INSERT INTO `order_items` VALUES (10368, 28, 36.40, 13, 0.10);INSERT INTO `order_items` VALUES (10368, 57, 15.60, 25, 0.00);INSERT INTO `order_items` VALUES (10368, 64, 26.60, 35, 0.10);INSERT INTO `order_items` VALUES (10369, 29, 99.00, 20, 0.00);INSERT INTO `order_items` VALUES (10369, 56, 30.40, 18, 0.25);INSERT INTO `order_items` VALUES (10370, 1, 14.40, 15, 0.15);INSERT INTO `order_items` VALUES (10370, 64, 26.60, 30, 0.00);INSERT INTO `order_items` VALUES (10370, 74, 8.00, 20, 0.15);INSERT INTO `order_items` VALUES (10371, 36, 15.20, 6, 0.20);INSERT INTO `order_items` VALUES (10372, 20, 64.80, 12, 0.25);INSERT INTO `order_items` VALUES (10372, 38, 210.80, 40, 0.25);INSERT INTO `order_items` VALUES (10372, 60, 27.20, 70, 0.25);INSERT INTO `order_items` VALUES (10372, 72, 27.80, 42, 0.25);INSERT INTO `order_items` VALUES (10373, 58, 10.60, 80, 0.20);INSERT INTO `order_items` VALUES (10373, 71, 17.20, 50, 0.20);INSERT INTO `order_items` VALUES (10374, 31, 10.00, 30, 0.00);INSERT INTO `order_items` VALUES (10374, 58, 10.60, 15, 0.00);INSERT INTO `order_items` VALUES (10375, 14, 18.60, 15, 0.00);INSERT INTO `order_items` VALUES (10375, 54, 5.90, 10, 0.00);INSERT INTO `order_items` VALUES (10376, 31, 10.00, 42, 0.05);INSERT INTO `order_items` VALUES (10377, 28, 36.40, 20, 0.15);INSERT INTO `order_items` VALUES (10377, 39, 14.40, 20, 0.15);INSERT INTO `order_items` VALUES (10378, 71, 17.20, 6, 0.00);INSERT INTO `order_items` VALUES (10379, 41, 7.70, 8, 0.10);INSERT INTO `order_items` VALUES (10379, 63, 35.10, 16, 0.10);INSERT INTO `order_items` VALUES (10379, 65, 16.80, 20, 0.10);INSERT INTO `order_items` VALUES (10380, 30, 20.70, 18, 0.10);INSERT INTO `order_items` VALUES (10380, 53, 26.20, 20, 0.10);INSERT INTO `order_items` VALUES (10380, 60, 27.20, 6, 0.10);INSERT INTO `order_items` VALUES (10380, 70, 12.00, 30, 0.00);INSERT INTO `order_items` VALUES (10381, 74, 8.00, 14, 0.00);INSERT INTO `order_items` VALUES (10382, 5, 17.00, 32, 0.00);INSERT INTO `order_items` VALUES (10382, 18, 50.00, 9, 0.00);INSERT INTO `order_items` VALUES (10382, 29, 99.00, 14, 0.00);INSERT INTO `order_items` VALUES (10382, 33, 2.00, 60, 0.00);INSERT INTO `order_items` VALUES (10382, 74, 8.00, 50, 0.00);INSERT INTO `order_items` VALUES (10383, 13, 4.80, 20, 0.00);INSERT INTO `order_items` VALUES (10383, 50, 13.00, 15, 0.00);INSERT INTO `order_items` VALUES (10383, 56, 30.40, 20, 0.00);INSERT INTO `order_items` VALUES (10384, 20, 64.80, 28, 0.00);INSERT INTO `order_items` VALUES (10384, 60, 27.20, 15, 0.00);INSERT INTO `order_items` VALUES (10385, 7, 24.00, 10, 0.20);INSERT INTO `order_items` VALUES (10385, 60, 27.20, 20, 0.20);INSERT INTO `order_items` VALUES (10385, 68, 10.00, 8, 0.20);INSERT INTO `order_items` VALUES (10386, 24, 3.60, 15, 0.00);INSERT INTO `order_items` VALUES (10386, 34, 11.20, 10, 0.00);INSERT INTO `order_items` VALUES (10387, 24, 3.60, 15, 0.00);INSERT INTO `order_items` VALUES (10387, 28, 36.40, 6, 0.00);INSERT INTO `order_items` VALUES (10387, 59, 44.00, 12, 0.00);INSERT INTO `order_items` VALUES (10387, 71, 17.20, 15, 0.00);INSERT INTO `order_items` VALUES (10388, 45, 7.60, 15, 0.20);INSERT INTO `order_items` VALUES (10388, 52, 5.60, 20, 0.20);INSERT INTO `order_items` VALUES (10388, 53, 26.20, 40, 0.00);INSERT INTO `order_items` VALUES (10389, 10, 24.80, 16, 0.00);INSERT INTO `order_items` VALUES (10389, 55, 19.20, 15, 0.00);INSERT INTO `order_items` VALUES (10389, 62, 39.40, 20, 0.00);INSERT INTO `order_items` VALUES (10389, 70, 12.00, 30, 0.00);INSERT INTO `order_items` VALUES (10390, 31, 10.00, 60, 0.10);INSERT INTO `order_items` VALUES (10390, 35, 14.40, 40, 0.10);INSERT INTO `order_items` VALUES (10390, 46, 9.60, 45, 0.00);INSERT INTO `order_items` VALUES (10390, 72, 27.80, 24, 0.10);INSERT INTO `order_items` VALUES (10391, 13, 4.80, 18, 0.00);INSERT INTO `order_items` VALUES (10392, 69, 28.80, 50, 0.00);INSERT INTO `order_items` VALUES (10393, 2, 15.20, 25, 0.25);INSERT INTO `order_items` VALUES (10393, 14, 18.60, 42, 0.25);INSERT INTO `order_items` VALUES (10393, 25, 11.20, 7, 0.25);INSERT INTO `order_items` VALUES (10393, 26, 24.90, 70, 0.25);INSERT INTO `order_items` VALUES (10393, 31, 10.00, 32, 0.00);INSERT INTO `order_items` VALUES (10394, 13, 4.80, 10, 0.00);INSERT INTO `order_items` VALUES (10394, 62, 39.40, 10, 0.00);INSERT INTO `order_items` VALUES (10395, 46, 9.60, 28, 0.10);INSERT INTO `order_items` VALUES (10395, 53, 26.20, 70, 0.10);INSERT INTO `order_items` VALUES (10395, 69, 28.80, 8, 0.00);INSERT INTO `order_items` VALUES (10396, 23, 7.20, 40, 0.00);INSERT INTO `order_items` VALUES (10396, 71, 17.20, 60, 0.00);INSERT INTO `order_items` VALUES (10396, 72, 27.80, 21, 0.00);INSERT INTO `order_items` VALUES (10397, 21, 8.00, 10, 0.15);INSERT INTO `order_items` VALUES (10397, 51, 42.40, 18, 0.15);INSERT INTO `order_items` VALUES (10398, 35, 14.40, 30, 0.00);INSERT INTO `order_items` VALUES (10398, 55, 19.20, 120, 0.10);INSERT INTO `order_items` VALUES (10399, 68, 10.00, 60, 0.00);INSERT INTO `order_items` VALUES (10399, 71, 17.20, 30, 0.00);INSERT INTO `order_items` VALUES (10399, 76, 14.40, 35, 0.00);INSERT INTO `order_items` VALUES (10399, 77, 10.40, 14, 0.00);INSERT INTO `order_items` VALUES (10400, 29, 99.00, 21, 0.00);INSERT INTO `order_items` VALUES (10400, 35, 14.40, 35, 0.00);INSERT INTO `order_items` VALUES (10400, 49, 16.00, 30, 0.00);INSERT INTO `order_items` VALUES (10401, 30, 20.70, 18, 0.00);INSERT INTO `order_items` VALUES (10401, 56, 30.40, 70, 0.00);INSERT INTO `order_items` VALUES (10401, 65, 16.80, 20, 0.00);INSERT INTO `order_items` VALUES (10401, 71, 17.20, 60, 0.00);INSERT INTO `order_items` VALUES (10402, 23, 7.20, 60, 0.00);INSERT INTO `order_items` VALUES (10402, 63, 35.10, 65, 0.00);INSERT INTO `order_items` VALUES (10403, 16, 13.90, 21, 0.15);INSERT INTO `order_items` VALUES (10403, 48, 10.20, 70, 0.15);INSERT INTO `order_items` VALUES (10404, 26, 24.90, 30, 0.05);INSERT INTO `order_items` VALUES (10404, 42, 11.20, 40, 0.05);INSERT INTO `order_items` VALUES (10404, 49, 16.00, 30, 0.05);INSERT INTO `order_items` VALUES (10405, 3, 8.00, 50, 0.00);INSERT INTO `order_items` VALUES (10406, 1, 14.40, 10, 0.00);INSERT INTO `order_items` VALUES (10406, 21, 8.00, 30, 0.10);INSERT INTO `order_items` VALUES (10406, 28, 36.40, 42, 0.10);INSERT INTO `order_items` VALUES (10406, 36, 15.20, 5, 0.10);INSERT INTO `order_items` VALUES (10406, 40, 14.70, 2, 0.10);INSERT INTO `order_items` VALUES (10407, 11, 16.80, 30, 0.00);INSERT INTO `order_items` VALUES (10407, 69, 28.80, 15, 0.00);INSERT INTO `order_items` VALUES (10407, 71, 17.20, 15, 0.00);INSERT INTO `order_items` VALUES (10408, 37, 20.80, 10, 0.00);INSERT INTO `order_items` VALUES (10408, 54, 5.90, 6, 0.00);INSERT INTO `order_items` VALUES (10408, 62, 39.40, 35, 0.00);INSERT INTO `order_items` VALUES (10409, 14, 18.60, 12, 0.00);INSERT INTO `order_items` VALUES (10409, 21, 8.00, 12, 0.00);INSERT INTO `order_items` VALUES (10410, 33, 2.00, 49, 0.00);INSERT INTO `order_items` VALUES (10410, 59, 44.00, 16, 0.00);INSERT INTO `order_items` VALUES (10411, 41, 7.70, 25, 0.20);INSERT INTO `order_items` VALUES (10411, 44, 15.50, 40, 0.20);INSERT INTO `order_items` VALUES (10411, 59, 44.00, 9, 0.20);INSERT INTO `order_items` VALUES (10412, 14, 18.60, 20, 0.10);INSERT INTO `order_items` VALUES (10413, 1, 14.40, 24, 0.00);INSERT INTO `order_items` VALUES (10413, 62, 39.40, 40, 0.00);INSERT INTO `order_items` VALUES (10413, 76, 14.40, 14, 0.00);INSERT INTO `order_items` VALUES (10414, 19, 7.30, 18, 0.05);INSERT INTO `order_items` VALUES (10414, 33, 2.00, 50, 0.00);INSERT INTO `order_items` VALUES (10415, 17, 31.20, 2, 0.00);INSERT INTO `order_items` VALUES (10415, 33, 2.00, 20, 0.00);INSERT INTO `order_items` VALUES (10416, 19, 7.30, 20, 0.00);INSERT INTO `order_items` VALUES (10416, 53, 26.20, 10, 0.00);INSERT INTO `order_items` VALUES (10416, 57, 15.60, 20, 0.00);INSERT INTO `order_items` VALUES (10417, 38, 210.80, 50, 0.00);INSERT INTO `order_items` VALUES (10417, 46, 9.60, 2, 0.25);INSERT INTO `order_items` VALUES (10417, 68, 10.00, 36, 0.25);INSERT INTO `order_items` VALUES (10417, 77, 10.40, 35, 0.00);INSERT INTO `order_items` VALUES (10418, 2, 15.20, 60, 0.00);INSERT INTO `order_items` VALUES (10418, 47, 7.60, 55, 0.00);INSERT INTO `order_items` VALUES (10418, 61, 22.80, 16, 0.00);INSERT INTO `order_items` VALUES (10418, 74, 8.00, 15, 0.00);INSERT INTO `order_items` VALUES (10419, 60, 27.20, 60, 0.05);INSERT INTO `order_items` VALUES (10419, 69, 28.80, 20, 0.05);INSERT INTO `order_items` VALUES (10420, 9, 77.60, 20, 0.10);INSERT INTO `order_items` VALUES (10420, 13, 4.80, 2, 0.10);INSERT INTO `order_items` VALUES (10420, 70, 12.00, 8, 0.10);INSERT INTO `order_items` VALUES (10420, 73, 12.00, 20, 0.10);INSERT INTO `order_items` VALUES (10421, 19, 7.30, 4, 0.15);INSERT INTO `order_items` VALUES (10421, 26, 24.90, 30, 0.00);INSERT INTO `order_items` VALUES (10421, 53, 26.20, 15, 0.15);INSERT INTO `order_items` VALUES (10421, 77, 10.40, 10, 0.15);INSERT INTO `order_items` VALUES (10422, 26, 24.90, 2, 0.00);INSERT INTO `order_items` VALUES (10423, 31, 10.00, 14, 0.00);INSERT INTO `order_items` VALUES (10423, 59, 44.00, 20, 0.00);INSERT INTO `order_items` VALUES (10424, 35, 14.40, 60, 0.20);INSERT INTO `order_items` VALUES (10424, 38, 210.80, 49, 0.20);INSERT INTO `order_items` VALUES (10424, 68, 10.00, 30, 0.20);INSERT INTO `order_items` VALUES (10425, 55, 19.20, 10, 0.25);INSERT INTO `order_items` VALUES (10425, 76, 14.40, 20, 0.25);INSERT INTO `order_items` VALUES (10426, 56, 30.40, 5, 0.00);INSERT INTO `order_items` VALUES (10426, 64, 26.60, 7, 0.00);INSERT INTO `order_items` VALUES (10427, 14, 18.60, 35, 0.00);INSERT INTO `order_items` VALUES (10428, 46, 9.60, 20, 0.00);INSERT INTO `order_items` VALUES (10429, 50, 13.00, 40, 0.00);INSERT INTO `order_items` VALUES (10429, 63, 35.10, 35, 0.25);INSERT INTO `order_items` VALUES (10430, 17, 31.20, 45, 0.20);INSERT INTO `order_items` VALUES (10430, 21, 8.00, 50, 0.00);INSERT INTO `order_items` VALUES (10430, 56, 30.40, 30, 0.00);INSERT INTO `order_items` VALUES (10430, 59, 44.00, 70, 0.20);INSERT INTO `order_items` VALUES (10431, 17, 31.20, 50, 0.25);INSERT INTO `order_items` VALUES (10431, 40, 14.70, 50, 0.25);INSERT INTO `order_items` VALUES (10431, 47, 7.60, 30, 0.25);INSERT INTO `order_items` VALUES (10432, 26, 24.90, 10, 0.00);INSERT INTO `order_items` VALUES (10432, 54, 5.90, 40, 0.00);INSERT INTO `order_items` VALUES (10433, 56, 30.40, 28, 0.00);INSERT INTO `order_items` VALUES (10434, 11, 16.80, 6, 0.00);INSERT INTO `order_items` VALUES (10434, 76, 14.40, 18, 0.15);INSERT INTO `order_items` VALUES (10435, 2, 15.20, 10, 0.00);INSERT INTO `order_items` VALUES (10435, 22, 16.80, 12, 0.00);INSERT INTO `order_items` VALUES (10435, 72, 27.80, 10, 0.00);INSERT INTO `order_items` VALUES (10436, 46, 9.60, 5, 0.00);INSERT INTO `order_items` VALUES (10436, 56, 30.40, 40, 0.10);INSERT INTO `order_items` VALUES (10436, 64, 26.60, 30, 0.10);INSERT INTO `order_items` VALUES (10436, 75, 6.20, 24, 0.10);INSERT INTO `order_items` VALUES (10437, 53, 26.20, 15, 0.00);INSERT INTO `order_items` VALUES (10438, 19, 7.30, 15, 0.20);INSERT INTO `order_items` VALUES (10438, 34, 11.20, 20, 0.20);INSERT INTO `order_items` VALUES (10438, 57, 15.60, 15, 0.20);INSERT INTO `order_items` VALUES (10439, 12, 30.40, 15, 0.00);INSERT INTO `order_items` VALUES (10439, 16, 13.90, 16, 0.00);INSERT INTO `order_items` VALUES (10439, 64, 26.60, 6, 0.00);INSERT INTO `order_items` VALUES (10439, 74, 8.00, 30, 0.00);INSERT INTO `order_items` VALUES (10440, 2, 15.20, 45, 0.15);INSERT INTO `order_items` VALUES (10440, 16, 13.90, 49, 0.15);INSERT INTO `order_items` VALUES (10440, 29, 99.00, 24, 0.15);INSERT INTO `order_items` VALUES (10440, 61, 22.80, 90, 0.15);INSERT INTO `order_items` VALUES (10441, 27, 35.10, 50, 0.00);INSERT INTO `order_items` VALUES (10442, 11, 16.80, 30, 0.00);INSERT INTO `order_items` VALUES (10442, 54, 5.90, 80, 0.00);INSERT INTO `order_items` VALUES (10442, 66, 13.60, 60, 0.00);INSERT INTO `order_items` VALUES (10443, 11, 16.80, 6, 0.20);INSERT INTO `order_items` VALUES (10443, 28, 36.40, 12, 0.00);INSERT INTO `order_items` VALUES (10444, 17, 31.20, 10, 0.00);INSERT INTO `order_items` VALUES (10444, 26, 24.90, 15, 0.00);INSERT INTO `order_items` VALUES (10444, 35, 14.40, 8, 0.00);INSERT INTO `order_items` VALUES (10444, 41, 7.70, 30, 0.00);INSERT INTO `order_items` VALUES (10445, 39, 14.40, 6, 0.00);INSERT INTO `order_items` VALUES (10445, 54, 5.90, 15, 0.00);INSERT INTO `order_items` VALUES (10446, 19, 7.30, 12, 0.10);INSERT INTO `order_items` VALUES (10446, 24, 3.60, 20, 0.10);INSERT INTO `order_items` VALUES (10446, 31, 10.00, 3, 0.10);INSERT INTO `order_items` VALUES (10446, 52, 5.60, 15, 0.10);INSERT INTO `order_items` VALUES (10447, 19, 7.30, 40, 0.00);INSERT INTO `order_items` VALUES (10447, 65, 16.80, 35, 0.00);INSERT INTO `order_items` VALUES (10447, 71, 17.20, 2, 0.00);INSERT INTO `order_items` VALUES (10448, 26, 24.90, 6, 0.00);INSERT INTO `order_items` VALUES (10448, 40, 14.70, 20, 0.00);INSERT INTO `order_items` VALUES (10449, 10, 24.80, 14, 0.00);INSERT INTO `order_items` VALUES (10449, 52, 5.60, 20, 0.00);INSERT INTO `order_items` VALUES (10449, 62, 39.40, 35, 0.00);INSERT INTO `order_items` VALUES (10450, 10, 24.80, 20, 0.20);INSERT INTO `order_items` VALUES (10450, 54, 5.90, 6, 0.20);INSERT INTO `order_items` VALUES (10451, 55, 19.20, 120, 0.10);INSERT INTO `order_items` VALUES (10451, 64, 26.60, 35, 0.10);INSERT INTO `order_items` VALUES (10451, 65, 16.80, 28, 0.10);INSERT INTO `order_items` VALUES (10451, 77, 10.40, 55, 0.10);INSERT INTO `order_items` VALUES (10452, 28, 36.40, 15, 0.00);INSERT INTO `order_items` VALUES (10452, 44, 15.50, 100, 0.05);INSERT INTO `order_items` VALUES (10453, 48, 10.20, 15, 0.10);INSERT INTO `order_items` VALUES (10453, 70, 12.00, 25, 0.10);INSERT INTO `order_items` VALUES (10454, 16, 13.90, 20, 0.20);INSERT INTO `order_items` VALUES (10454, 33, 2.00, 20, 0.20);INSERT INTO `order_items` VALUES (10454, 46, 9.60, 10, 0.20);INSERT INTO `order_items` VALUES (10455, 39, 14.40, 20, 0.00);INSERT INTO `order_items` VALUES (10455, 53, 26.20, 50, 0.00);INSERT INTO `order_items` VALUES (10455, 61, 22.80, 25, 0.00);INSERT INTO `order_items` VALUES (10455, 71, 17.20, 30, 0.00);INSERT INTO `order_items` VALUES (10456, 21, 8.00, 40, 0.15);INSERT INTO `order_items` VALUES (10456, 49, 16.00, 21, 0.15);INSERT INTO `order_items` VALUES (10457, 59, 44.00, 36, 0.00);INSERT INTO `order_items` VALUES (10458, 26, 24.90, 30, 0.00);INSERT INTO `order_items` VALUES (10458, 28, 36.40, 30, 0.00);INSERT INTO `order_items` VALUES (10458, 43, 36.80, 20, 0.00);INSERT INTO `order_items` VALUES (10458, 56, 30.40, 15, 0.00);INSERT INTO `order_items` VALUES (10458, 71, 17.20, 50, 0.00);INSERT INTO `order_items` VALUES (10459, 7, 24.00, 16, 0.05);INSERT INTO `order_items` VALUES (10459, 46, 9.60, 20, 0.05);INSERT INTO `order_items` VALUES (10459, 72, 27.80, 40, 0.00);INSERT INTO `order_items` VALUES (10460, 68, 10.00, 21, 0.25);INSERT INTO `order_items` VALUES (10460, 75, 6.20, 4, 0.25);INSERT INTO `order_items` VALUES (10461, 21, 8.00, 40, 0.25);INSERT INTO `order_items` VALUES (10461, 30, 20.70, 28, 0.25);INSERT INTO `order_items` VALUES (10461, 55, 19.20, 60, 0.25);INSERT INTO `order_items` VALUES (10462, 13, 4.80, 1, 0.00);INSERT INTO `order_items` VALUES (10462, 23, 7.20, 21, 0.00);INSERT INTO `order_items` VALUES (10463, 19, 7.30, 21, 0.00);INSERT INTO `order_items` VALUES (10463, 42, 11.20, 50, 0.00);INSERT INTO `order_items` VALUES (10464, 4, 17.60, 16, 0.20);INSERT INTO `order_items` VALUES (10464, 43, 36.80, 3, 0.00);INSERT INTO `order_items` VALUES (10464, 56, 30.40, 30, 0.20);INSERT INTO `order_items` VALUES (10464, 60, 27.20, 20, 0.00);INSERT INTO `order_items` VALUES (10465, 24, 3.60, 25, 0.00);INSERT INTO `order_items` VALUES (10465, 29, 99.00, 18, 0.10);INSERT INTO `order_items` VALUES (10465, 40, 14.70, 20, 0.00);INSERT INTO `order_items` VALUES (10465, 45, 7.60, 30, 0.10);INSERT INTO `order_items` VALUES (10465, 50, 13.00, 25, 0.00);INSERT INTO `order_items` VALUES (10466, 11, 16.80, 10, 0.00);INSERT INTO `order_items` VALUES (10466, 46, 9.60, 5, 0.00);INSERT INTO `order_items` VALUES (10467, 24, 3.60, 28, 0.00);INSERT INTO `order_items` VALUES (10467, 25, 11.20, 12, 0.00);INSERT INTO `order_items` VALUES (10468, 30, 20.70, 8, 0.00);INSERT INTO `order_items` VALUES (10468, 43, 36.80, 15, 0.00);INSERT INTO `order_items` VALUES (10469, 2, 15.20, 40, 0.15);INSERT INTO `order_items` VALUES (10469, 16, 13.90, 35, 0.15);INSERT INTO `order_items` VALUES (10469, 44, 15.50, 2, 0.15);INSERT INTO `order_items` VALUES (10470, 18, 50.00, 30, 0.00);INSERT INTO `order_items` VALUES (10470, 23, 7.20, 15, 0.00);INSERT INTO `order_items` VALUES (10470, 64, 26.60, 8, 0.00);INSERT INTO `order_items` VALUES (10471, 7, 24.00, 30, 0.00);INSERT INTO `order_items` VALUES (10471, 56, 30.40, 20, 0.00);INSERT INTO `order_items` VALUES (10472, 24, 3.60, 80, 0.05);INSERT INTO `order_items` VALUES (10472, 51, 42.40, 18, 0.00);INSERT INTO `order_items` VALUES (10473, 33, 2.00, 12, 0.00);INSERT INTO `order_items` VALUES (10473, 71, 17.20, 12, 0.00);INSERT INTO `order_items` VALUES (10474, 14, 18.60, 12, 0.00);INSERT INTO `order_items` VALUES (10474, 28, 36.40, 18, 0.00);INSERT INTO `order_items` VALUES (10474, 40, 14.70, 21, 0.00);INSERT INTO `order_items` VALUES (10474, 75, 6.20, 10, 0.00);INSERT INTO `order_items` VALUES (10475, 31, 10.00, 35, 0.15);INSERT INTO `order_items` VALUES (10475, 66, 13.60, 60, 0.15);INSERT INTO `order_items` VALUES (10475, 76, 14.40, 42, 0.15);INSERT INTO `order_items` VALUES (10476, 55, 19.20, 2, 0.05);INSERT INTO `order_items` VALUES (10476, 70, 12.00, 12, 0.00);INSERT INTO `order_items` VALUES (10477, 1, 14.40, 15, 0.00);INSERT INTO `order_items` VALUES (10477, 21, 8.00, 21, 0.25);INSERT INTO `order_items` VALUES (10477, 39, 14.40, 20, 0.25);INSERT INTO `order_items` VALUES (10478, 10, 24.80, 20, 0.05);INSERT INTO `order_items` VALUES (10479, 38, 210.80, 30, 0.00);INSERT INTO `order_items` VALUES (10479, 53, 26.20, 28, 0.00);INSERT INTO `order_items` VALUES (10479, 59, 44.00, 60, 0.00);INSERT INTO `order_items` VALUES (10479, 64, 26.60, 30, 0.00);INSERT INTO `order_items` VALUES (10480, 47, 7.60, 30, 0.00);INSERT INTO `order_items` VALUES (10480, 59, 44.00, 12, 0.00);INSERT INTO `order_items` VALUES (10481, 49, 16.00, 24, 0.00);INSERT INTO `order_items` VALUES (10481, 60, 27.20, 40, 0.00);INSERT INTO `order_items` VALUES (10482, 40, 14.70, 10, 0.00);INSERT INTO `order_items` VALUES (10483, 34, 11.20, 35, 0.05);INSERT INTO `order_items` VALUES (10483, 77, 10.40, 30, 0.05);INSERT INTO `order_items` VALUES (10484, 21, 8.00, 14, 0.00);INSERT INTO `order_items` VALUES (10484, 40, 14.70, 10, 0.00);INSERT INTO `order_items` VALUES (10484, 51, 42.40, 3, 0.00);INSERT INTO `order_items` VALUES (10485, 2, 15.20, 20, 0.10);INSERT INTO `order_items` VALUES (10485, 3, 8.00, 20, 0.10);INSERT INTO `order_items` VALUES (10485, 55, 19.20, 30, 0.10);INSERT INTO `order_items` VALUES (10485, 70, 12.00, 60, 0.10);INSERT INTO `order_items` VALUES (10486, 11, 16.80, 5, 0.00);INSERT INTO `order_items` VALUES (10486, 51, 42.40, 25, 0.00);INSERT INTO `order_items` VALUES (10486, 74, 8.00, 16, 0.00);INSERT INTO `order_items` VALUES (10487, 19, 7.30, 5, 0.00);INSERT INTO `order_items` VALUES (10487, 26, 24.90, 30, 0.00);INSERT INTO `order_items` VALUES (10487, 54, 5.90, 24, 0.25);INSERT INTO `order_items` VALUES (10488, 59, 44.00, 30, 0.00);INSERT INTO `order_items` VALUES (10488, 73, 12.00, 20, 0.20);INSERT INTO `order_items` VALUES (10489, 11, 16.80, 15, 0.25);INSERT INTO `order_items` VALUES (10489, 16, 13.90, 18, 0.00);INSERT INTO `order_items` VALUES (10490, 59, 44.00, 60, 0.00);INSERT INTO `order_items` VALUES (10490, 68, 10.00, 30, 0.00);INSERT INTO `order_items` VALUES (10490, 75, 6.20, 36, 0.00);INSERT INTO `order_items` VALUES (10491, 44, 15.50, 15, 0.15);INSERT INTO `order_items` VALUES (10491, 77, 10.40, 7, 0.15);INSERT INTO `order_items` VALUES (10492, 25, 11.20, 60, 0.05);INSERT INTO `order_items` VALUES (10492, 42, 11.20, 20, 0.05);INSERT INTO `order_items` VALUES (10493, 65, 16.80, 15, 0.10);INSERT INTO `order_items` VALUES (10493, 66, 13.60, 10, 0.10);INSERT INTO `order_items` VALUES (10493, 69, 28.80, 10, 0.10);INSERT INTO `order_items` VALUES (10494, 56, 30.40, 30, 0.00);INSERT INTO `order_items` VALUES (10495, 23, 7.20, 10, 0.00);INSERT INTO `order_items` VALUES (10495, 41, 7.70, 20, 0.00);INSERT INTO `order_items` VALUES (10495, 77, 10.40, 5, 0.00);INSERT INTO `order_items` VALUES (10496, 31, 10.00, 20, 0.05);INSERT INTO `order_items` VALUES (10497, 56, 30.40, 14, 0.00);INSERT INTO `order_items` VALUES (10497, 72, 27.80, 25, 0.00);INSERT INTO `order_items` VALUES (10497, 77, 10.40, 25, 0.00);INSERT INTO `order_items` VALUES (10498, 24, 4.50, 14, 0.00);INSERT INTO `order_items` VALUES (10498, 40, 18.40, 5, 0.00);INSERT INTO `order_items` VALUES (10498, 42, 14.00, 30, 0.00);INSERT INTO `order_items` VALUES (10499, 28, 45.60, 20, 0.00);INSERT INTO `order_items` VALUES (10499, 49, 20.00, 25, 0.00);INSERT INTO `order_items` VALUES (10500, 15, 15.50, 12, 0.05);INSERT INTO `order_items` VALUES (10500, 28, 45.60, 8, 0.05);INSERT INTO `order_items` VALUES (10501, 54, 7.45, 20, 0.00);INSERT INTO `order_items` VALUES (10502, 45, 9.50, 21, 0.00);INSERT INTO `order_items` VALUES (10502, 53, 32.80, 6, 0.00);INSERT INTO `order_items` VALUES (10502, 67, 14.00, 30, 0.00);INSERT INTO `order_items` VALUES (10503, 14, 23.25, 70, 0.00);INSERT INTO `order_items` VALUES (10503, 65, 21.05, 20, 0.00);INSERT INTO `order_items` VALUES (10504, 2, 19.00, 12, 0.00);INSERT INTO `order_items` VALUES (10504, 21, 10.00, 12, 0.00);INSERT INTO `order_items` VALUES (10504, 53, 32.80, 10, 0.00);INSERT INTO `order_items` VALUES (10504, 61, 28.50, 25, 0.00);INSERT INTO `order_items` VALUES (10505, 62, 49.30, 3, 0.00);INSERT INTO `order_items` VALUES (10506, 25, 14.00, 18, 0.10);INSERT INTO `order_items` VALUES (10506, 70, 15.00, 14, 0.10);INSERT INTO `order_items` VALUES (10507, 43, 46.00, 15, 0.15);INSERT INTO `order_items` VALUES (10507, 48, 12.75, 15, 0.15);INSERT INTO `order_items` VALUES (10508, 13, 6.00, 10, 0.00);INSERT INTO `order_items` VALUES (10508, 39, 18.00, 10, 0.00);INSERT INTO `order_items` VALUES (10509, 28, 45.60, 3, 0.00);INSERT INTO `order_items` VALUES (10510, 29, 123.79, 36, 0.00);INSERT INTO `order_items` VALUES (10510, 75, 7.75, 36, 0.10);INSERT INTO `order_items` VALUES (10511, 4, 22.00, 50, 0.15);INSERT INTO `order_items` VALUES (10511, 7, 30.00, 50, 0.15);INSERT INTO `order_items` VALUES (10511, 8, 40.00, 10, 0.15);INSERT INTO `order_items` VALUES (10512, 24, 4.50, 10, 0.15);INSERT INTO `order_items` VALUES (10512, 46, 12.00, 9, 0.15);INSERT INTO `order_items` VALUES (10512, 47, 9.50, 6, 0.15);INSERT INTO `order_items` VALUES (10512, 60, 34.00, 12, 0.15);INSERT INTO `order_items` VALUES (10513, 21, 10.00, 40, 0.20);INSERT INTO `order_items` VALUES (10513, 32, 32.00, 50, 0.20);INSERT INTO `order_items` VALUES (10513, 61, 28.50, 15, 0.20);INSERT INTO `order_items` VALUES (10514, 20, 81.00, 39, 0.00);INSERT INTO `order_items` VALUES (10514, 28, 45.60, 35, 0.00);INSERT INTO `order_items` VALUES (10514, 56, 38.00, 70, 0.00);INSERT INTO `order_items` VALUES (10514, 65, 21.05, 39, 0.00);INSERT INTO `order_items` VALUES (10514, 75, 7.75, 50, 0.00);INSERT INTO `order_items` VALUES (10515, 9, 97.00, 16, 0.15);INSERT INTO `order_items` VALUES (10515, 16, 17.45, 50, 0.00);INSERT INTO `order_items` VALUES (10515, 27, 43.90, 120, 0.00);INSERT INTO `order_items` VALUES (10515, 33, 2.50, 16, 0.15);INSERT INTO `order_items` VALUES (10515, 60, 34.00, 84, 0.15);INSERT INTO `order_items` VALUES (10516, 18, 62.50, 25, 0.10);INSERT INTO `order_items` VALUES (10516, 41, 9.65, 80, 0.10);INSERT INTO `order_items` VALUES (10516, 42, 14.00, 20, 0.00);INSERT INTO `order_items` VALUES (10517, 52, 7.00, 6, 0.00);INSERT INTO `order_items` VALUES (10517, 59, 55.00, 4, 0.00);INSERT INTO `order_items` VALUES (10517, 70, 15.00, 6, 0.00);INSERT INTO `order_items` VALUES (10518, 24, 4.50, 5, 0.00);INSERT INTO `order_items` VALUES (10518, 38, 263.50, 15, 0.00);INSERT INTO `order_items` VALUES (10518, 44, 19.45, 9, 0.00);INSERT INTO `order_items` VALUES (10519, 10, 31.00, 16, 0.05);INSERT INTO `order_items` VALUES (10519, 56, 38.00, 40, 0.00);INSERT INTO `order_items` VALUES (10519, 60, 34.00, 10, 0.05);INSERT INTO `order_items` VALUES (10520, 24, 4.50, 8, 0.00);INSERT INTO `order_items` VALUES (10520, 53, 32.80, 5, 0.00);INSERT INTO `order_items` VALUES (10521, 35, 18.00, 3, 0.00);INSERT INTO `order_items` VALUES (10521, 41, 9.65, 10, 0.00);INSERT INTO `order_items` VALUES (10521, 68, 12.50, 6, 0.00);INSERT INTO `order_items` VALUES (10522, 1, 18.00, 40, 0.20);INSERT INTO `order_items` VALUES (10522, 8, 40.00, 24, 0.00);INSERT INTO `order_items` VALUES (10522, 30, 25.89, 20, 0.20);INSERT INTO `order_items` VALUES (10522, 40, 18.40, 25, 0.20);INSERT INTO `order_items` VALUES (10523, 17, 39.00, 25, 0.10);INSERT INTO `order_items` VALUES (10523, 20, 81.00, 15, 0.10);INSERT INTO `order_items` VALUES (10523, 37, 26.00, 18, 0.10);INSERT INTO `order_items` VALUES (10523, 41, 9.65, 6, 0.10);INSERT INTO `order_items` VALUES (10524, 10, 31.00, 2, 0.00);INSERT INTO `order_items` VALUES (10524, 30, 25.89, 10, 0.00);INSERT INTO `order_items` VALUES (10524, 43, 46.00, 60, 0.00);INSERT INTO `order_items` VALUES (10524, 54, 7.45, 15, 0.00);INSERT INTO `order_items` VALUES (10525, 36, 19.00, 30, 0.00);INSERT INTO `order_items` VALUES (10525, 40, 18.40, 15, 0.10);INSERT INTO `order_items` VALUES (10526, 1, 18.00, 8, 0.15);INSERT INTO `order_items` VALUES (10526, 13, 6.00, 10, 0.00);INSERT INTO `order_items` VALUES (10526, 56, 38.00, 30, 0.15);INSERT INTO `order_items` VALUES (10527, 4, 22.00, 50, 0.10);INSERT INTO `order_items` VALUES (10527, 36, 19.00, 30, 0.10);INSERT INTO `order_items` VALUES (10528, 11, 21.00, 3, 0.00);INSERT INTO `order_items` VALUES (10528, 33, 2.50, 8, 0.20);INSERT INTO `order_items` VALUES (10528, 72, 34.80, 9, 0.00);INSERT INTO `order_items` VALUES (10529, 55, 24.00, 14, 0.00);INSERT INTO `order_items` VALUES (10529, 68, 12.50, 20, 0.00);INSERT INTO `order_items` VALUES (10529, 69, 36.00, 10, 0.00);INSERT INTO `order_items` VALUES (10530, 17, 39.00, 40, 0.00);INSERT INTO `order_items` VALUES (10530, 43, 46.00, 25, 0.00);INSERT INTO `order_items` VALUES (10530, 61, 28.50, 20, 0.00);INSERT INTO `order_items` VALUES (10530, 76, 18.00, 50, 0.00);INSERT INTO `order_items` VALUES (10531, 59, 55.00, 2, 0.00);INSERT INTO `order_items` VALUES (10532, 30, 25.89, 15, 0.00);INSERT INTO `order_items` VALUES (10532, 66, 17.00, 24, 0.00);INSERT INTO `order_items` VALUES (10533, 4, 22.00, 50, 0.05);INSERT INTO `order_items` VALUES (10533, 72, 34.80, 24, 0.00);INSERT INTO `order_items` VALUES (10533, 73, 15.00, 24, 0.05);INSERT INTO `order_items` VALUES (10534, 30, 25.89, 10, 0.00);INSERT INTO `order_items` VALUES (10534, 40, 18.40, 10, 0.20);INSERT INTO `order_items` VALUES (10534, 54, 7.45, 10, 0.20);INSERT INTO `order_items` VALUES (10535, 11, 21.00, 50, 0.10);INSERT INTO `order_items` VALUES (10535, 40, 18.40, 10, 0.10);INSERT INTO `order_items` VALUES (10535, 57, 19.50, 5, 0.10);INSERT INTO `order_items` VALUES (10535, 59, 55.00, 15, 0.10);INSERT INTO `order_items` VALUES (10536, 12, 38.00, 15, 0.25);INSERT INTO `order_items` VALUES (10536, 31, 12.50, 20, 0.00);INSERT INTO `order_items` VALUES (10536, 33, 2.50, 30, 0.00);INSERT INTO `order_items` VALUES (10536, 60, 34.00, 35, 0.25);INSERT INTO `order_items` VALUES (10537, 31, 12.50, 30, 0.00);INSERT INTO `order_items` VALUES (10537, 51, 53.00, 6, 0.00);INSERT INTO `order_items` VALUES (10537, 58, 13.25, 20, 0.00);INSERT INTO `order_items` VALUES (10537, 72, 34.80, 21, 0.00);INSERT INTO `order_items` VALUES (10537, 73, 15.00, 9, 0.00);INSERT INTO `order_items` VALUES (10538, 70, 15.00, 7, 0.00);INSERT INTO `order_items` VALUES (10538, 72, 34.80, 1, 0.00);INSERT INTO `order_items` VALUES (10539, 13, 6.00, 8, 0.00);INSERT INTO `order_items` VALUES (10539, 21, 10.00, 15, 0.00);INSERT INTO `order_items` VALUES (10539, 33, 2.50, 15, 0.00);INSERT INTO `order_items` VALUES (10539, 49, 20.00, 6, 0.00);INSERT INTO `order_items` VALUES (10540, 3, 10.00, 60, 0.00);INSERT INTO `order_items` VALUES (10540, 26, 31.23, 40, 0.00);INSERT INTO `order_items` VALUES (10540, 38, 263.50, 30, 0.00);INSERT INTO `order_items` VALUES (10540, 68, 12.50, 35, 0.00);INSERT INTO `order_items` VALUES (10541, 24, 4.50, 35, 0.10);INSERT INTO `order_items` VALUES (10541, 38, 263.50, 4, 0.10);INSERT INTO `order_items` VALUES (10541, 65, 21.05, 36, 0.10);INSERT INTO `order_items` VALUES (10541, 71, 21.50, 9, 0.10);INSERT INTO `order_items` VALUES (10542, 11, 21.00, 15, 0.05);INSERT INTO `order_items` VALUES (10542, 54, 7.45, 24, 0.05);INSERT INTO `order_items` VALUES (10543, 12, 38.00, 30, 0.15);INSERT INTO `order_items` VALUES (10543, 23, 9.00, 70, 0.15);INSERT INTO `order_items` VALUES (10544, 28, 45.60, 7, 0.00);INSERT INTO `order_items` VALUES (10544, 67, 14.00, 7, 0.00);INSERT INTO `order_items` VALUES (10545, 11, 21.00, 10, 0.00);INSERT INTO `order_items` VALUES (10546, 7, 30.00, 10, 0.00);INSERT INTO `order_items` VALUES (10546, 35, 18.00, 30, 0.00);INSERT INTO `order_items` VALUES (10546, 62, 49.30, 40, 0.00);INSERT INTO `order_items` VALUES (10547, 32, 32.00, 24, 0.15);INSERT INTO `order_items` VALUES (10547, 36, 19.00, 60, 0.00);INSERT INTO `order_items` VALUES (10548, 34, 14.00, 10, 0.25);INSERT INTO `order_items` VALUES (10548, 41, 9.65, 14, 0.00);INSERT INTO `order_items` VALUES (10549, 31, 12.50, 55, 0.15);INSERT INTO `order_items` VALUES (10549, 45, 9.50, 100, 0.15);INSERT INTO `order_items` VALUES (10549, 51, 53.00, 48, 0.15);INSERT INTO `order_items` VALUES (10550, 17, 39.00, 8, 0.10);INSERT INTO `order_items` VALUES (10550, 19, 9.20, 10, 0.00);INSERT INTO `order_items` VALUES (10550, 21, 10.00, 6, 0.10);INSERT INTO `order_items` VALUES (10550, 61, 28.50, 10, 0.10);INSERT INTO `order_items` VALUES (10551, 16, 17.45, 40, 0.15);INSERT INTO `order_items` VALUES (10551, 35, 18.00, 20, 0.15);INSERT INTO `order_items` VALUES (10551, 44, 19.45, 40, 0.00);INSERT INTO `order_items` VALUES (10552, 69, 36.00, 18, 0.00);INSERT INTO `order_items` VALUES (10552, 75, 7.75, 30, 0.00);INSERT INTO `order_items` VALUES (10553, 11, 21.00, 15, 0.00);INSERT INTO `order_items` VALUES (10553, 16, 17.45, 14, 0.00);INSERT INTO `order_items` VALUES (10553, 22, 21.00, 24, 0.00);INSERT INTO `order_items` VALUES (10553, 31, 12.50, 30, 0.00);INSERT INTO `order_items` VALUES (10553, 35, 18.00, 6, 0.00);INSERT INTO `order_items` VALUES (10554, 16, 17.45, 30, 0.05);INSERT INTO `order_items` VALUES (10554, 23, 9.00, 20, 0.05);INSERT INTO `order_items` VALUES (10554, 62, 49.30, 20, 0.05);INSERT INTO `order_items` VALUES (10554, 77, 13.00, 10, 0.05);INSERT INTO `order_items` VALUES (10555, 14, 23.25, 30, 0.20);INSERT INTO `order_items` VALUES (10555, 19, 9.20, 35, 0.20);INSERT INTO `order_items` VALUES (10555, 24, 4.50, 18, 0.20);INSERT INTO `order_items` VALUES (10555, 51, 53.00, 20, 0.20);INSERT INTO `order_items` VALUES (10555, 56, 38.00, 40, 0.20);INSERT INTO `order_items` VALUES (10556, 72, 34.80, 24, 0.00);INSERT INTO `order_items` VALUES (10557, 64, 33.25, 30, 0.00);INSERT INTO `order_items` VALUES (10557, 75, 7.75, 20, 0.00);INSERT INTO `order_items` VALUES (10558, 47, 9.50, 25, 0.00);INSERT INTO `order_items` VALUES (10558, 51, 53.00, 20, 0.00);INSERT INTO `order_items` VALUES (10558, 52, 7.00, 30, 0.00);INSERT INTO `order_items` VALUES (10558, 53, 32.80, 18, 0.00);INSERT INTO `order_items` VALUES (10558, 73, 15.00, 3, 0.00);INSERT INTO `order_items` VALUES (10559, 41, 9.65, 12, 0.05);INSERT INTO `order_items` VALUES (10559, 55, 24.00, 18, 0.05);INSERT INTO `order_items` VALUES (10560, 30, 25.89, 20, 0.00);INSERT INTO `order_items` VALUES (10560, 62, 49.30, 15, 0.25);INSERT INTO `order_items` VALUES (10561, 44, 19.45, 10, 0.00);INSERT INTO `order_items` VALUES (10561, 51, 53.00, 50, 0.00);INSERT INTO `order_items` VALUES (10562, 33, 2.50, 20, 0.10);INSERT INTO `order_items` VALUES (10562, 62, 49.30, 10, 0.10);INSERT INTO `order_items` VALUES (10563, 36, 19.00, 25, 0.00);INSERT INTO `order_items` VALUES (10563, 52, 7.00, 70, 0.00);INSERT INTO `order_items` VALUES (10564, 17, 39.00, 16, 0.05);INSERT INTO `order_items` VALUES (10564, 31, 12.50, 6, 0.05);INSERT INTO `order_items` VALUES (10564, 55, 24.00, 25, 0.05);INSERT INTO `order_items` VALUES (10565, 24, 4.50, 25, 0.10);INSERT INTO `order_items` VALUES (10565, 64, 33.25, 18, 0.10);INSERT INTO `order_items` VALUES (10566, 11, 21.00, 35, 0.15);INSERT INTO `order_items` VALUES (10566, 18, 62.50, 18, 0.15);INSERT INTO `order_items` VALUES (10566, 76, 18.00, 10, 0.00);INSERT INTO `order_items` VALUES (10567, 31, 12.50, 60, 0.20);INSERT INTO `order_items` VALUES (10567, 51, 53.00, 3, 0.00);INSERT INTO `order_items` VALUES (10567, 59, 55.00, 40, 0.20);INSERT INTO `order_items` VALUES (10568, 10, 31.00, 5, 0.00);INSERT INTO `order_items` VALUES (10569, 31, 12.50, 35, 0.20);INSERT INTO `order_items` VALUES (10569, 76, 18.00, 30, 0.00);INSERT INTO `order_items` VALUES (10570, 11, 21.00, 15, 0.05);INSERT INTO `order_items` VALUES (10570, 56, 38.00, 60, 0.05);INSERT INTO `order_items` VALUES (10571, 14, 23.25, 11, 0.15);INSERT INTO `order_items` VALUES (10571, 42, 14.00, 28, 0.15);INSERT INTO `order_items` VALUES (10572, 16, 17.45, 12, 0.10);INSERT INTO `order_items` VALUES (10572, 32, 32.00, 10, 0.10);INSERT INTO `order_items` VALUES (10572, 40, 18.40, 50, 0.00);INSERT INTO `order_items` VALUES (10572, 75, 7.75, 15, 0.10);INSERT INTO `order_items` VALUES (10573, 17, 39.00, 18, 0.00);INSERT INTO `order_items` VALUES (10573, 34, 14.00, 40, 0.00);INSERT INTO `order_items` VALUES (10573, 53, 32.80, 25, 0.00);INSERT INTO `order_items` VALUES (10574, 33, 2.50, 14, 0.00);INSERT INTO `order_items` VALUES (10574, 40, 18.40, 2, 0.00);INSERT INTO `order_items` VALUES (10574, 62, 49.30, 10, 0.00);INSERT INTO `order_items` VALUES (10574, 64, 33.25, 6, 0.00);INSERT INTO `order_items` VALUES (10575, 59, 55.00, 12, 0.00);INSERT INTO `order_items` VALUES (10575, 63, 43.90, 6, 0.00);INSERT INTO `order_items` VALUES (10575, 72, 34.80, 30, 0.00);INSERT INTO `order_items` VALUES (10575, 76, 18.00, 10, 0.00);INSERT INTO `order_items` VALUES (10576, 1, 18.00, 10, 0.00);INSERT INTO `order_items` VALUES (10576, 31, 12.50, 20, 0.00);INSERT INTO `order_items` VALUES (10576, 44, 19.45, 21, 0.00);INSERT INTO `order_items` VALUES (10577, 39, 18.00, 10, 0.00);INSERT INTO `order_items` VALUES (10577, 75, 7.75, 20, 0.00);INSERT INTO `order_items` VALUES (10577, 77, 13.00, 18, 0.00);INSERT INTO `order_items` VALUES (10578, 35, 18.00, 20, 0.00);INSERT INTO `order_items` VALUES (10578, 57, 19.50, 6, 0.00);INSERT INTO `order_items` VALUES (10579, 15, 15.50, 10, 0.00);INSERT INTO `order_items` VALUES (10579, 75, 7.75, 21, 0.00);INSERT INTO `order_items` VALUES (10580, 14, 23.25, 15, 0.05);INSERT INTO `order_items` VALUES (10580, 41, 9.65, 9, 0.05);INSERT INTO `order_items` VALUES (10580, 65, 21.05, 30, 0.05);INSERT INTO `order_items` VALUES (10581, 75, 7.75, 50, 0.20);INSERT INTO `order_items` VALUES (10582, 57, 19.50, 4, 0.00);INSERT INTO `order_items` VALUES (10582, 76, 18.00, 14, 0.00);INSERT INTO `order_items` VALUES (10583, 29, 123.79, 10, 0.00);INSERT INTO `order_items` VALUES (10583, 60, 34.00, 24, 0.15);INSERT INTO `order_items` VALUES (10583, 69, 36.00, 10, 0.15);INSERT INTO `order_items` VALUES (10584, 31, 12.50, 50, 0.05);INSERT INTO `order_items` VALUES (10585, 47, 9.50, 15, 0.00);INSERT INTO `order_items` VALUES (10586, 52, 7.00, 4, 0.15);INSERT INTO `order_items` VALUES (10587, 26, 31.23, 6, 0.00);INSERT INTO `order_items` VALUES (10587, 35, 18.00, 20, 0.00);INSERT INTO `order_items` VALUES (10587, 77, 13.00, 20, 0.00);INSERT INTO `order_items` VALUES (10588, 18, 62.50, 40, 0.20);INSERT INTO `order_items` VALUES (10588, 42, 14.00, 100, 0.20);INSERT INTO `order_items` VALUES (10589, 35, 18.00, 4, 0.00);INSERT INTO `order_items` VALUES (10590, 1, 18.00, 20, 0.00);INSERT INTO `order_items` VALUES (10590, 77, 13.00, 60, 0.05);INSERT INTO `order_items` VALUES (10591, 3, 10.00, 14, 0.00);INSERT INTO `order_items` VALUES (10591, 7, 30.00, 10, 0.00);INSERT INTO `order_items` VALUES (10591, 54, 7.45, 50, 0.00);INSERT INTO `order_items` VALUES (10592, 15, 15.50, 25, 0.05);INSERT INTO `order_items` VALUES (10592, 26, 31.23, 5, 0.05);INSERT INTO `order_items` VALUES (10593, 20, 81.00, 21, 0.20);INSERT INTO `order_items` VALUES (10593, 69, 36.00, 20, 0.20);INSERT INTO `order_items` VALUES (10593, 76, 18.00, 4, 0.20);INSERT INTO `order_items` VALUES (10594, 52, 7.00, 24, 0.00);INSERT INTO `order_items` VALUES (10594, 58, 13.25, 30, 0.00);INSERT INTO `order_items` VALUES (10595, 35, 18.00, 30, 0.25);INSERT INTO `order_items` VALUES (10595, 61, 28.50, 120, 0.25);INSERT INTO `order_items` VALUES (10595, 69, 36.00, 65, 0.25);INSERT INTO `order_items` VALUES (10596, 56, 38.00, 5, 0.20);INSERT INTO `order_items` VALUES (10596, 63, 43.90, 24, 0.20);INSERT INTO `order_items` VALUES (10596, 75, 7.75, 30, 0.20);INSERT INTO `order_items` VALUES (10597, 24, 4.50, 35, 0.20);INSERT INTO `order_items` VALUES (10597, 57, 19.50, 20, 0.00);INSERT INTO `order_items` VALUES (10597, 65, 21.05, 12, 0.20);INSERT INTO `order_items` VALUES (10598, 27, 43.90, 50, 0.00);INSERT INTO `order_items` VALUES (10598, 71, 21.50, 9, 0.00);INSERT INTO `order_items` VALUES (10599, 62, 49.30, 10, 0.00);INSERT INTO `order_items` VALUES (10600, 54, 7.45, 4, 0.00);INSERT INTO `order_items` VALUES (10600, 73, 15.00, 30, 0.00);INSERT INTO `order_items` VALUES (10601, 13, 6.00, 60, 0.00);INSERT INTO `order_items` VALUES (10601, 59, 55.00, 35, 0.00);INSERT INTO `order_items` VALUES (10602, 77, 13.00, 5, 0.25);INSERT INTO `order_items` VALUES (10603, 22, 21.00, 48, 0.00);INSERT INTO `order_items` VALUES (10603, 49, 20.00, 25, 0.05);INSERT INTO `order_items` VALUES (10604, 48, 12.75, 6, 0.10);INSERT INTO `order_items` VALUES (10604, 76, 18.00, 10, 0.10);INSERT INTO `order_items` VALUES (10605, 16, 17.45, 30, 0.05);INSERT INTO `order_items` VALUES (10605, 59, 55.00, 20, 0.05);INSERT INTO `order_items` VALUES (10605, 60, 34.00, 70, 0.05);INSERT INTO `order_items` VALUES (10605, 71, 21.50, 15, 0.05);INSERT INTO `order_items` VALUES (10606, 4, 22.00, 20, 0.20);INSERT INTO `order_items` VALUES (10606, 55, 24.00, 20, 0.20);INSERT INTO `order_items` VALUES (10606, 62, 49.30, 10, 0.20);INSERT INTO `order_items` VALUES (10607, 7, 30.00, 45, 0.00);INSERT INTO `order_items` VALUES (10607, 17, 39.00, 100, 0.00);INSERT INTO `order_items` VALUES (10607, 33, 2.50, 14, 0.00);INSERT INTO `order_items` VALUES (10607, 40, 18.40, 42, 0.00);INSERT INTO `order_items` VALUES (10607, 72, 34.80, 12, 0.00);INSERT INTO `order_items` VALUES (10608, 56, 38.00, 28, 0.00);INSERT INTO `order_items` VALUES (10609, 1, 18.00, 3, 0.00);INSERT INTO `order_items` VALUES (10609, 10, 31.00, 10, 0.00);INSERT INTO `order_items` VALUES (10609, 21, 10.00, 6, 0.00);INSERT INTO `order_items` VALUES (10610, 36, 19.00, 21, 0.25);INSERT INTO `order_items` VALUES (10611, 1, 18.00, 6, 0.00);INSERT INTO `order_items` VALUES (10611, 2, 19.00, 10, 0.00);INSERT INTO `order_items` VALUES (10611, 60, 34.00, 15, 0.00);INSERT INTO `order_items` VALUES (10612, 10, 31.00, 70, 0.00);INSERT INTO `order_items` VALUES (10612, 36, 19.00, 55, 0.00);INSERT INTO `order_items` VALUES (10612, 49, 20.00, 18, 0.00);INSERT INTO `order_items` VALUES (10612, 60, 34.00, 40, 0.00);INSERT INTO `order_items` VALUES (10612, 76, 18.00, 80, 0.00);INSERT INTO `order_items` VALUES (10613, 13, 6.00, 8, 0.10);INSERT INTO `order_items` VALUES (10613, 75, 7.75, 40, 0.00);INSERT INTO `order_items` VALUES (10614, 11, 21.00, 14, 0.00);INSERT INTO `order_items` VALUES (10614, 21, 10.00, 8, 0.00);INSERT INTO `order_items` VALUES (10614, 39, 18.00, 5, 0.00);INSERT INTO `order_items` VALUES (10615, 55, 24.00, 5, 0.00);INSERT INTO `order_items` VALUES (10616, 38, 263.50, 15, 0.05);INSERT INTO `order_items` VALUES (10616, 56, 38.00, 14, 0.00);INSERT INTO `order_items` VALUES (10616, 70, 15.00, 15, 0.05);INSERT INTO `order_items` VALUES (10616, 71, 21.50, 15, 0.05);INSERT INTO `order_items` VALUES (10617, 59, 55.00, 30, 0.15);INSERT INTO `order_items` VALUES (10618, 6, 25.00, 70, 0.00);INSERT INTO `order_items` VALUES (10618, 56, 38.00, 20, 0.00);INSERT INTO `order_items` VALUES (10618, 68, 12.50, 15, 0.00);INSERT INTO `order_items` VALUES (10619, 21, 10.00, 42, 0.00);INSERT INTO `order_items` VALUES (10619, 22, 21.00, 40, 0.00);INSERT INTO `order_items` VALUES (10620, 24, 4.50, 5, 0.00);INSERT INTO `order_items` VALUES (10620, 52, 7.00, 5, 0.00);INSERT INTO `order_items` VALUES (10621, 19, 9.20, 5, 0.00);INSERT INTO `order_items` VALUES (10621, 23, 9.00, 10, 0.00);INSERT INTO `order_items` VALUES (10621, 70, 15.00, 20, 0.00);INSERT INTO `order_items` VALUES (10621, 71, 21.50, 15, 0.00);INSERT INTO `order_items` VALUES (10622, 2, 19.00, 20, 0.00);INSERT INTO `order_items` VALUES (10622, 68, 12.50, 18, 0.20);INSERT INTO `order_items` VALUES (10623, 14, 23.25, 21, 0.00);INSERT INTO `order_items` VALUES (10623, 19, 9.20, 15, 0.10);INSERT INTO `order_items` VALUES (10623, 21, 10.00, 25, 0.10);INSERT INTO `order_items` VALUES (10623, 24, 4.50, 3, 0.00);INSERT INTO `order_items` VALUES (10623, 35, 18.00, 30, 0.10);INSERT INTO `order_items` VALUES (10624, 28, 45.60, 10, 0.00);INSERT INTO `order_items` VALUES (10624, 29, 123.79, 6, 0.00);INSERT INTO `order_items` VALUES (10624, 44, 19.45, 10, 0.00);INSERT INTO `order_items` VALUES (10625, 14, 23.25, 3, 0.00);INSERT INTO `order_items` VALUES (10625, 42, 14.00, 5, 0.00);INSERT INTO `order_items` VALUES (10625, 60, 34.00, 10, 0.00);INSERT INTO `order_items` VALUES (10626, 53, 32.80, 12, 0.00);INSERT INTO `order_items` VALUES (10626, 60, 34.00, 20, 0.00);INSERT INTO `order_items` VALUES (10626, 71, 21.50, 20, 0.00);INSERT INTO `order_items` VALUES (10627, 62, 49.30, 15, 0.00);INSERT INTO `order_items` VALUES (10627, 73, 15.00, 35, 0.15);INSERT INTO `order_items` VALUES (10628, 1, 18.00, 25, 0.00);INSERT INTO `order_items` VALUES (10629, 29, 123.79, 20, 0.00);INSERT INTO `order_items` VALUES (10629, 64, 33.25, 9, 0.00);INSERT INTO `order_items` VALUES (10630, 55, 24.00, 12, 0.05);INSERT INTO `order_items` VALUES (10630, 76, 18.00, 35, 0.00);INSERT INTO `order_items` VALUES (10631, 75, 7.75, 8, 0.10);INSERT INTO `order_items` VALUES (10632, 2, 19.00, 30, 0.05);INSERT INTO `order_items` VALUES (10632, 33, 2.50, 20, 0.05);INSERT INTO `order_items` VALUES (10633, 12, 38.00, 36, 0.15);INSERT INTO `order_items` VALUES (10633, 13, 6.00, 13, 0.15);INSERT INTO `order_items` VALUES (10633, 26, 31.23, 35, 0.15);INSERT INTO `order_items` VALUES (10633, 62, 49.30, 80, 0.15);INSERT INTO `order_items` VALUES (10634, 7, 30.00, 35, 0.00);INSERT INTO `order_items` VALUES (10634, 18, 62.50, 50, 0.00);INSERT INTO `order_items` VALUES (10634, 51, 53.00, 15, 0.00);INSERT INTO `order_items` VALUES (10634, 75, 7.75, 2, 0.00);INSERT INTO `order_items` VALUES (10635, 4, 22.00, 10, 0.10);INSERT INTO `order_items` VALUES (10635, 5, 21.35, 15, 0.10);INSERT INTO `order_items` VALUES (10635, 22, 21.00, 40, 0.00);INSERT INTO `order_items` VALUES (10636, 4, 22.00, 25, 0.00);INSERT INTO `order_items` VALUES (10636, 58, 13.25, 6, 0.00);INSERT INTO `order_items` VALUES (10637, 11, 21.00, 10, 0.00);INSERT INTO `order_items` VALUES (10637, 50, 16.25, 25, 0.05);INSERT INTO `order_items` VALUES (10637, 56, 38.00, 60, 0.05);INSERT INTO `order_items` VALUES (10638, 45, 9.50, 20, 0.00);INSERT INTO `order_items` VALUES (10638, 65, 21.05, 21, 0.00);INSERT INTO `order_items` VALUES (10638, 72, 34.80, 60, 0.00);INSERT INTO `order_items` VALUES (10639, 18, 62.50, 8, 0.00);INSERT INTO `order_items` VALUES (10640, 69, 36.00, 20, 0.25);INSERT INTO `order_items` VALUES (10640, 70, 15.00, 15, 0.25);INSERT INTO `order_items` VALUES (10641, 2, 19.00, 50, 0.00);INSERT INTO `order_items` VALUES (10641, 40, 18.40, 60, 0.00);INSERT INTO `order_items` VALUES (10642, 21, 10.00, 30, 0.20);INSERT INTO `order_items` VALUES (10642, 61, 28.50, 20, 0.20);INSERT INTO `order_items` VALUES (10643, 28, 45.60, 15, 0.25);INSERT INTO `order_items` VALUES (10643, 39, 18.00, 21, 0.25);INSERT INTO `order_items` VALUES (10643, 46, 12.00, 2, 0.25);INSERT INTO `order_items` VALUES (10644, 18, 62.50, 4, 0.10);INSERT INTO `order_items` VALUES (10644, 43, 46.00, 20, 0.00);INSERT INTO `order_items` VALUES (10644, 46, 12.00, 21, 0.10);INSERT INTO `order_items` VALUES (10645, 18, 62.50, 20, 0.00);INSERT INTO `order_items` VALUES (10645, 36, 19.00, 15, 0.00);INSERT INTO `order_items` VALUES (10646, 1, 18.00, 15, 0.25);INSERT INTO `order_items` VALUES (10646, 10, 31.00, 18, 0.25);INSERT INTO `order_items` VALUES (10646, 71, 21.50, 30, 0.25);INSERT INTO `order_items` VALUES (10646, 77, 13.00, 35, 0.25);INSERT INTO `order_items` VALUES (10647, 19, 9.20, 30, 0.00);INSERT INTO `order_items` VALUES (10647, 39, 18.00, 20, 0.00);INSERT INTO `order_items` VALUES (10648, 22, 21.00, 15, 0.00);INSERT INTO `order_items` VALUES (10648, 24, 4.50, 15, 0.15);INSERT INTO `order_items` VALUES (10649, 28, 45.60, 20, 0.00);INSERT INTO `order_items` VALUES (10649, 72, 34.80, 15, 0.00);INSERT INTO `order_items` VALUES (10650, 30, 25.89, 30, 0.00);INSERT INTO `order_items` VALUES (10650, 53, 32.80, 25, 0.05);INSERT INTO `order_items` VALUES (10650, 54, 7.45, 30, 0.00);INSERT INTO `order_items` VALUES (10651, 19, 9.20, 12, 0.25);INSERT INTO `order_items` VALUES (10651, 22, 21.00, 20, 0.25);INSERT INTO `order_items` VALUES (10652, 30, 25.89, 2, 0.25);INSERT INTO `order_items` VALUES (10652, 42, 14.00, 20, 0.00);INSERT INTO `order_items` VALUES (10653, 16, 17.45, 30, 0.10);INSERT INTO `order_items` VALUES (10653, 60, 34.00, 20, 0.10);INSERT INTO `order_items` VALUES (10654, 4, 22.00, 12, 0.10);INSERT INTO `order_items` VALUES (10654, 39, 18.00, 20, 0.10);INSERT INTO `order_items` VALUES (10654, 54, 7.45, 6, 0.10);INSERT INTO `order_items` VALUES (10655, 41, 9.65, 20, 0.20);INSERT INTO `order_items` VALUES (10656, 14, 23.25, 3, 0.10);INSERT INTO `order_items` VALUES (10656, 44, 19.45, 28, 0.10);INSERT INTO `order_items` VALUES (10656, 47, 9.50, 6, 0.10);INSERT INTO `order_items` VALUES (10657, 15, 15.50, 50, 0.00);INSERT INTO `order_items` VALUES (10657, 41, 9.65, 24, 0.00);INSERT INTO `order_items` VALUES (10657, 46, 12.00, 45, 0.00);INSERT INTO `order_items` VALUES (10657, 47, 9.50, 10, 0.00);INSERT INTO `order_items` VALUES (10657, 56, 38.00, 45, 0.00);INSERT INTO `order_items` VALUES (10657, 60, 34.00, 30, 0.00);INSERT INTO `order_items` VALUES (10658, 21, 10.00, 60, 0.00);INSERT INTO `order_items` VALUES (10658, 40, 18.40, 70, 0.05);INSERT INTO `order_items` VALUES (10658, 60, 34.00, 55, 0.05);INSERT INTO `order_items` VALUES (10658, 77, 13.00, 70, 0.05);INSERT INTO `order_items` VALUES (10659, 31, 12.50, 20, 0.05);INSERT INTO `order_items` VALUES (10659, 40, 18.40, 24, 0.05);INSERT INTO `order_items` VALUES (10659, 70, 15.00, 40, 0.05);INSERT INTO `order_items` VALUES (10660, 20, 81.00, 21, 0.00);INSERT INTO `order_items` VALUES (10661, 39, 18.00, 3, 0.20);INSERT INTO `order_items` VALUES (10661, 58, 13.25, 49, 0.20);INSERT INTO `order_items` VALUES (10662, 68, 12.50, 10, 0.00);INSERT INTO `order_items` VALUES (10663, 40, 18.40, 30, 0.05);INSERT INTO `order_items` VALUES (10663, 42, 14.00, 30, 0.05);INSERT INTO `order_items` VALUES (10663, 51, 53.00, 20, 0.05);INSERT INTO `order_items` VALUES (10664, 10, 31.00, 24, 0.15);INSERT INTO `order_items` VALUES (10664, 56, 38.00, 12, 0.15);INSERT INTO `order_items` VALUES (10664, 65, 21.05, 15, 0.15);INSERT INTO `order_items` VALUES (10665, 51, 53.00, 20, 0.00);INSERT INTO `order_items` VALUES (10665, 59, 55.00, 1, 0.00);INSERT INTO `order_items` VALUES (10665, 76, 18.00, 10, 0.00);INSERT INTO `order_items` VALUES (10666, 29, 123.79, 36, 0.00);INSERT INTO `order_items` VALUES (10666, 65, 21.05, 10, 0.00);INSERT INTO `order_items` VALUES (10667, 69, 36.00, 45, 0.20);INSERT INTO `order_items` VALUES (10667, 71, 21.50, 14, 0.20);INSERT INTO `order_items` VALUES (10668, 31, 12.50, 8, 0.10);INSERT INTO `order_items` VALUES (10668, 55, 24.00, 4, 0.10);INSERT INTO `order_items` VALUES (10668, 64, 33.25, 15, 0.10);INSERT INTO `order_items` VALUES (10669, 36, 19.00, 30, 0.00);INSERT INTO `order_items` VALUES (10670, 23, 9.00, 32, 0.00);INSERT INTO `order_items` VALUES (10670, 46, 12.00, 60, 0.00);INSERT INTO `order_items` VALUES (10670, 67, 14.00, 25, 0.00);INSERT INTO `order_items` VALUES (10670, 73, 15.00, 50, 0.00);INSERT INTO `order_items` VALUES (10670, 75, 7.75, 25, 0.00);INSERT INTO `order_items` VALUES (10671, 16, 17.45, 10, 0.00);INSERT INTO `order_items` VALUES (10671, 62, 49.30, 10, 0.00);INSERT INTO `order_items` VALUES (10671, 65, 21.05, 12, 0.00);INSERT INTO `order_items` VALUES (10672, 38, 263.50, 15, 0.10);INSERT INTO `order_items` VALUES (10672, 71, 21.50, 12, 0.00);INSERT INTO `order_items` VALUES (10673, 16, 17.45, 3, 0.00);INSERT INTO `order_items` VALUES (10673, 42, 14.00, 6, 0.00);INSERT INTO `order_items` VALUES (10673, 43, 46.00, 6, 0.00);INSERT INTO `order_items` VALUES (10674, 23, 9.00, 5, 0.00);INSERT INTO `order_items` VALUES (10675, 14, 23.25, 30, 0.00);INSERT INTO `order_items` VALUES (10675, 53, 32.80, 10, 0.00);INSERT INTO `order_items` VALUES (10675, 58, 13.25, 30, 0.00);INSERT INTO `order_items` VALUES (10676, 10, 31.00, 2, 0.00);INSERT INTO `order_items` VALUES (10676, 19, 9.20, 7, 0.00);INSERT INTO `order_items` VALUES (10676, 44, 19.45, 21, 0.00);INSERT INTO `order_items` VALUES (10677, 26, 31.23, 30, 0.15);INSERT INTO `order_items` VALUES (10677, 33, 2.50, 8, 0.15);INSERT INTO `order_items` VALUES (10678, 12, 38.00, 100, 0.00);INSERT INTO `order_items` VALUES (10678, 33, 2.50, 30, 0.00);INSERT INTO `order_items` VALUES (10678, 41, 9.65, 120, 0.00);INSERT INTO `order_items` VALUES (10678, 54, 7.45, 30, 0.00);INSERT INTO `order_items` VALUES (10679, 59, 55.00, 12, 0.00);INSERT INTO `order_items` VALUES (10680, 16, 17.45, 50, 0.25);INSERT INTO `order_items` VALUES (10680, 31, 12.50, 20, 0.25);INSERT INTO `order_items` VALUES (10680, 42, 14.00, 40, 0.25);INSERT INTO `order_items` VALUES (10681, 19, 9.20, 30, 0.10);INSERT INTO `order_items` VALUES (10681, 21, 10.00, 12, 0.10);INSERT INTO `order_items` VALUES (10681, 64, 33.25, 28, 0.00);INSERT INTO `order_items` VALUES (10682, 33, 2.50, 30, 0.00);INSERT INTO `order_items` VALUES (10682, 66, 17.00, 4, 0.00);INSERT INTO `order_items` VALUES (10682, 75, 7.75, 30, 0.00);INSERT INTO `order_items` VALUES (10683, 52, 7.00, 9, 0.00);INSERT INTO `order_items` VALUES (10684, 40, 18.40, 20, 0.00);INSERT INTO `order_items` VALUES (10684, 47, 9.50, 40, 0.00);INSERT INTO `order_items` VALUES (10684, 60, 34.00, 30, 0.00);INSERT INTO `order_items` VALUES (10685, 10, 31.00, 20, 0.00);INSERT INTO `order_items` VALUES (10685, 41, 9.65, 4, 0.00);INSERT INTO `order_items` VALUES (10685, 47, 9.50, 15, 0.00);INSERT INTO `order_items` VALUES (10686, 17, 39.00, 30, 0.20);INSERT INTO `order_items` VALUES (10686, 26, 31.23, 15, 0.00);INSERT INTO `order_items` VALUES (10687, 9, 97.00, 50, 0.25);INSERT INTO `order_items` VALUES (10687, 29, 123.79, 10, 0.00);INSERT INTO `order_items` VALUES (10687, 36, 19.00, 6, 0.25);INSERT INTO `order_items` VALUES (10688, 10, 31.00, 18, 0.10);INSERT INTO `order_items` VALUES (10688, 28, 45.60, 60, 0.10);INSERT INTO `order_items` VALUES (10688, 34, 14.00, 14, 0.00);INSERT INTO `order_items` VALUES (10689, 1, 18.00, 35, 0.25);INSERT INTO `order_items` VALUES (10690, 56, 38.00, 20, 0.25);INSERT INTO `order_items` VALUES (10690, 77, 13.00, 30, 0.25);INSERT INTO `order_items` VALUES (10691, 1, 18.00, 30, 0.00);INSERT INTO `order_items` VALUES (10691, 29, 123.79, 40, 0.00);INSERT INTO `order_items` VALUES (10691, 43, 46.00, 40, 0.00);INSERT INTO `order_items` VALUES (10691, 44, 19.45, 24, 0.00);INSERT INTO `order_items` VALUES (10691, 62, 49.30, 48, 0.00);INSERT INTO `order_items` VALUES (10692, 63, 43.90, 20, 0.00);INSERT INTO `order_items` VALUES (10693, 9, 97.00, 6, 0.00);INSERT INTO `order_items` VALUES (10693, 54, 7.45, 60, 0.15);INSERT INTO `order_items` VALUES (10693, 69, 36.00, 30, 0.15);INSERT INTO `order_items` VALUES (10693, 73, 15.00, 15, 0.15);INSERT INTO `order_items` VALUES (10694, 7, 30.00, 90, 0.00);INSERT INTO `order_items` VALUES (10694, 59, 55.00, 25, 0.00);INSERT INTO `order_items` VALUES (10694, 70, 15.00, 50, 0.00);INSERT INTO `order_items` VALUES (10695, 8, 40.00, 10, 0.00);INSERT INTO `order_items` VALUES (10695, 12, 38.00, 4, 0.00);INSERT INTO `order_items` VALUES (10695, 24, 4.50, 20, 0.00);INSERT INTO `order_items` VALUES (10696, 17, 39.00, 20, 0.00);INSERT INTO `order_items` VALUES (10696, 46, 12.00, 18, 0.00);INSERT INTO `order_items` VALUES (10697, 19, 9.20, 7, 0.25);INSERT INTO `order_items` VALUES (10697, 35, 18.00, 9, 0.25);INSERT INTO `order_items` VALUES (10697, 58, 13.25, 30, 0.25);INSERT INTO `order_items` VALUES (10697, 70, 15.00, 30, 0.25);INSERT INTO `order_items` VALUES (10698, 11, 21.00, 15, 0.00);INSERT INTO `order_items` VALUES (10698, 17, 39.00, 8, 0.05);INSERT INTO `order_items` VALUES (10698, 29, 123.79, 12, 0.05);INSERT INTO `order_items` VALUES (10698, 65, 21.05, 65, 0.05);INSERT INTO `order_items` VALUES (10698, 70, 15.00, 8, 0.05);INSERT INTO `order_items` VALUES (10699, 47, 9.50, 12, 0.00);INSERT INTO `order_items` VALUES (10700, 1, 18.00, 5, 0.20);INSERT INTO `order_items` VALUES (10700, 34, 14.00, 12, 0.20);INSERT INTO `order_items` VALUES (10700, 68, 12.50, 40, 0.20);INSERT INTO `order_items` VALUES (10700, 71, 21.50, 60, 0.20);INSERT INTO `order_items` VALUES (10701, 59, 55.00, 42, 0.15);INSERT INTO `order_items` VALUES (10701, 71, 21.50, 20, 0.15);INSERT INTO `order_items` VALUES (10701, 76, 18.00, 35, 0.15);INSERT INTO `order_items` VALUES (10702, 3, 10.00, 6, 0.00);INSERT INTO `order_items` VALUES (10702, 76, 18.00, 15, 0.00);INSERT INTO `order_items` VALUES (10703, 2, 19.00, 5, 0.00);INSERT INTO `order_items` VALUES (10703, 59, 55.00, 35, 0.00);INSERT INTO `order_items` VALUES (10703, 73, 15.00, 35, 0.00);INSERT INTO `order_items` VALUES (10704, 4, 22.00, 6, 0.00);INSERT INTO `order_items` VALUES (10704, 24, 4.50, 35, 0.00);INSERT INTO `order_items` VALUES (10704, 48, 12.75, 24, 0.00);INSERT INTO `order_items` VALUES (10705, 31, 12.50, 20, 0.00);INSERT INTO `order_items` VALUES (10705, 32, 32.00, 4, 0.00);INSERT INTO `order_items` VALUES (10706, 16, 17.45, 20, 0.00);INSERT INTO `order_items` VALUES (10706, 43, 46.00, 24, 0.00);INSERT INTO `order_items` VALUES (10706, 59, 55.00, 8, 0.00);INSERT INTO `order_items` VALUES (10707, 55, 24.00, 21, 0.00);INSERT INTO `order_items` VALUES (10707, 57, 19.50, 40, 0.00);INSERT INTO `order_items` VALUES (10707, 70, 15.00, 28, 0.15);INSERT INTO `order_items` VALUES (10708, 5, 21.35, 4, 0.00);INSERT INTO `order_items` VALUES (10708, 36, 19.00, 5, 0.00);INSERT INTO `order_items` VALUES (10709, 8, 40.00, 40, 0.00);INSERT INTO `order_items` VALUES (10709, 51, 53.00, 28, 0.00);INSERT INTO `order_items` VALUES (10709, 60, 34.00, 10, 0.00);INSERT INTO `order_items` VALUES (10710, 19, 9.20, 5, 0.00);INSERT INTO `order_items` VALUES (10710, 47, 9.50, 5, 0.00);INSERT INTO `order_items` VALUES (10711, 19, 9.20, 12, 0.00);INSERT INTO `order_items` VALUES (10711, 41, 9.65, 42, 0.00);INSERT INTO `order_items` VALUES (10711, 53, 32.80, 120, 0.00);INSERT INTO `order_items` VALUES (10712, 53, 32.80, 3, 0.05);INSERT INTO `order_items` VALUES (10712, 56, 38.00, 30, 0.00);INSERT INTO `order_items` VALUES (10713, 10, 31.00, 18, 0.00);INSERT INTO `order_items` VALUES (10713, 26, 31.23, 30, 0.00);INSERT INTO `order_items` VALUES (10713, 45, 9.50, 110, 0.00);INSERT INTO `order_items` VALUES (10713, 46, 12.00, 24, 0.00);INSERT INTO `order_items` VALUES (10714, 2, 19.00, 30, 0.25);INSERT INTO `order_items` VALUES (10714, 17, 39.00, 27, 0.25);INSERT INTO `order_items` VALUES (10714, 47, 9.50, 50, 0.25);INSERT INTO `order_items` VALUES (10714, 56, 38.00, 18, 0.25);INSERT INTO `order_items` VALUES (10714, 58, 13.25, 12, 0.25);INSERT INTO `order_items` VALUES (10715, 10, 31.00, 21, 0.00);INSERT INTO `order_items` VALUES (10715, 71, 21.50, 30, 0.00);INSERT INTO `order_items` VALUES (10716, 21, 10.00, 5, 0.00);INSERT INTO `order_items` VALUES (10716, 51, 53.00, 7, 0.00);INSERT INTO `order_items` VALUES (10716, 61, 28.50, 10, 0.00);INSERT INTO `order_items` VALUES (10717, 21, 10.00, 32, 0.05);INSERT INTO `order_items` VALUES (10717, 54, 7.45, 15, 0.00);INSERT INTO `order_items` VALUES (10717, 69, 36.00, 25, 0.05);INSERT INTO `order_items` VALUES (10718, 12, 38.00, 36, 0.00);INSERT INTO `order_items` VALUES (10718, 16, 17.45, 20, 0.00);INSERT INTO `order_items` VALUES (10718, 36, 19.00, 40, 0.00);INSERT INTO `order_items` VALUES (10718, 62, 49.30, 20, 0.00);INSERT INTO `order_items` VALUES (10719, 18, 62.50, 12, 0.25);INSERT INTO `order_items` VALUES (10719, 30, 25.89, 3, 0.25);INSERT INTO `order_items` VALUES (10719, 54, 7.45, 40, 0.25);INSERT INTO `order_items` VALUES (10720, 35, 18.00, 21, 0.00);INSERT INTO `order_items` VALUES (10720, 71, 21.50, 8, 0.00);INSERT INTO `order_items` VALUES (10721, 44, 19.45, 50, 0.05);INSERT INTO `order_items` VALUES (10722, 2, 19.00, 3, 0.00);INSERT INTO `order_items` VALUES (10722, 31, 12.50, 50, 0.00);INSERT INTO `order_items` VALUES (10722, 68, 12.50, 45, 0.00);INSERT INTO `order_items` VALUES (10722, 75, 7.75, 42, 0.00);INSERT INTO `order_items` VALUES (10723, 26, 31.23, 15, 0.00);INSERT INTO `order_items` VALUES (10724, 10, 31.00, 16, 0.00);INSERT INTO `order_items` VALUES (10724, 61, 28.50, 5, 0.00);INSERT INTO `order_items` VALUES (10725, 41, 9.65, 12, 0.00);INSERT INTO `order_items` VALUES (10725, 52, 7.00, 4, 0.00);INSERT INTO `order_items` VALUES (10725, 55, 24.00, 6, 0.00);INSERT INTO `order_items` VALUES (10726, 4, 22.00, 25, 0.00);INSERT INTO `order_items` VALUES (10726, 11, 21.00, 5, 0.00);INSERT INTO `order_items` VALUES (10727, 17, 39.00, 20, 0.05);INSERT INTO `order_items` VALUES (10727, 56, 38.00, 10, 0.05);INSERT INTO `order_items` VALUES (10727, 59, 55.00, 10, 0.05);INSERT INTO `order_items` VALUES (10728, 30, 25.89, 15, 0.00);INSERT INTO `order_items` VALUES (10728, 40, 18.40, 6, 0.00);INSERT INTO `order_items` VALUES (10728, 55, 24.00, 12, 0.00);INSERT INTO `order_items` VALUES (10728, 60, 34.00, 15, 0.00);INSERT INTO `order_items` VALUES (10729, 1, 18.00, 50, 0.00);INSERT INTO `order_items` VALUES (10729, 21, 10.00, 30, 0.00);INSERT INTO `order_items` VALUES (10729, 50, 16.25, 40, 0.00);INSERT INTO `order_items` VALUES (10730, 16, 17.45, 15, 0.05);INSERT INTO `order_items` VALUES (10730, 31, 12.50, 3, 0.05);INSERT INTO `order_items` VALUES (10730, 65, 21.05, 10, 0.05);INSERT INTO `order_items` VALUES (10731, 21, 10.00, 40, 0.05);INSERT INTO `order_items` VALUES (10731, 51, 53.00, 30, 0.05);INSERT INTO `order_items` VALUES (10732, 76, 18.00, 20, 0.00);INSERT INTO `order_items` VALUES (10733, 14, 23.25, 16, 0.00);INSERT INTO `order_items` VALUES (10733, 28, 45.60, 20, 0.00);INSERT INTO `order_items` VALUES (10733, 52, 7.00, 25, 0.00);INSERT INTO `order_items` VALUES (10734, 6, 25.00, 30, 0.00);INSERT INTO `order_items` VALUES (10734, 30, 25.89, 15, 0.00);INSERT INTO `order_items` VALUES (10734, 76, 18.00, 20, 0.00);INSERT INTO `order_items` VALUES (10735, 61, 28.50, 20, 0.10);INSERT INTO `order_items` VALUES (10735, 77, 13.00, 2, 0.10);INSERT INTO `order_items` VALUES (10736, 65, 21.05, 40, 0.00);INSERT INTO `order_items` VALUES (10736, 75, 7.75, 20, 0.00);INSERT INTO `order_items` VALUES (10737, 13, 6.00, 4, 0.00);INSERT INTO `order_items` VALUES (10737, 41, 9.65, 12, 0.00);INSERT INTO `order_items` VALUES (10738, 16, 17.45, 3, 0.00);INSERT INTO `order_items` VALUES (10739, 36, 19.00, 6, 0.00);INSERT INTO `order_items` VALUES (10739, 52, 7.00, 18, 0.00);INSERT INTO `order_items` VALUES (10740, 28, 45.60, 5, 0.20);INSERT INTO `order_items` VALUES (10740, 35, 18.00, 35, 0.20);INSERT INTO `order_items` VALUES (10740, 45, 9.50, 40, 0.20);INSERT INTO `order_items` VALUES (10740, 56, 38.00, 14, 0.20);INSERT INTO `order_items` VALUES (10741, 2, 19.00, 15, 0.20);INSERT INTO `order_items` VALUES (10742, 3, 10.00, 20, 0.00);INSERT INTO `order_items` VALUES (10742, 60, 34.00, 50, 0.00);INSERT INTO `order_items` VALUES (10742, 72, 34.80, 35, 0.00);INSERT INTO `order_items` VALUES (10743, 46, 12.00, 28, 0.05);INSERT INTO `order_items` VALUES (10744, 40, 18.40, 50, 0.20);INSERT INTO `order_items` VALUES (10745, 18, 62.50, 24, 0.00);INSERT INTO `order_items` VALUES (10745, 44, 19.45, 16, 0.00);INSERT INTO `order_items` VALUES (10745, 59, 55.00, 45, 0.00);INSERT INTO `order_items` VALUES (10745, 72, 34.80, 7, 0.00);INSERT INTO `order_items` VALUES (10746, 13, 6.00, 6, 0.00);INSERT INTO `order_items` VALUES (10746, 42, 14.00, 28, 0.00);INSERT INTO `order_items` VALUES (10746, 62, 49.30, 9, 0.00);INSERT INTO `order_items` VALUES (10746, 69, 36.00, 40, 0.00);INSERT INTO `order_items` VALUES (10747, 31, 12.50, 8, 0.00);INSERT INTO `order_items` VALUES (10747, 41, 9.65, 35, 0.00);INSERT INTO `order_items` VALUES (10747, 63, 43.90, 9, 0.00);INSERT INTO `order_items` VALUES (10747, 69, 36.00, 30, 0.00);INSERT INTO `order_items` VALUES (10748, 23, 9.00, 44, 0.00);INSERT INTO `order_items` VALUES (10748, 40, 18.40, 40, 0.00);INSERT INTO `order_items` VALUES (10748, 56, 38.00, 28, 0.00);INSERT INTO `order_items` VALUES (10749, 56, 38.00, 15, 0.00);INSERT INTO `order_items` VALUES (10749, 59, 55.00, 6, 0.00);INSERT INTO `order_items` VALUES (10749, 76, 18.00, 10, 0.00);INSERT INTO `order_items` VALUES (10750, 14, 23.25, 5, 0.15);INSERT INTO `order_items` VALUES (10750, 45, 9.50, 40, 0.15);INSERT INTO `order_items` VALUES (10750, 59, 55.00, 25, 0.15);INSERT INTO `order_items` VALUES (10751, 26, 31.23, 12, 0.10);INSERT INTO `order_items` VALUES (10751, 30, 25.89, 30, 0.00);INSERT INTO `order_items` VALUES (10751, 50, 16.25, 20, 0.10);INSERT INTO `order_items` VALUES (10751, 73, 15.00, 15, 0.00);INSERT INTO `order_items` VALUES (10752, 1, 18.00, 8, 0.00);INSERT INTO `order_items` VALUES (10752, 69, 36.00, 3, 0.00);INSERT INTO `order_items` VALUES (10753, 45, 9.50, 4, 0.00);INSERT INTO `order_items` VALUES (10753, 74, 10.00, 5, 0.00);INSERT INTO `order_items` VALUES (10754, 40, 18.40, 3, 0.00);INSERT INTO `order_items` VALUES (10755, 47, 9.50, 30, 0.25);INSERT INTO `order_items` VALUES (10755, 56, 38.00, 30, 0.25);INSERT INTO `order_items` VALUES (10755, 57, 19.50, 14, 0.25);INSERT INTO `order_items` VALUES (10755, 69, 36.00, 25, 0.25);INSERT INTO `order_items` VALUES (10756, 18, 62.50, 21, 0.20);INSERT INTO `order_items` VALUES (10756, 36, 19.00, 20, 0.20);INSERT INTO `order_items` VALUES (10756, 68, 12.50, 6, 0.20);INSERT INTO `order_items` VALUES (10756, 69, 36.00, 20, 0.20);INSERT INTO `order_items` VALUES (10757, 34, 14.00, 30, 0.00);INSERT INTO `order_items` VALUES (10757, 59, 55.00, 7, 0.00);INSERT INTO `order_items` VALUES (10757, 62, 49.30, 30, 0.00);INSERT INTO `order_items` VALUES (10757, 64, 33.25, 24, 0.00);INSERT INTO `order_items` VALUES (10758, 26, 31.23, 20, 0.00);INSERT INTO `order_items` VALUES (10758, 52, 7.00, 60, 0.00);INSERT INTO `order_items` VALUES (10758, 70, 15.00, 40, 0.00);INSERT INTO `order_items` VALUES (10759, 32, 32.00, 10, 0.00);INSERT INTO `order_items` VALUES (10760, 25, 14.00, 12, 0.25);INSERT INTO `order_items` VALUES (10760, 27, 43.90, 40, 0.00);INSERT INTO `order_items` VALUES (10760, 43, 46.00, 30, 0.25);INSERT INTO `order_items` VALUES (10761, 25, 14.00, 35, 0.25);INSERT INTO `order_items` VALUES (10761, 75, 7.75, 18, 0.00);INSERT INTO `order_items` VALUES (10762, 39, 18.00, 16, 0.00);INSERT INTO `order_items` VALUES (10762, 47, 9.50, 30, 0.00);INSERT INTO `order_items` VALUES (10762, 51, 53.00, 28, 0.00);INSERT INTO `order_items` VALUES (10762, 56, 38.00, 60, 0.00);INSERT INTO `order_items` VALUES (10763, 21, 10.00, 40, 0.00);INSERT INTO `order_items` VALUES (10763, 22, 21.00, 6, 0.00);INSERT INTO `order_items` VALUES (10763, 24, 4.50, 20, 0.00);INSERT INTO `order_items` VALUES (10764, 3, 10.00, 20, 0.10);INSERT INTO `order_items` VALUES (10764, 39, 18.00, 130, 0.10);INSERT INTO `order_items` VALUES (10765, 65, 21.05, 80, 0.10);INSERT INTO `order_items` VALUES (10766, 2, 19.00, 40, 0.00);INSERT INTO `order_items` VALUES (10766, 7, 30.00, 35, 0.00);INSERT INTO `order_items` VALUES (10766, 68, 12.50, 40, 0.00);INSERT INTO `order_items` VALUES (10767, 42, 14.00, 2, 0.00);INSERT INTO `order_items` VALUES (10768, 22, 21.00, 4, 0.00);INSERT INTO `order_items` VALUES (10768, 31, 12.50, 50, 0.00);INSERT INTO `order_items` VALUES (10768, 60, 34.00, 15, 0.00);INSERT INTO `order_items` VALUES (10768, 71, 21.50, 12, 0.00);INSERT INTO `order_items` VALUES (10769, 41, 9.65, 30, 0.05);INSERT INTO `order_items` VALUES (10769, 52, 7.00, 15, 0.05);INSERT INTO `order_items` VALUES (10769, 61, 28.50, 20, 0.00);INSERT INTO `order_items` VALUES (10769, 62, 49.30, 15, 0.00);INSERT INTO `order_items` VALUES (10770, 11, 21.00, 15, 0.25);INSERT INTO `order_items` VALUES (10771, 71, 21.50, 16, 0.00);INSERT INTO `order_items` VALUES (10772, 29, 123.79, 18, 0.00);INSERT INTO `order_items` VALUES (10772, 59, 55.00, 25, 0.00);INSERT INTO `order_items` VALUES (10773, 17, 39.00, 33, 0.00);INSERT INTO `order_items` VALUES (10773, 31, 12.50, 70, 0.20);INSERT INTO `order_items` VALUES (10773, 75, 7.75, 7, 0.20);INSERT INTO `order_items` VALUES (10774, 31, 12.50, 2, 0.25);INSERT INTO `order_items` VALUES (10774, 66, 17.00, 50, 0.00);INSERT INTO `order_items` VALUES (10775, 10, 31.00, 6, 0.00);INSERT INTO `order_items` VALUES (10775, 67, 14.00, 3, 0.00);INSERT INTO `order_items` VALUES (10776, 31, 12.50, 16, 0.05);INSERT INTO `order_items` VALUES (10776, 42, 14.00, 12, 0.05);INSERT INTO `order_items` VALUES (10776, 45, 9.50, 27, 0.05);INSERT INTO `order_items` VALUES (10776, 51, 53.00, 120, 0.05);INSERT INTO `order_items` VALUES (10777, 42, 14.00, 20, 0.20);INSERT INTO `order_items` VALUES (10778, 41, 9.65, 10, 0.00);INSERT INTO `order_items` VALUES (10779, 16, 17.45, 20, 0.00);INSERT INTO `order_items` VALUES (10779, 62, 49.30, 20, 0.00);INSERT INTO `order_items` VALUES (10780, 70, 15.00, 35, 0.00);INSERT INTO `order_items` VALUES (10780, 77, 13.00, 15, 0.00);INSERT INTO `order_items` VALUES (10781, 54, 7.45, 3, 0.20);INSERT INTO `order_items` VALUES (10781, 56, 38.00, 20, 0.20);INSERT INTO `order_items` VALUES (10781, 74, 10.00, 35, 0.00);INSERT INTO `order_items` VALUES (10782, 31, 12.50, 1, 0.00);INSERT INTO `order_items` VALUES (10783, 31, 12.50, 10, 0.00);INSERT INTO `order_items` VALUES (10783, 38, 263.50, 5, 0.00);INSERT INTO `order_items` VALUES (10784, 36, 19.00, 30, 0.00);INSERT INTO `order_items` VALUES (10784, 39, 18.00, 2, 0.15);INSERT INTO `order_items` VALUES (10784, 72, 34.80, 30, 0.15);INSERT INTO `order_items` VALUES (10785, 10, 31.00, 10, 0.00);INSERT INTO `order_items` VALUES (10785, 75, 7.75, 10, 0.00);INSERT INTO `order_items` VALUES (10786, 8, 40.00, 30, 0.20);INSERT INTO `order_items` VALUES (10786, 30, 25.89, 15, 0.20);INSERT INTO `order_items` VALUES (10786, 75, 7.75, 42, 0.20);INSERT INTO `order_items` VALUES (10787, 2, 19.00, 15, 0.05);INSERT INTO `order_items` VALUES (10787, 29, 123.79, 20, 0.05);INSERT INTO `order_items` VALUES (10788, 19, 9.20, 50, 0.05);INSERT INTO `order_items` VALUES (10788, 75, 7.75, 40, 0.05);INSERT INTO `order_items` VALUES (10789, 18, 62.50, 30, 0.00);INSERT INTO `order_items` VALUES (10789, 35, 18.00, 15, 0.00);INSERT INTO `order_items` VALUES (10789, 63, 43.90, 30, 0.00);INSERT INTO `order_items` VALUES (10789, 68, 12.50, 18, 0.00);INSERT INTO `order_items` VALUES (10790, 7, 30.00, 3, 0.15);INSERT INTO `order_items` VALUES (10790, 56, 38.00, 20, 0.15);INSERT INTO `order_items` VALUES (10791, 29, 123.79, 14, 0.05);INSERT INTO `order_items` VALUES (10791, 41, 9.65, 20, 0.05);INSERT INTO `order_items` VALUES (10792, 2, 19.00, 10, 0.00);INSERT INTO `order_items` VALUES (10792, 54, 7.45, 3, 0.00);INSERT INTO `order_items` VALUES (10792, 68, 12.50, 15, 0.00);INSERT INTO `order_items` VALUES (10793, 41, 9.65, 14, 0.00);INSERT INTO `order_items` VALUES (10793, 52, 7.00, 8, 0.00);INSERT INTO `order_items` VALUES (10794, 14, 23.25, 15, 0.20);INSERT INTO `order_items` VALUES (10794, 54, 7.45, 6, 0.20);INSERT INTO `order_items` VALUES (10795, 16, 17.45, 65, 0.00);INSERT INTO `order_items` VALUES (10795, 17, 39.00, 35, 0.25);INSERT INTO `order_items` VALUES (10796, 26, 31.23, 21, 0.20);INSERT INTO `order_items` VALUES (10796, 44, 19.45, 10, 0.00);INSERT INTO `order_items` VALUES (10796, 64, 33.25, 35, 0.20);INSERT INTO `order_items` VALUES (10796, 69, 36.00, 24, 0.20);INSERT INTO `order_items` VALUES (10797, 11, 21.00, 20, 0.00);INSERT INTO `order_items` VALUES (10798, 62, 49.30, 2, 0.00);INSERT INTO `order_items` VALUES (10798, 72, 34.80, 10, 0.00);INSERT INTO `order_items` VALUES (10799, 13, 6.00, 20, 0.15);INSERT INTO `order_items` VALUES (10799, 24, 4.50, 20, 0.15);INSERT INTO `order_items` VALUES (10799, 59, 55.00, 25, 0.00);INSERT INTO `order_items` VALUES (10800, 11, 21.00, 50, 0.10);INSERT INTO `order_items` VALUES (10800, 51, 53.00, 10, 0.10);INSERT INTO `order_items` VALUES (10800, 54, 7.45, 7, 0.10);INSERT INTO `order_items` VALUES (10801, 17, 39.00, 40, 0.25);INSERT INTO `order_items` VALUES (10801, 29, 123.79, 20, 0.25);INSERT INTO `order_items` VALUES (10802, 30, 25.89, 25, 0.25);INSERT INTO `order_items` VALUES (10802, 51, 53.00, 30, 0.25);INSERT INTO `order_items` VALUES (10802, 55, 24.00, 60, 0.25);INSERT INTO `order_items` VALUES (10802, 62, 49.30, 5, 0.25);INSERT INTO `order_items` VALUES (10803, 19, 9.20, 24, 0.05);INSERT INTO `order_items` VALUES (10803, 25, 14.00, 15, 0.05);INSERT INTO `order_items` VALUES (10803, 59, 55.00, 15, 0.05);INSERT INTO `order_items` VALUES (10804, 10, 31.00, 36, 0.00);INSERT INTO `order_items` VALUES (10804, 28, 45.60, 24, 0.00);INSERT INTO `order_items` VALUES (10804, 49, 20.00, 4, 0.15);INSERT INTO `order_items` VALUES (10805, 34, 14.00, 10, 0.00);INSERT INTO `order_items` VALUES (10805, 38, 263.50, 10, 0.00);INSERT INTO `order_items` VALUES (10806, 2, 19.00, 20, 0.25);INSERT INTO `order_items` VALUES (10806, 65, 21.05, 2, 0.00);INSERT INTO `order_items` VALUES (10806, 74, 10.00, 15, 0.25);INSERT INTO `order_items` VALUES (10807, 40, 18.40, 1, 0.00);INSERT INTO `order_items` VALUES (10808, 56, 38.00, 20, 0.15);INSERT INTO `order_items` VALUES (10808, 76, 18.00, 50, 0.15);INSERT INTO `order_items` VALUES (10809, 52, 7.00, 20, 0.00);INSERT INTO `order_items` VALUES (10810, 13, 6.00, 7, 0.00);INSERT INTO `order_items` VALUES (10810, 25, 14.00, 5, 0.00);INSERT INTO `order_items` VALUES (10810, 70, 15.00, 5, 0.00);INSERT INTO `order_items` VALUES (10811, 19, 9.20, 15, 0.00);INSERT INTO `order_items` VALUES (10811, 23, 9.00, 18, 0.00);INSERT INTO `order_items` VALUES (10811, 40, 18.40, 30, 0.00);INSERT INTO `order_items` VALUES (10812, 31, 12.50, 16, 0.10);INSERT INTO `order_items` VALUES (10812, 72, 34.80, 40, 0.10);INSERT INTO `order_items` VALUES (10812, 77, 13.00, 20, 0.00);INSERT INTO `order_items` VALUES (10813, 2, 19.00, 12, 0.20);INSERT INTO `order_items` VALUES (10813, 46, 12.00, 35, 0.00);INSERT INTO `order_items` VALUES (10814, 41, 9.65, 20, 0.00);INSERT INTO `order_items` VALUES (10814, 43, 46.00, 20, 0.15);INSERT INTO `order_items` VALUES (10814, 48, 12.75, 8, 0.15);INSERT INTO `order_items` VALUES (10814, 61, 28.50, 30, 0.15);INSERT INTO `order_items` VALUES (10815, 33, 2.50, 16, 0.00);INSERT INTO `order_items` VALUES (10816, 38, 263.50, 30, 0.05);INSERT INTO `order_items` VALUES (10816, 62, 49.30, 20, 0.05);INSERT INTO `order_items` VALUES (10817, 26, 31.23, 40, 0.15);INSERT INTO `order_items` VALUES (10817, 38, 263.50, 30, 0.00);INSERT INTO `order_items` VALUES (10817, 40, 18.40, 60, 0.15);INSERT INTO `order_items` VALUES (10817, 62, 49.30, 25, 0.15);INSERT INTO `order_items` VALUES (10818, 32, 32.00, 20, 0.00);INSERT INTO `order_items` VALUES (10818, 41, 9.65, 20, 0.00);INSERT INTO `order_items` VALUES (10819, 43, 46.00, 7, 0.00);INSERT INTO `order_items` VALUES (10819, 75, 7.75, 20, 0.00);INSERT INTO `order_items` VALUES (10820, 56, 38.00, 30, 0.00);INSERT INTO `order_items` VALUES (10821, 35, 18.00, 20, 0.00);INSERT INTO `order_items` VALUES (10821, 51, 53.00, 6, 0.00);INSERT INTO `order_items` VALUES (10822, 62, 49.30, 3, 0.00);INSERT INTO `order_items` VALUES (10822, 70, 15.00, 6, 0.00);INSERT INTO `order_items` VALUES (10823, 11, 21.00, 20, 0.10);INSERT INTO `order_items` VALUES (10823, 57, 19.50, 15, 0.00);INSERT INTO `order_items` VALUES (10823, 59, 55.00, 40, 0.10);INSERT INTO `order_items` VALUES (10823, 77, 13.00, 15, 0.10);INSERT INTO `order_items` VALUES (10824, 41, 9.65, 12, 0.00);INSERT INTO `order_items` VALUES (10824, 70, 15.00, 9, 0.00);INSERT INTO `order_items` VALUES (10825, 26, 31.23, 12, 0.00);INSERT INTO `order_items` VALUES (10825, 53, 32.80, 20, 0.00);INSERT INTO `order_items` VALUES (10826, 31, 12.50, 35, 0.00);INSERT INTO `order_items` VALUES (10826, 57, 19.50, 15, 0.00);INSERT INTO `order_items` VALUES (10827, 10, 31.00, 15, 0.00);INSERT INTO `order_items` VALUES (10827, 39, 18.00, 21, 0.00);INSERT INTO `order_items` VALUES (10828, 20, 81.00, 5, 0.00);INSERT INTO `order_items` VALUES (10828, 38, 263.50, 2, 0.00);INSERT INTO `order_items` VALUES (10829, 2, 19.00, 10, 0.00);INSERT INTO `order_items` VALUES (10829, 8, 40.00, 20, 0.00);INSERT INTO `order_items` VALUES (10829, 13, 6.00, 10, 0.00);INSERT INTO `order_items` VALUES (10829, 60, 34.00, 21, 0.00);INSERT INTO `order_items` VALUES (10830, 6, 25.00, 6, 0.00);INSERT INTO `order_items` VALUES (10830, 39, 18.00, 28, 0.00);INSERT INTO `order_items` VALUES (10830, 60, 34.00, 30, 0.00);INSERT INTO `order_items` VALUES (10830, 68, 12.50, 24, 0.00);INSERT INTO `order_items` VALUES (10831, 19, 9.20, 2, 0.00);INSERT INTO `order_items` VALUES (10831, 35, 18.00, 8, 0.00);INSERT INTO `order_items` VALUES (10831, 38, 263.50, 8, 0.00);INSERT INTO `order_items` VALUES (10831, 43, 46.00, 9, 0.00);INSERT INTO `order_items` VALUES (10832, 13, 6.00, 3, 0.20);INSERT INTO `order_items` VALUES (10832, 25, 14.00, 10, 0.20);INSERT INTO `order_items` VALUES (10832, 44, 19.45, 16, 0.20);INSERT INTO `order_items` VALUES (10832, 64, 33.25, 3, 0.00);INSERT INTO `order_items` VALUES (10833, 7, 30.00, 20, 0.10);INSERT INTO `order_items` VALUES (10833, 31, 12.50, 9, 0.10);INSERT INTO `order_items` VALUES (10833, 53, 32.80, 9, 0.10);INSERT INTO `order_items` VALUES (10834, 29, 123.79, 8, 0.05);INSERT INTO `order_items` VALUES (10834, 30, 25.89, 20, 0.05);INSERT INTO `order_items` VALUES (10835, 59, 55.00, 15, 0.00);INSERT INTO `order_items` VALUES (10835, 77, 13.00, 2, 0.20);INSERT INTO `order_items` VALUES (10836, 22, 21.00, 52, 0.00);INSERT INTO `order_items` VALUES (10836, 35, 18.00, 6, 0.00);INSERT INTO `order_items` VALUES (10836, 57, 19.50, 24, 0.00);INSERT INTO `order_items` VALUES (10836, 60, 34.00, 60, 0.00);INSERT INTO `order_items` VALUES (10836, 64, 33.25, 30, 0.00);INSERT INTO `order_items` VALUES (10837, 13, 6.00, 6, 0.00);INSERT INTO `order_items` VALUES (10837, 40, 18.40, 25, 0.00);INSERT INTO `order_items` VALUES (10837, 47, 9.50, 40, 0.25);INSERT INTO `order_items` VALUES (10837, 76, 18.00, 21, 0.25);INSERT INTO `order_items` VALUES (10838, 1, 18.00, 4, 0.25);INSERT INTO `order_items` VALUES (10838, 18, 62.50, 25, 0.25);INSERT INTO `order_items` VALUES (10838, 36, 19.00, 50, 0.25);INSERT INTO `order_items` VALUES (10839, 58, 13.25, 30, 0.10);INSERT INTO `order_items` VALUES (10839, 72, 34.80, 15, 0.10);INSERT INTO `order_items` VALUES (10840, 25, 14.00, 6, 0.20);INSERT INTO `order_items` VALUES (10840, 39, 18.00, 10, 0.20);INSERT INTO `order_items` VALUES (10841, 10, 31.00, 16, 0.00);INSERT INTO `order_items` VALUES (10841, 56, 38.00, 30, 0.00);INSERT INTO `order_items` VALUES (10841, 59, 55.00, 50, 0.00);INSERT INTO `order_items` VALUES (10841, 77, 13.00, 15, 0.00);INSERT INTO `order_items` VALUES (10842, 11, 21.00, 15, 0.00);INSERT INTO `order_items` VALUES (10842, 43, 46.00, 5, 0.00);INSERT INTO `order_items` VALUES (10842, 68, 12.50, 20, 0.00);INSERT INTO `order_items` VALUES (10842, 70, 15.00, 12, 0.00);INSERT INTO `order_items` VALUES (10843, 51, 53.00, 4, 0.25);INSERT INTO `order_items` VALUES (10844, 22, 21.00, 35, 0.00);INSERT INTO `order_items` VALUES (10845, 23, 9.00, 70, 0.10);INSERT INTO `order_items` VALUES (10845, 35, 18.00, 25, 0.10);INSERT INTO `order_items` VALUES (10845, 42, 14.00, 42, 0.10);INSERT INTO `order_items` VALUES (10845, 58, 13.25, 60, 0.10);INSERT INTO `order_items` VALUES (10845, 64, 33.25, 48, 0.00);INSERT INTO `order_items` VALUES (10846, 4, 22.00, 21, 0.00);INSERT INTO `order_items` VALUES (10846, 70, 15.00, 30, 0.00);INSERT INTO `order_items` VALUES (10846, 74, 10.00, 20, 0.00);INSERT INTO `order_items` VALUES (10847, 1, 18.00, 80, 0.20);INSERT INTO `order_items` VALUES (10847, 19, 9.20, 12, 0.20);INSERT INTO `order_items` VALUES (10847, 37, 26.00, 60, 0.20);INSERT INTO `order_items` VALUES (10847, 45, 9.50, 36, 0.20);INSERT INTO `order_items` VALUES (10847, 60, 34.00, 45, 0.20);INSERT INTO `order_items` VALUES (10847, 71, 21.50, 55, 0.20);INSERT INTO `order_items` VALUES (10848, 5, 21.35, 30, 0.00);INSERT INTO `order_items` VALUES (10848, 9, 97.00, 3, 0.00);INSERT INTO `order_items` VALUES (10849, 3, 10.00, 49, 0.00);INSERT INTO `order_items` VALUES (10849, 26, 31.23, 18, 0.15);INSERT INTO `order_items` VALUES (10850, 25, 14.00, 20, 0.15);INSERT INTO `order_items` VALUES (10850, 33, 2.50, 4, 0.15);INSERT INTO `order_items` VALUES (10850, 70, 15.00, 30, 0.15);INSERT INTO `order_items` VALUES (10851, 2, 19.00, 5, 0.05);INSERT INTO `order_items` VALUES (10851, 25, 14.00, 10, 0.05);INSERT INTO `order_items` VALUES (10851, 57, 19.50, 10, 0.05);INSERT INTO `order_items` VALUES (10851, 59, 55.00, 42, 0.05);INSERT INTO `order_items` VALUES (10852, 2, 19.00, 15, 0.00);INSERT INTO `order_items` VALUES (10852, 17, 39.00, 6, 0.00);INSERT INTO `order_items` VALUES (10852, 62, 49.30, 50, 0.00);INSERT INTO `order_items` VALUES (10853, 18, 62.50, 10, 0.00);INSERT INTO `order_items` VALUES (10854, 10, 31.00, 100, 0.15);INSERT INTO `order_items` VALUES (10854, 13, 6.00, 65, 0.15);INSERT INTO `order_items` VALUES (10855, 16, 17.45, 50, 0.00);INSERT INTO `order_items` VALUES (10855, 31, 12.50, 14, 0.00);INSERT INTO `order_items` VALUES (10855, 56, 38.00, 24, 0.00);INSERT INTO `order_items` VALUES (10855, 65, 21.05, 15, 0.15);INSERT INTO `order_items` VALUES (10856, 2, 19.00, 20, 0.00);INSERT INTO `order_items` VALUES (10856, 42, 14.00, 20, 0.00);INSERT INTO `order_items` VALUES (10857, 3, 10.00, 30, 0.00);INSERT INTO `order_items` VALUES (10857, 26, 31.23, 35, 0.25);INSERT INTO `order_items` VALUES (10857, 29, 123.79, 10, 0.25);INSERT INTO `order_items` VALUES (10858, 7, 30.00, 5, 0.00);INSERT INTO `order_items` VALUES (10858, 27, 43.90, 10, 0.00);INSERT INTO `order_items` VALUES (10858, 70, 15.00, 4, 0.00);INSERT INTO `order_items` VALUES (10859, 24, 4.50, 40, 0.25);INSERT INTO `order_items` VALUES (10859, 54, 7.45, 35, 0.25);INSERT INTO `order_items` VALUES (10859, 64, 33.25, 30, 0.25);INSERT INTO `order_items` VALUES (10860, 51, 53.00, 3, 0.00);INSERT INTO `order_items` VALUES (10860, 76, 18.00, 20, 0.00);INSERT INTO `order_items` VALUES (10861, 17, 39.00, 42, 0.00);INSERT INTO `order_items` VALUES (10861, 18, 62.50, 20, 0.00);INSERT INTO `order_items` VALUES (10861, 21, 10.00, 40, 0.00);INSERT INTO `order_items` VALUES (10861, 33, 2.50, 35, 0.00);INSERT INTO `order_items` VALUES (10861, 62, 49.30, 3, 0.00);INSERT INTO `order_items` VALUES (10862, 11, 21.00, 25, 0.00);INSERT INTO `order_items` VALUES (10862, 52, 7.00, 8, 0.00);INSERT INTO `order_items` VALUES (10863, 1, 18.00, 20, 0.15);INSERT INTO `order_items` VALUES (10863, 58, 13.25, 12, 0.15);INSERT INTO `order_items` VALUES (10864, 35, 18.00, 4, 0.00);INSERT INTO `order_items` VALUES (10864, 67, 14.00, 15, 0.00);INSERT INTO `order_items` VALUES (10865, 38, 263.50, 60, 0.05);INSERT INTO `order_items` VALUES (10865, 39, 18.00, 80, 0.05);INSERT INTO `order_items` VALUES (10866, 2, 19.00, 21, 0.25);INSERT INTO `order_items` VALUES (10866, 24, 4.50, 6, 0.25);INSERT INTO `order_items` VALUES (10866, 30, 25.89, 40, 0.25);INSERT INTO `order_items` VALUES (10867, 53, 32.80, 3, 0.00);INSERT INTO `order_items` VALUES (10868, 26, 31.23, 20, 0.00);INSERT INTO `order_items` VALUES (10868, 35, 18.00, 30, 0.00);INSERT INTO `order_items` VALUES (10868, 49, 20.00, 42, 0.10);INSERT INTO `order_items` VALUES (10869, 1, 18.00, 40, 0.00);INSERT INTO `order_items` VALUES (10869, 11, 21.00, 10, 0.00);INSERT INTO `order_items` VALUES (10869, 23, 9.00, 50, 0.00);INSERT INTO `order_items` VALUES (10869, 68, 12.50, 20, 0.00);INSERT INTO `order_items` VALUES (10870, 35, 18.00, 3, 0.00);INSERT INTO `order_items` VALUES (10870, 51, 53.00, 2, 0.00);INSERT INTO `order_items` VALUES (10871, 6, 25.00, 50, 0.05);INSERT INTO `order_items` VALUES (10871, 16, 17.45, 12, 0.05);INSERT INTO `order_items` VALUES (10871, 17, 39.00, 16, 0.05);INSERT INTO `order_items` VALUES (10872, 55, 24.00, 10, 0.05);INSERT INTO `order_items` VALUES (10872, 62, 49.30, 20, 0.05);INSERT INTO `order_items` VALUES (10872, 64, 33.25, 15, 0.05);INSERT INTO `order_items` VALUES (10872, 65, 21.05, 21, 0.05);INSERT INTO `order_items` VALUES (10873, 21, 10.00, 20, 0.00);INSERT INTO `order_items` VALUES (10873, 28, 45.60, 3, 0.00);INSERT INTO `order_items` VALUES (10874, 10, 31.00, 10, 0.00);INSERT INTO `order_items` VALUES (10875, 19, 9.20, 25, 0.00);INSERT INTO `order_items` VALUES (10875, 47, 9.50, 21, 0.10);INSERT INTO `order_items` VALUES (10875, 49, 20.00, 15, 0.00);INSERT INTO `order_items` VALUES (10876, 46, 12.00, 21, 0.00);INSERT INTO `order_items` VALUES (10876, 64, 33.25, 20, 0.00);INSERT INTO `order_items` VALUES (10877, 16, 17.45, 30, 0.25);INSERT INTO `order_items` VALUES (10877, 18, 62.50, 25, 0.00);INSERT INTO `order_items` VALUES (10878, 20, 81.00, 20, 0.05);INSERT INTO `order_items` VALUES (10879, 40, 18.40, 12, 0.00);INSERT INTO `order_items` VALUES (10879, 65, 21.05, 10, 0.00);INSERT INTO `order_items` VALUES (10879, 76, 18.00, 10, 0.00);INSERT INTO `order_items` VALUES (10880, 23, 9.00, 30, 0.20);INSERT INTO `order_items` VALUES (10880, 61, 28.50, 30, 0.20);INSERT INTO `order_items` VALUES (10880, 70, 15.00, 50, 0.20);INSERT INTO `order_items` VALUES (10881, 73, 15.00, 10, 0.00);INSERT INTO `order_items` VALUES (10882, 42, 14.00, 25, 0.00);INSERT INTO `order_items` VALUES (10882, 49, 20.00, 20, 0.15);INSERT INTO `order_items` VALUES (10882, 54, 7.45, 32, 0.15);INSERT INTO `order_items` VALUES (10883, 24, 4.50, 8, 0.00);INSERT INTO `order_items` VALUES (10884, 21, 10.00, 40, 0.05);INSERT INTO `order_items` VALUES (10884, 56, 38.00, 21, 0.05);INSERT INTO `order_items` VALUES (10884, 65, 21.05, 12, 0.05);INSERT INTO `order_items` VALUES (10885, 2, 19.00, 20, 0.00);INSERT INTO `order_items` VALUES (10885, 24, 4.50, 12, 0.00);INSERT INTO `order_items` VALUES (10885, 70, 15.00, 30, 0.00);INSERT INTO `order_items` VALUES (10885, 77, 13.00, 25, 0.00);INSERT INTO `order_items` VALUES (10886, 10, 31.00, 70, 0.00);INSERT INTO `order_items` VALUES (10886, 31, 12.50, 35, 0.00);INSERT INTO `order_items` VALUES (10886, 77, 13.00, 40, 0.00);INSERT INTO `order_items` VALUES (10887, 25, 14.00, 5, 0.00);INSERT INTO `order_items` VALUES (10888, 2, 19.00, 20, 0.00);INSERT INTO `order_items` VALUES (10888, 68, 12.50, 18, 0.00);INSERT INTO `order_items` VALUES (10889, 11, 21.00, 40, 0.00);INSERT INTO `order_items` VALUES (10889, 38, 263.50, 40, 0.00);INSERT INTO `order_items` VALUES (10890, 17, 39.00, 15, 0.00);INSERT INTO `order_items` VALUES (10890, 34, 14.00, 10, 0.00);INSERT INTO `order_items` VALUES (10890, 41, 9.65, 14, 0.00);INSERT INTO `order_items` VALUES (10891, 30, 25.89, 15, 0.05);INSERT INTO `order_items` VALUES (10892, 59, 55.00, 40, 0.05);INSERT INTO `order_items` VALUES (10893, 8, 40.00, 30, 0.00);INSERT INTO `order_items` VALUES (10893, 24, 4.50, 10, 0.00);INSERT INTO `order_items` VALUES (10893, 29, 123.79, 24, 0.00);INSERT INTO `order_items` VALUES (10893, 30, 25.89, 35, 0.00);INSERT INTO `order_items` VALUES (10893, 36, 19.00, 20, 0.00);INSERT INTO `order_items` VALUES (10894, 13, 6.00, 28, 0.05);INSERT INTO `order_items` VALUES (10894, 69, 36.00, 50, 0.05);INSERT INTO `order_items` VALUES (10894, 75, 7.75, 120, 0.05);INSERT INTO `order_items` VALUES (10895, 24, 4.50, 110, 0.00);INSERT INTO `order_items` VALUES (10895, 39, 18.00, 45, 0.00);INSERT INTO `order_items` VALUES (10895, 40, 18.40, 91, 0.00);INSERT INTO `order_items` VALUES (10895, 60, 34.00, 100, 0.00);INSERT INTO `order_items` VALUES (10896, 45, 9.50, 15, 0.00);INSERT INTO `order_items` VALUES (10896, 56, 38.00, 16, 0.00);INSERT INTO `order_items` VALUES (10897, 29, 123.79, 80, 0.00);INSERT INTO `order_items` VALUES (10897, 30, 25.89, 36, 0.00);INSERT INTO `order_items` VALUES (10898, 13, 6.00, 5, 0.00);INSERT INTO `order_items` VALUES (10899, 39, 18.00, 8, 0.15);INSERT INTO `order_items` VALUES (10900, 70, 15.00, 3, 0.25);INSERT INTO `order_items` VALUES (10901, 41, 9.65, 30, 0.00);INSERT INTO `order_items` VALUES (10901, 71, 21.50, 30, 0.00);INSERT INTO `order_items` VALUES (10902, 55, 24.00, 30, 0.15);INSERT INTO `order_items` VALUES (10902, 62, 49.30, 6, 0.15);INSERT INTO `order_items` VALUES (10903, 13, 6.00, 40, 0.00);INSERT INTO `order_items` VALUES (10903, 65, 21.05, 21, 0.00);INSERT INTO `order_items` VALUES (10903, 68, 12.50, 20, 0.00);INSERT INTO `order_items` VALUES (10904, 58, 13.25, 15, 0.00);INSERT INTO `order_items` VALUES (10904, 62, 49.30, 35, 0.00);INSERT INTO `order_items` VALUES (10905, 1, 18.00, 20, 0.05);INSERT INTO `order_items` VALUES (10906, 61, 28.50, 15, 0.00);INSERT INTO `order_items` VALUES (10907, 75, 7.75, 14, 0.00);INSERT INTO `order_items` VALUES (10908, 7, 30.00, 20, 0.05);INSERT INTO `order_items` VALUES (10908, 52, 7.00, 14, 0.05);INSERT INTO `order_items` VALUES (10909, 7, 30.00, 12, 0.00);INSERT INTO `order_items` VALUES (10909, 16, 17.45, 15, 0.00);INSERT INTO `order_items` VALUES (10909, 41, 9.65, 5, 0.00);INSERT INTO `order_items` VALUES (10910, 19, 9.20, 12, 0.00);INSERT INTO `order_items` VALUES (10910, 49, 20.00, 10, 0.00);INSERT INTO `order_items` VALUES (10910, 61, 28.50, 5, 0.00);INSERT INTO `order_items` VALUES (10911, 1, 18.00, 10, 0.00);INSERT INTO `order_items` VALUES (10911, 17, 39.00, 12, 0.00);INSERT INTO `order_items` VALUES (10911, 67, 14.00, 15, 0.00);INSERT INTO `order_items` VALUES (10912, 11, 21.00, 40, 0.25);INSERT INTO `order_items` VALUES (10912, 29, 123.79, 60, 0.25);INSERT INTO `order_items` VALUES (10913, 4, 22.00, 30, 0.25);INSERT INTO `order_items` VALUES (10913, 33, 2.50, 40, 0.25);INSERT INTO `order_items` VALUES (10913, 58, 13.25, 15, 0.00);INSERT INTO `order_items` VALUES (10914, 71, 21.50, 25, 0.00);INSERT INTO `order_items` VALUES (10915, 17, 39.00, 10, 0.00);INSERT INTO `order_items` VALUES (10915, 33, 2.50, 30, 0.00);INSERT INTO `order_items` VALUES (10915, 54, 7.45, 10, 0.00);INSERT INTO `order_items` VALUES (10916, 16, 17.45, 6, 0.00);INSERT INTO `order_items` VALUES (10916, 32, 32.00, 6, 0.00);INSERT INTO `order_items` VALUES (10916, 57, 19.50, 20, 0.00);INSERT INTO `order_items` VALUES (10917, 30, 25.89, 1, 0.00);INSERT INTO `order_items` VALUES (10917, 60, 34.00, 10, 0.00);INSERT INTO `order_items` VALUES (10918, 1, 18.00, 60, 0.25);INSERT INTO `order_items` VALUES (10918, 60, 34.00, 25, 0.25);INSERT INTO `order_items` VALUES (10919, 16, 17.45, 24, 0.00);INSERT INTO `order_items` VALUES (10919, 25, 14.00, 24, 0.00);INSERT INTO `order_items` VALUES (10919, 40, 18.40, 20, 0.00);INSERT INTO `order_items` VALUES (10920, 50, 16.25, 24, 0.00);INSERT INTO `order_items` VALUES (10921, 35, 18.00, 10, 0.00);INSERT INTO `order_items` VALUES (10921, 63, 43.90, 40, 0.00);INSERT INTO `order_items` VALUES (10922, 17, 39.00, 15, 0.00);INSERT INTO `order_items` VALUES (10922, 24, 4.50, 35, 0.00);INSERT INTO `order_items` VALUES (10923, 42, 14.00, 10, 0.20);INSERT INTO `order_items` VALUES (10923, 43, 46.00, 10, 0.20);INSERT INTO `order_items` VALUES (10923, 67, 14.00, 24, 0.20);INSERT INTO `order_items` VALUES (10924, 10, 31.00, 20, 0.10);INSERT INTO `order_items` VALUES (10924, 28, 45.60, 30, 0.10);INSERT INTO `order_items` VALUES (10924, 75, 7.75, 6, 0.00);INSERT INTO `order_items` VALUES (10925, 36, 19.00, 25, 0.15);INSERT INTO `order_items` VALUES (10925, 52, 7.00, 12, 0.15);INSERT INTO `order_items` VALUES (10926, 11, 21.00, 2, 0.00);INSERT INTO `order_items` VALUES (10926, 13, 6.00, 10, 0.00);INSERT INTO `order_items` VALUES (10926, 19, 9.20, 7, 0.00);INSERT INTO `order_items` VALUES (10926, 72, 34.80, 10, 0.00);INSERT INTO `order_items` VALUES (10927, 20, 81.00, 5, 0.00);INSERT INTO `order_items` VALUES (10927, 52, 7.00, 5, 0.00);INSERT INTO `order_items` VALUES (10927, 76, 18.00, 20, 0.00);INSERT INTO `order_items` VALUES (10928, 47, 9.50, 5, 0.00);INSERT INTO `order_items` VALUES (10928, 76, 18.00, 5, 0.00);INSERT INTO `order_items` VALUES (10929, 21, 10.00, 60, 0.00);INSERT INTO `order_items` VALUES (10929, 75, 7.75, 49, 0.00);INSERT INTO `order_items` VALUES (10929, 77, 13.00, 15, 0.00);INSERT INTO `order_items` VALUES (10930, 21, 10.00, 36, 0.00);INSERT INTO `order_items` VALUES (10930, 27, 43.90, 25, 0.00);INSERT INTO `order_items` VALUES (10930, 55, 24.00, 25, 0.20);INSERT INTO `order_items` VALUES (10930, 58, 13.25, 30, 0.20);INSERT INTO `order_items` VALUES (10931, 13, 6.00, 42, 0.15);INSERT INTO `order_items` VALUES (10931, 57, 19.50, 30, 0.00);INSERT INTO `order_items` VALUES (10932, 16, 17.45, 30, 0.10);INSERT INTO `order_items` VALUES (10932, 62, 49.30, 14, 0.10);INSERT INTO `order_items` VALUES (10932, 72, 34.80, 16, 0.00);INSERT INTO `order_items` VALUES (10932, 75, 7.75, 20, 0.10);INSERT INTO `order_items` VALUES (10933, 53, 32.80, 2, 0.00);INSERT INTO `order_items` VALUES (10933, 61, 28.50, 30, 0.00);INSERT INTO `order_items` VALUES (10934, 6, 25.00, 20, 0.00);INSERT INTO `order_items` VALUES (10935, 1, 18.00, 21, 0.00);INSERT INTO `order_items` VALUES (10935, 18, 62.50, 4, 0.25);INSERT INTO `order_items` VALUES (10935, 23, 9.00, 8, 0.25);INSERT INTO `order_items` VALUES (10936, 36, 19.00, 30, 0.20);INSERT INTO `order_items` VALUES (10937, 28, 45.60, 8, 0.00);INSERT INTO `order_items` VALUES (10937, 34, 14.00, 20, 0.00);INSERT INTO `order_items` VALUES (10938, 13, 6.00, 20, 0.25);INSERT INTO `order_items` VALUES (10938, 43, 46.00, 24, 0.25);INSERT INTO `order_items` VALUES (10938, 60, 34.00, 49, 0.25);INSERT INTO `order_items` VALUES (10938, 71, 21.50, 35, 0.25);INSERT INTO `order_items` VALUES (10939, 2, 19.00, 10, 0.15);INSERT INTO `order_items` VALUES (10939, 67, 14.00, 40, 0.15);INSERT INTO `order_items` VALUES (10940, 7, 30.00, 8, 0.00);INSERT INTO `order_items` VALUES (10940, 13, 6.00, 20, 0.00);INSERT INTO `order_items` VALUES (10941, 31, 12.50, 44, 0.25);INSERT INTO `order_items` VALUES (10941, 62, 49.30, 30, 0.25);INSERT INTO `order_items` VALUES (10941, 68, 12.50, 80, 0.25);INSERT INTO `order_items` VALUES (10941, 72, 34.80, 50, 0.00);INSERT INTO `order_items` VALUES (10942, 49, 20.00, 28, 0.00);INSERT INTO `order_items` VALUES (10943, 13, 6.00, 15, 0.00);INSERT INTO `order_items` VALUES (10943, 22, 21.00, 21, 0.00);INSERT INTO `order_items` VALUES (10943, 46, 12.00, 15, 0.00);INSERT INTO `order_items` VALUES (10944, 11, 21.00, 5, 0.25);INSERT INTO `order_items` VALUES (10944, 44, 19.45, 18, 0.25);INSERT INTO `order_items` VALUES (10944, 56, 38.00, 18, 0.00);INSERT INTO `order_items` VALUES (10945, 13, 6.00, 20, 0.00);INSERT INTO `order_items` VALUES (10945, 31, 12.50, 10, 0.00);INSERT INTO `order_items` VALUES (10946, 10, 31.00, 25, 0.00);INSERT INTO `order_items` VALUES (10946, 24, 4.50, 25, 0.00);INSERT INTO `order_items` VALUES (10946, 77, 13.00, 40, 0.00);INSERT INTO `order_items` VALUES (10947, 59, 55.00, 4, 0.00);INSERT INTO `order_items` VALUES (10948, 50, 16.25, 9, 0.00);INSERT INTO `order_items` VALUES (10948, 51, 53.00, 40, 0.00);INSERT INTO `order_items` VALUES (10948, 55, 24.00, 4, 0.00);INSERT INTO `order_items` VALUES (10949, 6, 25.00, 12, 0.00);INSERT INTO `order_items` VALUES (10949, 10, 31.00, 30, 0.00);INSERT INTO `order_items` VALUES (10949, 17, 39.00, 6, 0.00);INSERT INTO `order_items` VALUES (10949, 62, 49.30, 60, 0.00);INSERT INTO `order_items` VALUES (10950, 4, 22.00, 5, 0.00);INSERT INTO `order_items` VALUES (10951, 33, 2.50, 15, 0.05);INSERT INTO `order_items` VALUES (10951, 41, 9.65, 6, 0.05);INSERT INTO `order_items` VALUES (10951, 75, 7.75, 50, 0.05);INSERT INTO `order_items` VALUES (10952, 6, 25.00, 16, 0.05);INSERT INTO `order_items` VALUES (10952, 28, 45.60, 2, 0.00);INSERT INTO `order_items` VALUES (10953, 20, 81.00, 50, 0.05);INSERT INTO `order_items` VALUES (10953, 31, 12.50, 50, 0.05);INSERT INTO `order_items` VALUES (10954, 16, 17.45, 28, 0.15);INSERT INTO `order_items` VALUES (10954, 31, 12.50, 25, 0.15);INSERT INTO `order_items` VALUES (10954, 45, 9.50, 30, 0.00);INSERT INTO `order_items` VALUES (10954, 60, 34.00, 24, 0.15);INSERT INTO `order_items` VALUES (10955, 75, 7.75, 12, 0.20);INSERT INTO `order_items` VALUES (10956, 21, 10.00, 12, 0.00);INSERT INTO `order_items` VALUES (10956, 47, 9.50, 14, 0.00);INSERT INTO `order_items` VALUES (10956, 51, 53.00, 8, 0.00);INSERT INTO `order_items` VALUES (10957, 30, 25.89, 30, 0.00);INSERT INTO `order_items` VALUES (10957, 35, 18.00, 40, 0.00);INSERT INTO `order_items` VALUES (10957, 64, 33.25, 8, 0.00);INSERT INTO `order_items` VALUES (10958, 5, 21.35, 20, 0.00);INSERT INTO `order_items` VALUES (10958, 7, 30.00, 6, 0.00);INSERT INTO `order_items` VALUES (10958, 72, 34.80, 5, 0.00);INSERT INTO `order_items` VALUES (10959, 75, 7.75, 20, 0.15);INSERT INTO `order_items` VALUES (10960, 24, 4.50, 10, 0.25);INSERT INTO `order_items` VALUES (10960, 41, 9.65, 24, 0.00);INSERT INTO `order_items` VALUES (10961, 52, 7.00, 6, 0.05);INSERT INTO `order_items` VALUES (10961, 76, 18.00, 60, 0.00);INSERT INTO `order_items` VALUES (10962, 7, 30.00, 45, 0.00);INSERT INTO `order_items` VALUES (10962, 13, 6.00, 77, 0.00);INSERT INTO `order_items` VALUES (10962, 53, 32.80, 20, 0.00);INSERT INTO `order_items` VALUES (10962, 69, 36.00, 9, 0.00);INSERT INTO `order_items` VALUES (10962, 76, 18.00, 44, 0.00);INSERT INTO `order_items` VALUES (10963, 60, 34.00, 2, 0.15);INSERT INTO `order_items` VALUES (10964, 18, 62.50, 6, 0.00);INSERT INTO `order_items` VALUES (10964, 38, 263.50, 5, 0.00);INSERT INTO `order_items` VALUES (10964, 69, 36.00, 10, 0.00);INSERT INTO `order_items` VALUES (10965, 51, 53.00, 16, 0.00);INSERT INTO `order_items` VALUES (10966, 37, 26.00, 8, 0.00);INSERT INTO `order_items` VALUES (10966, 56, 38.00, 12, 0.15);INSERT INTO `order_items` VALUES (10966, 62, 49.30, 12, 0.15);INSERT INTO `order_items` VALUES (10967, 19, 9.20, 12, 0.00);INSERT INTO `order_items` VALUES (10967, 49, 20.00, 40, 0.00);INSERT INTO `order_items` VALUES (10968, 12, 38.00, 30, 0.00);INSERT INTO `order_items` VALUES (10968, 24, 4.50, 30, 0.00);INSERT INTO `order_items` VALUES (10968, 64, 33.25, 4, 0.00);INSERT INTO `order_items` VALUES (10969, 46, 12.00, 9, 0.00);INSERT INTO `order_items` VALUES (10970, 52, 7.00, 40, 0.20);INSERT INTO `order_items` VALUES (10971, 29, 123.79, 14, 0.00);INSERT INTO `order_items` VALUES (10972, 17, 39.00, 6, 0.00);INSERT INTO `order_items` VALUES (10972, 33, 2.50, 7, 0.00);INSERT INTO `order_items` VALUES (10973, 26, 31.23, 5, 0.00);INSERT INTO `order_items` VALUES (10973, 41, 9.65, 6, 0.00);INSERT INTO `order_items` VALUES (10973, 75, 7.75, 10, 0.00);INSERT INTO `order_items` VALUES (10974, 63, 43.90, 10, 0.00);INSERT INTO `order_items` VALUES (10975, 8, 40.00, 16, 0.00);INSERT INTO `order_items` VALUES (10975, 75, 7.75, 10, 0.00);INSERT INTO `order_items` VALUES (10976, 28, 45.60, 20, 0.00);INSERT INTO `order_items` VALUES (10977, 39, 18.00, 30, 0.00);INSERT INTO `order_items` VALUES (10977, 47, 9.50, 30, 0.00);INSERT INTO `order_items` VALUES (10977, 51, 53.00, 10, 0.00);INSERT INTO `order_items` VALUES (10977, 63, 43.90, 20, 0.00);INSERT INTO `order_items` VALUES (10978, 8, 40.00, 20, 0.15);INSERT INTO `order_items` VALUES (10978, 21, 10.00, 40, 0.15);INSERT INTO `order_items` VALUES (10978, 40, 18.40, 10, 0.00);INSERT INTO `order_items` VALUES (10978, 44, 19.45, 6, 0.15);INSERT INTO `order_items` VALUES (10979, 7, 30.00, 18, 0.00);INSERT INTO `order_items` VALUES (10979, 12, 38.00, 20, 0.00);INSERT INTO `order_items` VALUES (10979, 24, 4.50, 80, 0.00);INSERT INTO `order_items` VALUES (10979, 27, 43.90, 30, 0.00);INSERT INTO `order_items` VALUES (10979, 31, 12.50, 24, 0.00);INSERT INTO `order_items` VALUES (10979, 63, 43.90, 35, 0.00);INSERT INTO `order_items` VALUES (10980, 75, 7.75, 40, 0.20);INSERT INTO `order_items` VALUES (10981, 38, 263.50, 60, 0.00);INSERT INTO `order_items` VALUES (10982, 7, 30.00, 20, 0.00);INSERT INTO `order_items` VALUES (10982, 43, 46.00, 9, 0.00);INSERT INTO `order_items` VALUES (10983, 13, 6.00, 84, 0.15);INSERT INTO `order_items` VALUES (10983, 57, 19.50, 15, 0.00);INSERT INTO `order_items` VALUES (10984, 16, 17.45, 55, 0.00);INSERT INTO `order_items` VALUES (10984, 24, 4.50, 20, 0.00);INSERT INTO `order_items` VALUES (10984, 36, 19.00, 40, 0.00);INSERT INTO `order_items` VALUES (10985, 16, 17.45, 36, 0.10);INSERT INTO `order_items` VALUES (10985, 18, 62.50, 8, 0.10);INSERT INTO `order_items` VALUES (10985, 32, 32.00, 35, 0.10);INSERT INTO `order_items` VALUES (10986, 11, 21.00, 30, 0.00);INSERT INTO `order_items` VALUES (10986, 20, 81.00, 15, 0.00);INSERT INTO `order_items` VALUES (10986, 76, 18.00, 10, 0.00);INSERT INTO `order_items` VALUES (10986, 77, 13.00, 15, 0.00);INSERT INTO `order_items` VALUES (10987, 7, 30.00, 60, 0.00);INSERT INTO `order_items` VALUES (10987, 43, 46.00, 6, 0.00);INSERT INTO `order_items` VALUES (10987, 72, 34.80, 20, 0.00);INSERT INTO `order_items` VALUES (10988, 7, 30.00, 60, 0.00);INSERT INTO `order_items` VALUES (10988, 62, 49.30, 40, 0.10);INSERT INTO `order_items` VALUES (10989, 6, 25.00, 40, 0.00);INSERT INTO `order_items` VALUES (10989, 11, 21.00, 15, 0.00);INSERT INTO `order_items` VALUES (10989, 41, 9.65, 4, 0.00);INSERT INTO `order_items` VALUES (10990, 21, 10.00, 65, 0.00);INSERT INTO `order_items` VALUES (10990, 34, 14.00, 60, 0.15);INSERT INTO `order_items` VALUES (10990, 55, 24.00, 65, 0.15);INSERT INTO `order_items` VALUES (10990, 61, 28.50, 66, 0.15);INSERT INTO `order_items` VALUES (10991, 2, 19.00, 50, 0.20);INSERT INTO `order_items` VALUES (10991, 70, 15.00, 20, 0.20);INSERT INTO `order_items` VALUES (10991, 76, 18.00, 90, 0.20);INSERT INTO `order_items` VALUES (10992, 72, 34.80, 2, 0.00);INSERT INTO `order_items` VALUES (10993, 29, 123.79, 50, 0.25);INSERT INTO `order_items` VALUES (10993, 41, 9.65, 35, 0.25);INSERT INTO `order_items` VALUES (10994, 59, 55.00, 18, 0.05);INSERT INTO `order_items` VALUES (10995, 51, 53.00, 20, 0.00);INSERT INTO `order_items` VALUES (10995, 60, 34.00, 4, 0.00);INSERT INTO `order_items` VALUES (10996, 42, 14.00, 40, 0.00);INSERT INTO `order_items` VALUES (10997, 32, 32.00, 50, 0.00);INSERT INTO `order_items` VALUES (10997, 46, 12.00, 20, 0.25);INSERT INTO `order_items` VALUES (10997, 52, 7.00, 20, 0.25);INSERT INTO `order_items` VALUES (10998, 24, 4.50, 12, 0.00);INSERT INTO `order_items` VALUES (10998, 61, 28.50, 7, 0.00);INSERT INTO `order_items` VALUES (10998, 74, 10.00, 20, 0.00);INSERT INTO `order_items` VALUES (10998, 75, 7.75, 30, 0.00);INSERT INTO `order_items` VALUES (10999, 41, 9.65, 20, 0.05);INSERT INTO `order_items` VALUES (10999, 51, 53.00, 15, 0.05);INSERT INTO `order_items` VALUES (10999, 77, 13.00, 21, 0.05);INSERT INTO `order_items` VALUES (11000, 4, 22.00, 25, 0.25);INSERT INTO `order_items` VALUES (11000, 24, 4.50, 30, 0.25);INSERT INTO `order_items` VALUES (11000, 77, 13.00, 30, 0.00);INSERT INTO `order_items` VALUES (11001, 7, 30.00, 60, 0.00);INSERT INTO `order_items` VALUES (11001, 22, 21.00, 25, 0.00);INSERT INTO `order_items` VALUES (11001, 46, 12.00, 25, 0.00);INSERT INTO `order_items` VALUES (11001, 55, 24.00, 6, 0.00);INSERT INTO `order_items` VALUES (11002, 13, 6.00, 56, 0.00);INSERT INTO `order_items` VALUES (11002, 35, 18.00, 15, 0.15);INSERT INTO `order_items` VALUES (11002, 42, 14.00, 24, 0.15);INSERT INTO `order_items` VALUES (11002, 55, 24.00, 40, 0.00);INSERT INTO `order_items` VALUES (11003, 1, 18.00, 4, 0.00);INSERT INTO `order_items` VALUES (11003, 40, 18.40, 10, 0.00);INSERT INTO `order_items` VALUES (11003, 52, 7.00, 10, 0.00);INSERT INTO `order_items` VALUES (11004, 26, 31.23, 6, 0.00);INSERT INTO `order_items` VALUES (11004, 76, 18.00, 6, 0.00);INSERT INTO `order_items` VALUES (11005, 1, 18.00, 2, 0.00);INSERT INTO `order_items` VALUES (11005, 59, 55.00, 10, 0.00);INSERT INTO `order_items` VALUES (11006, 1, 18.00, 8, 0.00);INSERT INTO `order_items` VALUES (11006, 29, 123.79, 2, 0.25);INSERT INTO `order_items` VALUES (11007, 8, 40.00, 30, 0.00);INSERT INTO `order_items` VALUES (11007, 29, 123.79, 10, 0.00);INSERT INTO `order_items` VALUES (11007, 42, 14.00, 14, 0.00);INSERT INTO `order_items` VALUES (11008, 28, 45.60, 70, 0.05);INSERT INTO `order_items` VALUES (11008, 34, 14.00, 90, 0.05);INSERT INTO `order_items` VALUES (11008, 71, 21.50, 21, 0.00);INSERT INTO `order_items` VALUES (11009, 24, 4.50, 12, 0.00);INSERT INTO `order_items` VALUES (11009, 36, 19.00, 18, 0.25);INSERT INTO `order_items` VALUES (11009, 60, 34.00, 9, 0.00);INSERT INTO `order_items` VALUES (11010, 7, 30.00, 20, 0.00);INSERT INTO `order_items` VALUES (11010, 24, 4.50, 10, 0.00);INSERT INTO `order_items` VALUES (11011, 58, 13.25, 40, 0.05);INSERT INTO `order_items` VALUES (11011, 71, 21.50, 20, 0.00);INSERT INTO `order_items` VALUES (11012, 19, 9.20, 50, 0.05);INSERT INTO `order_items` VALUES (11012, 60, 34.00, 36, 0.05);INSERT INTO `order_items` VALUES (11012, 71, 21.50, 60, 0.05);INSERT INTO `order_items` VALUES (11013, 23, 9.00, 10, 0.00);INSERT INTO `order_items` VALUES (11013, 42, 14.00, 4, 0.00);INSERT INTO `order_items` VALUES (11013, 45, 9.50, 20, 0.00);INSERT INTO `order_items` VALUES (11013, 68, 12.50, 2, 0.00);INSERT INTO `order_items` VALUES (11014, 41, 9.65, 28, 0.10);INSERT INTO `order_items` VALUES (11015, 30, 25.89, 15, 0.00);INSERT INTO `order_items` VALUES (11015, 77, 13.00, 18, 0.00);INSERT INTO `order_items` VALUES (11016, 31, 12.50, 15, 0.00);INSERT INTO `order_items` VALUES (11016, 36, 19.00, 16, 0.00);INSERT INTO `order_items` VALUES (11017, 3, 10.00, 25, 0.00);INSERT INTO `order_items` VALUES (11017, 59, 55.00, 110, 0.00);INSERT INTO `order_items` VALUES (11017, 70, 15.00, 30, 0.00);INSERT INTO `order_items` VALUES (11018, 12, 38.00, 20, 0.00);INSERT INTO `order_items` VALUES (11018, 18, 62.50, 10, 0.00);INSERT INTO `order_items` VALUES (11018, 56, 38.00, 5, 0.00);INSERT INTO `order_items` VALUES (11019, 46, 12.00, 3, 0.00);INSERT INTO `order_items` VALUES (11019, 49, 20.00, 2, 0.00);INSERT INTO `order_items` VALUES (11020, 10, 31.00, 24, 0.15);INSERT INTO `order_items` VALUES (11021, 2, 19.00, 11, 0.25);INSERT INTO `order_items` VALUES (11021, 20, 81.00, 15, 0.00);INSERT INTO `order_items` VALUES (11021, 26, 31.23, 63, 0.00);INSERT INTO `order_items` VALUES (11021, 51, 53.00, 44, 0.25);INSERT INTO `order_items` VALUES (11021, 72, 34.80, 35, 0.00);INSERT INTO `order_items` VALUES (11022, 19, 9.20, 35, 0.00);INSERT INTO `order_items` VALUES (11022, 69, 36.00, 30, 0.00);INSERT INTO `order_items` VALUES (11023, 7, 30.00, 4, 0.00);INSERT INTO `order_items` VALUES (11023, 43, 46.00, 30, 0.00);INSERT INTO `order_items` VALUES (11024, 26, 31.23, 12, 0.00);INSERT INTO `order_items` VALUES (11024, 33, 2.50, 30, 0.00);INSERT INTO `order_items` VALUES (11024, 65, 21.05, 21, 0.00);INSERT INTO `order_items` VALUES (11024, 71, 21.50, 50, 0.00);INSERT INTO `order_items` VALUES (11025, 1, 18.00, 10, 0.10);INSERT INTO `order_items` VALUES (11025, 13, 6.00, 20, 0.10);INSERT INTO `order_items` VALUES (11026, 18, 62.50, 8, 0.00);INSERT INTO `order_items` VALUES (11026, 51, 53.00, 10, 0.00);INSERT INTO `order_items` VALUES (11027, 24, 4.50, 30, 0.25);INSERT INTO `order_items` VALUES (11027, 62, 49.30, 21, 0.25);INSERT INTO `order_items` VALUES (11028, 55, 24.00, 35, 0.00);INSERT INTO `order_items` VALUES (11028, 59, 55.00, 24, 0.00);INSERT INTO `order_items` VALUES (11029, 56, 38.00, 20, 0.00);INSERT INTO `order_items` VALUES (11029, 63, 43.90, 12, 0.00);INSERT INTO `order_items` VALUES (11030, 2, 19.00, 100, 0.25);INSERT INTO `order_items` VALUES (11030, 5, 21.35, 70, 0.00);INSERT INTO `order_items` VALUES (11030, 29, 123.79, 60, 0.25);INSERT INTO `order_items` VALUES (11030, 59, 55.00, 100, 0.25);INSERT INTO `order_items` VALUES (11031, 1, 18.00, 45, 0.00);INSERT INTO `order_items` VALUES (11031, 13, 6.00, 80, 0.00);INSERT INTO `order_items` VALUES (11031, 24, 4.50, 21, 0.00);INSERT INTO `order_items` VALUES (11031, 64, 33.25, 20, 0.00);INSERT INTO `order_items` VALUES (11031, 71, 21.50, 16, 0.00);INSERT INTO `order_items` VALUES (11032, 36, 19.00, 35, 0.00);INSERT INTO `order_items` VALUES (11032, 38, 263.50, 25, 0.00);INSERT INTO `order_items` VALUES (11032, 59, 55.00, 30, 0.00);INSERT INTO `order_items` VALUES (11033, 53, 32.80, 70, 0.10);INSERT INTO `order_items` VALUES (11033, 69, 36.00, 36, 0.10);INSERT INTO `order_items` VALUES (11034, 21, 10.00, 15, 0.10);INSERT INTO `order_items` VALUES (11034, 44, 19.45, 12, 0.00);INSERT INTO `order_items` VALUES (11034, 61, 28.50, 6, 0.00);INSERT INTO `order_items` VALUES (11035, 1, 18.00, 10, 0.00);INSERT INTO `order_items` VALUES (11035, 35, 18.00, 60, 0.00);INSERT INTO `order_items` VALUES (11035, 42, 14.00, 30, 0.00);INSERT INTO `order_items` VALUES (11035, 54, 7.45, 10, 0.00);INSERT INTO `order_items` VALUES (11036, 13, 6.00, 7, 0.00);INSERT INTO `order_items` VALUES (11036, 59, 55.00, 30, 0.00);INSERT INTO `order_items` VALUES (11037, 70, 15.00, 4, 0.00);INSERT INTO `order_items` VALUES (11038, 40, 18.40, 5, 0.20);INSERT INTO `order_items` VALUES (11038, 52, 7.00, 2, 0.00);INSERT INTO `order_items` VALUES (11038, 71, 21.50, 30, 0.00);INSERT INTO `order_items` VALUES (11039, 28, 45.60, 20, 0.00);INSERT INTO `order_items` VALUES (11039, 35, 18.00, 24, 0.00);INSERT INTO `order_items` VALUES (11039, 49, 20.00, 60, 0.00);INSERT INTO `order_items` VALUES (11039, 57, 19.50, 28, 0.00);INSERT INTO `order_items` VALUES (11040, 21, 10.00, 20, 0.00);INSERT INTO `order_items` VALUES (11041, 2, 19.00, 30, 0.20);INSERT INTO `order_items` VALUES (11041, 63, 43.90, 30, 0.00);INSERT INTO `order_items` VALUES (11042, 44, 19.45, 15, 0.00);INSERT INTO `order_items` VALUES (11042, 61, 28.50, 4, 0.00);INSERT INTO `order_items` VALUES (11043, 11, 21.00, 10, 0.00);INSERT INTO `order_items` VALUES (11044, 62, 49.30, 12, 0.00);INSERT INTO `order_items` VALUES (11045, 33, 2.50, 15, 0.00);INSERT INTO `order_items` VALUES (11045, 51, 53.00, 24, 0.00);INSERT INTO `order_items` VALUES (11046, 12, 38.00, 20, 0.05);INSERT INTO `order_items` VALUES (11046, 32, 32.00, 15, 0.05);INSERT INTO `order_items` VALUES (11046, 35, 18.00, 18, 0.05);INSERT INTO `order_items` VALUES (11047, 1, 18.00, 25, 0.25);INSERT INTO `order_items` VALUES (11047, 5, 21.35, 30, 0.25);INSERT INTO `order_items` VALUES (11048, 68, 12.50, 42, 0.00);INSERT INTO `order_items` VALUES (11049, 2, 19.00, 10, 0.20);INSERT INTO `order_items` VALUES (11049, 12, 38.00, 4, 0.20);INSERT INTO `order_items` VALUES (11050, 76, 18.00, 50, 0.10);INSERT INTO `order_items` VALUES (11051, 24, 4.50, 10, 0.20);INSERT INTO `order_items` VALUES (11052, 43, 46.00, 30, 0.20);INSERT INTO `order_items` VALUES (11052, 61, 28.50, 10, 0.20);INSERT INTO `order_items` VALUES (11053, 18, 62.50, 35, 0.20);INSERT INTO `order_items` VALUES (11053, 32, 32.00, 20, 0.00);INSERT INTO `order_items` VALUES (11053, 64, 33.25, 25, 0.20);INSERT INTO `order_items` VALUES (11054, 33, 2.50, 10, 0.00);INSERT INTO `order_items` VALUES (11054, 67, 14.00, 20, 0.00);INSERT INTO `order_items` VALUES (11055, 24, 4.50, 15, 0.00);INSERT INTO `order_items` VALUES (11055, 25, 14.00, 15, 0.00);INSERT INTO `order_items` VALUES (11055, 51, 53.00, 20, 0.00);INSERT INTO `order_items` VALUES (11055, 57, 19.50, 20, 0.00);INSERT INTO `order_items` VALUES (11056, 7, 30.00, 40, 0.00);INSERT INTO `order_items` VALUES (11056, 55, 24.00, 35, 0.00);INSERT INTO `order_items` VALUES (11056, 60, 34.00, 50, 0.00);INSERT INTO `order_items` VALUES (11057, 70, 15.00, 3, 0.00);INSERT INTO `order_items` VALUES (11058, 21, 10.00, 3, 0.00);INSERT INTO `order_items` VALUES (11058, 60, 34.00, 21, 0.00);INSERT INTO `order_items` VALUES (11058, 61, 28.50, 4, 0.00);INSERT INTO `order_items` VALUES (11059, 13, 6.00, 30, 0.00);INSERT INTO `order_items` VALUES (11059, 17, 39.00, 12, 0.00);INSERT INTO `order_items` VALUES (11059, 60, 34.00, 35, 0.00);INSERT INTO `order_items` VALUES (11060, 60, 34.00, 4, 0.00);INSERT INTO `order_items` VALUES (11060, 77, 13.00, 10, 0.00);INSERT INTO `order_items` VALUES (11061, 60, 34.00, 15, 0.00);INSERT INTO `order_items` VALUES (11062, 53, 32.80, 10, 0.20);INSERT INTO `order_items` VALUES (11062, 70, 15.00, 12, 0.20);INSERT INTO `order_items` VALUES (11063, 34, 14.00, 30, 0.00);INSERT INTO `order_items` VALUES (11063, 40, 18.40, 40, 0.10);INSERT INTO `order_items` VALUES (11063, 41, 9.65, 30, 0.10);INSERT INTO `order_items` VALUES (11064, 17, 39.00, 77, 0.10);INSERT INTO `order_items` VALUES (11064, 41, 9.65, 12, 0.00);INSERT INTO `order_items` VALUES (11064, 53, 32.80, 25, 0.10);INSERT INTO `order_items` VALUES (11064, 55, 24.00, 4, 0.10);INSERT INTO `order_items` VALUES (11064, 68, 12.50, 55, 0.00);INSERT INTO `order_items` VALUES (11065, 30, 25.89, 4, 0.25);INSERT INTO `order_items` VALUES (11065, 54, 7.45, 20, 0.25);INSERT INTO `order_items` VALUES (11066, 16, 17.45, 3, 0.00);INSERT INTO `order_items` VALUES (11066, 19, 9.20, 42, 0.00);INSERT INTO `order_items` VALUES (11066, 34, 14.00, 35, 0.00);INSERT INTO `order_items` VALUES (11067, 41, 9.65, 9, 0.00);INSERT INTO `order_items` VALUES (11068, 28, 45.60, 8, 0.15);INSERT INTO `order_items` VALUES (11068, 43, 46.00, 36, 0.15);INSERT INTO `order_items` VALUES (11068, 77, 13.00, 28, 0.15);INSERT INTO `order_items` VALUES (11069, 39, 18.00, 20, 0.00);INSERT INTO `order_items` VALUES (11070, 1, 18.00, 40, 0.15);INSERT INTO `order_items` VALUES (11070, 2, 19.00, 20, 0.15);INSERT INTO `order_items` VALUES (11070, 16, 17.45, 30, 0.15);INSERT INTO `order_items` VALUES (11070, 31, 12.50, 20, 0.00);INSERT INTO `order_items` VALUES (11071, 7, 30.00, 15, 0.05);INSERT INTO `order_items` VALUES (11071, 13, 6.00, 10, 0.05);INSERT INTO `order_items` VALUES (11072, 2, 19.00, 8, 0.00);INSERT INTO `order_items` VALUES (11072, 41, 9.65, 40, 0.00);INSERT INTO `order_items` VALUES (11072, 50, 16.25, 22, 0.00);INSERT INTO `order_items` VALUES (11072, 64, 33.25, 130, 0.00);INSERT INTO `order_items` VALUES (11073, 11, 21.00, 10, 0.00);INSERT INTO `order_items` VALUES (11073, 24, 4.50, 20, 0.00);INSERT INTO `order_items` VALUES (11074, 16, 17.45, 14, 0.05);INSERT INTO `order_items` VALUES (11075, 2, 19.00, 10, 0.15);INSERT INTO `order_items` VALUES (11075, 46, 12.00, 30, 0.15);INSERT INTO `order_items` VALUES (11075, 76, 18.00, 2, 0.15);INSERT INTO `order_items` VALUES (11076, 6, 25.00, 20, 0.25);INSERT INTO `order_items` VALUES (11076, 14, 23.25, 20, 0.25);INSERT INTO `order_items` VALUES (11076, 19, 9.20, 10, 0.25);INSERT INTO `order_items` VALUES (11077, 2, 19.00, 24, 0.20);INSERT INTO `order_items` VALUES (11077, 3, 10.00, 4, 0.00);INSERT INTO `order_items` VALUES (11077, 4, 22.00, 1, 0.00);INSERT INTO `order_items` VALUES (11077, 6, 25.00, 1, 0.02);INSERT INTO `order_items` VALUES (11077, 7, 30.00, 1, 0.05);INSERT INTO `order_items` VALUES (11077, 8, 40.00, 2, 0.10);INSERT INTO `order_items` VALUES (11077, 10, 31.00, 1, 0.00);INSERT INTO `order_items` VALUES (11077, 12, 38.00, 2, 0.05);INSERT INTO `order_items` VALUES (11077, 13, 6.00, 4, 0.00);INSERT INTO `order_items` VALUES (11077, 14, 23.25, 1, 0.03);INSERT INTO `order_items` VALUES (11077, 16, 17.45, 2, 0.03);INSERT INTO `order_items` VALUES (11077, 20, 81.00, 1, 0.04);INSERT INTO `order_items` VALUES (11077, 23, 9.00, 2, 0.00);INSERT INTO `order_items` VALUES (11077, 32, 32.00, 1, 0.00);INSERT INTO `order_items` VALUES (11077, 39, 18.00, 2, 0.05);INSERT INTO `order_items` VALUES (11077, 41, 9.65, 3, 0.00);INSERT INTO `order_items` VALUES (11077, 46, 12.00, 3, 0.02);INSERT INTO `order_items` VALUES (11077, 52, 7.00, 2, 0.00);INSERT INTO `order_items` VALUES (11077, 55, 24.00, 2, 0.00);INSERT INTO `order_items` VALUES (11077, 60, 34.00, 2, 0.06);INSERT INTO `order_items` VALUES (11077, 64, 33.25, 2, 0.03);INSERT INTO `order_items` VALUES (11077, 66, 17.00, 1, 0.00);INSERT INTO `order_items` VALUES (11077, 73, 15.00, 2, 0.01);INSERT INTO `order_items` VALUES (11077, 75, 7.75, 4, 0.00);INSERT INTO `order_items` VALUES (11077, 77, 13.00, 2, 0.00);COMMIT;-- ------------------------------ Table structure for orders-- ----------------------------DROP TABLE IF EXISTS `orders`;CREATE TABLE `orders` (  `order_id` int NOT NULL,  `customer_id` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `employee_id` int DEFAULT NULL,  `order_date` datetime DEFAULT NULL,  `shipped_date` datetime DEFAULT NULL,  `ship_via` int DEFAULT NULL,  `freight` decimal(10,2) DEFAULT NULL,  `ship_address` varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `ship_city` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `ship_region` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `ship_postal_code` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `ship_country` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  PRIMARY KEY (`order_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;-- ------------------------------ Records of orders-- ----------------------------BEGIN;INSERT INTO `orders` VALUES (10248, &#x27;VINET&#x27;, 5, &#x27;2016-07-04 00:00:00&#x27;, &#x27;2016-07-16 00:00:00&#x27;, 3, 32.38, &#x27;59 rue de l\\&#x27;\\&#x27;Abbaye&#x27;, &#x27;Reims&#x27;, NULL, &#x27;51100&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10249, &#x27;TOMSP&#x27;, 6, &#x27;2016-07-05 00:00:00&#x27;, &#x27;2016-07-10 00:00:00&#x27;, 1, 11.61, &#x27;Luisenstr. 48&#x27;, &#x27;Münster&#x27;, NULL, &#x27;44087&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10250, &#x27;HANAR&#x27;, 4, &#x27;2016-07-08 00:00:00&#x27;, &#x27;2016-07-12 00:00:00&#x27;, 2, 65.83, &#x27;Rua do Paço-67&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;05454-876&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10251, &#x27;VICTE&#x27;, 3, &#x27;2016-07-08 00:00:00&#x27;, &#x27;2016-07-15 00:00:00&#x27;, 1, 41.34, &#x27;2-rue du Commerce&#x27;, &#x27;Lyo&#x27;, NULL, &#x27;69004&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10252, &#x27;SUPRD&#x27;, 4, &#x27;2016-07-09 00:00:00&#x27;, &#x27;2016-07-11 00:00:00&#x27;, 2, 51.30, &#x27;Boulevard Tirou-255&#x27;, &#x27;Charleroi&#x27;, NULL, &#x27;B-6000&#x27;, &#x27;Belgium&#x27;);INSERT INTO `orders` VALUES (10253, &#x27;HANAR&#x27;, 3, &#x27;2016-07-10 00:00:00&#x27;, &#x27;2016-07-16 00:00:00&#x27;, 2, 58.17, &#x27;Rua do Paço-67&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;05454-876&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10254, &#x27;CHOPS&#x27;, 5, &#x27;2016-07-11 00:00:00&#x27;, &#x27;2016-07-23 00:00:00&#x27;, 2, 22.98, &#x27;Hauptstr. 31&#x27;, &#x27;Ber&#x27;, NULL, &#x27;3012&#x27;, &#x27;Switzerland&#x27;);INSERT INTO `orders` VALUES (10255, &#x27;RICSU&#x27;, 9, &#x27;2016-07-12 00:00:00&#x27;, &#x27;2016-07-15 00:00:00&#x27;, 3, 148.33, &#x27;Starenweg 5&#x27;, &#x27;Genève&#x27;, NULL, &#x27;1204&#x27;, &#x27;Switzerland&#x27;);INSERT INTO `orders` VALUES (10256, &#x27;WELLI&#x27;, 3, &#x27;2016-07-15 00:00:00&#x27;, &#x27;2016-07-17 00:00:00&#x27;, 2, 13.97, &#x27;Rua do Mercado-12&#x27;, &#x27;Resende&#x27;, &#x27;SP&#x27;, &#x27;08737-363&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10257, &#x27;HILAA&#x27;, 4, &#x27;2016-07-16 00:00:00&#x27;, &#x27;2016-07-22 00:00:00&#x27;, 3, 81.91, &#x27;Carrera 22 con Ave. Carlos Soublette #8-35&#x27;, &#x27;San Cristóbal&#x27;, &#x27;Táchira&#x27;, &#x27;5022&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10258, &#x27;ERNSH&#x27;, 1, &#x27;2016-07-17 00:00:00&#x27;, &#x27;2016-07-23 00:00:00&#x27;, 1, 140.51, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10259, &#x27;CENTC&#x27;, 4, &#x27;2016-07-18 00:00:00&#x27;, &#x27;2016-07-25 00:00:00&#x27;, 3, 3.25, &#x27;Sierras de Granada 9993&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05022&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10260, &#x27;OTTIK&#x27;, 4, &#x27;2016-07-19 00:00:00&#x27;, &#x27;2016-07-29 00:00:00&#x27;, 1, 55.09, &#x27;Mehrheimerstr. 369&#x27;, &#x27;Köl&#x27;, NULL, &#x27;50739&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10261, &#x27;QUEDE&#x27;, 10, &#x27;2016-07-19 00:00:00&#x27;, &#x27;2016-07-30 00:00:00&#x27;, 2, 3.05, &#x27;Rua da Panificadora-12&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;02389-673&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10262, &#x27;RATTC&#x27;, 8, &#x27;2016-07-22 00:00:00&#x27;, &#x27;2016-07-25 00:00:00&#x27;, 3, 48.29, &#x27;2817 Milton Dr.&#x27;, &#x27;Albuquerque&#x27;, &#x27;NM&#x27;, &#x27;87110&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10263, &#x27;ERNSH&#x27;, 9, &#x27;2016-07-23 00:00:00&#x27;, &#x27;2016-07-31 00:00:00&#x27;, 3, 146.06, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10264, &#x27;FOLKO&#x27;, 6, &#x27;2016-07-24 00:00:00&#x27;, &#x27;2016-08-23 00:00:00&#x27;, 3, 3.67, &#x27;Åkergatan 24&#x27;, &#x27;Bräcke&#x27;, NULL, &#x27;S-844 67&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10265, &#x27;BLONP&#x27;, 2, &#x27;2016-07-25 00:00:00&#x27;, &#x27;2016-08-12 00:00:00&#x27;, 1, 55.28, &#x27;24-place Kléber&#x27;, &#x27;Strasbourg&#x27;, NULL, &#x27;67000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10266, &#x27;WARTH&#x27;, 3, &#x27;2016-07-26 00:00:00&#x27;, &#x27;2016-07-31 00:00:00&#x27;, 3, 25.73, &#x27;Torikatu 38&#x27;, &#x27;Oulu&#x27;, NULL, &#x27;90110&#x27;, &#x27;Finland&#x27;);INSERT INTO `orders` VALUES (10267, &#x27;FRANK&#x27;, 4, &#x27;2016-07-29 00:00:00&#x27;, &#x27;2016-08-06 00:00:00&#x27;, 1, 208.58, &#x27;Berliner Platz 43&#x27;, &#x27;Münche&#x27;, NULL, &#x27;80805&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10268, &#x27;GROSR&#x27;, 8, &#x27;2016-07-30 00:00:00&#x27;, &#x27;2016-08-02 00:00:00&#x27;, 3, 66.29, &#x27;5ª Ave. Los Palos Grandes&#x27;, &#x27;Caracas&#x27;, &#x27;DF&#x27;, &#x27;1081&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10269, &#x27;WHITC&#x27;, 5, &#x27;2016-07-31 00:00:00&#x27;, &#x27;2016-08-09 00:00:00&#x27;, 1, 4.56, &#x27;1029 - 12th Ave. S.&#x27;, &#x27;Seattle&#x27;, &#x27;WA&#x27;, &#x27;98124&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10270, &#x27;WARTH&#x27;, 1, &#x27;2016-08-01 00:00:00&#x27;, &#x27;2016-08-02 00:00:00&#x27;, 1, 136.54, &#x27;Torikatu 38&#x27;, &#x27;Oulu&#x27;, NULL, &#x27;90110&#x27;, &#x27;Finland&#x27;);INSERT INTO `orders` VALUES (10271, &#x27;SPLIR&#x27;, 6, &#x27;2016-08-01 00:00:00&#x27;, &#x27;2016-08-30 00:00:00&#x27;, 2, 4.54, &#x27;P.O. Box 555&#x27;, &#x27;Lander&#x27;, &#x27;WY&#x27;, &#x27;82520&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10272, &#x27;RATTC&#x27;, 6, &#x27;2016-08-02 00:00:00&#x27;, &#x27;2016-08-06 00:00:00&#x27;, 2, 98.03, &#x27;2817 Milton Dr.&#x27;, &#x27;Albuquerque&#x27;, &#x27;NM&#x27;, &#x27;87110&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10273, &#x27;QUICK&#x27;, 3, &#x27;2016-08-05 00:00:00&#x27;, &#x27;2016-08-12 00:00:00&#x27;, 3, 76.07, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10274, &#x27;VINET&#x27;, 6, &#x27;2016-08-06 00:00:00&#x27;, &#x27;2016-08-16 00:00:00&#x27;, 1, 6.01, &#x27;59 rue de l\\&#x27;\\&#x27;Abbaye&#x27;, &#x27;Reims&#x27;, NULL, &#x27;51100&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10275, &#x27;MAGAA&#x27;, 1, &#x27;2016-08-07 00:00:00&#x27;, &#x27;2016-08-09 00:00:00&#x27;, 1, 26.93, &#x27;Via Ludovico il Moro 22&#x27;, &#x27;Bergamo&#x27;, NULL, &#x27;24100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (10276, &#x27;TORTU&#x27;, 8, &#x27;2016-08-08 00:00:00&#x27;, &#x27;2016-08-14 00:00:00&#x27;, 3, 13.84, &#x27;Avda. Azteca 123&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05033&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10277, &#x27;MORGK&#x27;, 2, &#x27;2016-08-09 00:00:00&#x27;, &#x27;2016-08-13 00:00:00&#x27;, 3, 125.77, &#x27;Heerstr. 22&#x27;, &#x27;Leipzig&#x27;, NULL, &#x27;04179&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10278, &#x27;BERGS&#x27;, 8, &#x27;2016-08-12 00:00:00&#x27;, &#x27;2016-08-16 00:00:00&#x27;, 2, 92.69, &#x27;Berguvsvägen  8&#x27;, &#x27;Luleå&#x27;, NULL, &#x27;S-958 22&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10279, &#x27;LEHMS&#x27;, 8, &#x27;2016-08-13 00:00:00&#x27;, &#x27;2016-08-16 00:00:00&#x27;, 2, 25.83, &#x27;Magazinweg 7&#x27;, &#x27;Frankfurt a.M.&#x27;, NULL, &#x27;60528&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10280, &#x27;BERGS&#x27;, 2, &#x27;2016-08-14 00:00:00&#x27;, &#x27;2016-09-12 00:00:00&#x27;, 1, 8.98, &#x27;Berguvsvägen  8&#x27;, &#x27;Luleå&#x27;, NULL, &#x27;S-958 22&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10281, &#x27;ROMEY&#x27;, 4, &#x27;2016-08-14 00:00:00&#x27;, &#x27;2016-08-21 00:00:00&#x27;, 1, 2.94, &#x27;Gran Vía-1&#x27;, &#x27;Madrid&#x27;, NULL, &#x27;28001&#x27;, &#x27;Spain&#x27;);INSERT INTO `orders` VALUES (10282, &#x27;ROMEY&#x27;, 4, &#x27;2016-08-15 00:00:00&#x27;, &#x27;2016-08-21 00:00:00&#x27;, 1, 12.69, &#x27;Gran Vía-1&#x27;, &#x27;Madrid&#x27;, NULL, &#x27;28001&#x27;, &#x27;Spain&#x27;);INSERT INTO `orders` VALUES (10283, &#x27;LILAS&#x27;, 3, &#x27;2016-08-16 00:00:00&#x27;, &#x27;2016-08-23 00:00:00&#x27;, 3, 84.81, &#x27;Carrera 52 con Ave. Bolívar #65-98 Llano Largo&#x27;, &#x27;Barquisimeto&#x27;, &#x27;Lara&#x27;, &#x27;3508&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10284, &#x27;LEHMS&#x27;, 4, &#x27;2016-08-19 00:00:00&#x27;, &#x27;2016-08-27 00:00:00&#x27;, 1, 76.56, &#x27;Magazinweg 7&#x27;, &#x27;Frankfurt a.M.&#x27;, NULL, &#x27;60528&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10285, &#x27;QUICK&#x27;, 1, &#x27;2016-08-20 00:00:00&#x27;, &#x27;2016-08-26 00:00:00&#x27;, 2, 76.83, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10286, &#x27;QUICK&#x27;, 8, &#x27;2016-08-21 00:00:00&#x27;, &#x27;2016-08-30 00:00:00&#x27;, 3, 229.24, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10287, &#x27;RICAR&#x27;, 8, &#x27;2016-08-22 00:00:00&#x27;, &#x27;2016-08-28 00:00:00&#x27;, 3, 12.76, &#x27;Av. Copacabana-267&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;02389-890&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10288, &#x27;REGGC&#x27;, 4, &#x27;2016-08-23 00:00:00&#x27;, &#x27;2016-09-03 00:00:00&#x27;, 1, 7.45, &#x27;Strada Provinciale 124&#x27;, &#x27;Reggio Emilia&#x27;, NULL, &#x27;42100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (10289, &#x27;BSBEV&#x27;, 7, &#x27;2016-08-26 00:00:00&#x27;, &#x27;2016-08-28 00:00:00&#x27;, 3, 22.77, &#x27;Fauntleroy Circus&#x27;, &#x27;Londo&#x27;, NULL, &#x27;EC2 5NT&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10290, &#x27;COMMI&#x27;, 8, &#x27;2016-08-27 00:00:00&#x27;, &#x27;2016-09-03 00:00:00&#x27;, 1, 79.70, &#x27;Av. dos Lusíadas-23&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05432-043&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10291, &#x27;QUEDE&#x27;, 6, &#x27;2016-08-27 00:00:00&#x27;, &#x27;2016-09-04 00:00:00&#x27;, 2, 6.40, &#x27;Rua da Panificadora-12&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;02389-673&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10292, &#x27;TRADH&#x27;, 1, &#x27;2016-08-28 00:00:00&#x27;, &#x27;2016-09-02 00:00:00&#x27;, 2, 1.35, &#x27;Av. Inês de Castro-414&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05634-030&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10293, &#x27;TORTU&#x27;, 1, &#x27;2016-08-29 00:00:00&#x27;, &#x27;2016-09-11 00:00:00&#x27;, 3, 21.18, &#x27;Avda. Azteca 123&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05033&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10294, &#x27;RATTC&#x27;, 4, &#x27;2016-08-30 00:00:00&#x27;, &#x27;2016-09-05 00:00:00&#x27;, 2, 147.26, &#x27;2817 Milton Dr.&#x27;, &#x27;Albuquerque&#x27;, &#x27;NM&#x27;, &#x27;87110&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10295, &#x27;VINET&#x27;, 2, &#x27;2016-09-02 00:00:00&#x27;, &#x27;2016-09-10 00:00:00&#x27;, 2, 1.15, &#x27;59 rue de l\\&#x27;\\&#x27;Abbaye&#x27;, &#x27;Reims&#x27;, NULL, &#x27;51100&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10296, &#x27;LILAS&#x27;, 6, &#x27;2016-09-03 00:00:00&#x27;, &#x27;2016-09-11 00:00:00&#x27;, 1, 0.12, &#x27;Carrera 52 con Ave. Bolívar #65-98 Llano Largo&#x27;, &#x27;Barquisimeto&#x27;, &#x27;Lara&#x27;, &#x27;3508&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10297, &#x27;BLONP&#x27;, 5, &#x27;2016-09-04 00:00:00&#x27;, &#x27;2016-09-10 00:00:00&#x27;, 2, 5.74, &#x27;24-place Kléber&#x27;, &#x27;Strasbourg&#x27;, NULL, &#x27;67000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10298, &#x27;HUNGO&#x27;, 6, &#x27;2016-09-05 00:00:00&#x27;, &#x27;2016-09-11 00:00:00&#x27;, 2, 168.22, &#x27;8 Johnstown Road&#x27;, &#x27;Cork&#x27;, &#x27;Co. Cork&#x27;, NULL, &#x27;Ireland&#x27;);INSERT INTO `orders` VALUES (10299, &#x27;RICAR&#x27;, 4, &#x27;2016-09-06 00:00:00&#x27;, &#x27;2016-09-13 00:00:00&#x27;, 2, 29.76, &#x27;Av. Copacabana-267&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;02389-890&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10300, &#x27;MAGAA&#x27;, 2, &#x27;2016-09-09 00:00:00&#x27;, &#x27;2016-09-18 00:00:00&#x27;, 2, 17.68, &#x27;Via Ludovico il Moro 22&#x27;, &#x27;Bergamo&#x27;, NULL, &#x27;24100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (10301, &#x27;WANDK&#x27;, 8, &#x27;2016-09-09 00:00:00&#x27;, &#x27;2016-09-17 00:00:00&#x27;, 2, 45.08, &#x27;Adenauerallee 900&#x27;, &#x27;Stuttgart&#x27;, NULL, &#x27;70563&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10302, &#x27;SUPRD&#x27;, 4, &#x27;2016-09-10 00:00:00&#x27;, &#x27;2016-10-09 00:00:00&#x27;, 2, 6.27, &#x27;Boulevard Tirou-255&#x27;, &#x27;Charleroi&#x27;, NULL, &#x27;B-6000&#x27;, &#x27;Belgium&#x27;);INSERT INTO `orders` VALUES (10303, &#x27;GODOS&#x27;, 7, &#x27;2016-09-11 00:00:00&#x27;, &#x27;2016-09-18 00:00:00&#x27;, 2, 107.83, &#x27;C/ Romero-33&#x27;, &#x27;Sevilla&#x27;, NULL, &#x27;41101&#x27;, &#x27;Spain&#x27;);INSERT INTO `orders` VALUES (10304, &#x27;TORTU&#x27;, 1, &#x27;2016-09-12 00:00:00&#x27;, &#x27;2016-09-17 00:00:00&#x27;, 2, 63.79, &#x27;Avda. Azteca 123&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05033&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10305, &#x27;OLDWO&#x27;, 8, &#x27;2016-09-13 00:00:00&#x27;, &#x27;2016-10-09 00:00:00&#x27;, 3, 257.62, &#x27;2743 Bering St.&#x27;, &#x27;Anchorage&#x27;, &#x27;AK&#x27;, &#x27;99508&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10306, &#x27;ROMEY&#x27;, 1, &#x27;2016-09-16 00:00:00&#x27;, &#x27;2016-09-23 00:00:00&#x27;, 3, 7.56, &#x27;Gran Vía-1&#x27;, &#x27;Madrid&#x27;, NULL, &#x27;28001&#x27;, &#x27;Spain&#x27;);INSERT INTO `orders` VALUES (10307, &#x27;LONEP&#x27;, 2, &#x27;2016-09-17 00:00:00&#x27;, &#x27;2016-09-25 00:00:00&#x27;, 2, 0.56, &#x27;89 Chiaroscuro Rd.&#x27;, &#x27;Portland&#x27;, &#x27;OR&#x27;, &#x27;97219&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10308, &#x27;ANATR&#x27;, 7, &#x27;2016-09-18 00:00:00&#x27;, &#x27;2016-09-24 00:00:00&#x27;, 3, 1.61, &#x27;Avda. de la Constitución 2222&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05021&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10309, &#x27;HUNGO&#x27;, 3, &#x27;2016-09-19 00:00:00&#x27;, &#x27;2016-10-23 00:00:00&#x27;, 1, 47.30, &#x27;8 Johnstown Road&#x27;, &#x27;Cork&#x27;, &#x27;Co. Cork&#x27;, NULL, &#x27;Ireland&#x27;);INSERT INTO `orders` VALUES (10310, &#x27;THEBI&#x27;, 8, &#x27;2016-09-20 00:00:00&#x27;, &#x27;2016-09-27 00:00:00&#x27;, 2, 17.52, &#x27;89 Jefferson Way Suite 2&#x27;, &#x27;Portland&#x27;, &#x27;OR&#x27;, &#x27;97201&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10311, &#x27;DUMO&#x27;, 1, &#x27;2016-09-20 00:00:00&#x27;, &#x27;2016-09-26 00:00:00&#x27;, 3, 24.69, &#x27;67-rue des Cinquante Otages&#x27;, &#x27;Nantes&#x27;, NULL, &#x27;44000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10312, &#x27;WANDK&#x27;, 2, &#x27;2016-09-23 00:00:00&#x27;, &#x27;2016-10-03 00:00:00&#x27;, 2, 40.26, &#x27;Adenauerallee 900&#x27;, &#x27;Stuttgart&#x27;, NULL, &#x27;70563&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10313, &#x27;QUICK&#x27;, 2, &#x27;2016-09-24 00:00:00&#x27;, &#x27;2016-10-04 00:00:00&#x27;, 2, 1.96, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10314, &#x27;RATTC&#x27;, 1, &#x27;2016-09-25 00:00:00&#x27;, &#x27;2016-10-04 00:00:00&#x27;, 2, 74.16, &#x27;2817 Milton Dr.&#x27;, &#x27;Albuquerque&#x27;, &#x27;NM&#x27;, &#x27;87110&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10315, &#x27;ISLAT&#x27;, 4, &#x27;2016-09-26 00:00:00&#x27;, &#x27;2016-10-03 00:00:00&#x27;, 2, 41.76, &#x27;Garden House Crowther Way&#x27;, &#x27;Cowes&#x27;, &#x27;Isle of Wight&#x27;, &#x27;PO31 7PJ&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10316, &#x27;RATTC&#x27;, 1, &#x27;2016-09-27 00:00:00&#x27;, &#x27;2016-10-08 00:00:00&#x27;, 3, 150.15, &#x27;2817 Milton Dr.&#x27;, &#x27;Albuquerque&#x27;, &#x27;NM&#x27;, &#x27;87110&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10317, &#x27;LONEP&#x27;, 6, &#x27;2016-09-30 00:00:00&#x27;, &#x27;2016-10-10 00:00:00&#x27;, 1, 12.69, &#x27;89 Chiaroscuro Rd.&#x27;, &#x27;Portland&#x27;, &#x27;OR&#x27;, &#x27;97219&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10318, &#x27;ISLAT&#x27;, 8, &#x27;2016-10-01 00:00:00&#x27;, &#x27;2016-10-04 00:00:00&#x27;, 2, 4.73, &#x27;Garden House Crowther Way&#x27;, &#x27;Cowes&#x27;, &#x27;Isle of Wight&#x27;, &#x27;PO31 7PJ&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10319, &#x27;TORTU&#x27;, 7, &#x27;2016-10-02 00:00:00&#x27;, &#x27;2016-10-11 00:00:00&#x27;, 3, 64.50, &#x27;Avda. Azteca 123&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05033&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10320, &#x27;WARTH&#x27;, 5, &#x27;2016-10-03 00:00:00&#x27;, &#x27;2016-10-18 00:00:00&#x27;, 3, 34.57, &#x27;Torikatu 38&#x27;, &#x27;Oulu&#x27;, NULL, &#x27;90110&#x27;, &#x27;Finland&#x27;);INSERT INTO `orders` VALUES (10321, &#x27;ISLAT&#x27;, 3, &#x27;2016-10-03 00:00:00&#x27;, &#x27;2016-10-11 00:00:00&#x27;, 2, 3.43, &#x27;Garden House Crowther Way&#x27;, &#x27;Cowes&#x27;, &#x27;Isle of Wight&#x27;, &#x27;PO31 7PJ&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10322, &#x27;PERIC&#x27;, 7, &#x27;2016-10-04 00:00:00&#x27;, &#x27;2016-10-23 00:00:00&#x27;, 3, 0.40, &#x27;Calle Dr. Jorge Cash 321&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05033&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10323, &#x27;KOENE&#x27;, 4, &#x27;2016-10-07 00:00:00&#x27;, &#x27;2016-10-14 00:00:00&#x27;, 1, 4.88, &#x27;Maubelstr. 90&#x27;, &#x27;Brandenburg&#x27;, NULL, &#x27;14776&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10324, &#x27;SAVEA&#x27;, 9, &#x27;2016-10-08 00:00:00&#x27;, &#x27;2016-10-10 00:00:00&#x27;, 1, 214.27, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10325, &#x27;KOENE&#x27;, 1, &#x27;2016-10-09 00:00:00&#x27;, &#x27;2016-10-14 00:00:00&#x27;, 3, 64.86, &#x27;Maubelstr. 90&#x27;, &#x27;Brandenburg&#x27;, NULL, &#x27;14776&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10326, &#x27;BOLID&#x27;, 4, &#x27;2016-10-10 00:00:00&#x27;, &#x27;2016-10-14 00:00:00&#x27;, 2, 77.92, &#x27;C/ Araquil-67&#x27;, &#x27;Madrid&#x27;, NULL, &#x27;28023&#x27;, &#x27;Spain&#x27;);INSERT INTO `orders` VALUES (10327, &#x27;FOLKO&#x27;, 2, &#x27;2016-10-11 00:00:00&#x27;, &#x27;2016-10-14 00:00:00&#x27;, 1, 63.36, &#x27;Åkergatan 24&#x27;, &#x27;Bräcke&#x27;, NULL, &#x27;S-844 67&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10328, &#x27;FURIB&#x27;, 4, &#x27;2016-10-14 00:00:00&#x27;, &#x27;2016-10-17 00:00:00&#x27;, 3, 87.03, &#x27;Jardim das rosas n. 32&#x27;, &#x27;Lisboa&#x27;, NULL, &#x27;1675&#x27;, &#x27;Portugal&#x27;);INSERT INTO `orders` VALUES (10329, &#x27;SPLIR&#x27;, 4, &#x27;2016-10-15 00:00:00&#x27;, &#x27;2016-10-23 00:00:00&#x27;, 2, 191.67, &#x27;P.O. Box 555&#x27;, &#x27;Lander&#x27;, &#x27;WY&#x27;, &#x27;82520&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10330, &#x27;LILAS&#x27;, 3, &#x27;2016-10-16 00:00:00&#x27;, &#x27;2016-10-28 00:00:00&#x27;, 1, 12.75, &#x27;Carrera 52 con Ave. Bolívar #65-98 Llano Largo&#x27;, &#x27;Barquisimeto&#x27;, &#x27;Lara&#x27;, &#x27;3508&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10331, &#x27;BONAP&#x27;, 9, &#x27;2016-10-16 00:00:00&#x27;, &#x27;2016-10-21 00:00:00&#x27;, 1, 10.19, &#x27;12-rue des Bouchers&#x27;, &#x27;Marseille&#x27;, NULL, &#x27;13008&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10332, &#x27;MEREP&#x27;, 3, &#x27;2016-10-17 00:00:00&#x27;, &#x27;2016-10-21 00:00:00&#x27;, 2, 52.84, &#x27;43 rue St. Laurent&#x27;, &#x27;Montréal&#x27;, &#x27;Québec&#x27;, &#x27;H1J 1C3&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10333, &#x27;WARTH&#x27;, 5, &#x27;2016-10-18 00:00:00&#x27;, &#x27;2016-10-25 00:00:00&#x27;, 3, 0.59, &#x27;Torikatu 38&#x27;, &#x27;Oulu&#x27;, NULL, &#x27;90110&#x27;, &#x27;Finland&#x27;);INSERT INTO `orders` VALUES (10334, &#x27;VICTE&#x27;, 8, &#x27;2016-10-21 00:00:00&#x27;, &#x27;2016-10-28 00:00:00&#x27;, 2, 8.56, &#x27;2-rue du Commerce&#x27;, &#x27;Lyo&#x27;, NULL, &#x27;69004&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10335, &#x27;HUNGO&#x27;, 7, &#x27;2016-10-22 00:00:00&#x27;, &#x27;2016-10-24 00:00:00&#x27;, 2, 42.11, &#x27;8 Johnstown Road&#x27;, &#x27;Cork&#x27;, &#x27;Co. Cork&#x27;, NULL, &#x27;Ireland&#x27;);INSERT INTO `orders` VALUES (10336, &#x27;PRINI&#x27;, 7, &#x27;2016-10-23 00:00:00&#x27;, &#x27;2016-10-25 00:00:00&#x27;, 2, 15.51, &#x27;Estrada da saúde n. 58&#x27;, &#x27;Lisboa&#x27;, NULL, &#x27;1756&#x27;, &#x27;Portugal&#x27;);INSERT INTO `orders` VALUES (10337, &#x27;FRANK&#x27;, 4, &#x27;2016-10-24 00:00:00&#x27;, &#x27;2016-10-29 00:00:00&#x27;, 3, 108.26, &#x27;Berliner Platz 43&#x27;, &#x27;Münche&#x27;, NULL, &#x27;80805&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10338, &#x27;OLDWO&#x27;, 4, &#x27;2016-10-25 00:00:00&#x27;, &#x27;2016-10-29 00:00:00&#x27;, 3, 84.21, &#x27;2743 Bering St.&#x27;, &#x27;Anchorage&#x27;, &#x27;AK&#x27;, &#x27;99508&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10339, &#x27;MEREP&#x27;, 2, &#x27;2016-10-28 00:00:00&#x27;, &#x27;2016-11-04 00:00:00&#x27;, 2, 15.66, &#x27;43 rue St. Laurent&#x27;, &#x27;Montréal&#x27;, &#x27;Québec&#x27;, &#x27;H1J 1C3&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10340, &#x27;BONAP&#x27;, 1, &#x27;2016-10-29 00:00:00&#x27;, &#x27;2016-11-08 00:00:00&#x27;, 3, 166.31, &#x27;12-rue des Bouchers&#x27;, &#x27;Marseille&#x27;, NULL, &#x27;13008&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10341, &#x27;SIMOB&#x27;, 7, &#x27;2016-10-29 00:00:00&#x27;, &#x27;2016-11-05 00:00:00&#x27;, 3, 26.78, &#x27;Vinbæltet 34&#x27;, &#x27;Kobenhav&#x27;, NULL, &#x27;1734&#x27;, &#x27;Denmark&#x27;);INSERT INTO `orders` VALUES (10342, &#x27;FRANK&#x27;, 4, &#x27;2016-10-30 00:00:00&#x27;, &#x27;2016-11-04 00:00:00&#x27;, 2, 54.83, &#x27;Berliner Platz 43&#x27;, &#x27;Münche&#x27;, NULL, &#x27;80805&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10343, &#x27;LEHMS&#x27;, 4, &#x27;2016-10-31 00:00:00&#x27;, &#x27;2016-11-06 00:00:00&#x27;, 1, 110.37, &#x27;Magazinweg 7&#x27;, &#x27;Frankfurt a.M.&#x27;, NULL, &#x27;60528&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10344, &#x27;WHITC&#x27;, 4, &#x27;2016-11-01 00:00:00&#x27;, &#x27;2016-11-05 00:00:00&#x27;, 2, 23.29, &#x27;1029 - 12th Ave. S.&#x27;, &#x27;Seattle&#x27;, &#x27;WA&#x27;, &#x27;98124&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10345, &#x27;QUICK&#x27;, 2, &#x27;2016-11-04 00:00:00&#x27;, &#x27;2016-11-11 00:00:00&#x27;, 2, 249.06, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10346, &#x27;RATTC&#x27;, 3, &#x27;2016-11-05 00:00:00&#x27;, &#x27;2016-11-08 00:00:00&#x27;, 3, 142.08, &#x27;2817 Milton Dr.&#x27;, &#x27;Albuquerque&#x27;, &#x27;NM&#x27;, &#x27;87110&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10347, &#x27;FAMIA&#x27;, 4, &#x27;2016-11-06 00:00:00&#x27;, &#x27;2016-11-08 00:00:00&#x27;, 3, 3.10, &#x27;Rua Orós-92&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05442-030&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10348, &#x27;WANDK&#x27;, 4, &#x27;2016-11-07 00:00:00&#x27;, &#x27;2016-11-15 00:00:00&#x27;, 2, 0.78, &#x27;Adenauerallee 900&#x27;, &#x27;Stuttgart&#x27;, NULL, &#x27;70563&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10349, &#x27;SPLIR&#x27;, 7, &#x27;2016-11-08 00:00:00&#x27;, &#x27;2016-11-15 00:00:00&#x27;, 1, 8.63, &#x27;P.O. Box 555&#x27;, &#x27;Lander&#x27;, &#x27;WY&#x27;, &#x27;82520&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10350, &#x27;LAMAI&#x27;, 6, &#x27;2016-11-11 00:00:00&#x27;, &#x27;2016-12-03 00:00:00&#x27;, 2, 64.19, &#x27;1 rue Alsace-Lorraine&#x27;, &#x27;Toulouse&#x27;, NULL, &#x27;31000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10351, &#x27;ERNSH&#x27;, 1, &#x27;2016-11-11 00:00:00&#x27;, &#x27;2016-11-20 00:00:00&#x27;, 1, 162.33, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10352, &#x27;FURIB&#x27;, 3, &#x27;2016-11-12 00:00:00&#x27;, &#x27;2016-11-18 00:00:00&#x27;, 3, 1.30, &#x27;Jardim das rosas n. 32&#x27;, &#x27;Lisboa&#x27;, NULL, &#x27;1675&#x27;, &#x27;Portugal&#x27;);INSERT INTO `orders` VALUES (10353, &#x27;PICCO&#x27;, 7, &#x27;2016-11-13 00:00:00&#x27;, &#x27;2016-11-25 00:00:00&#x27;, 3, 360.63, &#x27;Geislweg 14&#x27;, &#x27;Salzburg&#x27;, NULL, &#x27;5020&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10354, &#x27;PERIC&#x27;, 8, &#x27;2016-11-14 00:00:00&#x27;, &#x27;2016-11-20 00:00:00&#x27;, 3, 53.80, &#x27;Calle Dr. Jorge Cash 321&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05033&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10355, &#x27;AROUT&#x27;, 6, &#x27;2016-11-15 00:00:00&#x27;, &#x27;2016-11-20 00:00:00&#x27;, 1, 41.95, &#x27;Brook Farm Stratford St. Mary&#x27;, &#x27;Colchester&#x27;, &#x27;Essex&#x27;, &#x27;CO7 6JX&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10356, &#x27;WANDK&#x27;, 6, &#x27;2016-11-18 00:00:00&#x27;, &#x27;2016-11-27 00:00:00&#x27;, 2, 36.71, &#x27;Adenauerallee 900&#x27;, &#x27;Stuttgart&#x27;, NULL, &#x27;70563&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10357, &#x27;LILAS&#x27;, 1, &#x27;2016-11-19 00:00:00&#x27;, &#x27;2016-12-02 00:00:00&#x27;, 3, 34.88, &#x27;Carrera 52 con Ave. Bolívar #65-98 Llano Largo&#x27;, &#x27;Barquisimeto&#x27;, &#x27;Lara&#x27;, &#x27;3508&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10358, &#x27;LAMAI&#x27;, 5, &#x27;2016-11-20 00:00:00&#x27;, &#x27;2016-11-27 00:00:00&#x27;, 1, 19.64, &#x27;1 rue Alsace-Lorraine&#x27;, &#x27;Toulouse&#x27;, NULL, &#x27;31000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10359, &#x27;SEVES&#x27;, 5, &#x27;2016-11-21 00:00:00&#x27;, &#x27;2016-11-26 00:00:00&#x27;, 3, 288.43, &#x27;90 Wadhurst Rd.&#x27;, &#x27;Londo&#x27;, NULL, &#x27;OX15 4NB&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10360, &#x27;BLONP&#x27;, 4, &#x27;2016-11-22 00:00:00&#x27;, &#x27;2016-12-02 00:00:00&#x27;, 3, 131.70, &#x27;24-place Kléber&#x27;, &#x27;Strasbourg&#x27;, NULL, &#x27;67000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10361, &#x27;QUICK&#x27;, 1, &#x27;2016-11-22 00:00:00&#x27;, &#x27;2016-12-03 00:00:00&#x27;, 2, 183.17, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10362, &#x27;BONAP&#x27;, 3, &#x27;2016-11-25 00:00:00&#x27;, &#x27;2016-11-28 00:00:00&#x27;, 1, 96.04, &#x27;12-rue des Bouchers&#x27;, &#x27;Marseille&#x27;, NULL, &#x27;13008&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10363, &#x27;DRACD&#x27;, 4, &#x27;2016-11-26 00:00:00&#x27;, &#x27;2016-12-04 00:00:00&#x27;, 3, 30.54, &#x27;Walserweg 21&#x27;, &#x27;Aache&#x27;, NULL, &#x27;52066&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10364, &#x27;EASTC&#x27;, 1, &#x27;2016-11-26 00:00:00&#x27;, &#x27;2016-12-04 00:00:00&#x27;, 1, 71.97, &#x27;35 King George&#x27;, &#x27;Londo&#x27;, NULL, &#x27;WX3 6FW&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10365, &#x27;ANTO&#x27;, 3, &#x27;2016-11-27 00:00:00&#x27;, &#x27;2016-12-02 00:00:00&#x27;, 2, 22.00, &#x27;Mataderos  2312&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05023&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10366, &#x27;GALED&#x27;, 8, &#x27;2016-11-28 00:00:00&#x27;, &#x27;2016-12-30 00:00:00&#x27;, 2, 10.14, &#x27;Rambla de Cataluña-23&#x27;, &#x27;Barcelona&#x27;, NULL, &#x27;8022&#x27;, &#x27;Spain&#x27;);INSERT INTO `orders` VALUES (10367, &#x27;VAFFE&#x27;, 7, &#x27;2016-11-28 00:00:00&#x27;, &#x27;2016-12-02 00:00:00&#x27;, 3, 13.55, &#x27;Smagsloget 45&#x27;, &#x27;Århus&#x27;, NULL, &#x27;8200&#x27;, &#x27;Denmark&#x27;);INSERT INTO `orders` VALUES (10368, &#x27;ERNSH&#x27;, 2, &#x27;2016-11-29 00:00:00&#x27;, &#x27;2016-12-02 00:00:00&#x27;, 2, 101.95, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10369, &#x27;SPLIR&#x27;, 8, &#x27;2016-12-02 00:00:00&#x27;, &#x27;2016-12-09 00:00:00&#x27;, 2, 195.68, &#x27;P.O. Box 555&#x27;, &#x27;Lander&#x27;, &#x27;WY&#x27;, &#x27;82520&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10370, &#x27;CHOPS&#x27;, 6, &#x27;2016-12-03 00:00:00&#x27;, &#x27;2016-12-27 00:00:00&#x27;, 2, 1.17, &#x27;Hauptstr. 31&#x27;, &#x27;Ber&#x27;, NULL, &#x27;3012&#x27;, &#x27;Switzerland&#x27;);INSERT INTO `orders` VALUES (10371, &#x27;LAMAI&#x27;, 1, &#x27;2016-12-03 00:00:00&#x27;, &#x27;2016-12-24 00:00:00&#x27;, 1, 0.45, &#x27;1 rue Alsace-Lorraine&#x27;, &#x27;Toulouse&#x27;, NULL, &#x27;31000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10372, &#x27;QUEE&#x27;, 5, &#x27;2016-12-04 00:00:00&#x27;, &#x27;2016-12-09 00:00:00&#x27;, 2, 890.78, &#x27;Alameda dos Canàrios-891&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05487-020&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10373, &#x27;HUNGO&#x27;, 4, &#x27;2016-12-05 00:00:00&#x27;, &#x27;2016-12-11 00:00:00&#x27;, 3, 124.12, &#x27;8 Johnstown Road&#x27;, &#x27;Cork&#x27;, &#x27;Co. Cork&#x27;, NULL, &#x27;Ireland&#x27;);INSERT INTO `orders` VALUES (10374, &#x27;WOLZA&#x27;, 1, &#x27;2016-12-05 00:00:00&#x27;, &#x27;2016-12-09 00:00:00&#x27;, 3, 3.94, &#x27;ul. Filtrowa 68&#x27;, &#x27;Warszawa&#x27;, NULL, &#x27;01-012&#x27;, &#x27;Poland&#x27;);INSERT INTO `orders` VALUES (10375, &#x27;HUNGC&#x27;, 3, &#x27;2016-12-06 00:00:00&#x27;, &#x27;2016-12-09 00:00:00&#x27;, 2, 20.12, &#x27;City Center Plaza 516 Main St.&#x27;, &#x27;Elgi&#x27;, &#x27;OR&#x27;, &#x27;97827&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10376, &#x27;MEREP&#x27;, 1, &#x27;2016-12-09 00:00:00&#x27;, &#x27;2016-12-13 00:00:00&#x27;, 2, 20.39, &#x27;43 rue St. Laurent&#x27;, &#x27;Montréal&#x27;, &#x27;Québec&#x27;, &#x27;H1J 1C3&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10377, &#x27;SEVES&#x27;, 1, &#x27;2016-12-09 00:00:00&#x27;, &#x27;2016-12-13 00:00:00&#x27;, 3, 22.21, &#x27;90 Wadhurst Rd.&#x27;, &#x27;Londo&#x27;, NULL, &#x27;OX15 4NB&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10378, &#x27;FOLKO&#x27;, 5, &#x27;2016-12-10 00:00:00&#x27;, &#x27;2016-12-19 00:00:00&#x27;, 3, 5.44, &#x27;Åkergatan 24&#x27;, &#x27;Bräcke&#x27;, NULL, &#x27;S-844 67&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10379, &#x27;QUEDE&#x27;, 2, &#x27;2016-12-11 00:00:00&#x27;, &#x27;2016-12-13 00:00:00&#x27;, 1, 45.03, &#x27;Rua da Panificadora-12&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;02389-673&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10380, &#x27;HUNGO&#x27;, 8, &#x27;2016-12-12 00:00:00&#x27;, &#x27;2017-01-16 00:00:00&#x27;, 3, 35.03, &#x27;8 Johnstown Road&#x27;, &#x27;Cork&#x27;, &#x27;Co. Cork&#x27;, NULL, &#x27;Ireland&#x27;);INSERT INTO `orders` VALUES (10381, &#x27;LILAS&#x27;, 3, &#x27;2016-12-12 00:00:00&#x27;, &#x27;2016-12-13 00:00:00&#x27;, 3, 7.99, &#x27;Carrera 52 con Ave. Bolívar #65-98 Llano Largo&#x27;, &#x27;Barquisimeto&#x27;, &#x27;Lara&#x27;, &#x27;3508&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10382, &#x27;ERNSH&#x27;, 4, &#x27;2016-12-13 00:00:00&#x27;, &#x27;2016-12-16 00:00:00&#x27;, 1, 94.77, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10383, &#x27;AROUT&#x27;, 8, &#x27;2016-12-16 00:00:00&#x27;, &#x27;2016-12-18 00:00:00&#x27;, 3, 34.24, &#x27;Brook Farm Stratford St. Mary&#x27;, &#x27;Colchester&#x27;, &#x27;Essex&#x27;, &#x27;CO7 6JX&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10384, &#x27;BERGS&#x27;, 3, &#x27;2016-12-16 00:00:00&#x27;, &#x27;2016-12-20 00:00:00&#x27;, 3, 168.64, &#x27;Berguvsvägen  8&#x27;, &#x27;Luleå&#x27;, NULL, &#x27;S-958 22&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10385, &#x27;SPLIR&#x27;, 1, &#x27;2016-12-17 00:00:00&#x27;, &#x27;2016-12-23 00:00:00&#x27;, 2, 30.96, &#x27;P.O. Box 555&#x27;, &#x27;Lander&#x27;, &#x27;WY&#x27;, &#x27;82520&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10386, &#x27;FAMIA&#x27;, 9, &#x27;2016-12-18 00:00:00&#x27;, &#x27;2016-12-25 00:00:00&#x27;, 3, 13.99, &#x27;Rua Orós-92&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05442-030&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10387, &#x27;SANTG&#x27;, 1, &#x27;2016-12-18 00:00:00&#x27;, &#x27;2016-12-20 00:00:00&#x27;, 2, 93.63, &#x27;Erling Skakkes gate 78&#x27;, &#x27;Staver&#x27;, NULL, &#x27;4110&#x27;, &#x27;Norway&#x27;);INSERT INTO `orders` VALUES (10388, &#x27;SEVES&#x27;, 2, &#x27;2016-12-19 00:00:00&#x27;, &#x27;2016-12-20 00:00:00&#x27;, 1, 34.86, &#x27;90 Wadhurst Rd.&#x27;, &#x27;Londo&#x27;, NULL, &#x27;OX15 4NB&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10389, &#x27;BOTTM&#x27;, 4, &#x27;2016-12-20 00:00:00&#x27;, &#x27;2016-12-24 00:00:00&#x27;, 2, 47.42, &#x27;23 Tsawassen Blvd.&#x27;, &#x27;Tsawasse&#x27;, &#x27;BC&#x27;, &#x27;T2F 8M4&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10390, &#x27;ERNSH&#x27;, 6, &#x27;2016-12-23 00:00:00&#x27;, &#x27;2016-12-26 00:00:00&#x27;, 1, 126.38, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10391, &#x27;DRACD&#x27;, 3, &#x27;2016-12-23 00:00:00&#x27;, &#x27;2016-12-31 00:00:00&#x27;, 3, 5.45, &#x27;Walserweg 21&#x27;, &#x27;Aache&#x27;, NULL, &#x27;52066&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10392, &#x27;PICCO&#x27;, 2, &#x27;2016-12-24 00:00:00&#x27;, &#x27;2017-01-01 00:00:00&#x27;, 3, 122.46, &#x27;Geislweg 14&#x27;, &#x27;Salzburg&#x27;, NULL, &#x27;5020&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10393, &#x27;SAVEA&#x27;, 1, &#x27;2016-12-25 00:00:00&#x27;, &#x27;2017-01-03 00:00:00&#x27;, 3, 126.56, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10394, &#x27;HUNGC&#x27;, 1, &#x27;2016-12-25 00:00:00&#x27;, &#x27;2017-01-03 00:00:00&#x27;, 3, 30.34, &#x27;City Center Plaza 516 Main St.&#x27;, &#x27;Elgi&#x27;, &#x27;OR&#x27;, &#x27;97827&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10395, &#x27;HILAA&#x27;, 6, &#x27;2016-12-26 00:00:00&#x27;, &#x27;2017-01-03 00:00:00&#x27;, 1, 184.41, &#x27;Carrera 22 con Ave. Carlos Soublette #8-35&#x27;, &#x27;San Cristóbal&#x27;, &#x27;Táchira&#x27;, &#x27;5022&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10396, &#x27;FRANK&#x27;, 1, &#x27;2016-12-27 00:00:00&#x27;, &#x27;2017-01-06 00:00:00&#x27;, 3, 135.35, &#x27;Berliner Platz 43&#x27;, &#x27;Münche&#x27;, NULL, &#x27;80805&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10397, &#x27;PRINI&#x27;, 5, &#x27;2016-12-27 00:00:00&#x27;, &#x27;2017-01-02 00:00:00&#x27;, 1, 60.26, &#x27;Estrada da saúde n. 58&#x27;, &#x27;Lisboa&#x27;, NULL, &#x27;1756&#x27;, &#x27;Portugal&#x27;);INSERT INTO `orders` VALUES (10398, &#x27;SAVEA&#x27;, 2, &#x27;2016-12-30 00:00:00&#x27;, &#x27;2017-01-09 00:00:00&#x27;, 3, 89.16, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10399, &#x27;VAFFE&#x27;, 8, &#x27;2016-12-31 00:00:00&#x27;, &#x27;2017-01-08 00:00:00&#x27;, 3, 27.36, &#x27;Smagsloget 45&#x27;, &#x27;Århus&#x27;, NULL, &#x27;8200&#x27;, &#x27;Denmark&#x27;);INSERT INTO `orders` VALUES (10400, &#x27;EASTC&#x27;, 1, &#x27;2017-01-01 00:00:00&#x27;, &#x27;2017-01-16 00:00:00&#x27;, 3, 83.93, &#x27;35 King George&#x27;, &#x27;Londo&#x27;, NULL, &#x27;WX3 6FW&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10401, &#x27;RATTC&#x27;, 1, &#x27;2017-01-01 00:00:00&#x27;, &#x27;2017-01-10 00:00:00&#x27;, 1, 12.51, &#x27;2817 Milton Dr.&#x27;, &#x27;Albuquerque&#x27;, &#x27;NM&#x27;, &#x27;87110&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10402, &#x27;ERNSH&#x27;, 8, &#x27;2017-01-02 00:00:00&#x27;, &#x27;2017-01-10 00:00:00&#x27;, 2, 67.88, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10403, &#x27;ERNSH&#x27;, 4, &#x27;2017-01-03 00:00:00&#x27;, &#x27;2017-01-09 00:00:00&#x27;, 3, 73.79, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10404, &#x27;MAGAA&#x27;, 2, &#x27;2017-01-03 00:00:00&#x27;, &#x27;2017-01-08 00:00:00&#x27;, 1, 155.97, &#x27;Via Ludovico il Moro 22&#x27;, &#x27;Bergamo&#x27;, NULL, &#x27;24100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (10405, &#x27;LINOD&#x27;, 1, &#x27;2017-01-06 00:00:00&#x27;, &#x27;2017-01-22 00:00:00&#x27;, 1, 34.82, &#x27;Ave. 5 de Mayo Porlamar&#x27;, &#x27;I. de Margarita&#x27;, &#x27;Nueva Esparta&#x27;, &#x27;4980&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10406, &#x27;QUEE&#x27;, 7, &#x27;2017-01-07 00:00:00&#x27;, &#x27;2017-01-13 00:00:00&#x27;, 1, 108.04, &#x27;Alameda dos Canàrios-891&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05487-020&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10407, &#x27;OTTIK&#x27;, 2, &#x27;2017-01-07 00:00:00&#x27;, &#x27;2017-01-30 00:00:00&#x27;, 2, 91.48, &#x27;Mehrheimerstr. 369&#x27;, &#x27;Köl&#x27;, NULL, &#x27;50739&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10408, &#x27;FOLIG&#x27;, 8, &#x27;2017-01-08 00:00:00&#x27;, &#x27;2017-01-14 00:00:00&#x27;, 1, 11.26, &#x27;184-chaussée de Tournai&#x27;, &#x27;Lille&#x27;, NULL, &#x27;59000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10409, &#x27;OCEA&#x27;, 3, &#x27;2017-01-09 00:00:00&#x27;, &#x27;2017-01-14 00:00:00&#x27;, 1, 29.83, &#x27;Ing. Gustavo Moncada 8585 Piso 20-A&#x27;, &#x27;Buenos Aires&#x27;, NULL, &#x27;1010&#x27;, &#x27;Argentina&#x27;);INSERT INTO `orders` VALUES (10410, &#x27;BOTTM&#x27;, 3, &#x27;2017-01-10 00:00:00&#x27;, &#x27;2017-01-15 00:00:00&#x27;, 3, 2.40, &#x27;23 Tsawassen Blvd.&#x27;, &#x27;Tsawasse&#x27;, &#x27;BC&#x27;, &#x27;T2F 8M4&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10411, &#x27;BOTTM&#x27;, 9, &#x27;2017-01-10 00:00:00&#x27;, &#x27;2017-01-21 00:00:00&#x27;, 3, 23.65, &#x27;23 Tsawassen Blvd.&#x27;, &#x27;Tsawasse&#x27;, &#x27;BC&#x27;, &#x27;T2F 8M4&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10412, &#x27;WARTH&#x27;, 8, &#x27;2017-01-13 00:00:00&#x27;, &#x27;2017-01-15 00:00:00&#x27;, 2, 3.77, &#x27;Torikatu 38&#x27;, &#x27;Oulu&#x27;, NULL, &#x27;90110&#x27;, &#x27;Finland&#x27;);INSERT INTO `orders` VALUES (10413, &#x27;LAMAI&#x27;, 3, &#x27;2017-01-14 00:00:00&#x27;, &#x27;2017-01-16 00:00:00&#x27;, 2, 95.66, &#x27;1 rue Alsace-Lorraine&#x27;, &#x27;Toulouse&#x27;, NULL, &#x27;31000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10414, &#x27;FAMIA&#x27;, 2, &#x27;2017-01-14 00:00:00&#x27;, &#x27;2017-01-17 00:00:00&#x27;, 3, 21.48, &#x27;Rua Orós-92&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05442-030&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10415, &#x27;HUNGC&#x27;, 3, &#x27;2017-01-15 00:00:00&#x27;, &#x27;2017-01-24 00:00:00&#x27;, 1, 0.20, &#x27;City Center Plaza 516 Main St.&#x27;, &#x27;Elgi&#x27;, &#x27;OR&#x27;, &#x27;97827&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10416, &#x27;WARTH&#x27;, 8, &#x27;2017-01-16 00:00:00&#x27;, &#x27;2017-01-27 00:00:00&#x27;, 3, 22.72, &#x27;Torikatu 38&#x27;, &#x27;Oulu&#x27;, NULL, &#x27;90110&#x27;, &#x27;Finland&#x27;);INSERT INTO `orders` VALUES (10417, &#x27;SIMOB&#x27;, 4, &#x27;2017-01-16 00:00:00&#x27;, &#x27;2017-01-28 00:00:00&#x27;, 3, 70.29, &#x27;Vinbæltet 34&#x27;, &#x27;Kobenhav&#x27;, NULL, &#x27;1734&#x27;, &#x27;Denmark&#x27;);INSERT INTO `orders` VALUES (10418, &#x27;QUICK&#x27;, 4, &#x27;2017-01-17 00:00:00&#x27;, &#x27;2017-01-24 00:00:00&#x27;, 1, 17.55, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10419, &#x27;RICSU&#x27;, 4, &#x27;2017-01-20 00:00:00&#x27;, &#x27;2017-01-30 00:00:00&#x27;, 2, 137.35, &#x27;Starenweg 5&#x27;, &#x27;Genève&#x27;, NULL, &#x27;1204&#x27;, &#x27;Switzerland&#x27;);INSERT INTO `orders` VALUES (10420, &#x27;WELLI&#x27;, 3, &#x27;2017-01-21 00:00:00&#x27;, &#x27;2017-01-27 00:00:00&#x27;, 1, 44.12, &#x27;Rua do Mercado-12&#x27;, &#x27;Resende&#x27;, &#x27;SP&#x27;, &#x27;08737-363&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10421, &#x27;QUEDE&#x27;, 8, &#x27;2017-01-21 00:00:00&#x27;, &#x27;2017-01-27 00:00:00&#x27;, 1, 99.23, &#x27;Rua da Panificadora-12&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;02389-673&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10422, &#x27;FRANS&#x27;, 2, &#x27;2017-01-22 00:00:00&#x27;, &#x27;2017-01-31 00:00:00&#x27;, 1, 3.02, &#x27;Via Monte Bianco 34&#x27;, &#x27;Torino&#x27;, NULL, &#x27;10100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (10423, &#x27;GOURL&#x27;, 6, &#x27;2017-01-23 00:00:00&#x27;, &#x27;2017-02-24 00:00:00&#x27;, 3, 24.50, &#x27;Av. Brasil-442&#x27;, &#x27;Campinas&#x27;, &#x27;SP&#x27;, &#x27;04876-786&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10424, &#x27;MEREP&#x27;, 7, &#x27;2017-01-23 00:00:00&#x27;, &#x27;2017-01-27 00:00:00&#x27;, 2, 370.61, &#x27;43 rue St. Laurent&#x27;, &#x27;Montréal&#x27;, &#x27;Québec&#x27;, &#x27;H1J 1C3&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10425, &#x27;LAMAI&#x27;, 6, &#x27;2017-01-24 00:00:00&#x27;, &#x27;2017-02-14 00:00:00&#x27;, 2, 7.93, &#x27;1 rue Alsace-Lorraine&#x27;, &#x27;Toulouse&#x27;, NULL, &#x27;31000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10426, &#x27;GALED&#x27;, 4, &#x27;2017-01-27 00:00:00&#x27;, &#x27;2017-02-06 00:00:00&#x27;, 1, 18.69, &#x27;Rambla de Cataluña-23&#x27;, &#x27;Barcelona&#x27;, NULL, &#x27;8022&#x27;, &#x27;Spain&#x27;);INSERT INTO `orders` VALUES (10427, &#x27;PICCO&#x27;, 4, &#x27;2017-01-27 00:00:00&#x27;, &#x27;2017-03-03 00:00:00&#x27;, 2, 31.29, &#x27;Geislweg 14&#x27;, &#x27;Salzburg&#x27;, NULL, &#x27;5020&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10428, &#x27;REGGC&#x27;, 7, &#x27;2017-01-28 00:00:00&#x27;, &#x27;2017-02-04 00:00:00&#x27;, 1, 11.09, &#x27;Strada Provinciale 124&#x27;, &#x27;Reggio Emilia&#x27;, NULL, &#x27;42100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (10429, &#x27;HUNGO&#x27;, 3, &#x27;2017-01-29 00:00:00&#x27;, &#x27;2017-02-07 00:00:00&#x27;, 2, 56.63, &#x27;8 Johnstown Road&#x27;, &#x27;Cork&#x27;, &#x27;Co. Cork&#x27;, NULL, &#x27;Ireland&#x27;);INSERT INTO `orders` VALUES (10430, &#x27;ERNSH&#x27;, 4, &#x27;2017-01-30 00:00:00&#x27;, &#x27;2017-02-03 00:00:00&#x27;, 1, 458.78, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10431, &#x27;BOTTM&#x27;, 4, &#x27;2017-01-30 00:00:00&#x27;, &#x27;2017-02-07 00:00:00&#x27;, 2, 44.17, &#x27;23 Tsawassen Blvd.&#x27;, &#x27;Tsawasse&#x27;, &#x27;BC&#x27;, &#x27;T2F 8M4&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10432, &#x27;SPLIR&#x27;, 3, &#x27;2017-01-31 00:00:00&#x27;, &#x27;2017-02-07 00:00:00&#x27;, 2, 4.34, &#x27;P.O. Box 555&#x27;, &#x27;Lander&#x27;, &#x27;WY&#x27;, &#x27;82520&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10433, &#x27;PRINI&#x27;, 3, &#x27;2017-02-03 00:00:00&#x27;, &#x27;2017-03-04 00:00:00&#x27;, 3, 73.83, &#x27;Estrada da saúde n. 58&#x27;, &#x27;Lisboa&#x27;, NULL, &#x27;1756&#x27;, &#x27;Portugal&#x27;);INSERT INTO `orders` VALUES (10434, &#x27;FOLKO&#x27;, 3, &#x27;2017-02-03 00:00:00&#x27;, &#x27;2017-02-13 00:00:00&#x27;, 2, 17.92, &#x27;Åkergatan 24&#x27;, &#x27;Bräcke&#x27;, NULL, &#x27;S-844 67&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10435, &#x27;CONSH&#x27;, 8, &#x27;2017-02-04 00:00:00&#x27;, &#x27;2017-02-07 00:00:00&#x27;, 2, 9.21, &#x27;Berkeley Gardens 12  Brewery&#x27;, &#x27;Londo&#x27;, NULL, &#x27;WX1 6LT&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10436, &#x27;BLONP&#x27;, 3, &#x27;2017-02-05 00:00:00&#x27;, &#x27;2017-02-11 00:00:00&#x27;, 2, 156.66, &#x27;24-place Kléber&#x27;, &#x27;Strasbourg&#x27;, NULL, &#x27;67000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10437, &#x27;WARTH&#x27;, 8, &#x27;2017-02-05 00:00:00&#x27;, &#x27;2017-02-12 00:00:00&#x27;, 1, 19.97, &#x27;Torikatu 38&#x27;, &#x27;Oulu&#x27;, NULL, &#x27;90110&#x27;, &#x27;Finland&#x27;);INSERT INTO `orders` VALUES (10438, &#x27;TOMSP&#x27;, 3, &#x27;2017-02-06 00:00:00&#x27;, &#x27;2017-02-14 00:00:00&#x27;, 2, 8.24, &#x27;Luisenstr. 48&#x27;, &#x27;Münster&#x27;, NULL, &#x27;44087&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10439, &#x27;MEREP&#x27;, 6, &#x27;2017-02-07 00:00:00&#x27;, &#x27;2017-02-10 00:00:00&#x27;, 3, 4.07, &#x27;43 rue St. Laurent&#x27;, &#x27;Montréal&#x27;, &#x27;Québec&#x27;, &#x27;H1J 1C3&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10440, &#x27;SAVEA&#x27;, 4, &#x27;2017-02-10 00:00:00&#x27;, &#x27;2017-02-28 00:00:00&#x27;, 2, 86.53, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10441, &#x27;OLDWO&#x27;, 3, &#x27;2017-02-10 00:00:00&#x27;, &#x27;2017-03-14 00:00:00&#x27;, 2, 73.02, &#x27;2743 Bering St.&#x27;, &#x27;Anchorage&#x27;, &#x27;AK&#x27;, &#x27;99508&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10442, &#x27;ERNSH&#x27;, 3, &#x27;2017-02-11 00:00:00&#x27;, &#x27;2017-02-18 00:00:00&#x27;, 2, 47.94, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10443, &#x27;REGGC&#x27;, 8, &#x27;2017-02-12 00:00:00&#x27;, &#x27;2017-02-14 00:00:00&#x27;, 1, 13.95, &#x27;Strada Provinciale 124&#x27;, &#x27;Reggio Emilia&#x27;, NULL, &#x27;42100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (10444, &#x27;BERGS&#x27;, 3, &#x27;2017-02-12 00:00:00&#x27;, &#x27;2017-02-21 00:00:00&#x27;, 3, 3.50, &#x27;Berguvsvägen  8&#x27;, &#x27;Luleå&#x27;, NULL, &#x27;S-958 22&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10445, &#x27;BERGS&#x27;, 3, &#x27;2017-02-13 00:00:00&#x27;, &#x27;2017-02-20 00:00:00&#x27;, 1, 9.30, &#x27;Berguvsvägen  8&#x27;, &#x27;Luleå&#x27;, NULL, &#x27;S-958 22&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10446, &#x27;TOMSP&#x27;, 6, &#x27;2017-02-14 00:00:00&#x27;, &#x27;2017-02-19 00:00:00&#x27;, 1, 14.68, &#x27;Luisenstr. 48&#x27;, &#x27;Münster&#x27;, NULL, &#x27;44087&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10447, &#x27;RICAR&#x27;, 4, &#x27;2017-02-14 00:00:00&#x27;, &#x27;2017-03-07 00:00:00&#x27;, 2, 68.66, &#x27;Av. Copacabana-267&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;02389-890&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10448, &#x27;RANCH&#x27;, 4, &#x27;2017-02-17 00:00:00&#x27;, &#x27;2017-02-24 00:00:00&#x27;, 2, 38.82, &#x27;Av. del Libertador 900&#x27;, &#x27;Buenos Aires&#x27;, NULL, &#x27;1010&#x27;, &#x27;Argentina&#x27;);INSERT INTO `orders` VALUES (10449, &#x27;BLONP&#x27;, 3, &#x27;2017-02-18 00:00:00&#x27;, &#x27;2017-02-27 00:00:00&#x27;, 2, 53.30, &#x27;24-place Kléber&#x27;, &#x27;Strasbourg&#x27;, NULL, &#x27;67000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10450, &#x27;VICTE&#x27;, 8, &#x27;2017-02-19 00:00:00&#x27;, &#x27;2017-03-11 00:00:00&#x27;, 2, 7.23, &#x27;2-rue du Commerce&#x27;, &#x27;Lyo&#x27;, NULL, &#x27;69004&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10451, &#x27;QUICK&#x27;, 4, &#x27;2017-02-19 00:00:00&#x27;, &#x27;2017-03-12 00:00:00&#x27;, 3, 189.09, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10452, &#x27;SAVEA&#x27;, 8, &#x27;2017-02-20 00:00:00&#x27;, &#x27;2017-02-26 00:00:00&#x27;, 1, 140.26, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10453, &#x27;AROUT&#x27;, 1, &#x27;2017-02-21 00:00:00&#x27;, &#x27;2017-02-26 00:00:00&#x27;, 2, 25.36, &#x27;Brook Farm Stratford St. Mary&#x27;, &#x27;Colchester&#x27;, &#x27;Essex&#x27;, &#x27;CO7 6JX&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10454, &#x27;LAMAI&#x27;, 4, &#x27;2017-02-21 00:00:00&#x27;, &#x27;2017-02-25 00:00:00&#x27;, 3, 2.74, &#x27;1 rue Alsace-Lorraine&#x27;, &#x27;Toulouse&#x27;, NULL, &#x27;31000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10455, &#x27;WARTH&#x27;, 8, &#x27;2017-02-24 00:00:00&#x27;, &#x27;2017-03-03 00:00:00&#x27;, 2, 180.45, &#x27;Torikatu 38&#x27;, &#x27;Oulu&#x27;, NULL, &#x27;90110&#x27;, &#x27;Finland&#x27;);INSERT INTO `orders` VALUES (10456, &#x27;KOENE&#x27;, 8, &#x27;2017-02-25 00:00:00&#x27;, &#x27;2017-02-28 00:00:00&#x27;, 2, 8.12, &#x27;Maubelstr. 90&#x27;, &#x27;Brandenburg&#x27;, NULL, &#x27;14776&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10457, &#x27;KOENE&#x27;, 2, &#x27;2017-02-25 00:00:00&#x27;, &#x27;2017-03-03 00:00:00&#x27;, 1, 11.57, &#x27;Maubelstr. 90&#x27;, &#x27;Brandenburg&#x27;, NULL, &#x27;14776&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10458, &#x27;SUPRD&#x27;, 7, &#x27;2017-02-26 00:00:00&#x27;, &#x27;2017-03-04 00:00:00&#x27;, 3, 147.06, &#x27;Boulevard Tirou-255&#x27;, &#x27;Charleroi&#x27;, NULL, &#x27;B-6000&#x27;, &#x27;Belgium&#x27;);INSERT INTO `orders` VALUES (10459, &#x27;VICTE&#x27;, 4, &#x27;2017-02-27 00:00:00&#x27;, &#x27;2017-02-28 00:00:00&#x27;, 2, 25.09, &#x27;2-rue du Commerce&#x27;, &#x27;Lyo&#x27;, NULL, &#x27;69004&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10460, &#x27;FOLKO&#x27;, 8, &#x27;2017-02-28 00:00:00&#x27;, &#x27;2017-03-03 00:00:00&#x27;, 1, 16.27, &#x27;Åkergatan 24&#x27;, &#x27;Bräcke&#x27;, NULL, &#x27;S-844 67&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10461, &#x27;LILAS&#x27;, 1, &#x27;2017-02-28 00:00:00&#x27;, &#x27;2017-03-05 00:00:00&#x27;, 3, 148.61, &#x27;Carrera 52 con Ave. Bolívar #65-98 Llano Largo&#x27;, &#x27;Barquisimeto&#x27;, &#x27;Lara&#x27;, &#x27;3508&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10462, &#x27;CONSH&#x27;, 2, &#x27;2017-03-03 00:00:00&#x27;, &#x27;2017-03-18 00:00:00&#x27;, 1, 6.17, &#x27;Berkeley Gardens 12  Brewery&#x27;, &#x27;Londo&#x27;, NULL, &#x27;WX1 6LT&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10463, &#x27;SUPRD&#x27;, 5, &#x27;2017-03-04 00:00:00&#x27;, &#x27;2017-03-06 00:00:00&#x27;, 3, 14.78, &#x27;Boulevard Tirou-255&#x27;, &#x27;Charleroi&#x27;, NULL, &#x27;B-6000&#x27;, &#x27;Belgium&#x27;);INSERT INTO `orders` VALUES (10464, &#x27;FURIB&#x27;, 4, &#x27;2017-03-04 00:00:00&#x27;, &#x27;2017-03-14 00:00:00&#x27;, 2, 89.00, &#x27;Jardim das rosas n. 32&#x27;, &#x27;Lisboa&#x27;, NULL, &#x27;1675&#x27;, &#x27;Portugal&#x27;);INSERT INTO `orders` VALUES (10465, &#x27;VAFFE&#x27;, 1, &#x27;2017-03-05 00:00:00&#x27;, &#x27;2017-03-14 00:00:00&#x27;, 3, 145.04, &#x27;Smagsloget 45&#x27;, &#x27;Århus&#x27;, NULL, &#x27;8200&#x27;, &#x27;Denmark&#x27;);INSERT INTO `orders` VALUES (10466, &#x27;COMMI&#x27;, 4, &#x27;2017-03-06 00:00:00&#x27;, &#x27;2017-03-13 00:00:00&#x27;, 1, 11.93, &#x27;Av. dos Lusíadas-23&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05432-043&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10467, &#x27;MAGAA&#x27;, 8, &#x27;2017-03-06 00:00:00&#x27;, &#x27;2017-03-11 00:00:00&#x27;, 2, 4.93, &#x27;Via Ludovico il Moro 22&#x27;, &#x27;Bergamo&#x27;, NULL, &#x27;24100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (10468, &#x27;KOENE&#x27;, 3, &#x27;2017-03-07 00:00:00&#x27;, &#x27;2017-03-12 00:00:00&#x27;, 3, 44.12, &#x27;Maubelstr. 90&#x27;, &#x27;Brandenburg&#x27;, NULL, &#x27;14776&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10469, &#x27;WHITC&#x27;, 1, &#x27;2017-03-10 00:00:00&#x27;, &#x27;2017-03-14 00:00:00&#x27;, 1, 60.18, &#x27;1029 - 12th Ave. S.&#x27;, &#x27;Seattle&#x27;, &#x27;WA&#x27;, &#x27;98124&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10470, &#x27;BONAP&#x27;, 4, &#x27;2017-03-11 00:00:00&#x27;, &#x27;2017-03-14 00:00:00&#x27;, 2, 64.56, &#x27;12-rue des Bouchers&#x27;, &#x27;Marseille&#x27;, NULL, &#x27;13008&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10471, &#x27;BSBEV&#x27;, 2, &#x27;2017-03-11 00:00:00&#x27;, &#x27;2017-03-18 00:00:00&#x27;, 3, 45.59, &#x27;Fauntleroy Circus&#x27;, &#x27;Londo&#x27;, NULL, &#x27;EC2 5NT&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10472, &#x27;SEVES&#x27;, 8, &#x27;2017-03-12 00:00:00&#x27;, &#x27;2017-03-19 00:00:00&#x27;, 1, 4.20, &#x27;90 Wadhurst Rd.&#x27;, &#x27;Londo&#x27;, NULL, &#x27;OX15 4NB&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10473, &#x27;ISLAT&#x27;, 1, &#x27;2017-03-13 00:00:00&#x27;, &#x27;2017-03-21 00:00:00&#x27;, 3, 16.37, &#x27;Garden House Crowther Way&#x27;, &#x27;Cowes&#x27;, &#x27;Isle of Wight&#x27;, &#x27;PO31 7PJ&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10474, &#x27;PERIC&#x27;, 5, &#x27;2017-03-13 00:00:00&#x27;, &#x27;2017-03-21 00:00:00&#x27;, 2, 83.49, &#x27;Calle Dr. Jorge Cash 321&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05033&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10475, &#x27;SUPRD&#x27;, 9, &#x27;2017-03-14 00:00:00&#x27;, &#x27;2017-04-04 00:00:00&#x27;, 1, 68.52, &#x27;Boulevard Tirou-255&#x27;, &#x27;Charleroi&#x27;, NULL, &#x27;B-6000&#x27;, &#x27;Belgium&#x27;);INSERT INTO `orders` VALUES (10476, &#x27;HILAA&#x27;, 8, &#x27;2017-03-17 00:00:00&#x27;, &#x27;2017-03-24 00:00:00&#x27;, 3, 4.41, &#x27;Carrera 22 con Ave. Carlos Soublette #8-35&#x27;, &#x27;San Cristóbal&#x27;, &#x27;Táchira&#x27;, &#x27;5022&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10477, &#x27;PRINI&#x27;, 5, &#x27;2017-03-17 00:00:00&#x27;, &#x27;2017-03-25 00:00:00&#x27;, 2, 13.02, &#x27;Estrada da saúde n. 58&#x27;, &#x27;Lisboa&#x27;, NULL, &#x27;1756&#x27;, &#x27;Portugal&#x27;);INSERT INTO `orders` VALUES (10478, &#x27;VICTE&#x27;, 2, &#x27;2017-03-18 00:00:00&#x27;, &#x27;2017-03-26 00:00:00&#x27;, 3, 4.81, &#x27;2-rue du Commerce&#x27;, &#x27;Lyo&#x27;, NULL, &#x27;69004&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10479, &#x27;RATTC&#x27;, 3, &#x27;2017-03-19 00:00:00&#x27;, &#x27;2017-03-21 00:00:00&#x27;, 3, 708.95, &#x27;2817 Milton Dr.&#x27;, &#x27;Albuquerque&#x27;, &#x27;NM&#x27;, &#x27;87110&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10480, &#x27;FOLIG&#x27;, 6, &#x27;2017-03-20 00:00:00&#x27;, &#x27;2017-03-24 00:00:00&#x27;, 2, 1.35, &#x27;184-chaussée de Tournai&#x27;, &#x27;Lille&#x27;, NULL, &#x27;59000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10481, &#x27;RICAR&#x27;, 8, &#x27;2017-03-20 00:00:00&#x27;, &#x27;2017-03-25 00:00:00&#x27;, 2, 64.33, &#x27;Av. Copacabana-267&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;02389-890&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10482, &#x27;LAZYK&#x27;, 1, &#x27;2017-03-21 00:00:00&#x27;, &#x27;2017-04-10 00:00:00&#x27;, 3, 7.48, &#x27;12 Orchestra Terrace&#x27;, &#x27;Walla Walla&#x27;, &#x27;WA&#x27;, &#x27;99362&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10483, &#x27;WHITC&#x27;, 7, &#x27;2017-03-24 00:00:00&#x27;, &#x27;2017-04-25 00:00:00&#x27;, 2, 15.28, &#x27;1029 - 12th Ave. S.&#x27;, &#x27;Seattle&#x27;, &#x27;WA&#x27;, &#x27;98124&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10484, &#x27;BSBEV&#x27;, 3, &#x27;2017-03-24 00:00:00&#x27;, &#x27;2017-04-01 00:00:00&#x27;, 3, 6.88, &#x27;Fauntleroy Circus&#x27;, &#x27;Londo&#x27;, NULL, &#x27;EC2 5NT&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10485, &#x27;LINOD&#x27;, 4, &#x27;2017-03-25 00:00:00&#x27;, &#x27;2017-03-31 00:00:00&#x27;, 2, 64.45, &#x27;Ave. 5 de Mayo Porlamar&#x27;, &#x27;I. de Margarita&#x27;, &#x27;Nueva Esparta&#x27;, &#x27;4980&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10486, &#x27;HILAA&#x27;, 1, &#x27;2017-03-26 00:00:00&#x27;, &#x27;2017-04-02 00:00:00&#x27;, 2, 30.53, &#x27;Carrera 22 con Ave. Carlos Soublette #8-35&#x27;, &#x27;San Cristóbal&#x27;, &#x27;Táchira&#x27;, &#x27;5022&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10487, &#x27;QUEE&#x27;, 2, &#x27;2017-03-26 00:00:00&#x27;, &#x27;2017-03-28 00:00:00&#x27;, 2, 71.07, &#x27;Alameda dos Canàrios-891&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05487-020&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10488, &#x27;FRANK&#x27;, 8, &#x27;2017-03-27 00:00:00&#x27;, &#x27;2017-04-02 00:00:00&#x27;, 2, 4.93, &#x27;Berliner Platz 43&#x27;, &#x27;Münche&#x27;, NULL, &#x27;80805&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10489, &#x27;PICCO&#x27;, 6, &#x27;2017-03-28 00:00:00&#x27;, &#x27;2017-04-09 00:00:00&#x27;, 2, 5.29, &#x27;Geislweg 14&#x27;, &#x27;Salzburg&#x27;, NULL, &#x27;5020&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10490, &#x27;HILAA&#x27;, 7, &#x27;2017-03-31 00:00:00&#x27;, &#x27;2017-04-03 00:00:00&#x27;, 2, 210.19, &#x27;Carrera 22 con Ave. Carlos Soublette #8-35&#x27;, &#x27;San Cristóbal&#x27;, &#x27;Táchira&#x27;, &#x27;5022&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10491, &#x27;FURIB&#x27;, 8, &#x27;2017-03-31 00:00:00&#x27;, &#x27;2017-04-08 00:00:00&#x27;, 3, 16.96, &#x27;Jardim das rosas n. 32&#x27;, &#x27;Lisboa&#x27;, NULL, &#x27;1675&#x27;, &#x27;Portugal&#x27;);INSERT INTO `orders` VALUES (10492, &#x27;BOTTM&#x27;, 3, &#x27;2017-04-01 00:00:00&#x27;, &#x27;2017-04-11 00:00:00&#x27;, 1, 62.89, &#x27;23 Tsawassen Blvd.&#x27;, &#x27;Tsawasse&#x27;, &#x27;BC&#x27;, &#x27;T2F 8M4&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10493, &#x27;LAMAI&#x27;, 4, &#x27;2017-04-02 00:00:00&#x27;, &#x27;2017-04-10 00:00:00&#x27;, 3, 10.64, &#x27;1 rue Alsace-Lorraine&#x27;, &#x27;Toulouse&#x27;, NULL, &#x27;31000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10494, &#x27;COMMI&#x27;, 4, &#x27;2017-04-02 00:00:00&#x27;, &#x27;2017-04-09 00:00:00&#x27;, 2, 65.99, &#x27;Av. dos Lusíadas-23&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05432-043&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10495, &#x27;LAUGB&#x27;, 3, &#x27;2017-04-03 00:00:00&#x27;, &#x27;2017-04-11 00:00:00&#x27;, 3, 4.65, &#x27;2319 Elm St.&#x27;, &#x27;Vancouver&#x27;, &#x27;BC&#x27;, &#x27;V3F 2K1&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10496, &#x27;TRADH&#x27;, 7, &#x27;2017-04-04 00:00:00&#x27;, &#x27;2017-04-07 00:00:00&#x27;, 2, 46.77, &#x27;Av. Inês de Castro-414&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05634-030&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10497, &#x27;LEHMS&#x27;, 7, &#x27;2017-04-04 00:00:00&#x27;, &#x27;2017-04-07 00:00:00&#x27;, 1, 36.21, &#x27;Magazinweg 7&#x27;, &#x27;Frankfurt a.M.&#x27;, NULL, &#x27;60528&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10498, &#x27;HILAA&#x27;, 8, &#x27;2017-04-07 00:00:00&#x27;, &#x27;2017-04-11 00:00:00&#x27;, 2, 29.75, &#x27;Carrera 22 con Ave. Carlos Soublette #8-35&#x27;, &#x27;San Cristóbal&#x27;, &#x27;Táchira&#x27;, &#x27;5022&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10499, &#x27;LILAS&#x27;, 4, &#x27;2017-04-08 00:00:00&#x27;, &#x27;2017-04-16 00:00:00&#x27;, 2, 102.02, &#x27;Carrera 52 con Ave. Bolívar #65-98 Llano Largo&#x27;, &#x27;Barquisimeto&#x27;, &#x27;Lara&#x27;, &#x27;3508&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10500, &#x27;LAMAI&#x27;, 6, &#x27;2017-04-09 00:00:00&#x27;, &#x27;2017-04-17 00:00:00&#x27;, 1, 42.68, &#x27;1 rue Alsace-Lorraine&#x27;, &#x27;Toulouse&#x27;, NULL, &#x27;31000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10501, &#x27;BLAUS&#x27;, 9, &#x27;2017-04-09 00:00:00&#x27;, &#x27;2017-04-16 00:00:00&#x27;, 3, 8.85, &#x27;Forsterstr. 57&#x27;, &#x27;Mannheim&#x27;, NULL, &#x27;68306&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10502, &#x27;PERIC&#x27;, 2, &#x27;2017-04-10 00:00:00&#x27;, &#x27;2017-04-29 00:00:00&#x27;, 1, 69.32, &#x27;Calle Dr. Jorge Cash 321&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05033&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10503, &#x27;HUNGO&#x27;, 6, &#x27;2017-04-11 00:00:00&#x27;, &#x27;2017-04-16 00:00:00&#x27;, 2, 16.74, &#x27;8 Johnstown Road&#x27;, &#x27;Cork&#x27;, &#x27;Co. Cork&#x27;, NULL, &#x27;Ireland&#x27;);INSERT INTO `orders` VALUES (10504, &#x27;WHITC&#x27;, 4, &#x27;2017-04-11 00:00:00&#x27;, &#x27;2017-04-18 00:00:00&#x27;, 3, 59.13, &#x27;1029 - 12th Ave. S.&#x27;, &#x27;Seattle&#x27;, &#x27;WA&#x27;, &#x27;98124&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10505, &#x27;MEREP&#x27;, 3, &#x27;2017-04-14 00:00:00&#x27;, &#x27;2017-04-21 00:00:00&#x27;, 3, 7.13, &#x27;43 rue St. Laurent&#x27;, &#x27;Montréal&#x27;, &#x27;Québec&#x27;, &#x27;H1J 1C3&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10506, &#x27;KOENE&#x27;, 9, &#x27;2017-04-15 00:00:00&#x27;, &#x27;2017-05-02 00:00:00&#x27;, 2, 21.19, &#x27;Maubelstr. 90&#x27;, &#x27;Brandenburg&#x27;, NULL, &#x27;14776&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10507, &#x27;ANTO&#x27;, 7, &#x27;2017-04-15 00:00:00&#x27;, &#x27;2017-04-22 00:00:00&#x27;, 1, 47.45, &#x27;Mataderos  2312&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05023&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10508, &#x27;OTTIK&#x27;, 1, &#x27;2017-04-16 00:00:00&#x27;, &#x27;2017-05-13 00:00:00&#x27;, 2, 4.99, &#x27;Mehrheimerstr. 369&#x27;, &#x27;Köl&#x27;, NULL, &#x27;50739&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10509, &#x27;BLAUS&#x27;, 4, &#x27;2017-04-17 00:00:00&#x27;, &#x27;2017-04-29 00:00:00&#x27;, 1, 0.15, &#x27;Forsterstr. 57&#x27;, &#x27;Mannheim&#x27;, NULL, &#x27;68306&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10510, &#x27;SAVEA&#x27;, 6, &#x27;2017-04-18 00:00:00&#x27;, &#x27;2017-04-28 00:00:00&#x27;, 3, 367.63, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10511, &#x27;BONAP&#x27;, 4, &#x27;2017-04-18 00:00:00&#x27;, &#x27;2017-04-21 00:00:00&#x27;, 3, 350.64, &#x27;12-rue des Bouchers&#x27;, &#x27;Marseille&#x27;, NULL, &#x27;13008&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10512, &#x27;FAMIA&#x27;, 7, &#x27;2017-04-21 00:00:00&#x27;, &#x27;2017-04-24 00:00:00&#x27;, 2, 3.53, &#x27;Rua Orós-92&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05442-030&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10513, &#x27;WANDK&#x27;, 7, &#x27;2017-04-22 00:00:00&#x27;, &#x27;2017-04-28 00:00:00&#x27;, 1, 105.65, &#x27;Adenauerallee 900&#x27;, &#x27;Stuttgart&#x27;, NULL, &#x27;70563&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10514, &#x27;ERNSH&#x27;, 3, &#x27;2017-04-22 00:00:00&#x27;, &#x27;2017-05-16 00:00:00&#x27;, 2, 789.95, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10515, &#x27;QUICK&#x27;, 2, &#x27;2017-04-23 00:00:00&#x27;, &#x27;2017-05-23 00:00:00&#x27;, 1, 204.47, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10516, &#x27;HUNGO&#x27;, 2, &#x27;2017-04-24 00:00:00&#x27;, &#x27;2017-05-01 00:00:00&#x27;, 3, 62.78, &#x27;8 Johnstown Road&#x27;, &#x27;Cork&#x27;, &#x27;Co. Cork&#x27;, NULL, &#x27;Ireland&#x27;);INSERT INTO `orders` VALUES (10517, &#x27;NORTS&#x27;, 3, &#x27;2017-04-24 00:00:00&#x27;, &#x27;2017-04-29 00:00:00&#x27;, 3, 32.07, &#x27;South House 300 Queensbridge&#x27;, &#x27;Londo&#x27;, NULL, &#x27;SW7 1RZ&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10518, &#x27;TORTU&#x27;, 4, &#x27;2017-04-25 00:00:00&#x27;, &#x27;2017-05-05 00:00:00&#x27;, 2, 218.15, &#x27;Avda. Azteca 123&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05033&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10519, &#x27;CHOPS&#x27;, 6, &#x27;2017-04-28 00:00:00&#x27;, &#x27;2017-05-01 00:00:00&#x27;, 3, 91.76, &#x27;Hauptstr. 31&#x27;, &#x27;Ber&#x27;, NULL, &#x27;3012&#x27;, &#x27;Switzerland&#x27;);INSERT INTO `orders` VALUES (10520, &#x27;SANTG&#x27;, 7, &#x27;2017-04-29 00:00:00&#x27;, &#x27;2017-05-01 00:00:00&#x27;, 1, 13.37, &#x27;Erling Skakkes gate 78&#x27;, &#x27;Staver&#x27;, NULL, &#x27;4110&#x27;, &#x27;Norway&#x27;);INSERT INTO `orders` VALUES (10521, &#x27;CACTU&#x27;, 8, &#x27;2017-04-29 00:00:00&#x27;, &#x27;2017-05-02 00:00:00&#x27;, 2, 17.22, &#x27;Cerrito 333&#x27;, &#x27;Buenos Aires&#x27;, NULL, &#x27;1010&#x27;, &#x27;Argentina&#x27;);INSERT INTO `orders` VALUES (10522, &#x27;LEHMS&#x27;, 4, &#x27;2017-04-30 00:00:00&#x27;, &#x27;2017-05-06 00:00:00&#x27;, 1, 45.33, &#x27;Magazinweg 7&#x27;, &#x27;Frankfurt a.M.&#x27;, NULL, &#x27;60528&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10523, &#x27;SEVES&#x27;, 7, &#x27;2017-05-01 00:00:00&#x27;, &#x27;2017-05-30 00:00:00&#x27;, 2, 77.63, &#x27;90 Wadhurst Rd.&#x27;, &#x27;Londo&#x27;, NULL, &#x27;OX15 4NB&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10524, &#x27;BERGS&#x27;, 1, &#x27;2017-05-01 00:00:00&#x27;, &#x27;2017-05-07 00:00:00&#x27;, 2, 244.79, &#x27;Berguvsvägen  8&#x27;, &#x27;Luleå&#x27;, NULL, &#x27;S-958 22&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10525, &#x27;BONAP&#x27;, 1, &#x27;2017-05-02 00:00:00&#x27;, &#x27;2017-05-23 00:00:00&#x27;, 2, 11.06, &#x27;12-rue des Bouchers&#x27;, &#x27;Marseille&#x27;, NULL, &#x27;13008&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10526, &#x27;WARTH&#x27;, 4, &#x27;2017-05-05 00:00:00&#x27;, &#x27;2017-05-15 00:00:00&#x27;, 2, 58.59, &#x27;Torikatu 38&#x27;, &#x27;Oulu&#x27;, NULL, &#x27;90110&#x27;, &#x27;Finland&#x27;);INSERT INTO `orders` VALUES (10527, &#x27;QUICK&#x27;, 7, &#x27;2017-05-05 00:00:00&#x27;, &#x27;2017-05-07 00:00:00&#x27;, 1, 41.90, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10528, &#x27;GREAL&#x27;, 6, &#x27;2017-05-06 00:00:00&#x27;, &#x27;2017-05-09 00:00:00&#x27;, 2, 3.35, &#x27;2732 Baker Blvd.&#x27;, &#x27;Eugene&#x27;, &#x27;OR&#x27;, &#x27;97403&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10529, &#x27;MAISD&#x27;, 5, &#x27;2017-05-07 00:00:00&#x27;, &#x27;2017-05-09 00:00:00&#x27;, 2, 66.69, &#x27;Rue Joseph-Bens 532&#x27;, &#x27;Bruxelles&#x27;, NULL, &#x27;B-1180&#x27;, &#x27;Belgium&#x27;);INSERT INTO `orders` VALUES (10530, &#x27;PICCO&#x27;, 3, &#x27;2017-05-08 00:00:00&#x27;, &#x27;2017-05-12 00:00:00&#x27;, 2, 339.22, &#x27;Geislweg 14&#x27;, &#x27;Salzburg&#x27;, NULL, &#x27;5020&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10531, &#x27;OCEA&#x27;, 7, &#x27;2017-05-08 00:00:00&#x27;, &#x27;2017-05-19 00:00:00&#x27;, 1, 8.12, &#x27;Ing. Gustavo Moncada 8585 Piso 20-A&#x27;, &#x27;Buenos Aires&#x27;, NULL, &#x27;1010&#x27;, &#x27;Argentina&#x27;);INSERT INTO `orders` VALUES (10532, &#x27;EASTC&#x27;, 7, &#x27;2017-05-09 00:00:00&#x27;, &#x27;2017-05-12 00:00:00&#x27;, 3, 74.46, &#x27;35 King George&#x27;, &#x27;Londo&#x27;, NULL, &#x27;WX3 6FW&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10533, &#x27;FOLKO&#x27;, 8, &#x27;2017-05-12 00:00:00&#x27;, &#x27;2017-05-22 00:00:00&#x27;, 1, 188.04, &#x27;Åkergatan 24&#x27;, &#x27;Bräcke&#x27;, NULL, &#x27;S-844 67&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10534, &#x27;LEHMS&#x27;, 8, &#x27;2017-05-12 00:00:00&#x27;, &#x27;2017-05-14 00:00:00&#x27;, 2, 27.94, &#x27;Magazinweg 7&#x27;, &#x27;Frankfurt a.M.&#x27;, NULL, &#x27;60528&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10535, &#x27;ANTO&#x27;, 4, &#x27;2017-05-13 00:00:00&#x27;, &#x27;2017-05-21 00:00:00&#x27;, 1, 15.64, &#x27;Mataderos  2312&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05023&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10536, &#x27;LEHMS&#x27;, 3, &#x27;2017-05-14 00:00:00&#x27;, &#x27;2017-06-06 00:00:00&#x27;, 2, 58.88, &#x27;Magazinweg 7&#x27;, &#x27;Frankfurt a.M.&#x27;, NULL, &#x27;60528&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10537, &#x27;RICSU&#x27;, 1, &#x27;2017-05-14 00:00:00&#x27;, &#x27;2017-05-19 00:00:00&#x27;, 1, 78.85, &#x27;Starenweg 5&#x27;, &#x27;Genève&#x27;, NULL, &#x27;1204&#x27;, &#x27;Switzerland&#x27;);INSERT INTO `orders` VALUES (10538, &#x27;BSBEV&#x27;, 9, &#x27;2017-05-15 00:00:00&#x27;, &#x27;2017-05-16 00:00:00&#x27;, 3, 4.87, &#x27;Fauntleroy Circus&#x27;, &#x27;Londo&#x27;, NULL, &#x27;EC2 5NT&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10539, &#x27;BSBEV&#x27;, 6, &#x27;2017-05-16 00:00:00&#x27;, &#x27;2017-05-23 00:00:00&#x27;, 3, 12.36, &#x27;Fauntleroy Circus&#x27;, &#x27;Londo&#x27;, NULL, &#x27;EC2 5NT&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10540, &#x27;QUICK&#x27;, 3, &#x27;2017-05-19 00:00:00&#x27;, &#x27;2017-06-13 00:00:00&#x27;, 3, 1007.64, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10541, &#x27;HANAR&#x27;, 2, &#x27;2017-05-19 00:00:00&#x27;, &#x27;2017-05-29 00:00:00&#x27;, 1, 68.65, &#x27;Rua do Paço-67&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;05454-876&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10542, &#x27;KOENE&#x27;, 1, &#x27;2017-05-20 00:00:00&#x27;, &#x27;2017-05-26 00:00:00&#x27;, 3, 10.95, &#x27;Maubelstr. 90&#x27;, &#x27;Brandenburg&#x27;, NULL, &#x27;14776&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10543, &#x27;LILAS&#x27;, 8, &#x27;2017-05-21 00:00:00&#x27;, &#x27;2017-05-23 00:00:00&#x27;, 2, 48.17, &#x27;Carrera 52 con Ave. Bolívar #65-98 Llano Largo&#x27;, &#x27;Barquisimeto&#x27;, &#x27;Lara&#x27;, &#x27;3508&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10544, &#x27;LONEP&#x27;, 4, &#x27;2017-05-21 00:00:00&#x27;, &#x27;2017-05-30 00:00:00&#x27;, 1, 24.91, &#x27;89 Chiaroscuro Rd.&#x27;, &#x27;Portland&#x27;, &#x27;OR&#x27;, &#x27;97219&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10545, &#x27;LAZYK&#x27;, 8, &#x27;2017-05-22 00:00:00&#x27;, &#x27;2017-06-26 00:00:00&#x27;, 2, 11.92, &#x27;12 Orchestra Terrace&#x27;, &#x27;Walla Walla&#x27;, &#x27;WA&#x27;, &#x27;99362&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10546, &#x27;VICTE&#x27;, 1, &#x27;2017-05-23 00:00:00&#x27;, &#x27;2017-05-27 00:00:00&#x27;, 3, 194.72, &#x27;2-rue du Commerce&#x27;, &#x27;Lyo&#x27;, NULL, &#x27;69004&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10547, &#x27;SEVES&#x27;, 3, &#x27;2017-05-23 00:00:00&#x27;, &#x27;2017-06-02 00:00:00&#x27;, 2, 178.43, &#x27;90 Wadhurst Rd.&#x27;, &#x27;Londo&#x27;, NULL, &#x27;OX15 4NB&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10548, &#x27;TOMSP&#x27;, 3, &#x27;2017-05-26 00:00:00&#x27;, &#x27;2017-06-02 00:00:00&#x27;, 2, 1.43, &#x27;Luisenstr. 48&#x27;, &#x27;Münster&#x27;, NULL, &#x27;44087&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10549, &#x27;QUICK&#x27;, 5, &#x27;2017-05-27 00:00:00&#x27;, &#x27;2017-05-30 00:00:00&#x27;, 1, 171.24, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10550, &#x27;GODOS&#x27;, 7, &#x27;2017-05-28 00:00:00&#x27;, &#x27;2017-06-06 00:00:00&#x27;, 3, 4.32, &#x27;C/ Romero-33&#x27;, &#x27;Sevilla&#x27;, NULL, &#x27;41101&#x27;, &#x27;Spain&#x27;);INSERT INTO `orders` VALUES (10551, &#x27;FURIB&#x27;, 4, &#x27;2017-05-28 00:00:00&#x27;, &#x27;2017-06-06 00:00:00&#x27;, 3, 72.95, &#x27;Jardim das rosas n. 32&#x27;, &#x27;Lisboa&#x27;, NULL, &#x27;1675&#x27;, &#x27;Portugal&#x27;);INSERT INTO `orders` VALUES (10552, &#x27;HILAA&#x27;, 2, &#x27;2017-05-29 00:00:00&#x27;, &#x27;2017-06-05 00:00:00&#x27;, 1, 83.22, &#x27;Carrera 22 con Ave. Carlos Soublette #8-35&#x27;, &#x27;San Cristóbal&#x27;, &#x27;Táchira&#x27;, &#x27;5022&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10553, &#x27;WARTH&#x27;, 2, &#x27;2017-05-30 00:00:00&#x27;, &#x27;2017-06-03 00:00:00&#x27;, 2, 149.49, &#x27;Torikatu 38&#x27;, &#x27;Oulu&#x27;, NULL, &#x27;90110&#x27;, &#x27;Finland&#x27;);INSERT INTO `orders` VALUES (10554, &#x27;OTTIK&#x27;, 4, &#x27;2017-05-30 00:00:00&#x27;, &#x27;2017-06-05 00:00:00&#x27;, 3, 120.97, &#x27;Mehrheimerstr. 369&#x27;, &#x27;Köl&#x27;, NULL, &#x27;50739&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10555, &#x27;SAVEA&#x27;, 6, &#x27;2017-06-02 00:00:00&#x27;, &#x27;2017-06-04 00:00:00&#x27;, 3, 252.49, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10556, &#x27;SIMOB&#x27;, 2, &#x27;2017-06-03 00:00:00&#x27;, &#x27;2017-06-13 00:00:00&#x27;, 1, 9.80, &#x27;Vinbæltet 34&#x27;, &#x27;Kobenhav&#x27;, NULL, &#x27;1734&#x27;, &#x27;Denmark&#x27;);INSERT INTO `orders` VALUES (10557, &#x27;LEHMS&#x27;, 9, &#x27;2017-06-03 00:00:00&#x27;, &#x27;2017-06-06 00:00:00&#x27;, 2, 96.72, &#x27;Magazinweg 7&#x27;, &#x27;Frankfurt a.M.&#x27;, NULL, &#x27;60528&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10558, &#x27;AROUT&#x27;, 1, &#x27;2017-06-04 00:00:00&#x27;, &#x27;2017-06-10 00:00:00&#x27;, 2, 72.97, &#x27;Brook Farm Stratford St. Mary&#x27;, &#x27;Colchester&#x27;, &#x27;Essex&#x27;, &#x27;CO7 6JX&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10559, &#x27;BLONP&#x27;, 6, &#x27;2017-06-05 00:00:00&#x27;, &#x27;2017-06-13 00:00:00&#x27;, 1, 8.05, &#x27;24-place Kléber&#x27;, &#x27;Strasbourg&#x27;, NULL, &#x27;67000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10560, &#x27;FRANK&#x27;, 8, &#x27;2017-06-06 00:00:00&#x27;, &#x27;2017-06-09 00:00:00&#x27;, 1, 36.65, &#x27;Berliner Platz 43&#x27;, &#x27;Münche&#x27;, NULL, &#x27;80805&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10561, &#x27;FOLKO&#x27;, 2, &#x27;2017-06-06 00:00:00&#x27;, &#x27;2017-06-09 00:00:00&#x27;, 2, 242.21, &#x27;Åkergatan 24&#x27;, &#x27;Bräcke&#x27;, NULL, &#x27;S-844 67&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10562, &#x27;REGGC&#x27;, 1, &#x27;2017-06-09 00:00:00&#x27;, &#x27;2017-06-12 00:00:00&#x27;, 1, 22.95, &#x27;Strada Provinciale 124&#x27;, &#x27;Reggio Emilia&#x27;, NULL, &#x27;42100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (10563, &#x27;RICAR&#x27;, 2, &#x27;2017-06-10 00:00:00&#x27;, &#x27;2017-06-24 00:00:00&#x27;, 2, 60.43, &#x27;Av. Copacabana-267&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;02389-890&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10564, &#x27;RATTC&#x27;, 4, &#x27;2017-06-10 00:00:00&#x27;, &#x27;2017-06-16 00:00:00&#x27;, 3, 13.75, &#x27;2817 Milton Dr.&#x27;, &#x27;Albuquerque&#x27;, &#x27;NM&#x27;, &#x27;87110&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10565, &#x27;MEREP&#x27;, 8, &#x27;2017-06-11 00:00:00&#x27;, &#x27;2017-06-18 00:00:00&#x27;, 2, 7.15, &#x27;43 rue St. Laurent&#x27;, &#x27;Montréal&#x27;, &#x27;Québec&#x27;, &#x27;H1J 1C3&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10566, &#x27;BLONP&#x27;, 9, &#x27;2017-06-12 00:00:00&#x27;, &#x27;2017-06-18 00:00:00&#x27;, 1, 88.40, &#x27;24-place Kléber&#x27;, &#x27;Strasbourg&#x27;, NULL, &#x27;67000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10567, &#x27;HUNGO&#x27;, 1, &#x27;2017-06-12 00:00:00&#x27;, &#x27;2017-06-17 00:00:00&#x27;, 1, 33.97, &#x27;8 Johnstown Road&#x27;, &#x27;Cork&#x27;, &#x27;Co. Cork&#x27;, NULL, &#x27;Ireland&#x27;);INSERT INTO `orders` VALUES (10568, &#x27;GALED&#x27;, 3, &#x27;2017-06-13 00:00:00&#x27;, &#x27;2017-07-09 00:00:00&#x27;, 3, 6.54, &#x27;Rambla de Cataluña-23&#x27;, &#x27;Barcelona&#x27;, NULL, &#x27;8022&#x27;, &#x27;Spain&#x27;);INSERT INTO `orders` VALUES (10569, &#x27;RATTC&#x27;, 5, &#x27;2017-06-16 00:00:00&#x27;, &#x27;2017-07-11 00:00:00&#x27;, 1, 58.98, &#x27;2817 Milton Dr.&#x27;, &#x27;Albuquerque&#x27;, &#x27;NM&#x27;, &#x27;87110&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10570, &#x27;MEREP&#x27;, 3, &#x27;2017-06-17 00:00:00&#x27;, &#x27;2017-06-19 00:00:00&#x27;, 3, 188.99, &#x27;43 rue St. Laurent&#x27;, &#x27;Montréal&#x27;, &#x27;Québec&#x27;, &#x27;H1J 1C3&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10571, &#x27;ERNSH&#x27;, 8, &#x27;2017-06-17 00:00:00&#x27;, &#x27;2017-07-04 00:00:00&#x27;, 3, 26.06, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10572, &#x27;BERGS&#x27;, 3, &#x27;2017-06-18 00:00:00&#x27;, &#x27;2017-06-25 00:00:00&#x27;, 2, 116.43, &#x27;Berguvsvägen  8&#x27;, &#x27;Luleå&#x27;, NULL, &#x27;S-958 22&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10573, &#x27;ANTO&#x27;, 7, &#x27;2017-06-19 00:00:00&#x27;, &#x27;2017-06-20 00:00:00&#x27;, 3, 84.84, &#x27;Mataderos  2312&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05023&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10574, &#x27;TRAIH&#x27;, 4, &#x27;2017-06-19 00:00:00&#x27;, &#x27;2017-06-30 00:00:00&#x27;, 2, 37.60, &#x27;722 DaVinci Blvd.&#x27;, &#x27;Kirkland&#x27;, &#x27;WA&#x27;, &#x27;98034&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10575, &#x27;MORGK&#x27;, 5, &#x27;2017-06-20 00:00:00&#x27;, &#x27;2017-06-30 00:00:00&#x27;, 1, 127.34, &#x27;Heerstr. 22&#x27;, &#x27;Leipzig&#x27;, NULL, &#x27;04179&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10576, &#x27;TORTU&#x27;, 3, &#x27;2017-06-23 00:00:00&#x27;, &#x27;2017-06-30 00:00:00&#x27;, 3, 18.56, &#x27;Avda. Azteca 123&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05033&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10577, &#x27;TRAIH&#x27;, 9, &#x27;2017-06-23 00:00:00&#x27;, &#x27;2017-06-30 00:00:00&#x27;, 2, 25.41, &#x27;722 DaVinci Blvd.&#x27;, &#x27;Kirkland&#x27;, &#x27;WA&#x27;, &#x27;98034&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10578, &#x27;BSBEV&#x27;, 4, &#x27;2017-06-24 00:00:00&#x27;, &#x27;2017-07-25 00:00:00&#x27;, 3, 29.60, &#x27;Fauntleroy Circus&#x27;, &#x27;Londo&#x27;, NULL, &#x27;EC2 5NT&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10579, &#x27;LETSS&#x27;, 1, &#x27;2017-06-25 00:00:00&#x27;, &#x27;2017-07-04 00:00:00&#x27;, 2, 13.73, &#x27;87 Polk St. Suite 5&#x27;, &#x27;San Francisco&#x27;, &#x27;CA&#x27;, &#x27;94117&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10580, &#x27;OTTIK&#x27;, 4, &#x27;2017-06-26 00:00:00&#x27;, &#x27;2017-07-01 00:00:00&#x27;, 3, 75.89, &#x27;Mehrheimerstr. 369&#x27;, &#x27;Köl&#x27;, NULL, &#x27;50739&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10581, &#x27;FAMIA&#x27;, 3, &#x27;2017-06-26 00:00:00&#x27;, &#x27;2017-07-02 00:00:00&#x27;, 1, 3.01, &#x27;Rua Orós-92&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05442-030&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10582, &#x27;BLAUS&#x27;, 3, &#x27;2017-06-27 00:00:00&#x27;, &#x27;2017-07-14 00:00:00&#x27;, 2, 27.71, &#x27;Forsterstr. 57&#x27;, &#x27;Mannheim&#x27;, NULL, &#x27;68306&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10583, &#x27;WARTH&#x27;, 2, &#x27;2017-06-30 00:00:00&#x27;, &#x27;2017-07-04 00:00:00&#x27;, 2, 7.28, &#x27;Torikatu 38&#x27;, &#x27;Oulu&#x27;, NULL, &#x27;90110&#x27;, &#x27;Finland&#x27;);INSERT INTO `orders` VALUES (10584, &#x27;BLONP&#x27;, 4, &#x27;2017-06-30 00:00:00&#x27;, &#x27;2017-07-04 00:00:00&#x27;, 1, 59.14, &#x27;24-place Kléber&#x27;, &#x27;Strasbourg&#x27;, NULL, &#x27;67000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10585, &#x27;WELLI&#x27;, 7, &#x27;2017-07-01 00:00:00&#x27;, &#x27;2017-07-10 00:00:00&#x27;, 1, 13.41, &#x27;Rua do Mercado-12&#x27;, &#x27;Resende&#x27;, &#x27;SP&#x27;, &#x27;08737-363&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10586, &#x27;REGGC&#x27;, 9, &#x27;2017-07-02 00:00:00&#x27;, &#x27;2017-07-09 00:00:00&#x27;, 1, 0.48, &#x27;Strada Provinciale 124&#x27;, &#x27;Reggio Emilia&#x27;, NULL, &#x27;42100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (10587, &#x27;QUEDE&#x27;, 1, &#x27;2017-07-02 00:00:00&#x27;, &#x27;2017-07-09 00:00:00&#x27;, 1, 62.52, &#x27;Rua da Panificadora-12&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;02389-673&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10588, &#x27;QUICK&#x27;, 2, &#x27;2017-07-03 00:00:00&#x27;, &#x27;2017-07-10 00:00:00&#x27;, 3, 194.67, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10589, &#x27;GREAL&#x27;, 8, &#x27;2017-07-04 00:00:00&#x27;, &#x27;2017-07-14 00:00:00&#x27;, 2, 4.42, &#x27;2732 Baker Blvd.&#x27;, &#x27;Eugene&#x27;, &#x27;OR&#x27;, &#x27;97403&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10590, &#x27;MEREP&#x27;, 4, &#x27;2017-07-07 00:00:00&#x27;, &#x27;2017-07-14 00:00:00&#x27;, 3, 44.77, &#x27;43 rue St. Laurent&#x27;, &#x27;Montréal&#x27;, &#x27;Québec&#x27;, &#x27;H1J 1C3&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10591, &#x27;VAFFE&#x27;, 1, &#x27;2017-07-07 00:00:00&#x27;, &#x27;2017-07-16 00:00:00&#x27;, 1, 55.92, &#x27;Smagsloget 45&#x27;, &#x27;Århus&#x27;, NULL, &#x27;8200&#x27;, &#x27;Denmark&#x27;);INSERT INTO `orders` VALUES (10592, &#x27;LEHMS&#x27;, 3, &#x27;2017-07-08 00:00:00&#x27;, &#x27;2017-07-16 00:00:00&#x27;, 1, 32.10, &#x27;Magazinweg 7&#x27;, &#x27;Frankfurt a.M.&#x27;, NULL, &#x27;60528&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10593, &#x27;LEHMS&#x27;, 7, &#x27;2017-07-09 00:00:00&#x27;, &#x27;2017-08-13 00:00:00&#x27;, 2, 174.20, &#x27;Magazinweg 7&#x27;, &#x27;Frankfurt a.M.&#x27;, NULL, &#x27;60528&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10594, &#x27;OLDWO&#x27;, 3, &#x27;2017-07-09 00:00:00&#x27;, &#x27;2017-07-16 00:00:00&#x27;, 2, 5.24, &#x27;2743 Bering St.&#x27;, &#x27;Anchorage&#x27;, &#x27;AK&#x27;, &#x27;99508&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10595, &#x27;ERNSH&#x27;, 2, &#x27;2017-07-10 00:00:00&#x27;, &#x27;2017-07-14 00:00:00&#x27;, 1, 96.78, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10596, &#x27;WHITC&#x27;, 8, &#x27;2017-07-11 00:00:00&#x27;, &#x27;2017-08-12 00:00:00&#x27;, 1, 16.34, &#x27;1029 - 12th Ave. S.&#x27;, &#x27;Seattle&#x27;, &#x27;WA&#x27;, &#x27;98124&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10597, &#x27;PICCO&#x27;, 7, &#x27;2017-07-11 00:00:00&#x27;, &#x27;2017-07-18 00:00:00&#x27;, 3, 35.12, &#x27;Geislweg 14&#x27;, &#x27;Salzburg&#x27;, NULL, &#x27;5020&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10598, &#x27;RATTC&#x27;, 1, &#x27;2017-07-14 00:00:00&#x27;, &#x27;2017-07-18 00:00:00&#x27;, 3, 44.42, &#x27;2817 Milton Dr.&#x27;, &#x27;Albuquerque&#x27;, &#x27;NM&#x27;, &#x27;87110&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10599, &#x27;BSBEV&#x27;, 6, &#x27;2017-07-15 00:00:00&#x27;, &#x27;2017-07-21 00:00:00&#x27;, 3, 29.98, &#x27;Fauntleroy Circus&#x27;, &#x27;Londo&#x27;, NULL, &#x27;EC2 5NT&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10600, &#x27;HUNGC&#x27;, 4, &#x27;2017-07-16 00:00:00&#x27;, &#x27;2017-07-21 00:00:00&#x27;, 1, 45.13, &#x27;City Center Plaza 516 Main St.&#x27;, &#x27;Elgi&#x27;, &#x27;OR&#x27;, &#x27;97827&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10601, &#x27;HILAA&#x27;, 7, &#x27;2017-07-16 00:00:00&#x27;, &#x27;2017-07-22 00:00:00&#x27;, 1, 58.30, &#x27;Carrera 22 con Ave. Carlos Soublette #8-35&#x27;, &#x27;San Cristóbal&#x27;, &#x27;Táchira&#x27;, &#x27;5022&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10602, &#x27;VAFFE&#x27;, 8, &#x27;2017-07-17 00:00:00&#x27;, &#x27;2017-07-22 00:00:00&#x27;, 2, 2.92, &#x27;Smagsloget 45&#x27;, &#x27;Århus&#x27;, NULL, &#x27;8200&#x27;, &#x27;Denmark&#x27;);INSERT INTO `orders` VALUES (10603, &#x27;SAVEA&#x27;, 8, &#x27;2017-07-18 00:00:00&#x27;, &#x27;2017-08-08 00:00:00&#x27;, 2, 48.77, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10604, &#x27;FURIB&#x27;, 1, &#x27;2017-07-18 00:00:00&#x27;, &#x27;2017-07-29 00:00:00&#x27;, 1, 7.46, &#x27;Jardim das rosas n. 32&#x27;, &#x27;Lisboa&#x27;, NULL, &#x27;1675&#x27;, &#x27;Portugal&#x27;);INSERT INTO `orders` VALUES (10605, &#x27;MEREP&#x27;, 1, &#x27;2017-07-21 00:00:00&#x27;, &#x27;2017-07-29 00:00:00&#x27;, 2, 379.13, &#x27;43 rue St. Laurent&#x27;, &#x27;Montréal&#x27;, &#x27;Québec&#x27;, &#x27;H1J 1C3&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10606, &#x27;TRADH&#x27;, 4, &#x27;2017-07-22 00:00:00&#x27;, &#x27;2017-07-31 00:00:00&#x27;, 3, 79.40, &#x27;Av. Inês de Castro-414&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05634-030&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10607, &#x27;SAVEA&#x27;, 5, &#x27;2017-07-22 00:00:00&#x27;, &#x27;2017-07-25 00:00:00&#x27;, 1, 200.24, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10608, &#x27;TOMSP&#x27;, 4, &#x27;2017-07-23 00:00:00&#x27;, &#x27;2017-08-01 00:00:00&#x27;, 2, 27.79, &#x27;Luisenstr. 48&#x27;, &#x27;Münster&#x27;, NULL, &#x27;44087&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10609, &#x27;DUMO&#x27;, 7, &#x27;2017-07-24 00:00:00&#x27;, &#x27;2017-07-30 00:00:00&#x27;, 2, 1.85, &#x27;67-rue des Cinquante Otages&#x27;, &#x27;Nantes&#x27;, NULL, &#x27;44000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10610, &#x27;LAMAI&#x27;, 8, &#x27;2017-07-25 00:00:00&#x27;, &#x27;2017-08-06 00:00:00&#x27;, 1, 26.78, &#x27;1 rue Alsace-Lorraine&#x27;, &#x27;Toulouse&#x27;, NULL, &#x27;31000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10611, &#x27;WOLZA&#x27;, 6, &#x27;2017-07-25 00:00:00&#x27;, &#x27;2017-08-01 00:00:00&#x27;, 2, 80.65, &#x27;ul. Filtrowa 68&#x27;, &#x27;Warszawa&#x27;, NULL, &#x27;01-012&#x27;, &#x27;Poland&#x27;);INSERT INTO `orders` VALUES (10612, &#x27;SAVEA&#x27;, 1, &#x27;2017-07-28 00:00:00&#x27;, &#x27;2017-08-01 00:00:00&#x27;, 2, 544.08, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10613, &#x27;HILAA&#x27;, 4, &#x27;2017-07-29 00:00:00&#x27;, &#x27;2017-08-01 00:00:00&#x27;, 2, 8.11, &#x27;Carrera 22 con Ave. Carlos Soublette #8-35&#x27;, &#x27;San Cristóbal&#x27;, &#x27;Táchira&#x27;, &#x27;5022&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10614, &#x27;BLAUS&#x27;, 8, &#x27;2017-07-29 00:00:00&#x27;, &#x27;2017-08-01 00:00:00&#x27;, 3, 1.93, &#x27;Forsterstr. 57&#x27;, &#x27;Mannheim&#x27;, NULL, &#x27;68306&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10615, &#x27;WILMK&#x27;, 2, &#x27;2017-07-30 00:00:00&#x27;, &#x27;2017-08-06 00:00:00&#x27;, 3, 0.75, &#x27;Keskuskatu 45&#x27;, &#x27;Helsinki&#x27;, NULL, &#x27;21240&#x27;, &#x27;Finland&#x27;);INSERT INTO `orders` VALUES (10616, &#x27;GREAL&#x27;, 1, &#x27;2017-07-31 00:00:00&#x27;, &#x27;2017-08-05 00:00:00&#x27;, 2, 116.53, &#x27;2732 Baker Blvd.&#x27;, &#x27;Eugene&#x27;, &#x27;OR&#x27;, &#x27;97403&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10617, &#x27;GREAL&#x27;, 4, &#x27;2017-07-31 00:00:00&#x27;, &#x27;2017-08-04 00:00:00&#x27;, 2, 18.53, &#x27;2732 Baker Blvd.&#x27;, &#x27;Eugene&#x27;, &#x27;OR&#x27;, &#x27;97403&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10618, &#x27;MEREP&#x27;, 1, &#x27;2017-08-01 00:00:00&#x27;, &#x27;2017-08-08 00:00:00&#x27;, 1, 154.68, &#x27;43 rue St. Laurent&#x27;, &#x27;Montréal&#x27;, &#x27;Québec&#x27;, &#x27;H1J 1C3&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10619, &#x27;MEREP&#x27;, 3, &#x27;2017-08-04 00:00:00&#x27;, &#x27;2017-08-07 00:00:00&#x27;, 3, 91.05, &#x27;43 rue St. Laurent&#x27;, &#x27;Montréal&#x27;, &#x27;Québec&#x27;, &#x27;H1J 1C3&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10620, &#x27;LAUGB&#x27;, 2, &#x27;2017-08-05 00:00:00&#x27;, &#x27;2017-08-14 00:00:00&#x27;, 3, 0.94, &#x27;2319 Elm St.&#x27;, &#x27;Vancouver&#x27;, &#x27;BC&#x27;, &#x27;V3F 2K1&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10621, &#x27;ISLAT&#x27;, 4, &#x27;2017-08-05 00:00:00&#x27;, &#x27;2017-08-11 00:00:00&#x27;, 2, 23.73, &#x27;Garden House Crowther Way&#x27;, &#x27;Cowes&#x27;, &#x27;Isle of Wight&#x27;, &#x27;PO31 7PJ&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10622, &#x27;RICAR&#x27;, 4, &#x27;2017-08-06 00:00:00&#x27;, &#x27;2017-08-11 00:00:00&#x27;, 3, 50.97, &#x27;Av. Copacabana-267&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;02389-890&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10623, &#x27;FRANK&#x27;, 8, &#x27;2017-08-07 00:00:00&#x27;, &#x27;2017-08-12 00:00:00&#x27;, 2, 97.18, &#x27;Berliner Platz 43&#x27;, &#x27;Münche&#x27;, NULL, &#x27;80805&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10624, &#x27;THECR&#x27;, 4, &#x27;2017-08-07 00:00:00&#x27;, &#x27;2017-08-19 00:00:00&#x27;, 2, 94.80, &#x27;55 Grizzly Peak Rd.&#x27;, &#x27;Butte&#x27;, &#x27;MT&#x27;, &#x27;59801&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10625, &#x27;ANATR&#x27;, 3, &#x27;2017-08-08 00:00:00&#x27;, &#x27;2017-08-14 00:00:00&#x27;, 1, 43.90, &#x27;Avda. de la Constitución 2222&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05021&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10626, &#x27;BERGS&#x27;, 1, &#x27;2017-08-11 00:00:00&#x27;, &#x27;2017-08-20 00:00:00&#x27;, 2, 138.69, &#x27;Berguvsvägen  8&#x27;, &#x27;Luleå&#x27;, NULL, &#x27;S-958 22&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10627, &#x27;SAVEA&#x27;, 8, &#x27;2017-08-11 00:00:00&#x27;, &#x27;2017-08-21 00:00:00&#x27;, 3, 107.46, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10628, &#x27;BLONP&#x27;, 4, &#x27;2017-08-12 00:00:00&#x27;, &#x27;2017-08-20 00:00:00&#x27;, 3, 30.36, &#x27;24-place Kléber&#x27;, &#x27;Strasbourg&#x27;, NULL, &#x27;67000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10629, &#x27;GODOS&#x27;, 4, &#x27;2017-08-12 00:00:00&#x27;, &#x27;2017-08-20 00:00:00&#x27;, 3, 85.46, &#x27;C/ Romero-33&#x27;, &#x27;Sevilla&#x27;, NULL, &#x27;41101&#x27;, &#x27;Spain&#x27;);INSERT INTO `orders` VALUES (10630, &#x27;KOENE&#x27;, 1, &#x27;2017-08-13 00:00:00&#x27;, &#x27;2017-08-19 00:00:00&#x27;, 2, 32.35, &#x27;Maubelstr. 90&#x27;, &#x27;Brandenburg&#x27;, NULL, &#x27;14776&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10631, &#x27;LAMAI&#x27;, 8, &#x27;2017-08-14 00:00:00&#x27;, &#x27;2017-08-15 00:00:00&#x27;, 1, 0.87, &#x27;1 rue Alsace-Lorraine&#x27;, &#x27;Toulouse&#x27;, NULL, &#x27;31000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10632, &#x27;WANDK&#x27;, 8, &#x27;2017-08-14 00:00:00&#x27;, &#x27;2017-08-19 00:00:00&#x27;, 1, 41.38, &#x27;Adenauerallee 900&#x27;, &#x27;Stuttgart&#x27;, NULL, &#x27;70563&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10633, &#x27;ERNSH&#x27;, 7, &#x27;2017-08-15 00:00:00&#x27;, &#x27;2017-08-18 00:00:00&#x27;, 3, 477.90, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10634, &#x27;FOLIG&#x27;, 4, &#x27;2017-08-15 00:00:00&#x27;, &#x27;2017-08-21 00:00:00&#x27;, 3, 487.38, &#x27;184-chaussée de Tournai&#x27;, &#x27;Lille&#x27;, NULL, &#x27;59000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10635, &#x27;MAGAA&#x27;, 8, &#x27;2017-08-18 00:00:00&#x27;, &#x27;2017-08-21 00:00:00&#x27;, 3, 47.46, &#x27;Via Ludovico il Moro 22&#x27;, &#x27;Bergamo&#x27;, NULL, &#x27;24100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (10636, &#x27;WARTH&#x27;, 4, &#x27;2017-08-19 00:00:00&#x27;, &#x27;2017-08-26 00:00:00&#x27;, 1, 1.15, &#x27;Torikatu 38&#x27;, &#x27;Oulu&#x27;, NULL, &#x27;90110&#x27;, &#x27;Finland&#x27;);INSERT INTO `orders` VALUES (10637, &#x27;QUEE&#x27;, 6, &#x27;2017-08-19 00:00:00&#x27;, &#x27;2017-08-26 00:00:00&#x27;, 1, 201.29, &#x27;Alameda dos Canàrios-891&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05487-020&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10638, &#x27;LINOD&#x27;, 3, &#x27;2017-08-20 00:00:00&#x27;, &#x27;2017-09-01 00:00:00&#x27;, 1, 158.44, &#x27;Ave. 5 de Mayo Porlamar&#x27;, &#x27;I. de Margarita&#x27;, &#x27;Nueva Esparta&#x27;, &#x27;4980&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10639, &#x27;SANTG&#x27;, 7, &#x27;2017-08-20 00:00:00&#x27;, &#x27;2017-08-27 00:00:00&#x27;, 3, 38.64, &#x27;Erling Skakkes gate 78&#x27;, &#x27;Staver&#x27;, NULL, &#x27;4110&#x27;, &#x27;Norway&#x27;);INSERT INTO `orders` VALUES (10640, &#x27;WANDK&#x27;, 4, &#x27;2017-08-21 00:00:00&#x27;, &#x27;2017-08-28 00:00:00&#x27;, 1, 23.55, &#x27;Adenauerallee 900&#x27;, &#x27;Stuttgart&#x27;, NULL, &#x27;70563&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10641, &#x27;HILAA&#x27;, 4, &#x27;2017-08-22 00:00:00&#x27;, &#x27;2017-08-26 00:00:00&#x27;, 2, 179.61, &#x27;Carrera 22 con Ave. Carlos Soublette #8-35&#x27;, &#x27;San Cristóbal&#x27;, &#x27;Táchira&#x27;, &#x27;5022&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10642, &#x27;SIMOB&#x27;, 7, &#x27;2017-08-22 00:00:00&#x27;, &#x27;2017-09-05 00:00:00&#x27;, 3, 41.89, &#x27;Vinbæltet 34&#x27;, &#x27;Kobenhav&#x27;, NULL, &#x27;1734&#x27;, &#x27;Denmark&#x27;);INSERT INTO `orders` VALUES (10643, &#x27;ALFKI&#x27;, 6, &#x27;2017-08-25 00:00:00&#x27;, &#x27;2017-09-02 00:00:00&#x27;, 1, 29.46, &#x27;Obere Str. 57&#x27;, &#x27;Berli&#x27;, NULL, &#x27;12209&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10644, &#x27;WELLI&#x27;, 3, &#x27;2017-08-25 00:00:00&#x27;, &#x27;2017-09-01 00:00:00&#x27;, 2, 0.14, &#x27;Rua do Mercado-12&#x27;, &#x27;Resende&#x27;, &#x27;SP&#x27;, &#x27;08737-363&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10645, &#x27;HANAR&#x27;, 4, &#x27;2017-08-26 00:00:00&#x27;, &#x27;2017-09-02 00:00:00&#x27;, 1, 12.41, &#x27;Rua do Paço-67&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;05454-876&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10646, &#x27;HUNGO&#x27;, 9, &#x27;2017-08-27 00:00:00&#x27;, &#x27;2017-09-03 00:00:00&#x27;, 3, 142.33, &#x27;8 Johnstown Road&#x27;, &#x27;Cork&#x27;, &#x27;Co. Cork&#x27;, NULL, &#x27;Ireland&#x27;);INSERT INTO `orders` VALUES (10647, &#x27;QUEDE&#x27;, 4, &#x27;2017-08-27 00:00:00&#x27;, &#x27;2017-09-03 00:00:00&#x27;, 2, 45.54, &#x27;Rua da Panificadora-12&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;02389-673&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10648, &#x27;RICAR&#x27;, 5, &#x27;2017-08-28 00:00:00&#x27;, &#x27;2017-09-09 00:00:00&#x27;, 2, 14.25, &#x27;Av. Copacabana-267&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;02389-890&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10649, &#x27;MAISD&#x27;, 5, &#x27;2017-08-28 00:00:00&#x27;, &#x27;2017-08-29 00:00:00&#x27;, 3, 6.20, &#x27;Rue Joseph-Bens 532&#x27;, &#x27;Bruxelles&#x27;, NULL, &#x27;B-1180&#x27;, &#x27;Belgium&#x27;);INSERT INTO `orders` VALUES (10650, &#x27;FAMIA&#x27;, 5, &#x27;2017-08-29 00:00:00&#x27;, &#x27;2017-09-03 00:00:00&#x27;, 3, 176.81, &#x27;Rua Orós-92&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05442-030&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10651, &#x27;WANDK&#x27;, 8, &#x27;2017-09-01 00:00:00&#x27;, &#x27;2017-09-11 00:00:00&#x27;, 2, 20.60, &#x27;Adenauerallee 900&#x27;, &#x27;Stuttgart&#x27;, NULL, &#x27;70563&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10652, &#x27;GOURL&#x27;, 4, &#x27;2017-09-01 00:00:00&#x27;, &#x27;2017-09-08 00:00:00&#x27;, 2, 7.14, &#x27;Av. Brasil-442&#x27;, &#x27;Campinas&#x27;, &#x27;SP&#x27;, &#x27;04876-786&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10653, &#x27;FRANK&#x27;, 1, &#x27;2017-09-02 00:00:00&#x27;, &#x27;2017-09-19 00:00:00&#x27;, 1, 93.25, &#x27;Berliner Platz 43&#x27;, &#x27;Münche&#x27;, NULL, &#x27;80805&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10654, &#x27;BERGS&#x27;, 5, &#x27;2017-09-02 00:00:00&#x27;, &#x27;2017-09-11 00:00:00&#x27;, 1, 55.26, &#x27;Berguvsvägen  8&#x27;, &#x27;Luleå&#x27;, NULL, &#x27;S-958 22&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10655, &#x27;REGGC&#x27;, 1, &#x27;2017-09-03 00:00:00&#x27;, &#x27;2017-09-11 00:00:00&#x27;, 2, 4.41, &#x27;Strada Provinciale 124&#x27;, &#x27;Reggio Emilia&#x27;, NULL, &#x27;42100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (10656, &#x27;GREAL&#x27;, 6, &#x27;2017-09-04 00:00:00&#x27;, &#x27;2017-09-10 00:00:00&#x27;, 1, 57.15, &#x27;2732 Baker Blvd.&#x27;, &#x27;Eugene&#x27;, &#x27;OR&#x27;, &#x27;97403&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10657, &#x27;SAVEA&#x27;, 2, &#x27;2017-09-04 00:00:00&#x27;, &#x27;2017-09-15 00:00:00&#x27;, 2, 352.69, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10658, &#x27;QUICK&#x27;, 4, &#x27;2017-09-05 00:00:00&#x27;, &#x27;2017-09-08 00:00:00&#x27;, 1, 364.15, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10659, &#x27;QUEE&#x27;, 7, &#x27;2017-09-05 00:00:00&#x27;, &#x27;2017-09-10 00:00:00&#x27;, 2, 105.81, &#x27;Alameda dos Canàrios-891&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05487-020&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10660, &#x27;HUNGC&#x27;, 8, &#x27;2017-09-08 00:00:00&#x27;, &#x27;2017-10-15 00:00:00&#x27;, 1, 111.29, &#x27;City Center Plaza 516 Main St.&#x27;, &#x27;Elgi&#x27;, &#x27;OR&#x27;, &#x27;97827&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10661, &#x27;HUNGO&#x27;, 7, &#x27;2017-09-09 00:00:00&#x27;, &#x27;2017-09-15 00:00:00&#x27;, 3, 17.55, &#x27;8 Johnstown Road&#x27;, &#x27;Cork&#x27;, &#x27;Co. Cork&#x27;, NULL, &#x27;Ireland&#x27;);INSERT INTO `orders` VALUES (10662, &#x27;LONEP&#x27;, 3, &#x27;2017-09-09 00:00:00&#x27;, &#x27;2017-09-18 00:00:00&#x27;, 2, 1.28, &#x27;89 Chiaroscuro Rd.&#x27;, &#x27;Portland&#x27;, &#x27;OR&#x27;, &#x27;97219&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10663, &#x27;BONAP&#x27;, 2, &#x27;2017-09-10 00:00:00&#x27;, &#x27;2017-10-03 00:00:00&#x27;, 2, 113.15, &#x27;12-rue des Bouchers&#x27;, &#x27;Marseille&#x27;, NULL, &#x27;13008&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10664, &#x27;FURIB&#x27;, 1, &#x27;2017-09-10 00:00:00&#x27;, &#x27;2017-09-19 00:00:00&#x27;, 3, 1.27, &#x27;Jardim das rosas n. 32&#x27;, &#x27;Lisboa&#x27;, NULL, &#x27;1675&#x27;, &#x27;Portugal&#x27;);INSERT INTO `orders` VALUES (10665, &#x27;LONEP&#x27;, 1, &#x27;2017-09-11 00:00:00&#x27;, &#x27;2017-09-17 00:00:00&#x27;, 2, 26.31, &#x27;89 Chiaroscuro Rd.&#x27;, &#x27;Portland&#x27;, &#x27;OR&#x27;, &#x27;97219&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10666, &#x27;RICSU&#x27;, 7, &#x27;2017-09-12 00:00:00&#x27;, &#x27;2017-09-22 00:00:00&#x27;, 2, 232.42, &#x27;Starenweg 5&#x27;, &#x27;Genève&#x27;, NULL, &#x27;1204&#x27;, &#x27;Switzerland&#x27;);INSERT INTO `orders` VALUES (10667, &#x27;ERNSH&#x27;, 7, &#x27;2017-09-12 00:00:00&#x27;, &#x27;2017-09-19 00:00:00&#x27;, 1, 78.09, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10668, &#x27;WANDK&#x27;, 1, &#x27;2017-09-15 00:00:00&#x27;, &#x27;2017-09-23 00:00:00&#x27;, 2, 47.22, &#x27;Adenauerallee 900&#x27;, &#x27;Stuttgart&#x27;, NULL, &#x27;70563&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10669, &#x27;SIMOB&#x27;, 2, &#x27;2017-09-15 00:00:00&#x27;, &#x27;2017-09-22 00:00:00&#x27;, 1, 24.39, &#x27;Vinbæltet 34&#x27;, &#x27;Kobenhav&#x27;, NULL, &#x27;1734&#x27;, &#x27;Denmark&#x27;);INSERT INTO `orders` VALUES (10670, &#x27;FRANK&#x27;, 4, &#x27;2017-09-16 00:00:00&#x27;, &#x27;2017-09-18 00:00:00&#x27;, 1, 203.48, &#x27;Berliner Platz 43&#x27;, &#x27;Münche&#x27;, NULL, &#x27;80805&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10671, &#x27;FRANR&#x27;, 1, &#x27;2017-09-17 00:00:00&#x27;, &#x27;2017-09-24 00:00:00&#x27;, 1, 30.34, &#x27;54-rue Royale&#x27;, &#x27;Nantes&#x27;, NULL, &#x27;44000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10672, &#x27;BERGS&#x27;, 9, &#x27;2017-09-17 00:00:00&#x27;, &#x27;2017-09-26 00:00:00&#x27;, 2, 95.75, &#x27;Berguvsvägen  8&#x27;, &#x27;Luleå&#x27;, NULL, &#x27;S-958 22&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10673, &#x27;WILMK&#x27;, 2, &#x27;2017-09-18 00:00:00&#x27;, &#x27;2017-09-19 00:00:00&#x27;, 1, 22.76, &#x27;Keskuskatu 45&#x27;, &#x27;Helsinki&#x27;, NULL, &#x27;21240&#x27;, &#x27;Finland&#x27;);INSERT INTO `orders` VALUES (10674, &#x27;ISLAT&#x27;, 4, &#x27;2017-09-18 00:00:00&#x27;, &#x27;2017-09-30 00:00:00&#x27;, 2, 0.90, &#x27;Garden House Crowther Way&#x27;, &#x27;Cowes&#x27;, &#x27;Isle of Wight&#x27;, &#x27;PO31 7PJ&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10675, &#x27;FRANK&#x27;, 5, &#x27;2017-09-19 00:00:00&#x27;, &#x27;2017-09-23 00:00:00&#x27;, 2, 31.85, &#x27;Berliner Platz 43&#x27;, &#x27;Münche&#x27;, NULL, &#x27;80805&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10676, &#x27;TORTU&#x27;, 2, &#x27;2017-09-22 00:00:00&#x27;, &#x27;2017-09-29 00:00:00&#x27;, 2, 2.01, &#x27;Avda. Azteca 123&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05033&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10677, &#x27;ANTO&#x27;, 1, &#x27;2017-09-22 00:00:00&#x27;, &#x27;2017-09-26 00:00:00&#x27;, 3, 4.03, &#x27;Mataderos  2312&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05023&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10678, &#x27;SAVEA&#x27;, 7, &#x27;2017-09-23 00:00:00&#x27;, &#x27;2017-10-16 00:00:00&#x27;, 3, 388.98, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10679, &#x27;BLONP&#x27;, 8, &#x27;2017-09-23 00:00:00&#x27;, &#x27;2017-09-30 00:00:00&#x27;, 3, 27.94, &#x27;24-place Kléber&#x27;, &#x27;Strasbourg&#x27;, NULL, &#x27;67000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10680, &#x27;OLDWO&#x27;, 1, &#x27;2017-09-24 00:00:00&#x27;, &#x27;2017-09-26 00:00:00&#x27;, 1, 26.61, &#x27;2743 Bering St.&#x27;, &#x27;Anchorage&#x27;, &#x27;AK&#x27;, &#x27;99508&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10681, &#x27;GREAL&#x27;, 3, &#x27;2017-09-25 00:00:00&#x27;, &#x27;2017-09-30 00:00:00&#x27;, 3, 76.13, &#x27;2732 Baker Blvd.&#x27;, &#x27;Eugene&#x27;, &#x27;OR&#x27;, &#x27;97403&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10682, &#x27;ANTO&#x27;, 3, &#x27;2017-09-25 00:00:00&#x27;, &#x27;2017-10-01 00:00:00&#x27;, 2, 36.13, &#x27;Mataderos  2312&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05023&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10683, &#x27;DUMO&#x27;, 2, &#x27;2017-09-26 00:00:00&#x27;, &#x27;2017-10-01 00:00:00&#x27;, 1, 4.40, &#x27;67-rue des Cinquante Otages&#x27;, &#x27;Nantes&#x27;, NULL, &#x27;44000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10684, &#x27;OTTIK&#x27;, 3, &#x27;2017-09-26 00:00:00&#x27;, &#x27;2017-09-30 00:00:00&#x27;, 1, 145.63, &#x27;Mehrheimerstr. 369&#x27;, &#x27;Köl&#x27;, NULL, &#x27;50739&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10685, &#x27;GOURL&#x27;, 4, &#x27;2017-09-29 00:00:00&#x27;, &#x27;2017-10-03 00:00:00&#x27;, 2, 33.75, &#x27;Av. Brasil-442&#x27;, &#x27;Campinas&#x27;, &#x27;SP&#x27;, &#x27;04876-786&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10686, &#x27;PICCO&#x27;, 2, &#x27;2017-09-30 00:00:00&#x27;, &#x27;2017-10-08 00:00:00&#x27;, 1, 96.50, &#x27;Geislweg 14&#x27;, &#x27;Salzburg&#x27;, NULL, &#x27;5020&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10687, &#x27;HUNGO&#x27;, 9, &#x27;2017-09-30 00:00:00&#x27;, &#x27;2017-10-30 00:00:00&#x27;, 2, 296.43, &#x27;8 Johnstown Road&#x27;, &#x27;Cork&#x27;, &#x27;Co. Cork&#x27;, NULL, &#x27;Ireland&#x27;);INSERT INTO `orders` VALUES (10688, &#x27;VAFFE&#x27;, 4, &#x27;2017-10-01 00:00:00&#x27;, &#x27;2017-10-07 00:00:00&#x27;, 2, 299.09, &#x27;Smagsloget 45&#x27;, &#x27;Århus&#x27;, NULL, &#x27;8200&#x27;, &#x27;Denmark&#x27;);INSERT INTO `orders` VALUES (10689, &#x27;BERGS&#x27;, 1, &#x27;2017-10-01 00:00:00&#x27;, &#x27;2017-10-07 00:00:00&#x27;, 2, 13.42, &#x27;Berguvsvägen  8&#x27;, &#x27;Luleå&#x27;, NULL, &#x27;S-958 22&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10690, &#x27;HANAR&#x27;, 1, &#x27;2017-10-02 00:00:00&#x27;, &#x27;2017-10-03 00:00:00&#x27;, 1, 15.80, &#x27;Rua do Paço-67&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;05454-876&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10691, &#x27;QUICK&#x27;, 2, &#x27;2017-10-03 00:00:00&#x27;, &#x27;2017-10-22 00:00:00&#x27;, 2, 810.05, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10692, &#x27;ALFKI&#x27;, 4, &#x27;2017-10-03 00:00:00&#x27;, &#x27;2017-10-13 00:00:00&#x27;, 2, 61.02, &#x27;Obere Str. 57&#x27;, &#x27;Berli&#x27;, NULL, &#x27;12209&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10693, &#x27;WHITC&#x27;, 3, &#x27;2017-10-06 00:00:00&#x27;, &#x27;2017-10-10 00:00:00&#x27;, 3, 139.34, &#x27;1029 - 12th Ave. S.&#x27;, &#x27;Seattle&#x27;, &#x27;WA&#x27;, &#x27;98124&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10694, &#x27;QUICK&#x27;, 8, &#x27;2017-10-06 00:00:00&#x27;, &#x27;2017-10-09 00:00:00&#x27;, 3, 398.36, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10695, &#x27;WILMK&#x27;, 7, &#x27;2017-10-07 00:00:00&#x27;, &#x27;2017-10-14 00:00:00&#x27;, 1, 16.72, &#x27;Keskuskatu 45&#x27;, &#x27;Helsinki&#x27;, NULL, &#x27;21240&#x27;, &#x27;Finland&#x27;);INSERT INTO `orders` VALUES (10696, &#x27;WHITC&#x27;, 8, &#x27;2017-10-08 00:00:00&#x27;, &#x27;2017-10-14 00:00:00&#x27;, 3, 102.55, &#x27;1029 - 12th Ave. S.&#x27;, &#x27;Seattle&#x27;, &#x27;WA&#x27;, &#x27;98124&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10697, &#x27;LINOD&#x27;, 3, &#x27;2017-10-08 00:00:00&#x27;, &#x27;2017-10-14 00:00:00&#x27;, 1, 45.52, &#x27;Ave. 5 de Mayo Porlamar&#x27;, &#x27;I. de Margarita&#x27;, &#x27;Nueva Esparta&#x27;, &#x27;4980&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10698, &#x27;ERNSH&#x27;, 4, &#x27;2017-10-09 00:00:00&#x27;, &#x27;2017-10-17 00:00:00&#x27;, 1, 272.47, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10699, &#x27;MORGK&#x27;, 3, &#x27;2017-10-09 00:00:00&#x27;, &#x27;2017-10-13 00:00:00&#x27;, 3, 0.58, &#x27;Heerstr. 22&#x27;, &#x27;Leipzig&#x27;, NULL, &#x27;04179&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10700, &#x27;SAVEA&#x27;, 3, &#x27;2017-10-10 00:00:00&#x27;, &#x27;2017-10-16 00:00:00&#x27;, 1, 65.10, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10701, &#x27;HUNGO&#x27;, 6, &#x27;2017-10-13 00:00:00&#x27;, &#x27;2017-10-15 00:00:00&#x27;, 3, 220.31, &#x27;8 Johnstown Road&#x27;, &#x27;Cork&#x27;, &#x27;Co. Cork&#x27;, NULL, &#x27;Ireland&#x27;);INSERT INTO `orders` VALUES (10702, &#x27;ALFKI&#x27;, 4, &#x27;2017-10-13 00:00:00&#x27;, &#x27;2017-10-21 00:00:00&#x27;, 1, 23.94, &#x27;Obere Str. 57&#x27;, &#x27;Berli&#x27;, NULL, &#x27;12209&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10703, &#x27;FOLKO&#x27;, 6, &#x27;2017-10-14 00:00:00&#x27;, &#x27;2017-10-20 00:00:00&#x27;, 2, 152.30, &#x27;Åkergatan 24&#x27;, &#x27;Bräcke&#x27;, NULL, &#x27;S-844 67&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10704, &#x27;QUEE&#x27;, 6, &#x27;2017-10-14 00:00:00&#x27;, &#x27;2017-11-07 00:00:00&#x27;, 1, 4.78, &#x27;Alameda dos Canàrios-891&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05487-020&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10705, &#x27;HILAA&#x27;, 9, &#x27;2017-10-15 00:00:00&#x27;, &#x27;2017-11-18 00:00:00&#x27;, 2, 3.52, &#x27;Carrera 22 con Ave. Carlos Soublette #8-35&#x27;, &#x27;San Cristóbal&#x27;, &#x27;Táchira&#x27;, &#x27;5022&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10706, &#x27;OLDWO&#x27;, 8, &#x27;2017-10-16 00:00:00&#x27;, &#x27;2017-10-21 00:00:00&#x27;, 3, 135.63, &#x27;2743 Bering St.&#x27;, &#x27;Anchorage&#x27;, &#x27;AK&#x27;, &#x27;99508&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10707, &#x27;AROUT&#x27;, 4, &#x27;2017-10-16 00:00:00&#x27;, &#x27;2017-10-23 00:00:00&#x27;, 3, 21.74, &#x27;Brook Farm Stratford St. Mary&#x27;, &#x27;Colchester&#x27;, &#x27;Essex&#x27;, &#x27;CO7 6JX&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10708, &#x27;THEBI&#x27;, 6, &#x27;2017-10-17 00:00:00&#x27;, &#x27;2017-11-05 00:00:00&#x27;, 2, 2.96, &#x27;89 Jefferson Way Suite 2&#x27;, &#x27;Portland&#x27;, &#x27;OR&#x27;, &#x27;97201&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10709, &#x27;GOURL&#x27;, 1, &#x27;2017-10-17 00:00:00&#x27;, &#x27;2017-11-20 00:00:00&#x27;, 3, 210.80, &#x27;Av. Brasil-442&#x27;, &#x27;Campinas&#x27;, &#x27;SP&#x27;, &#x27;04876-786&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10710, &#x27;FRANS&#x27;, 1, &#x27;2017-10-20 00:00:00&#x27;, &#x27;2017-10-23 00:00:00&#x27;, 1, 4.98, &#x27;Via Monte Bianco 34&#x27;, &#x27;Torino&#x27;, NULL, &#x27;10100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (10711, &#x27;SAVEA&#x27;, 5, &#x27;2017-10-21 00:00:00&#x27;, &#x27;2017-10-29 00:00:00&#x27;, 2, 52.41, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10712, &#x27;HUNGO&#x27;, 3, &#x27;2017-10-21 00:00:00&#x27;, &#x27;2017-10-31 00:00:00&#x27;, 1, 89.93, &#x27;8 Johnstown Road&#x27;, &#x27;Cork&#x27;, &#x27;Co. Cork&#x27;, NULL, &#x27;Ireland&#x27;);INSERT INTO `orders` VALUES (10713, &#x27;SAVEA&#x27;, 1, &#x27;2017-10-22 00:00:00&#x27;, &#x27;2017-10-24 00:00:00&#x27;, 1, 167.05, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10714, &#x27;SAVEA&#x27;, 5, &#x27;2017-10-22 00:00:00&#x27;, &#x27;2017-10-27 00:00:00&#x27;, 3, 24.49, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10715, &#x27;BONAP&#x27;, 3, &#x27;2017-10-23 00:00:00&#x27;, &#x27;2017-10-29 00:00:00&#x27;, 1, 63.20, &#x27;12-rue des Bouchers&#x27;, &#x27;Marseille&#x27;, NULL, &#x27;13008&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10716, &#x27;RANCH&#x27;, 4, &#x27;2017-10-24 00:00:00&#x27;, &#x27;2017-10-27 00:00:00&#x27;, 2, 22.57, &#x27;Av. del Libertador 900&#x27;, &#x27;Buenos Aires&#x27;, NULL, &#x27;1010&#x27;, &#x27;Argentina&#x27;);INSERT INTO `orders` VALUES (10717, &#x27;FRANK&#x27;, 1, &#x27;2017-10-24 00:00:00&#x27;, &#x27;2017-10-29 00:00:00&#x27;, 2, 59.25, &#x27;Berliner Platz 43&#x27;, &#x27;Münche&#x27;, NULL, &#x27;80805&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10718, &#x27;KOENE&#x27;, 1, &#x27;2017-10-27 00:00:00&#x27;, &#x27;2017-10-29 00:00:00&#x27;, 3, 170.88, &#x27;Maubelstr. 90&#x27;, &#x27;Brandenburg&#x27;, NULL, &#x27;14776&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10719, &#x27;LETSS&#x27;, 8, &#x27;2017-10-27 00:00:00&#x27;, &#x27;2017-11-05 00:00:00&#x27;, 2, 51.44, &#x27;87 Polk St. Suite 5&#x27;, &#x27;San Francisco&#x27;, &#x27;CA&#x27;, &#x27;94117&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10720, &#x27;QUEDE&#x27;, 8, &#x27;2017-10-28 00:00:00&#x27;, &#x27;2017-11-05 00:00:00&#x27;, 2, 9.53, &#x27;Rua da Panificadora-12&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;02389-673&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10721, &#x27;QUICK&#x27;, 5, &#x27;2017-10-29 00:00:00&#x27;, &#x27;2017-10-31 00:00:00&#x27;, 3, 48.92, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10722, &#x27;SAVEA&#x27;, 8, &#x27;2017-10-29 00:00:00&#x27;, &#x27;2017-11-04 00:00:00&#x27;, 1, 74.58, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10723, &#x27;WHITC&#x27;, 3, &#x27;2017-10-30 00:00:00&#x27;, &#x27;2017-11-25 00:00:00&#x27;, 1, 21.72, &#x27;1029 - 12th Ave. S.&#x27;, &#x27;Seattle&#x27;, &#x27;WA&#x27;, &#x27;98124&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10724, &#x27;MEREP&#x27;, 8, &#x27;2017-10-30 00:00:00&#x27;, &#x27;2017-11-05 00:00:00&#x27;, 2, 57.75, &#x27;43 rue St. Laurent&#x27;, &#x27;Montréal&#x27;, &#x27;Québec&#x27;, &#x27;H1J 1C3&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10725, &#x27;FAMIA&#x27;, 4, &#x27;2017-10-31 00:00:00&#x27;, &#x27;2017-11-05 00:00:00&#x27;, 3, 10.83, &#x27;Rua Orós-92&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05442-030&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10726, &#x27;EASTC&#x27;, 4, &#x27;2017-11-03 00:00:00&#x27;, &#x27;2017-12-05 00:00:00&#x27;, 1, 16.56, &#x27;35 King George&#x27;, &#x27;Londo&#x27;, NULL, &#x27;WX3 6FW&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10727, &#x27;REGGC&#x27;, 2, &#x27;2017-11-03 00:00:00&#x27;, &#x27;2017-12-05 00:00:00&#x27;, 1, 89.90, &#x27;Strada Provinciale 124&#x27;, &#x27;Reggio Emilia&#x27;, NULL, &#x27;42100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (10728, &#x27;QUEE&#x27;, 4, &#x27;2017-11-04 00:00:00&#x27;, &#x27;2017-11-11 00:00:00&#x27;, 2, 58.33, &#x27;Alameda dos Canàrios-891&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05487-020&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10729, &#x27;LINOD&#x27;, 8, &#x27;2017-11-04 00:00:00&#x27;, &#x27;2017-11-14 00:00:00&#x27;, 3, 141.06, &#x27;Ave. 5 de Mayo Porlamar&#x27;, &#x27;I. de Margarita&#x27;, &#x27;Nueva Esparta&#x27;, &#x27;4980&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10730, &#x27;BONAP&#x27;, 5, &#x27;2017-11-05 00:00:00&#x27;, &#x27;2017-11-14 00:00:00&#x27;, 1, 20.12, &#x27;12-rue des Bouchers&#x27;, &#x27;Marseille&#x27;, NULL, &#x27;13008&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10731, &#x27;CHOPS&#x27;, 7, &#x27;2017-11-06 00:00:00&#x27;, &#x27;2017-11-14 00:00:00&#x27;, 1, 96.65, &#x27;Hauptstr. 31&#x27;, &#x27;Ber&#x27;, NULL, &#x27;3012&#x27;, &#x27;Switzerland&#x27;);INSERT INTO `orders` VALUES (10732, &#x27;BONAP&#x27;, 3, &#x27;2017-11-06 00:00:00&#x27;, &#x27;2017-11-07 00:00:00&#x27;, 1, 16.97, &#x27;12-rue des Bouchers&#x27;, &#x27;Marseille&#x27;, NULL, &#x27;13008&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10733, &#x27;BERGS&#x27;, 1, &#x27;2017-11-07 00:00:00&#x27;, &#x27;2017-11-10 00:00:00&#x27;, 3, 110.11, &#x27;Berguvsvägen  8&#x27;, &#x27;Luleå&#x27;, NULL, &#x27;S-958 22&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10734, &#x27;GOURL&#x27;, 2, &#x27;2017-11-07 00:00:00&#x27;, &#x27;2017-11-12 00:00:00&#x27;, 3, 1.63, &#x27;Av. Brasil-442&#x27;, &#x27;Campinas&#x27;, &#x27;SP&#x27;, &#x27;04876-786&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10735, &#x27;LETSS&#x27;, 6, &#x27;2017-11-10 00:00:00&#x27;, &#x27;2017-11-21 00:00:00&#x27;, 2, 45.97, &#x27;87 Polk St. Suite 5&#x27;, &#x27;San Francisco&#x27;, &#x27;CA&#x27;, &#x27;94117&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10736, &#x27;HUNGO&#x27;, 9, &#x27;2017-11-11 00:00:00&#x27;, &#x27;2017-11-21 00:00:00&#x27;, 2, 44.10, &#x27;8 Johnstown Road&#x27;, &#x27;Cork&#x27;, &#x27;Co. Cork&#x27;, NULL, &#x27;Ireland&#x27;);INSERT INTO `orders` VALUES (10737, &#x27;VINET&#x27;, 2, &#x27;2017-11-11 00:00:00&#x27;, &#x27;2017-11-18 00:00:00&#x27;, 2, 7.79, &#x27;59 rue de l\\&#x27;\\&#x27;Abbaye&#x27;, &#x27;Reims&#x27;, NULL, &#x27;51100&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10738, &#x27;SPECD&#x27;, 2, &#x27;2017-11-12 00:00:00&#x27;, &#x27;2017-11-18 00:00:00&#x27;, 1, 2.91, &#x27;25-rue Lauristo&#x27;, &#x27;Paris&#x27;, NULL, &#x27;75016&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10739, &#x27;VINET&#x27;, 3, &#x27;2017-11-12 00:00:00&#x27;, &#x27;2017-11-17 00:00:00&#x27;, 3, 11.08, &#x27;59 rue de l\\&#x27;\\&#x27;Abbaye&#x27;, &#x27;Reims&#x27;, NULL, &#x27;51100&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10740, &#x27;WHITC&#x27;, 4, &#x27;2017-11-13 00:00:00&#x27;, &#x27;2017-11-25 00:00:00&#x27;, 2, 81.88, &#x27;1029 - 12th Ave. S.&#x27;, &#x27;Seattle&#x27;, &#x27;WA&#x27;, &#x27;98124&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10741, &#x27;AROUT&#x27;, 4, &#x27;2017-11-14 00:00:00&#x27;, &#x27;2017-11-18 00:00:00&#x27;, 3, 10.96, &#x27;Brook Farm Stratford St. Mary&#x27;, &#x27;Colchester&#x27;, &#x27;Essex&#x27;, &#x27;CO7 6JX&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10742, &#x27;BOTTM&#x27;, 3, &#x27;2017-11-14 00:00:00&#x27;, &#x27;2017-11-18 00:00:00&#x27;, 3, 243.73, &#x27;23 Tsawassen Blvd.&#x27;, &#x27;Tsawasse&#x27;, &#x27;BC&#x27;, &#x27;T2F 8M4&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10743, &#x27;AROUT&#x27;, 1, &#x27;2017-11-17 00:00:00&#x27;, &#x27;2017-11-21 00:00:00&#x27;, 2, 23.72, &#x27;Brook Farm Stratford St. Mary&#x27;, &#x27;Colchester&#x27;, &#x27;Essex&#x27;, &#x27;CO7 6JX&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10744, &#x27;VAFFE&#x27;, 6, &#x27;2017-11-17 00:00:00&#x27;, &#x27;2017-11-24 00:00:00&#x27;, 1, 69.19, &#x27;Smagsloget 45&#x27;, &#x27;Århus&#x27;, NULL, &#x27;8200&#x27;, &#x27;Denmark&#x27;);INSERT INTO `orders` VALUES (10745, &#x27;QUICK&#x27;, 9, &#x27;2017-11-18 00:00:00&#x27;, &#x27;2017-11-27 00:00:00&#x27;, 1, 3.52, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10746, &#x27;CHOPS&#x27;, 1, &#x27;2017-11-19 00:00:00&#x27;, &#x27;2017-11-21 00:00:00&#x27;, 3, 31.43, &#x27;Hauptstr. 31&#x27;, &#x27;Ber&#x27;, NULL, &#x27;3012&#x27;, &#x27;Switzerland&#x27;);INSERT INTO `orders` VALUES (10747, &#x27;PICCO&#x27;, 6, &#x27;2017-11-19 00:00:00&#x27;, &#x27;2017-11-26 00:00:00&#x27;, 1, 117.33, &#x27;Geislweg 14&#x27;, &#x27;Salzburg&#x27;, NULL, &#x27;5020&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10748, &#x27;SAVEA&#x27;, 3, &#x27;2017-11-20 00:00:00&#x27;, &#x27;2017-11-28 00:00:00&#x27;, 1, 232.55, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10749, &#x27;ISLAT&#x27;, 4, &#x27;2017-11-20 00:00:00&#x27;, &#x27;2017-12-19 00:00:00&#x27;, 2, 61.53, &#x27;Garden House Crowther Way&#x27;, &#x27;Cowes&#x27;, &#x27;Isle of Wight&#x27;, &#x27;PO31 7PJ&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10750, &#x27;WARTH&#x27;, 9, &#x27;2017-11-21 00:00:00&#x27;, &#x27;2017-11-24 00:00:00&#x27;, 1, 79.30, &#x27;Torikatu 38&#x27;, &#x27;Oulu&#x27;, NULL, &#x27;90110&#x27;, &#x27;Finland&#x27;);INSERT INTO `orders` VALUES (10751, &#x27;RICSU&#x27;, 3, &#x27;2017-11-24 00:00:00&#x27;, &#x27;2017-12-03 00:00:00&#x27;, 3, 130.79, &#x27;Starenweg 5&#x27;, &#x27;Genève&#x27;, NULL, &#x27;1204&#x27;, &#x27;Switzerland&#x27;);INSERT INTO `orders` VALUES (10752, &#x27;NORTS&#x27;, 2, &#x27;2017-11-24 00:00:00&#x27;, &#x27;2017-11-28 00:00:00&#x27;, 3, 1.39, &#x27;South House 300 Queensbridge&#x27;, &#x27;Londo&#x27;, NULL, &#x27;SW7 1RZ&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10753, &#x27;FRANS&#x27;, 3, &#x27;2017-11-25 00:00:00&#x27;, &#x27;2017-11-27 00:00:00&#x27;, 1, 7.70, &#x27;Via Monte Bianco 34&#x27;, &#x27;Torino&#x27;, NULL, &#x27;10100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (10754, &#x27;MAGAA&#x27;, 6, &#x27;2017-11-25 00:00:00&#x27;, &#x27;2017-11-27 00:00:00&#x27;, 3, 2.38, &#x27;Via Ludovico il Moro 22&#x27;, &#x27;Bergamo&#x27;, NULL, &#x27;24100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (10755, &#x27;BONAP&#x27;, 4, &#x27;2017-11-26 00:00:00&#x27;, &#x27;2017-11-28 00:00:00&#x27;, 2, 16.71, &#x27;12-rue des Bouchers&#x27;, &#x27;Marseille&#x27;, NULL, &#x27;13008&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10756, &#x27;SPLIR&#x27;, 8, &#x27;2017-11-27 00:00:00&#x27;, &#x27;2017-12-02 00:00:00&#x27;, 2, 73.21, &#x27;P.O. Box 555&#x27;, &#x27;Lander&#x27;, &#x27;WY&#x27;, &#x27;82520&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10757, &#x27;SAVEA&#x27;, 6, &#x27;2017-11-27 00:00:00&#x27;, &#x27;2017-12-15 00:00:00&#x27;, 1, 8.19, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10758, &#x27;RICSU&#x27;, 3, &#x27;2017-11-28 00:00:00&#x27;, &#x27;2017-12-04 00:00:00&#x27;, 3, 138.17, &#x27;Starenweg 5&#x27;, &#x27;Genève&#x27;, NULL, &#x27;1204&#x27;, &#x27;Switzerland&#x27;);INSERT INTO `orders` VALUES (10759, &#x27;ANATR&#x27;, 3, &#x27;2017-11-28 00:00:00&#x27;, &#x27;2017-12-12 00:00:00&#x27;, 3, 11.99, &#x27;Avda. de la Constitución 2222&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05021&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10760, &#x27;MAISD&#x27;, 4, &#x27;2017-12-01 00:00:00&#x27;, &#x27;2017-12-10 00:00:00&#x27;, 1, 155.64, &#x27;Rue Joseph-Bens 532&#x27;, &#x27;Bruxelles&#x27;, NULL, &#x27;B-1180&#x27;, &#x27;Belgium&#x27;);INSERT INTO `orders` VALUES (10761, &#x27;RATTC&#x27;, 5, &#x27;2017-12-02 00:00:00&#x27;, &#x27;2017-12-08 00:00:00&#x27;, 2, 18.66, &#x27;2817 Milton Dr.&#x27;, &#x27;Albuquerque&#x27;, &#x27;NM&#x27;, &#x27;87110&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10762, &#x27;FOLKO&#x27;, 3, &#x27;2017-12-02 00:00:00&#x27;, &#x27;2017-12-09 00:00:00&#x27;, 1, 328.74, &#x27;Åkergatan 24&#x27;, &#x27;Bräcke&#x27;, NULL, &#x27;S-844 67&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10763, &#x27;FOLIG&#x27;, 3, &#x27;2017-12-03 00:00:00&#x27;, &#x27;2017-12-08 00:00:00&#x27;, 3, 37.35, &#x27;184-chaussée de Tournai&#x27;, &#x27;Lille&#x27;, NULL, &#x27;59000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10764, &#x27;ERNSH&#x27;, 6, &#x27;2017-12-03 00:00:00&#x27;, &#x27;2017-12-08 00:00:00&#x27;, 3, 145.45, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10765, &#x27;QUICK&#x27;, 3, &#x27;2017-12-04 00:00:00&#x27;, &#x27;2017-12-09 00:00:00&#x27;, 3, 42.74, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10766, &#x27;OTTIK&#x27;, 4, &#x27;2017-12-05 00:00:00&#x27;, &#x27;2017-12-09 00:00:00&#x27;, 1, 157.55, &#x27;Mehrheimerstr. 369&#x27;, &#x27;Köl&#x27;, NULL, &#x27;50739&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10767, &#x27;SUPRD&#x27;, 4, &#x27;2017-12-05 00:00:00&#x27;, &#x27;2017-12-15 00:00:00&#x27;, 3, 1.59, &#x27;Boulevard Tirou-255&#x27;, &#x27;Charleroi&#x27;, NULL, &#x27;B-6000&#x27;, &#x27;Belgium&#x27;);INSERT INTO `orders` VALUES (10768, &#x27;AROUT&#x27;, 3, &#x27;2017-12-08 00:00:00&#x27;, &#x27;2017-12-15 00:00:00&#x27;, 2, 146.32, &#x27;Brook Farm Stratford St. Mary&#x27;, &#x27;Colchester&#x27;, &#x27;Essex&#x27;, &#x27;CO7 6JX&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10769, &#x27;VAFFE&#x27;, 3, &#x27;2017-12-08 00:00:00&#x27;, &#x27;2017-12-12 00:00:00&#x27;, 1, 65.06, &#x27;Smagsloget 45&#x27;, &#x27;Århus&#x27;, NULL, &#x27;8200&#x27;, &#x27;Denmark&#x27;);INSERT INTO `orders` VALUES (10770, &#x27;HANAR&#x27;, 8, &#x27;2017-12-09 00:00:00&#x27;, &#x27;2017-12-17 00:00:00&#x27;, 3, 5.32, &#x27;Rua do Paço-67&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;05454-876&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10771, &#x27;ERNSH&#x27;, 9, &#x27;2017-12-10 00:00:00&#x27;, &#x27;2018-01-02 00:00:00&#x27;, 2, 11.19, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10772, &#x27;LEHMS&#x27;, 3, &#x27;2017-12-10 00:00:00&#x27;, &#x27;2017-12-19 00:00:00&#x27;, 2, 91.28, &#x27;Magazinweg 7&#x27;, &#x27;Frankfurt a.M.&#x27;, NULL, &#x27;60528&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10773, &#x27;ERNSH&#x27;, 1, &#x27;2017-12-11 00:00:00&#x27;, &#x27;2017-12-16 00:00:00&#x27;, 3, 96.43, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10774, &#x27;FOLKO&#x27;, 4, &#x27;2017-12-11 00:00:00&#x27;, &#x27;2017-12-12 00:00:00&#x27;, 1, 48.20, &#x27;Åkergatan 24&#x27;, &#x27;Bräcke&#x27;, NULL, &#x27;S-844 67&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10775, &#x27;THECR&#x27;, 7, &#x27;2017-12-12 00:00:00&#x27;, &#x27;2017-12-26 00:00:00&#x27;, 1, 20.25, &#x27;55 Grizzly Peak Rd.&#x27;, &#x27;Butte&#x27;, &#x27;MT&#x27;, &#x27;59801&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10776, &#x27;ERNSH&#x27;, 1, &#x27;2017-12-15 00:00:00&#x27;, &#x27;2017-12-18 00:00:00&#x27;, 3, 351.53, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10777, &#x27;GOURL&#x27;, 7, &#x27;2017-12-15 00:00:00&#x27;, &#x27;2018-01-21 00:00:00&#x27;, 2, 3.01, &#x27;Av. Brasil-442&#x27;, &#x27;Campinas&#x27;, &#x27;SP&#x27;, &#x27;04876-786&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10778, &#x27;BERGS&#x27;, 3, &#x27;2017-12-16 00:00:00&#x27;, &#x27;2017-12-24 00:00:00&#x27;, 1, 6.79, &#x27;Berguvsvägen  8&#x27;, &#x27;Luleå&#x27;, NULL, &#x27;S-958 22&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10779, &#x27;MORGK&#x27;, 3, &#x27;2017-12-16 00:00:00&#x27;, &#x27;2018-01-14 00:00:00&#x27;, 2, 58.13, &#x27;Heerstr. 22&#x27;, &#x27;Leipzig&#x27;, NULL, &#x27;04179&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10780, &#x27;LILAS&#x27;, 2, &#x27;2017-12-16 00:00:00&#x27;, &#x27;2017-12-25 00:00:00&#x27;, 1, 42.13, &#x27;Carrera 52 con Ave. Bolívar #65-98 Llano Largo&#x27;, &#x27;Barquisimeto&#x27;, &#x27;Lara&#x27;, &#x27;3508&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10781, &#x27;WARTH&#x27;, 2, &#x27;2017-12-17 00:00:00&#x27;, &#x27;2017-12-19 00:00:00&#x27;, 3, 73.16, &#x27;Torikatu 38&#x27;, &#x27;Oulu&#x27;, NULL, &#x27;90110&#x27;, &#x27;Finland&#x27;);INSERT INTO `orders` VALUES (10782, &#x27;CACTU&#x27;, 9, &#x27;2017-12-17 00:00:00&#x27;, &#x27;2017-12-22 00:00:00&#x27;, 3, 1.10, &#x27;Cerrito 333&#x27;, &#x27;Buenos Aires&#x27;, NULL, &#x27;1010&#x27;, &#x27;Argentina&#x27;);INSERT INTO `orders` VALUES (10783, &#x27;HANAR&#x27;, 4, &#x27;2017-12-18 00:00:00&#x27;, &#x27;2017-12-19 00:00:00&#x27;, 2, 124.98, &#x27;Rua do Paço-67&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;05454-876&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10784, &#x27;MAGAA&#x27;, 4, &#x27;2017-12-18 00:00:00&#x27;, &#x27;2017-12-22 00:00:00&#x27;, 3, 70.09, &#x27;Via Ludovico il Moro 22&#x27;, &#x27;Bergamo&#x27;, NULL, &#x27;24100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (10785, &#x27;GROSR&#x27;, 1, &#x27;2017-12-18 00:00:00&#x27;, &#x27;2017-12-24 00:00:00&#x27;, 3, 1.51, &#x27;5ª Ave. Los Palos Grandes&#x27;, &#x27;Caracas&#x27;, &#x27;DF&#x27;, &#x27;1081&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10786, &#x27;QUEE&#x27;, 8, &#x27;2017-12-19 00:00:00&#x27;, &#x27;2017-12-23 00:00:00&#x27;, 1, 110.87, &#x27;Alameda dos Canàrios-891&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05487-020&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10787, &#x27;LAMAI&#x27;, 2, &#x27;2017-12-19 00:00:00&#x27;, &#x27;2017-12-26 00:00:00&#x27;, 1, 249.93, &#x27;1 rue Alsace-Lorraine&#x27;, &#x27;Toulouse&#x27;, NULL, &#x27;31000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10788, &#x27;QUICK&#x27;, 1, &#x27;2017-12-22 00:00:00&#x27;, &#x27;2018-01-19 00:00:00&#x27;, 2, 42.70, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10789, &#x27;FOLIG&#x27;, 1, &#x27;2017-12-22 00:00:00&#x27;, &#x27;2017-12-31 00:00:00&#x27;, 2, 100.60, &#x27;184-chaussée de Tournai&#x27;, &#x27;Lille&#x27;, NULL, &#x27;59000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10790, &#x27;GOURL&#x27;, 6, &#x27;2017-12-22 00:00:00&#x27;, &#x27;2017-12-26 00:00:00&#x27;, 1, 28.23, &#x27;Av. Brasil-442&#x27;, &#x27;Campinas&#x27;, &#x27;SP&#x27;, &#x27;04876-786&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10791, &#x27;FRANK&#x27;, 6, &#x27;2017-12-23 00:00:00&#x27;, &#x27;2018-01-01 00:00:00&#x27;, 2, 16.85, &#x27;Berliner Platz 43&#x27;, &#x27;Münche&#x27;, NULL, &#x27;80805&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10792, &#x27;WOLZA&#x27;, 1, &#x27;2017-12-23 00:00:00&#x27;, &#x27;2017-12-31 00:00:00&#x27;, 3, 23.79, &#x27;ul. Filtrowa 68&#x27;, &#x27;Warszawa&#x27;, NULL, &#x27;01-012&#x27;, &#x27;Poland&#x27;);INSERT INTO `orders` VALUES (10793, &#x27;AROUT&#x27;, 3, &#x27;2017-12-24 00:00:00&#x27;, &#x27;2018-01-08 00:00:00&#x27;, 3, 4.52, &#x27;Brook Farm Stratford St. Mary&#x27;, &#x27;Colchester&#x27;, &#x27;Essex&#x27;, &#x27;CO7 6JX&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10794, &#x27;QUEDE&#x27;, 6, &#x27;2017-12-24 00:00:00&#x27;, &#x27;2018-01-02 00:00:00&#x27;, 1, 21.49, &#x27;Rua da Panificadora-12&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;02389-673&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10795, &#x27;ERNSH&#x27;, 8, &#x27;2017-12-24 00:00:00&#x27;, &#x27;2018-01-20 00:00:00&#x27;, 2, 126.66, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10796, &#x27;HILAA&#x27;, 3, &#x27;2017-12-25 00:00:00&#x27;, &#x27;2018-01-14 00:00:00&#x27;, 1, 26.52, &#x27;Carrera 22 con Ave. Carlos Soublette #8-35&#x27;, &#x27;San Cristóbal&#x27;, &#x27;Táchira&#x27;, &#x27;5022&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10797, &#x27;DRACD&#x27;, 7, &#x27;2017-12-25 00:00:00&#x27;, &#x27;2018-01-05 00:00:00&#x27;, 2, 33.35, &#x27;Walserweg 21&#x27;, &#x27;Aache&#x27;, NULL, &#x27;52066&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10798, &#x27;ISLAT&#x27;, 2, &#x27;2017-12-26 00:00:00&#x27;, &#x27;2018-01-05 00:00:00&#x27;, 1, 2.33, &#x27;Garden House Crowther Way&#x27;, &#x27;Cowes&#x27;, &#x27;Isle of Wight&#x27;, &#x27;PO31 7PJ&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10799, &#x27;KOENE&#x27;, 9, &#x27;2017-12-26 00:00:00&#x27;, &#x27;2018-01-05 00:00:00&#x27;, 3, 30.76, &#x27;Maubelstr. 90&#x27;, &#x27;Brandenburg&#x27;, NULL, &#x27;14776&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10800, &#x27;SEVES&#x27;, 1, &#x27;2017-12-26 00:00:00&#x27;, &#x27;2018-01-05 00:00:00&#x27;, 3, 137.44, &#x27;90 Wadhurst Rd.&#x27;, &#x27;Londo&#x27;, NULL, &#x27;OX15 4NB&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10801, &#x27;BOLID&#x27;, 4, &#x27;2017-12-29 00:00:00&#x27;, &#x27;2017-12-31 00:00:00&#x27;, 2, 97.09, &#x27;C/ Araquil-67&#x27;, &#x27;Madrid&#x27;, NULL, &#x27;28023&#x27;, &#x27;Spain&#x27;);INSERT INTO `orders` VALUES (10802, &#x27;SIMOB&#x27;, 4, &#x27;2017-12-29 00:00:00&#x27;, &#x27;2018-01-02 00:00:00&#x27;, 2, 257.26, &#x27;Vinbæltet 34&#x27;, &#x27;Kobenhav&#x27;, NULL, &#x27;1734&#x27;, &#x27;Denmark&#x27;);INSERT INTO `orders` VALUES (10803, &#x27;WELLI&#x27;, 4, &#x27;2017-12-30 00:00:00&#x27;, &#x27;2018-01-06 00:00:00&#x27;, 1, 55.23, &#x27;Rua do Mercado-12&#x27;, &#x27;Resende&#x27;, &#x27;SP&#x27;, &#x27;08737-363&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10804, &#x27;SEVES&#x27;, 6, &#x27;2017-12-30 00:00:00&#x27;, &#x27;2018-01-07 00:00:00&#x27;, 2, 27.33, &#x27;90 Wadhurst Rd.&#x27;, &#x27;Londo&#x27;, NULL, &#x27;OX15 4NB&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10805, &#x27;THEBI&#x27;, 2, &#x27;2017-12-30 00:00:00&#x27;, &#x27;2018-01-09 00:00:00&#x27;, 3, 237.34, &#x27;89 Jefferson Way Suite 2&#x27;, &#x27;Portland&#x27;, &#x27;OR&#x27;, &#x27;97201&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10806, &#x27;VICTE&#x27;, 3, &#x27;2017-12-31 00:00:00&#x27;, &#x27;2018-01-05 00:00:00&#x27;, 2, 22.11, &#x27;2-rue du Commerce&#x27;, &#x27;Lyo&#x27;, NULL, &#x27;69004&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10807, &#x27;FRANS&#x27;, 4, &#x27;2017-12-31 00:00:00&#x27;, &#x27;2018-01-30 00:00:00&#x27;, 1, 1.36, &#x27;Via Monte Bianco 34&#x27;, &#x27;Torino&#x27;, NULL, &#x27;10100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (10808, &#x27;OLDWO&#x27;, 2, &#x27;2018-01-01 00:00:00&#x27;, &#x27;2018-01-09 00:00:00&#x27;, 3, 45.53, &#x27;2743 Bering St.&#x27;, &#x27;Anchorage&#x27;, &#x27;AK&#x27;, &#x27;99508&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10809, &#x27;WELLI&#x27;, 7, &#x27;2018-01-01 00:00:00&#x27;, &#x27;2018-01-07 00:00:00&#x27;, 1, 4.87, &#x27;Rua do Mercado-12&#x27;, &#x27;Resende&#x27;, &#x27;SP&#x27;, &#x27;08737-363&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10810, &#x27;LAUGB&#x27;, 2, &#x27;2018-01-01 00:00:00&#x27;, &#x27;2018-01-07 00:00:00&#x27;, 3, 4.33, &#x27;2319 Elm St.&#x27;, &#x27;Vancouver&#x27;, &#x27;BC&#x27;, &#x27;V3F 2K1&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10811, &#x27;LINOD&#x27;, 8, &#x27;2018-01-02 00:00:00&#x27;, &#x27;2018-01-08 00:00:00&#x27;, 1, 31.22, &#x27;Ave. 5 de Mayo Porlamar&#x27;, &#x27;I. de Margarita&#x27;, &#x27;Nueva Esparta&#x27;, &#x27;4980&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10812, &#x27;REGGC&#x27;, 5, &#x27;2018-01-02 00:00:00&#x27;, &#x27;2018-01-12 00:00:00&#x27;, 1, 59.78, &#x27;Strada Provinciale 124&#x27;, &#x27;Reggio Emilia&#x27;, NULL, &#x27;42100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (10813, &#x27;RICAR&#x27;, 1, &#x27;2018-01-05 00:00:00&#x27;, &#x27;2018-01-09 00:00:00&#x27;, 1, 47.38, &#x27;Av. Copacabana-267&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;02389-890&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10814, &#x27;VICTE&#x27;, 3, &#x27;2018-01-05 00:00:00&#x27;, &#x27;2018-01-14 00:00:00&#x27;, 3, 130.94, &#x27;2-rue du Commerce&#x27;, &#x27;Lyo&#x27;, NULL, &#x27;69004&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10815, &#x27;SAVEA&#x27;, 2, &#x27;2018-01-05 00:00:00&#x27;, &#x27;2018-01-14 00:00:00&#x27;, 3, 14.62, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10816, &#x27;GREAL&#x27;, 4, &#x27;2018-01-06 00:00:00&#x27;, &#x27;2018-02-04 00:00:00&#x27;, 2, 719.78, &#x27;2732 Baker Blvd.&#x27;, &#x27;Eugene&#x27;, &#x27;OR&#x27;, &#x27;97403&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10817, &#x27;KOENE&#x27;, 3, &#x27;2018-01-06 00:00:00&#x27;, &#x27;2018-01-13 00:00:00&#x27;, 2, 306.07, &#x27;Maubelstr. 90&#x27;, &#x27;Brandenburg&#x27;, NULL, &#x27;14776&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10818, &#x27;MAGAA&#x27;, 7, &#x27;2018-01-07 00:00:00&#x27;, &#x27;2018-01-12 00:00:00&#x27;, 3, 65.48, &#x27;Via Ludovico il Moro 22&#x27;, &#x27;Bergamo&#x27;, NULL, &#x27;24100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (10819, &#x27;CACTU&#x27;, 2, &#x27;2018-01-07 00:00:00&#x27;, &#x27;2018-01-16 00:00:00&#x27;, 3, 19.76, &#x27;Cerrito 333&#x27;, &#x27;Buenos Aires&#x27;, NULL, &#x27;1010&#x27;, &#x27;Argentina&#x27;);INSERT INTO `orders` VALUES (10820, &#x27;RATTC&#x27;, 3, &#x27;2018-01-07 00:00:00&#x27;, &#x27;2018-01-13 00:00:00&#x27;, 2, 37.52, &#x27;2817 Milton Dr.&#x27;, &#x27;Albuquerque&#x27;, &#x27;NM&#x27;, &#x27;87110&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10821, &#x27;SPLIR&#x27;, 1, &#x27;2018-01-08 00:00:00&#x27;, &#x27;2018-01-15 00:00:00&#x27;, 1, 36.68, &#x27;P.O. Box 555&#x27;, &#x27;Lander&#x27;, &#x27;WY&#x27;, &#x27;82520&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10822, &#x27;TRAIH&#x27;, 6, &#x27;2018-01-08 00:00:00&#x27;, &#x27;2018-01-16 00:00:00&#x27;, 3, 7.00, &#x27;722 DaVinci Blvd.&#x27;, &#x27;Kirkland&#x27;, &#x27;WA&#x27;, &#x27;98034&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10823, &#x27;LILAS&#x27;, 5, &#x27;2018-01-09 00:00:00&#x27;, &#x27;2018-01-13 00:00:00&#x27;, 2, 163.97, &#x27;Carrera 52 con Ave. Bolívar #65-98 Llano Largo&#x27;, &#x27;Barquisimeto&#x27;, &#x27;Lara&#x27;, &#x27;3508&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10824, &#x27;FOLKO&#x27;, 8, &#x27;2018-01-09 00:00:00&#x27;, &#x27;2018-01-30 00:00:00&#x27;, 1, 1.23, &#x27;Åkergatan 24&#x27;, &#x27;Bräcke&#x27;, NULL, &#x27;S-844 67&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10825, &#x27;DRACD&#x27;, 1, &#x27;2018-01-09 00:00:00&#x27;, &#x27;2018-01-14 00:00:00&#x27;, 1, 79.25, &#x27;Walserweg 21&#x27;, &#x27;Aache&#x27;, NULL, &#x27;52066&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10826, &#x27;BLONP&#x27;, 6, &#x27;2018-01-12 00:00:00&#x27;, &#x27;2018-02-06 00:00:00&#x27;, 1, 7.09, &#x27;24-place Kléber&#x27;, &#x27;Strasbourg&#x27;, NULL, &#x27;67000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10827, &#x27;BONAP&#x27;, 1, &#x27;2018-01-12 00:00:00&#x27;, &#x27;2018-02-06 00:00:00&#x27;, 2, 63.54, &#x27;12-rue des Bouchers&#x27;, &#x27;Marseille&#x27;, NULL, &#x27;13008&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10828, &#x27;RANCH&#x27;, 9, &#x27;2018-01-13 00:00:00&#x27;, &#x27;2018-02-04 00:00:00&#x27;, 1, 90.85, &#x27;Av. del Libertador 900&#x27;, &#x27;Buenos Aires&#x27;, NULL, &#x27;1010&#x27;, &#x27;Argentina&#x27;);INSERT INTO `orders` VALUES (10829, &#x27;ISLAT&#x27;, 9, &#x27;2018-01-13 00:00:00&#x27;, &#x27;2018-01-23 00:00:00&#x27;, 1, 154.72, &#x27;Garden House Crowther Way&#x27;, &#x27;Cowes&#x27;, &#x27;Isle of Wight&#x27;, &#x27;PO31 7PJ&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10830, &#x27;TRADH&#x27;, 4, &#x27;2018-01-13 00:00:00&#x27;, &#x27;2018-01-21 00:00:00&#x27;, 2, 81.83, &#x27;Av. Inês de Castro-414&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05634-030&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10831, &#x27;SANTG&#x27;, 3, &#x27;2018-01-14 00:00:00&#x27;, &#x27;2018-01-23 00:00:00&#x27;, 2, 72.19, &#x27;Erling Skakkes gate 78&#x27;, &#x27;Staver&#x27;, NULL, &#x27;4110&#x27;, &#x27;Norway&#x27;);INSERT INTO `orders` VALUES (10832, &#x27;LAMAI&#x27;, 2, &#x27;2018-01-14 00:00:00&#x27;, &#x27;2018-01-19 00:00:00&#x27;, 2, 43.26, &#x27;1 rue Alsace-Lorraine&#x27;, &#x27;Toulouse&#x27;, NULL, &#x27;31000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10833, &#x27;OTTIK&#x27;, 6, &#x27;2018-01-15 00:00:00&#x27;, &#x27;2018-01-23 00:00:00&#x27;, 2, 71.49, &#x27;Mehrheimerstr. 369&#x27;, &#x27;Köl&#x27;, NULL, &#x27;50739&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10834, &#x27;TRADH&#x27;, 1, &#x27;2018-01-15 00:00:00&#x27;, &#x27;2018-01-19 00:00:00&#x27;, 3, 29.78, &#x27;Av. Inês de Castro-414&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05634-030&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10835, &#x27;ALFKI&#x27;, 1, &#x27;2018-01-15 00:00:00&#x27;, &#x27;2018-01-21 00:00:00&#x27;, 3, 69.53, &#x27;Obere Str. 57&#x27;, &#x27;Berli&#x27;, NULL, &#x27;12209&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10836, &#x27;ERNSH&#x27;, 7, &#x27;2018-01-16 00:00:00&#x27;, &#x27;2018-01-21 00:00:00&#x27;, 1, 411.88, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10837, &#x27;BERGS&#x27;, 9, &#x27;2018-01-16 00:00:00&#x27;, &#x27;2018-01-23 00:00:00&#x27;, 3, 13.32, &#x27;Berguvsvägen  8&#x27;, &#x27;Luleå&#x27;, NULL, &#x27;S-958 22&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10838, &#x27;LINOD&#x27;, 3, &#x27;2018-01-19 00:00:00&#x27;, &#x27;2018-01-23 00:00:00&#x27;, 3, 59.28, &#x27;Ave. 5 de Mayo Porlamar&#x27;, &#x27;I. de Margarita&#x27;, &#x27;Nueva Esparta&#x27;, &#x27;4980&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10839, &#x27;TRADH&#x27;, 3, &#x27;2018-01-19 00:00:00&#x27;, &#x27;2018-01-22 00:00:00&#x27;, 3, 35.43, &#x27;Av. Inês de Castro-414&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05634-030&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10840, &#x27;LINOD&#x27;, 4, &#x27;2018-01-19 00:00:00&#x27;, &#x27;2018-02-16 00:00:00&#x27;, 2, 2.71, &#x27;Ave. 5 de Mayo Porlamar&#x27;, &#x27;I. de Margarita&#x27;, &#x27;Nueva Esparta&#x27;, &#x27;4980&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10841, &#x27;SUPRD&#x27;, 5, &#x27;2018-01-20 00:00:00&#x27;, &#x27;2018-01-29 00:00:00&#x27;, 2, 424.30, &#x27;Boulevard Tirou-255&#x27;, &#x27;Charleroi&#x27;, NULL, &#x27;B-6000&#x27;, &#x27;Belgium&#x27;);INSERT INTO `orders` VALUES (10842, &#x27;TORTU&#x27;, 1, &#x27;2018-01-20 00:00:00&#x27;, &#x27;2018-01-29 00:00:00&#x27;, 3, 54.42, &#x27;Avda. Azteca 123&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05033&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10843, &#x27;VICTE&#x27;, 4, &#x27;2018-01-21 00:00:00&#x27;, &#x27;2018-01-26 00:00:00&#x27;, 2, 9.26, &#x27;2-rue du Commerce&#x27;, &#x27;Lyo&#x27;, NULL, &#x27;69004&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10844, &#x27;PICCO&#x27;, 8, &#x27;2018-01-21 00:00:00&#x27;, &#x27;2018-01-26 00:00:00&#x27;, 2, 25.22, &#x27;Geislweg 14&#x27;, &#x27;Salzburg&#x27;, NULL, &#x27;5020&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10845, &#x27;QUICK&#x27;, 8, &#x27;2018-01-21 00:00:00&#x27;, &#x27;2018-01-30 00:00:00&#x27;, 1, 212.98, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10846, &#x27;SUPRD&#x27;, 2, &#x27;2018-01-22 00:00:00&#x27;, &#x27;2018-01-23 00:00:00&#x27;, 3, 56.46, &#x27;Boulevard Tirou-255&#x27;, &#x27;Charleroi&#x27;, NULL, &#x27;B-6000&#x27;, &#x27;Belgium&#x27;);INSERT INTO `orders` VALUES (10847, &#x27;SAVEA&#x27;, 4, &#x27;2018-01-22 00:00:00&#x27;, &#x27;2018-02-10 00:00:00&#x27;, 3, 487.57, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10848, &#x27;CONSH&#x27;, 7, &#x27;2018-01-23 00:00:00&#x27;, &#x27;2018-01-29 00:00:00&#x27;, 2, 38.24, &#x27;Berkeley Gardens 12  Brewery&#x27;, &#x27;Londo&#x27;, NULL, &#x27;WX1 6LT&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10849, &#x27;KOENE&#x27;, 9, &#x27;2018-01-23 00:00:00&#x27;, &#x27;2018-01-30 00:00:00&#x27;, 2, 0.56, &#x27;Maubelstr. 90&#x27;, &#x27;Brandenburg&#x27;, NULL, &#x27;14776&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10850, &#x27;VICTE&#x27;, 1, &#x27;2018-01-23 00:00:00&#x27;, &#x27;2018-01-30 00:00:00&#x27;, 1, 49.19, &#x27;2-rue du Commerce&#x27;, &#x27;Lyo&#x27;, NULL, &#x27;69004&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10851, &#x27;RICAR&#x27;, 5, &#x27;2018-01-26 00:00:00&#x27;, &#x27;2018-02-02 00:00:00&#x27;, 1, 160.55, &#x27;Av. Copacabana-267&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;02389-890&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10852, &#x27;RATTC&#x27;, 8, &#x27;2018-01-26 00:00:00&#x27;, &#x27;2018-01-30 00:00:00&#x27;, 1, 174.05, &#x27;2817 Milton Dr.&#x27;, &#x27;Albuquerque&#x27;, &#x27;NM&#x27;, &#x27;87110&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10853, &#x27;BLAUS&#x27;, 9, &#x27;2018-01-27 00:00:00&#x27;, &#x27;2018-02-03 00:00:00&#x27;, 2, 53.83, &#x27;Forsterstr. 57&#x27;, &#x27;Mannheim&#x27;, NULL, &#x27;68306&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10854, &#x27;ERNSH&#x27;, 3, &#x27;2018-01-27 00:00:00&#x27;, &#x27;2018-02-05 00:00:00&#x27;, 2, 100.22, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10855, &#x27;OLDWO&#x27;, 3, &#x27;2018-01-27 00:00:00&#x27;, &#x27;2018-02-04 00:00:00&#x27;, 1, 170.97, &#x27;2743 Bering St.&#x27;, &#x27;Anchorage&#x27;, &#x27;AK&#x27;, &#x27;99508&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10856, &#x27;ANTO&#x27;, 3, &#x27;2018-01-28 00:00:00&#x27;, &#x27;2018-02-10 00:00:00&#x27;, 2, 58.43, &#x27;Mataderos  2312&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05023&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10857, &#x27;BERGS&#x27;, 8, &#x27;2018-01-28 00:00:00&#x27;, &#x27;2018-02-06 00:00:00&#x27;, 2, 188.85, &#x27;Berguvsvägen  8&#x27;, &#x27;Luleå&#x27;, NULL, &#x27;S-958 22&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10858, &#x27;LACOR&#x27;, 2, &#x27;2018-01-29 00:00:00&#x27;, &#x27;2018-02-03 00:00:00&#x27;, 1, 52.51, &#x27;67-avenue de l\\&#x27;\\&#x27;Europe&#x27;, &#x27;Versailles&#x27;, NULL, &#x27;78000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10859, &#x27;FRANK&#x27;, 1, &#x27;2018-01-29 00:00:00&#x27;, &#x27;2018-02-02 00:00:00&#x27;, 2, 76.10, &#x27;Berliner Platz 43&#x27;, &#x27;Münche&#x27;, NULL, &#x27;80805&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10860, &#x27;FRANR&#x27;, 3, &#x27;2018-01-29 00:00:00&#x27;, &#x27;2018-02-04 00:00:00&#x27;, 3, 19.26, &#x27;54-rue Royale&#x27;, &#x27;Nantes&#x27;, NULL, &#x27;44000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10861, &#x27;WHITC&#x27;, 4, &#x27;2018-01-30 00:00:00&#x27;, &#x27;2018-02-17 00:00:00&#x27;, 2, 14.93, &#x27;1029 - 12th Ave. S.&#x27;, &#x27;Seattle&#x27;, &#x27;WA&#x27;, &#x27;98124&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10862, &#x27;LEHMS&#x27;, 8, &#x27;2018-01-30 00:00:00&#x27;, &#x27;2018-02-02 00:00:00&#x27;, 2, 53.23, &#x27;Magazinweg 7&#x27;, &#x27;Frankfurt a.M.&#x27;, NULL, &#x27;60528&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10863, &#x27;HILAA&#x27;, 4, &#x27;2018-02-02 00:00:00&#x27;, &#x27;2018-02-17 00:00:00&#x27;, 2, 30.26, &#x27;Carrera 22 con Ave. Carlos Soublette #8-35&#x27;, &#x27;San Cristóbal&#x27;, &#x27;Táchira&#x27;, &#x27;5022&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10864, &#x27;AROUT&#x27;, 4, &#x27;2018-02-02 00:00:00&#x27;, &#x27;2018-02-09 00:00:00&#x27;, 2, 3.04, &#x27;Brook Farm Stratford St. Mary&#x27;, &#x27;Colchester&#x27;, &#x27;Essex&#x27;, &#x27;CO7 6JX&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10865, &#x27;QUICK&#x27;, 2, &#x27;2018-02-02 00:00:00&#x27;, &#x27;2018-02-12 00:00:00&#x27;, 1, 348.14, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10866, &#x27;BERGS&#x27;, 5, &#x27;2018-02-03 00:00:00&#x27;, &#x27;2018-02-12 00:00:00&#x27;, 1, 109.11, &#x27;Berguvsvägen  8&#x27;, &#x27;Luleå&#x27;, NULL, &#x27;S-958 22&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10867, &#x27;LONEP&#x27;, 6, &#x27;2018-02-03 00:00:00&#x27;, &#x27;2018-02-11 00:00:00&#x27;, 1, 1.93, &#x27;89 Chiaroscuro Rd.&#x27;, &#x27;Portland&#x27;, &#x27;OR&#x27;, &#x27;97219&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10868, &#x27;QUEE&#x27;, 7, &#x27;2018-02-04 00:00:00&#x27;, &#x27;2018-02-23 00:00:00&#x27;, 2, 191.27, &#x27;Alameda dos Canàrios-891&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05487-020&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10869, &#x27;SEVES&#x27;, 5, &#x27;2018-02-04 00:00:00&#x27;, &#x27;2018-02-09 00:00:00&#x27;, 1, 143.28, &#x27;90 Wadhurst Rd.&#x27;, &#x27;Londo&#x27;, NULL, &#x27;OX15 4NB&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10870, &#x27;WOLZA&#x27;, 5, &#x27;2018-02-04 00:00:00&#x27;, &#x27;2018-02-13 00:00:00&#x27;, 3, 12.04, &#x27;ul. Filtrowa 68&#x27;, &#x27;Warszawa&#x27;, NULL, &#x27;01-012&#x27;, &#x27;Poland&#x27;);INSERT INTO `orders` VALUES (10871, &#x27;BONAP&#x27;, 9, &#x27;2018-02-05 00:00:00&#x27;, &#x27;2018-02-10 00:00:00&#x27;, 2, 112.27, &#x27;12-rue des Bouchers&#x27;, &#x27;Marseille&#x27;, NULL, &#x27;13008&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10872, &#x27;GODOS&#x27;, 5, &#x27;2018-02-05 00:00:00&#x27;, &#x27;2018-02-09 00:00:00&#x27;, 2, 175.32, &#x27;C/ Romero-33&#x27;, &#x27;Sevilla&#x27;, NULL, &#x27;41101&#x27;, &#x27;Spain&#x27;);INSERT INTO `orders` VALUES (10873, &#x27;WILMK&#x27;, 4, &#x27;2018-02-06 00:00:00&#x27;, &#x27;2018-02-09 00:00:00&#x27;, 1, 0.82, &#x27;Keskuskatu 45&#x27;, &#x27;Helsinki&#x27;, NULL, &#x27;21240&#x27;, &#x27;Finland&#x27;);INSERT INTO `orders` VALUES (10874, &#x27;GODOS&#x27;, 5, &#x27;2018-02-06 00:00:00&#x27;, &#x27;2018-02-11 00:00:00&#x27;, 2, 19.58, &#x27;C/ Romero-33&#x27;, &#x27;Sevilla&#x27;, NULL, &#x27;41101&#x27;, &#x27;Spain&#x27;);INSERT INTO `orders` VALUES (10875, &#x27;BERGS&#x27;, 4, &#x27;2018-02-06 00:00:00&#x27;, &#x27;2018-03-03 00:00:00&#x27;, 2, 32.37, &#x27;Berguvsvägen  8&#x27;, &#x27;Luleå&#x27;, NULL, &#x27;S-958 22&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10876, &#x27;BONAP&#x27;, 7, &#x27;2018-02-09 00:00:00&#x27;, &#x27;2018-02-12 00:00:00&#x27;, 3, 60.42, &#x27;12-rue des Bouchers&#x27;, &#x27;Marseille&#x27;, NULL, &#x27;13008&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10877, &#x27;RICAR&#x27;, 1, &#x27;2018-02-09 00:00:00&#x27;, &#x27;2018-02-19 00:00:00&#x27;, 1, 38.06, &#x27;Av. Copacabana-267&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;02389-890&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10878, &#x27;QUICK&#x27;, 4, &#x27;2018-02-10 00:00:00&#x27;, &#x27;2018-02-12 00:00:00&#x27;, 1, 46.69, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10879, &#x27;WILMK&#x27;, 3, &#x27;2018-02-10 00:00:00&#x27;, &#x27;2018-02-12 00:00:00&#x27;, 3, 8.50, &#x27;Keskuskatu 45&#x27;, &#x27;Helsinki&#x27;, NULL, &#x27;21240&#x27;, &#x27;Finland&#x27;);INSERT INTO `orders` VALUES (10880, &#x27;FOLKO&#x27;, 7, &#x27;2018-02-10 00:00:00&#x27;, &#x27;2018-02-18 00:00:00&#x27;, 1, 88.01, &#x27;Åkergatan 24&#x27;, &#x27;Bräcke&#x27;, NULL, &#x27;S-844 67&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10881, &#x27;CACTU&#x27;, 4, &#x27;2018-02-11 00:00:00&#x27;, &#x27;2018-02-18 00:00:00&#x27;, 1, 2.84, &#x27;Cerrito 333&#x27;, &#x27;Buenos Aires&#x27;, NULL, &#x27;1010&#x27;, &#x27;Argentina&#x27;);INSERT INTO `orders` VALUES (10882, &#x27;SAVEA&#x27;, 4, &#x27;2018-02-11 00:00:00&#x27;, &#x27;2018-02-20 00:00:00&#x27;, 3, 23.10, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10883, &#x27;LONEP&#x27;, 8, &#x27;2018-02-12 00:00:00&#x27;, &#x27;2018-02-20 00:00:00&#x27;, 3, 0.53, &#x27;89 Chiaroscuro Rd.&#x27;, &#x27;Portland&#x27;, &#x27;OR&#x27;, &#x27;97219&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10884, &#x27;LETSS&#x27;, 4, &#x27;2018-02-12 00:00:00&#x27;, &#x27;2018-02-13 00:00:00&#x27;, 2, 90.97, &#x27;87 Polk St. Suite 5&#x27;, &#x27;San Francisco&#x27;, &#x27;CA&#x27;, &#x27;94117&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10885, &#x27;SUPRD&#x27;, 6, &#x27;2018-02-12 00:00:00&#x27;, &#x27;2018-02-18 00:00:00&#x27;, 3, 5.64, &#x27;Boulevard Tirou-255&#x27;, &#x27;Charleroi&#x27;, NULL, &#x27;B-6000&#x27;, &#x27;Belgium&#x27;);INSERT INTO `orders` VALUES (10886, &#x27;HANAR&#x27;, 1, &#x27;2018-02-13 00:00:00&#x27;, &#x27;2018-03-02 00:00:00&#x27;, 1, 4.99, &#x27;Rua do Paço-67&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;05454-876&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10887, &#x27;GALED&#x27;, 8, &#x27;2018-02-13 00:00:00&#x27;, &#x27;2018-02-16 00:00:00&#x27;, 3, 1.25, &#x27;Rambla de Cataluña-23&#x27;, &#x27;Barcelona&#x27;, NULL, &#x27;8022&#x27;, &#x27;Spain&#x27;);INSERT INTO `orders` VALUES (10888, &#x27;GODOS&#x27;, 1, &#x27;2018-02-16 00:00:00&#x27;, &#x27;2018-02-23 00:00:00&#x27;, 2, 51.87, &#x27;C/ Romero-33&#x27;, &#x27;Sevilla&#x27;, NULL, &#x27;41101&#x27;, &#x27;Spain&#x27;);INSERT INTO `orders` VALUES (10889, &#x27;RATTC&#x27;, 9, &#x27;2018-02-16 00:00:00&#x27;, &#x27;2018-02-23 00:00:00&#x27;, 3, 280.61, &#x27;2817 Milton Dr.&#x27;, &#x27;Albuquerque&#x27;, &#x27;NM&#x27;, &#x27;87110&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10890, &#x27;DUMO&#x27;, 7, &#x27;2018-02-16 00:00:00&#x27;, &#x27;2018-02-18 00:00:00&#x27;, 1, 32.76, &#x27;67-rue des Cinquante Otages&#x27;, &#x27;Nantes&#x27;, NULL, &#x27;44000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10891, &#x27;LEHMS&#x27;, 7, &#x27;2018-02-17 00:00:00&#x27;, &#x27;2018-02-19 00:00:00&#x27;, 2, 20.37, &#x27;Magazinweg 7&#x27;, &#x27;Frankfurt a.M.&#x27;, NULL, &#x27;60528&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10892, &#x27;MAISD&#x27;, 4, &#x27;2018-02-17 00:00:00&#x27;, &#x27;2018-02-19 00:00:00&#x27;, 2, 120.27, &#x27;Rue Joseph-Bens 532&#x27;, &#x27;Bruxelles&#x27;, NULL, &#x27;B-1180&#x27;, &#x27;Belgium&#x27;);INSERT INTO `orders` VALUES (10893, &#x27;KOENE&#x27;, 9, &#x27;2018-02-18 00:00:00&#x27;, &#x27;2018-02-20 00:00:00&#x27;, 2, 77.78, &#x27;Maubelstr. 90&#x27;, &#x27;Brandenburg&#x27;, NULL, &#x27;14776&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10894, &#x27;SAVEA&#x27;, 1, &#x27;2018-02-18 00:00:00&#x27;, &#x27;2018-02-20 00:00:00&#x27;, 1, 116.13, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10895, &#x27;ERNSH&#x27;, 3, &#x27;2018-02-18 00:00:00&#x27;, &#x27;2018-02-23 00:00:00&#x27;, 1, 162.75, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10896, &#x27;MAISD&#x27;, 7, &#x27;2018-02-19 00:00:00&#x27;, &#x27;2018-02-27 00:00:00&#x27;, 3, 32.45, &#x27;Rue Joseph-Bens 532&#x27;, &#x27;Bruxelles&#x27;, NULL, &#x27;B-1180&#x27;, &#x27;Belgium&#x27;);INSERT INTO `orders` VALUES (10897, &#x27;HUNGO&#x27;, 3, &#x27;2018-02-19 00:00:00&#x27;, &#x27;2018-02-25 00:00:00&#x27;, 2, 603.54, &#x27;8 Johnstown Road&#x27;, &#x27;Cork&#x27;, &#x27;Co. Cork&#x27;, NULL, &#x27;Ireland&#x27;);INSERT INTO `orders` VALUES (10898, &#x27;OCEA&#x27;, 4, &#x27;2018-02-20 00:00:00&#x27;, &#x27;2018-03-06 00:00:00&#x27;, 2, 1.27, &#x27;Ing. Gustavo Moncada 8585 Piso 20-A&#x27;, &#x27;Buenos Aires&#x27;, NULL, &#x27;1010&#x27;, &#x27;Argentina&#x27;);INSERT INTO `orders` VALUES (10899, &#x27;LILAS&#x27;, 5, &#x27;2018-02-20 00:00:00&#x27;, &#x27;2018-02-26 00:00:00&#x27;, 3, 1.21, &#x27;Carrera 52 con Ave. Bolívar #65-98 Llano Largo&#x27;, &#x27;Barquisimeto&#x27;, &#x27;Lara&#x27;, &#x27;3508&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10900, &#x27;WELLI&#x27;, 1, &#x27;2018-02-20 00:00:00&#x27;, &#x27;2018-03-04 00:00:00&#x27;, 2, 1.66, &#x27;Rua do Mercado-12&#x27;, &#x27;Resende&#x27;, &#x27;SP&#x27;, &#x27;08737-363&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10901, &#x27;HILAA&#x27;, 4, &#x27;2018-02-23 00:00:00&#x27;, &#x27;2018-02-26 00:00:00&#x27;, 1, 62.09, &#x27;Carrera 22 con Ave. Carlos Soublette #8-35&#x27;, &#x27;San Cristóbal&#x27;, &#x27;Táchira&#x27;, &#x27;5022&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10902, &#x27;FOLKO&#x27;, 1, &#x27;2018-02-23 00:00:00&#x27;, &#x27;2018-03-03 00:00:00&#x27;, 1, 44.15, &#x27;Åkergatan 24&#x27;, &#x27;Bräcke&#x27;, NULL, &#x27;S-844 67&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10903, &#x27;HANAR&#x27;, 3, &#x27;2018-02-24 00:00:00&#x27;, &#x27;2018-03-04 00:00:00&#x27;, 3, 36.71, &#x27;Rua do Paço-67&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;05454-876&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10904, &#x27;WHITC&#x27;, 3, &#x27;2018-02-24 00:00:00&#x27;, &#x27;2018-02-27 00:00:00&#x27;, 3, 162.95, &#x27;1029 - 12th Ave. S.&#x27;, &#x27;Seattle&#x27;, &#x27;WA&#x27;, &#x27;98124&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10905, &#x27;WELLI&#x27;, 9, &#x27;2018-02-24 00:00:00&#x27;, &#x27;2018-03-06 00:00:00&#x27;, 2, 13.72, &#x27;Rua do Mercado-12&#x27;, &#x27;Resende&#x27;, &#x27;SP&#x27;, &#x27;08737-363&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10906, &#x27;WOLZA&#x27;, 4, &#x27;2018-02-25 00:00:00&#x27;, &#x27;2018-03-03 00:00:00&#x27;, 3, 26.29, &#x27;ul. Filtrowa 68&#x27;, &#x27;Warszawa&#x27;, NULL, &#x27;01-012&#x27;, &#x27;Poland&#x27;);INSERT INTO `orders` VALUES (10907, &#x27;SPECD&#x27;, 6, &#x27;2018-02-25 00:00:00&#x27;, &#x27;2018-02-27 00:00:00&#x27;, 3, 9.19, &#x27;25-rue Lauristo&#x27;, &#x27;Paris&#x27;, NULL, &#x27;75016&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10908, &#x27;REGGC&#x27;, 4, &#x27;2018-02-26 00:00:00&#x27;, &#x27;2018-03-06 00:00:00&#x27;, 2, 32.96, &#x27;Strada Provinciale 124&#x27;, &#x27;Reggio Emilia&#x27;, NULL, &#x27;42100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (10909, &#x27;SANTG&#x27;, 1, &#x27;2018-02-26 00:00:00&#x27;, &#x27;2018-03-10 00:00:00&#x27;, 2, 53.05, &#x27;Erling Skakkes gate 78&#x27;, &#x27;Staver&#x27;, NULL, &#x27;4110&#x27;, &#x27;Norway&#x27;);INSERT INTO `orders` VALUES (10910, &#x27;WILMK&#x27;, 1, &#x27;2018-02-26 00:00:00&#x27;, &#x27;2018-03-04 00:00:00&#x27;, 3, 38.11, &#x27;Keskuskatu 45&#x27;, &#x27;Helsinki&#x27;, NULL, &#x27;21240&#x27;, &#x27;Finland&#x27;);INSERT INTO `orders` VALUES (10911, &#x27;GODOS&#x27;, 3, &#x27;2018-02-26 00:00:00&#x27;, &#x27;2018-03-05 00:00:00&#x27;, 1, 38.19, &#x27;C/ Romero-33&#x27;, &#x27;Sevilla&#x27;, NULL, &#x27;41101&#x27;, &#x27;Spain&#x27;);INSERT INTO `orders` VALUES (10912, &#x27;HUNGO&#x27;, 2, &#x27;2018-02-26 00:00:00&#x27;, &#x27;2018-03-18 00:00:00&#x27;, 2, 580.91, &#x27;8 Johnstown Road&#x27;, &#x27;Cork&#x27;, &#x27;Co. Cork&#x27;, NULL, &#x27;Ireland&#x27;);INSERT INTO `orders` VALUES (10913, &#x27;QUEE&#x27;, 4, &#x27;2018-02-26 00:00:00&#x27;, &#x27;2018-03-04 00:00:00&#x27;, 1, 33.05, &#x27;Alameda dos Canàrios-891&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05487-020&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10914, &#x27;QUEE&#x27;, 6, &#x27;2018-02-27 00:00:00&#x27;, &#x27;2018-03-02 00:00:00&#x27;, 1, 21.19, &#x27;Alameda dos Canàrios-891&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05487-020&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10915, &#x27;TORTU&#x27;, 2, &#x27;2018-02-27 00:00:00&#x27;, &#x27;2018-03-02 00:00:00&#x27;, 2, 3.51, &#x27;Avda. Azteca 123&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05033&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10916, &#x27;RANCH&#x27;, 1, &#x27;2018-02-27 00:00:00&#x27;, &#x27;2018-03-09 00:00:00&#x27;, 2, 63.77, &#x27;Av. del Libertador 900&#x27;, &#x27;Buenos Aires&#x27;, NULL, &#x27;1010&#x27;, &#x27;Argentina&#x27;);INSERT INTO `orders` VALUES (10917, &#x27;ROMEY&#x27;, 4, &#x27;2018-03-02 00:00:00&#x27;, &#x27;2018-03-11 00:00:00&#x27;, 2, 8.29, &#x27;Gran Vía-1&#x27;, &#x27;Madrid&#x27;, NULL, &#x27;28001&#x27;, &#x27;Spain&#x27;);INSERT INTO `orders` VALUES (10918, &#x27;BOTTM&#x27;, 3, &#x27;2018-03-02 00:00:00&#x27;, &#x27;2018-03-11 00:00:00&#x27;, 3, 48.83, &#x27;23 Tsawassen Blvd.&#x27;, &#x27;Tsawasse&#x27;, &#x27;BC&#x27;, &#x27;T2F 8M4&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10919, &#x27;LINOD&#x27;, 2, &#x27;2018-03-02 00:00:00&#x27;, &#x27;2018-03-04 00:00:00&#x27;, 2, 19.80, &#x27;Ave. 5 de Mayo Porlamar&#x27;, &#x27;I. de Margarita&#x27;, &#x27;Nueva Esparta&#x27;, &#x27;4980&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10920, &#x27;AROUT&#x27;, 4, &#x27;2018-03-03 00:00:00&#x27;, &#x27;2018-03-09 00:00:00&#x27;, 2, 29.61, &#x27;Brook Farm Stratford St. Mary&#x27;, &#x27;Colchester&#x27;, &#x27;Essex&#x27;, &#x27;CO7 6JX&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10921, &#x27;VAFFE&#x27;, 1, &#x27;2018-03-03 00:00:00&#x27;, &#x27;2018-03-09 00:00:00&#x27;, 1, 176.48, &#x27;Smagsloget 45&#x27;, &#x27;Århus&#x27;, NULL, &#x27;8200&#x27;, &#x27;Denmark&#x27;);INSERT INTO `orders` VALUES (10922, &#x27;HANAR&#x27;, 5, &#x27;2018-03-03 00:00:00&#x27;, &#x27;2018-03-05 00:00:00&#x27;, 3, 62.74, &#x27;Rua do Paço-67&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;05454-876&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10923, &#x27;LAMAI&#x27;, 7, &#x27;2018-03-03 00:00:00&#x27;, &#x27;2018-03-13 00:00:00&#x27;, 3, 68.26, &#x27;1 rue Alsace-Lorraine&#x27;, &#x27;Toulouse&#x27;, NULL, &#x27;31000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10924, &#x27;BERGS&#x27;, 3, &#x27;2018-03-04 00:00:00&#x27;, &#x27;2018-04-08 00:00:00&#x27;, 2, 151.52, &#x27;Berguvsvägen  8&#x27;, &#x27;Luleå&#x27;, NULL, &#x27;S-958 22&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10925, &#x27;HANAR&#x27;, 3, &#x27;2018-03-04 00:00:00&#x27;, &#x27;2018-03-13 00:00:00&#x27;, 1, 2.27, &#x27;Rua do Paço-67&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;05454-876&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10926, &#x27;ANATR&#x27;, 4, &#x27;2018-03-04 00:00:00&#x27;, &#x27;2018-03-11 00:00:00&#x27;, 3, 39.92, &#x27;Avda. de la Constitución 2222&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05021&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10927, &#x27;LACOR&#x27;, 4, &#x27;2018-03-05 00:00:00&#x27;, &#x27;2018-04-08 00:00:00&#x27;, 1, 19.79, &#x27;67-avenue de l\\&#x27;\\&#x27;Europe&#x27;, &#x27;Versailles&#x27;, NULL, &#x27;78000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10928, &#x27;GALED&#x27;, 1, &#x27;2018-03-05 00:00:00&#x27;, &#x27;2018-03-18 00:00:00&#x27;, 1, 1.36, &#x27;Rambla de Cataluña-23&#x27;, &#x27;Barcelona&#x27;, NULL, &#x27;8022&#x27;, &#x27;Spain&#x27;);INSERT INTO `orders` VALUES (10929, &#x27;FRANK&#x27;, 6, &#x27;2018-03-05 00:00:00&#x27;, &#x27;2018-03-12 00:00:00&#x27;, 1, 33.93, &#x27;Berliner Platz 43&#x27;, &#x27;Münche&#x27;, NULL, &#x27;80805&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10930, &#x27;SUPRD&#x27;, 4, &#x27;2018-03-06 00:00:00&#x27;, &#x27;2018-03-18 00:00:00&#x27;, 3, 15.55, &#x27;Boulevard Tirou-255&#x27;, &#x27;Charleroi&#x27;, NULL, &#x27;B-6000&#x27;, &#x27;Belgium&#x27;);INSERT INTO `orders` VALUES (10931, &#x27;RICSU&#x27;, 4, &#x27;2018-03-06 00:00:00&#x27;, &#x27;2018-03-19 00:00:00&#x27;, 2, 13.60, &#x27;Starenweg 5&#x27;, &#x27;Genève&#x27;, NULL, &#x27;1204&#x27;, &#x27;Switzerland&#x27;);INSERT INTO `orders` VALUES (10932, &#x27;BONAP&#x27;, 8, &#x27;2018-03-06 00:00:00&#x27;, &#x27;2018-03-24 00:00:00&#x27;, 1, 134.64, &#x27;12-rue des Bouchers&#x27;, &#x27;Marseille&#x27;, NULL, &#x27;13008&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10933, &#x27;ISLAT&#x27;, 6, &#x27;2018-03-06 00:00:00&#x27;, &#x27;2018-03-16 00:00:00&#x27;, 3, 54.15, &#x27;Garden House Crowther Way&#x27;, &#x27;Cowes&#x27;, &#x27;Isle of Wight&#x27;, &#x27;PO31 7PJ&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10934, &#x27;LEHMS&#x27;, 3, &#x27;2018-03-09 00:00:00&#x27;, &#x27;2018-03-12 00:00:00&#x27;, 3, 32.01, &#x27;Magazinweg 7&#x27;, &#x27;Frankfurt a.M.&#x27;, NULL, &#x27;60528&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10935, &#x27;WELLI&#x27;, 4, &#x27;2018-03-09 00:00:00&#x27;, &#x27;2018-03-18 00:00:00&#x27;, 3, 47.59, &#x27;Rua do Mercado-12&#x27;, &#x27;Resende&#x27;, &#x27;SP&#x27;, &#x27;08737-363&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10936, &#x27;GREAL&#x27;, 3, &#x27;2018-03-09 00:00:00&#x27;, &#x27;2018-03-18 00:00:00&#x27;, 2, 33.68, &#x27;2732 Baker Blvd.&#x27;, &#x27;Eugene&#x27;, &#x27;OR&#x27;, &#x27;97403&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10937, &#x27;CACTU&#x27;, 7, &#x27;2018-03-10 00:00:00&#x27;, &#x27;2018-03-13 00:00:00&#x27;, 3, 31.51, &#x27;Cerrito 333&#x27;, &#x27;Buenos Aires&#x27;, NULL, &#x27;1010&#x27;, &#x27;Argentina&#x27;);INSERT INTO `orders` VALUES (10938, &#x27;QUICK&#x27;, 3, &#x27;2018-03-10 00:00:00&#x27;, &#x27;2018-03-16 00:00:00&#x27;, 2, 31.89, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10939, &#x27;MAGAA&#x27;, 2, &#x27;2018-03-10 00:00:00&#x27;, &#x27;2018-03-13 00:00:00&#x27;, 2, 76.33, &#x27;Via Ludovico il Moro 22&#x27;, &#x27;Bergamo&#x27;, NULL, &#x27;24100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (10940, &#x27;BONAP&#x27;, 8, &#x27;2018-03-11 00:00:00&#x27;, &#x27;2018-03-23 00:00:00&#x27;, 3, 19.77, &#x27;12-rue des Bouchers&#x27;, &#x27;Marseille&#x27;, NULL, &#x27;13008&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10941, &#x27;SAVEA&#x27;, 7, &#x27;2018-03-11 00:00:00&#x27;, &#x27;2018-03-20 00:00:00&#x27;, 2, 400.81, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10942, &#x27;REGGC&#x27;, 9, &#x27;2018-03-11 00:00:00&#x27;, &#x27;2018-03-18 00:00:00&#x27;, 3, 17.95, &#x27;Strada Provinciale 124&#x27;, &#x27;Reggio Emilia&#x27;, NULL, &#x27;42100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (10943, &#x27;BSBEV&#x27;, 4, &#x27;2018-03-11 00:00:00&#x27;, &#x27;2018-03-19 00:00:00&#x27;, 2, 2.17, &#x27;Fauntleroy Circus&#x27;, &#x27;Londo&#x27;, NULL, &#x27;EC2 5NT&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10944, &#x27;BOTTM&#x27;, 6, &#x27;2018-03-12 00:00:00&#x27;, &#x27;2018-03-13 00:00:00&#x27;, 3, 52.92, &#x27;23 Tsawassen Blvd.&#x27;, &#x27;Tsawasse&#x27;, &#x27;BC&#x27;, &#x27;T2F 8M4&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10945, &#x27;MORGK&#x27;, 4, &#x27;2018-03-12 00:00:00&#x27;, &#x27;2018-03-18 00:00:00&#x27;, 1, 10.22, &#x27;Heerstr. 22&#x27;, &#x27;Leipzig&#x27;, NULL, &#x27;04179&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10946, &#x27;VAFFE&#x27;, 1, &#x27;2018-03-12 00:00:00&#x27;, &#x27;2018-03-19 00:00:00&#x27;, 2, 27.20, &#x27;Smagsloget 45&#x27;, &#x27;Århus&#x27;, NULL, &#x27;8200&#x27;, &#x27;Denmark&#x27;);INSERT INTO `orders` VALUES (10947, &#x27;BSBEV&#x27;, 3, &#x27;2018-03-13 00:00:00&#x27;, &#x27;2018-03-16 00:00:00&#x27;, 2, 3.26, &#x27;Fauntleroy Circus&#x27;, &#x27;Londo&#x27;, NULL, &#x27;EC2 5NT&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10948, &#x27;GODOS&#x27;, 3, &#x27;2018-03-13 00:00:00&#x27;, &#x27;2018-03-19 00:00:00&#x27;, 3, 23.39, &#x27;C/ Romero-33&#x27;, &#x27;Sevilla&#x27;, NULL, &#x27;41101&#x27;, &#x27;Spain&#x27;);INSERT INTO `orders` VALUES (10949, &#x27;BOTTM&#x27;, 2, &#x27;2018-03-13 00:00:00&#x27;, &#x27;2018-03-17 00:00:00&#x27;, 3, 74.44, &#x27;23 Tsawassen Blvd.&#x27;, &#x27;Tsawasse&#x27;, &#x27;BC&#x27;, &#x27;T2F 8M4&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10950, &#x27;MAGAA&#x27;, 1, &#x27;2018-03-16 00:00:00&#x27;, &#x27;2018-03-23 00:00:00&#x27;, 2, 2.50, &#x27;Via Ludovico il Moro 22&#x27;, &#x27;Bergamo&#x27;, NULL, &#x27;24100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (10951, &#x27;RICSU&#x27;, 9, &#x27;2018-03-16 00:00:00&#x27;, &#x27;2018-04-07 00:00:00&#x27;, 2, 30.85, &#x27;Starenweg 5&#x27;, &#x27;Genève&#x27;, NULL, &#x27;1204&#x27;, &#x27;Switzerland&#x27;);INSERT INTO `orders` VALUES (10952, &#x27;ALFKI&#x27;, 1, &#x27;2018-03-16 00:00:00&#x27;, &#x27;2018-03-24 00:00:00&#x27;, 1, 40.42, &#x27;Obere Str. 57&#x27;, &#x27;Berli&#x27;, NULL, &#x27;12209&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10953, &#x27;AROUT&#x27;, 9, &#x27;2018-03-16 00:00:00&#x27;, &#x27;2018-03-25 00:00:00&#x27;, 2, 23.72, &#x27;Brook Farm Stratford St. Mary&#x27;, &#x27;Colchester&#x27;, &#x27;Essex&#x27;, &#x27;CO7 6JX&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10954, &#x27;LINOD&#x27;, 5, &#x27;2018-03-17 00:00:00&#x27;, &#x27;2018-03-20 00:00:00&#x27;, 1, 27.91, &#x27;Ave. 5 de Mayo Porlamar&#x27;, &#x27;I. de Margarita&#x27;, &#x27;Nueva Esparta&#x27;, &#x27;4980&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10955, &#x27;FOLKO&#x27;, 8, &#x27;2018-03-17 00:00:00&#x27;, &#x27;2018-03-20 00:00:00&#x27;, 2, 3.26, &#x27;Åkergatan 24&#x27;, &#x27;Bräcke&#x27;, NULL, &#x27;S-844 67&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10956, &#x27;BLAUS&#x27;, 6, &#x27;2018-03-17 00:00:00&#x27;, &#x27;2018-03-20 00:00:00&#x27;, 2, 44.65, &#x27;Forsterstr. 57&#x27;, &#x27;Mannheim&#x27;, NULL, &#x27;68306&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10957, &#x27;HILAA&#x27;, 8, &#x27;2018-03-18 00:00:00&#x27;, &#x27;2018-03-27 00:00:00&#x27;, 3, 105.36, &#x27;Carrera 22 con Ave. Carlos Soublette #8-35&#x27;, &#x27;San Cristóbal&#x27;, &#x27;Táchira&#x27;, &#x27;5022&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10958, &#x27;OCEA&#x27;, 7, &#x27;2018-03-18 00:00:00&#x27;, &#x27;2018-03-27 00:00:00&#x27;, 2, 49.56, &#x27;Ing. Gustavo Moncada 8585 Piso 20-A&#x27;, &#x27;Buenos Aires&#x27;, NULL, &#x27;1010&#x27;, &#x27;Argentina&#x27;);INSERT INTO `orders` VALUES (10959, &#x27;GOURL&#x27;, 6, &#x27;2018-03-18 00:00:00&#x27;, &#x27;2018-03-23 00:00:00&#x27;, 2, 4.98, &#x27;Av. Brasil-442&#x27;, &#x27;Campinas&#x27;, &#x27;SP&#x27;, &#x27;04876-786&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10960, &#x27;HILAA&#x27;, 3, &#x27;2018-03-19 00:00:00&#x27;, &#x27;2018-04-08 00:00:00&#x27;, 1, 2.08, &#x27;Carrera 22 con Ave. Carlos Soublette #8-35&#x27;, &#x27;San Cristóbal&#x27;, &#x27;Táchira&#x27;, &#x27;5022&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10961, &#x27;QUEE&#x27;, 8, &#x27;2018-03-19 00:00:00&#x27;, &#x27;2018-03-30 00:00:00&#x27;, 1, 104.47, &#x27;Alameda dos Canàrios-891&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05487-020&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10962, &#x27;QUICK&#x27;, 8, &#x27;2018-03-19 00:00:00&#x27;, &#x27;2018-03-23 00:00:00&#x27;, 2, 275.79, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10963, &#x27;FURIB&#x27;, 9, &#x27;2018-03-19 00:00:00&#x27;, &#x27;2018-03-26 00:00:00&#x27;, 3, 2.70, &#x27;Jardim das rosas n. 32&#x27;, &#x27;Lisboa&#x27;, NULL, &#x27;1675&#x27;, &#x27;Portugal&#x27;);INSERT INTO `orders` VALUES (10964, &#x27;SPECD&#x27;, 3, &#x27;2018-03-20 00:00:00&#x27;, &#x27;2018-03-24 00:00:00&#x27;, 2, 87.38, &#x27;25-rue Lauristo&#x27;, &#x27;Paris&#x27;, NULL, &#x27;75016&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10965, &#x27;OLDWO&#x27;, 6, &#x27;2018-03-20 00:00:00&#x27;, &#x27;2018-03-30 00:00:00&#x27;, 3, 144.38, &#x27;2743 Bering St.&#x27;, &#x27;Anchorage&#x27;, &#x27;AK&#x27;, &#x27;99508&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10966, &#x27;CHOPS&#x27;, 4, &#x27;2018-03-20 00:00:00&#x27;, &#x27;2018-04-08 00:00:00&#x27;, 1, 27.19, &#x27;Hauptstr. 31&#x27;, &#x27;Ber&#x27;, NULL, &#x27;3012&#x27;, &#x27;Switzerland&#x27;);INSERT INTO `orders` VALUES (10967, &#x27;TOMSP&#x27;, 2, &#x27;2018-03-23 00:00:00&#x27;, &#x27;2018-04-02 00:00:00&#x27;, 2, 62.22, &#x27;Luisenstr. 48&#x27;, &#x27;Münster&#x27;, NULL, &#x27;44087&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10968, &#x27;ERNSH&#x27;, 1, &#x27;2018-03-23 00:00:00&#x27;, &#x27;2018-04-01 00:00:00&#x27;, 3, 74.60, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10969, &#x27;COMMI&#x27;, 1, &#x27;2018-03-23 00:00:00&#x27;, &#x27;2018-03-30 00:00:00&#x27;, 2, 0.21, &#x27;Av. dos Lusíadas-23&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05432-043&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10970, &#x27;BOLID&#x27;, 9, &#x27;2018-03-24 00:00:00&#x27;, &#x27;2018-04-24 00:00:00&#x27;, 1, 16.16, &#x27;C/ Araquil-67&#x27;, &#x27;Madrid&#x27;, NULL, &#x27;28023&#x27;, &#x27;Spain&#x27;);INSERT INTO `orders` VALUES (10971, &#x27;FRANR&#x27;, 2, &#x27;2018-03-24 00:00:00&#x27;, &#x27;2018-04-02 00:00:00&#x27;, 2, 121.82, &#x27;54-rue Royale&#x27;, &#x27;Nantes&#x27;, NULL, &#x27;44000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10972, &#x27;LACOR&#x27;, 4, &#x27;2018-03-24 00:00:00&#x27;, &#x27;2018-03-26 00:00:00&#x27;, 2, 0.02, &#x27;67-avenue de l\\&#x27;\\&#x27;Europe&#x27;, &#x27;Versailles&#x27;, NULL, &#x27;78000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10973, &#x27;LACOR&#x27;, 6, &#x27;2018-03-24 00:00:00&#x27;, &#x27;2018-03-27 00:00:00&#x27;, 2, 15.17, &#x27;67-avenue de l\\&#x27;\\&#x27;Europe&#x27;, &#x27;Versailles&#x27;, NULL, &#x27;78000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (10974, &#x27;SPLIR&#x27;, 3, &#x27;2018-03-25 00:00:00&#x27;, &#x27;2018-04-03 00:00:00&#x27;, 3, 12.96, &#x27;P.O. Box 555&#x27;, &#x27;Lander&#x27;, &#x27;WY&#x27;, &#x27;82520&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10975, &#x27;BOTTM&#x27;, 1, &#x27;2018-03-25 00:00:00&#x27;, &#x27;2018-03-27 00:00:00&#x27;, 3, 32.27, &#x27;23 Tsawassen Blvd.&#x27;, &#x27;Tsawasse&#x27;, &#x27;BC&#x27;, &#x27;T2F 8M4&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10976, &#x27;HILAA&#x27;, 1, &#x27;2018-03-25 00:00:00&#x27;, &#x27;2018-04-03 00:00:00&#x27;, 1, 37.97, &#x27;Carrera 22 con Ave. Carlos Soublette #8-35&#x27;, &#x27;San Cristóbal&#x27;, &#x27;Táchira&#x27;, &#x27;5022&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10977, &#x27;FOLKO&#x27;, 8, &#x27;2018-03-26 00:00:00&#x27;, &#x27;2018-04-10 00:00:00&#x27;, 3, 208.50, &#x27;Åkergatan 24&#x27;, &#x27;Bräcke&#x27;, NULL, &#x27;S-844 67&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10978, &#x27;MAISD&#x27;, 9, &#x27;2018-03-26 00:00:00&#x27;, &#x27;2018-04-23 00:00:00&#x27;, 2, 32.82, &#x27;Rue Joseph-Bens 532&#x27;, &#x27;Bruxelles&#x27;, NULL, &#x27;B-1180&#x27;, &#x27;Belgium&#x27;);INSERT INTO `orders` VALUES (10979, &#x27;ERNSH&#x27;, 8, &#x27;2018-03-26 00:00:00&#x27;, &#x27;2018-03-31 00:00:00&#x27;, 2, 353.07, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10980, &#x27;FOLKO&#x27;, 4, &#x27;2018-03-27 00:00:00&#x27;, &#x27;2018-04-17 00:00:00&#x27;, 1, 1.26, &#x27;Åkergatan 24&#x27;, &#x27;Bräcke&#x27;, NULL, &#x27;S-844 67&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10981, &#x27;HANAR&#x27;, 1, &#x27;2018-03-27 00:00:00&#x27;, &#x27;2018-04-02 00:00:00&#x27;, 2, 193.37, &#x27;Rua do Paço-67&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;05454-876&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10982, &#x27;BOTTM&#x27;, 2, &#x27;2018-03-27 00:00:00&#x27;, &#x27;2018-04-08 00:00:00&#x27;, 1, 14.01, &#x27;23 Tsawassen Blvd.&#x27;, &#x27;Tsawasse&#x27;, &#x27;BC&#x27;, &#x27;T2F 8M4&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (10983, &#x27;SAVEA&#x27;, 2, &#x27;2018-03-27 00:00:00&#x27;, &#x27;2018-04-06 00:00:00&#x27;, 2, 657.54, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10984, &#x27;SAVEA&#x27;, 1, &#x27;2018-03-30 00:00:00&#x27;, &#x27;2018-04-03 00:00:00&#x27;, 3, 211.22, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10985, &#x27;HUNGO&#x27;, 2, &#x27;2018-03-30 00:00:00&#x27;, &#x27;2018-04-02 00:00:00&#x27;, 1, 91.51, &#x27;8 Johnstown Road&#x27;, &#x27;Cork&#x27;, &#x27;Co. Cork&#x27;, NULL, &#x27;Ireland&#x27;);INSERT INTO `orders` VALUES (10986, &#x27;OCEA&#x27;, 8, &#x27;2018-03-30 00:00:00&#x27;, &#x27;2018-04-21 00:00:00&#x27;, 2, 217.86, &#x27;Ing. Gustavo Moncada 8585 Piso 20-A&#x27;, &#x27;Buenos Aires&#x27;, NULL, &#x27;1010&#x27;, &#x27;Argentina&#x27;);INSERT INTO `orders` VALUES (10987, &#x27;EASTC&#x27;, 8, &#x27;2018-03-31 00:00:00&#x27;, &#x27;2018-04-06 00:00:00&#x27;, 1, 185.48, &#x27;35 King George&#x27;, &#x27;Londo&#x27;, NULL, &#x27;WX3 6FW&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (10988, &#x27;RATTC&#x27;, 3, &#x27;2018-03-31 00:00:00&#x27;, &#x27;2018-04-10 00:00:00&#x27;, 2, 61.14, &#x27;2817 Milton Dr.&#x27;, &#x27;Albuquerque&#x27;, &#x27;NM&#x27;, &#x27;87110&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10989, &#x27;QUEDE&#x27;, 2, &#x27;2018-03-31 00:00:00&#x27;, &#x27;2018-04-02 00:00:00&#x27;, 1, 34.76, &#x27;Rua da Panificadora-12&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;02389-673&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (10990, &#x27;ERNSH&#x27;, 2, &#x27;2018-04-01 00:00:00&#x27;, &#x27;2018-04-07 00:00:00&#x27;, 3, 117.61, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (10991, &#x27;QUICK&#x27;, 1, &#x27;2018-04-01 00:00:00&#x27;, &#x27;2018-04-07 00:00:00&#x27;, 1, 38.51, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10992, &#x27;THEBI&#x27;, 1, &#x27;2018-04-01 00:00:00&#x27;, &#x27;2018-04-03 00:00:00&#x27;, 3, 4.27, &#x27;89 Jefferson Way Suite 2&#x27;, &#x27;Portland&#x27;, &#x27;OR&#x27;, &#x27;97201&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (10993, &#x27;FOLKO&#x27;, 7, &#x27;2018-04-01 00:00:00&#x27;, &#x27;2018-04-10 00:00:00&#x27;, 3, 8.81, &#x27;Åkergatan 24&#x27;, &#x27;Bräcke&#x27;, NULL, &#x27;S-844 67&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (10994, &#x27;VAFFE&#x27;, 2, &#x27;2018-04-02 00:00:00&#x27;, &#x27;2018-04-09 00:00:00&#x27;, 3, 65.53, &#x27;Smagsloget 45&#x27;, &#x27;Århus&#x27;, NULL, &#x27;8200&#x27;, &#x27;Denmark&#x27;);INSERT INTO `orders` VALUES (10995, &#x27;PERIC&#x27;, 1, &#x27;2018-04-02 00:00:00&#x27;, &#x27;2018-04-06 00:00:00&#x27;, 3, 46.00, &#x27;Calle Dr. Jorge Cash 321&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05033&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (10996, &#x27;QUICK&#x27;, 4, &#x27;2018-04-02 00:00:00&#x27;, &#x27;2018-04-10 00:00:00&#x27;, 2, 1.12, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (10997, &#x27;LILAS&#x27;, 8, &#x27;2018-04-03 00:00:00&#x27;, &#x27;2018-04-13 00:00:00&#x27;, 2, 73.91, &#x27;Carrera 52 con Ave. Bolívar #65-98 Llano Largo&#x27;, &#x27;Barquisimeto&#x27;, &#x27;Lara&#x27;, &#x27;3508&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (10998, &#x27;WOLZA&#x27;, 8, &#x27;2018-04-03 00:00:00&#x27;, &#x27;2018-04-17 00:00:00&#x27;, 2, 20.31, &#x27;ul. Filtrowa 68&#x27;, &#x27;Warszawa&#x27;, NULL, &#x27;01-012&#x27;, &#x27;Poland&#x27;);INSERT INTO `orders` VALUES (10999, &#x27;OTTIK&#x27;, 6, &#x27;2018-04-03 00:00:00&#x27;, &#x27;2018-04-10 00:00:00&#x27;, 2, 96.35, &#x27;Mehrheimerstr. 369&#x27;, &#x27;Köl&#x27;, NULL, &#x27;50739&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (11000, &#x27;RATTC&#x27;, 2, &#x27;2018-04-06 00:00:00&#x27;, &#x27;2018-04-14 00:00:00&#x27;, 3, 55.12, &#x27;2817 Milton Dr.&#x27;, &#x27;Albuquerque&#x27;, &#x27;NM&#x27;, &#x27;87110&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (11001, &#x27;FOLKO&#x27;, 2, &#x27;2018-04-06 00:00:00&#x27;, &#x27;2018-04-14 00:00:00&#x27;, 2, 197.30, &#x27;Åkergatan 24&#x27;, &#x27;Bräcke&#x27;, NULL, &#x27;S-844 67&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (11002, &#x27;SAVEA&#x27;, 4, &#x27;2018-04-06 00:00:00&#x27;, &#x27;2018-04-16 00:00:00&#x27;, 1, 141.16, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (11003, &#x27;THECR&#x27;, 3, &#x27;2018-04-06 00:00:00&#x27;, &#x27;2018-04-08 00:00:00&#x27;, 3, 14.91, &#x27;55 Grizzly Peak Rd.&#x27;, &#x27;Butte&#x27;, &#x27;MT&#x27;, &#x27;59801&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (11004, &#x27;MAISD&#x27;, 3, &#x27;2018-04-07 00:00:00&#x27;, &#x27;2018-04-20 00:00:00&#x27;, 1, 44.84, &#x27;Rue Joseph-Bens 532&#x27;, &#x27;Bruxelles&#x27;, NULL, &#x27;B-1180&#x27;, &#x27;Belgium&#x27;);INSERT INTO `orders` VALUES (11005, &#x27;WILMK&#x27;, 2, &#x27;2018-04-07 00:00:00&#x27;, &#x27;2018-04-10 00:00:00&#x27;, 1, 0.75, &#x27;Keskuskatu 45&#x27;, &#x27;Helsinki&#x27;, NULL, &#x27;21240&#x27;, &#x27;Finland&#x27;);INSERT INTO `orders` VALUES (11006, &#x27;GREAL&#x27;, 3, &#x27;2018-04-07 00:00:00&#x27;, &#x27;2018-04-15 00:00:00&#x27;, 2, 25.19, &#x27;2732 Baker Blvd.&#x27;, &#x27;Eugene&#x27;, &#x27;OR&#x27;, &#x27;97403&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (11007, &#x27;PRINI&#x27;, 8, &#x27;2018-04-08 00:00:00&#x27;, &#x27;2018-04-13 00:00:00&#x27;, 2, 202.24, &#x27;Estrada da saúde n. 58&#x27;, &#x27;Lisboa&#x27;, NULL, &#x27;1756&#x27;, &#x27;Portugal&#x27;);INSERT INTO `orders` VALUES (11008, &#x27;ERNSH&#x27;, 7, &#x27;2018-04-08 00:00:00&#x27;, NULL, 3, 79.46, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (11009, &#x27;GODOS&#x27;, 2, &#x27;2018-04-08 00:00:00&#x27;, &#x27;2018-04-10 00:00:00&#x27;, 1, 59.11, &#x27;C/ Romero-33&#x27;, &#x27;Sevilla&#x27;, NULL, &#x27;41101&#x27;, &#x27;Spain&#x27;);INSERT INTO `orders` VALUES (11010, &#x27;REGGC&#x27;, 2, &#x27;2018-04-09 00:00:00&#x27;, &#x27;2018-04-21 00:00:00&#x27;, 2, 28.71, &#x27;Strada Provinciale 124&#x27;, &#x27;Reggio Emilia&#x27;, NULL, &#x27;42100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (11011, &#x27;ALFKI&#x27;, 3, &#x27;2018-04-09 00:00:00&#x27;, &#x27;2018-04-13 00:00:00&#x27;, 1, 1.21, &#x27;Obere Str. 57&#x27;, &#x27;Berli&#x27;, NULL, &#x27;12209&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (11012, &#x27;FRANK&#x27;, 1, &#x27;2018-04-09 00:00:00&#x27;, &#x27;2018-04-17 00:00:00&#x27;, 3, 242.95, &#x27;Berliner Platz 43&#x27;, &#x27;Münche&#x27;, NULL, &#x27;80805&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (11013, &#x27;ROMEY&#x27;, 2, &#x27;2018-04-09 00:00:00&#x27;, &#x27;2018-04-10 00:00:00&#x27;, 1, 32.99, &#x27;Gran Vía-1&#x27;, &#x27;Madrid&#x27;, NULL, &#x27;28001&#x27;, &#x27;Spain&#x27;);INSERT INTO `orders` VALUES (11014, &#x27;LINOD&#x27;, 2, &#x27;2018-04-10 00:00:00&#x27;, &#x27;2018-04-15 00:00:00&#x27;, 3, 23.60, &#x27;Ave. 5 de Mayo Porlamar&#x27;, &#x27;I. de Margarita&#x27;, &#x27;Nueva Esparta&#x27;, &#x27;4980&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (11015, &#x27;SANTG&#x27;, 2, &#x27;2018-04-10 00:00:00&#x27;, &#x27;2018-04-20 00:00:00&#x27;, 2, 4.62, &#x27;Erling Skakkes gate 78&#x27;, &#x27;Staver&#x27;, NULL, &#x27;4110&#x27;, &#x27;Norway&#x27;);INSERT INTO `orders` VALUES (11016, &#x27;AROUT&#x27;, 9, &#x27;2018-04-10 00:00:00&#x27;, &#x27;2018-04-13 00:00:00&#x27;, 2, 33.80, &#x27;Brook Farm Stratford St. Mary&#x27;, &#x27;Colchester&#x27;, &#x27;Essex&#x27;, &#x27;CO7 6JX&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (11017, &#x27;ERNSH&#x27;, 9, &#x27;2018-04-13 00:00:00&#x27;, &#x27;2018-04-20 00:00:00&#x27;, 2, 754.26, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (11018, &#x27;LONEP&#x27;, 4, &#x27;2018-04-13 00:00:00&#x27;, &#x27;2018-04-16 00:00:00&#x27;, 2, 11.65, &#x27;89 Chiaroscuro Rd.&#x27;, &#x27;Portland&#x27;, &#x27;OR&#x27;, &#x27;97219&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (11019, &#x27;RANCH&#x27;, 6, &#x27;2018-04-13 00:00:00&#x27;, NULL, 3, 3.17, &#x27;Av. del Libertador 900&#x27;, &#x27;Buenos Aires&#x27;, NULL, &#x27;1010&#x27;, &#x27;Argentina&#x27;);INSERT INTO `orders` VALUES (11020, &#x27;OTTIK&#x27;, 2, &#x27;2018-04-14 00:00:00&#x27;, &#x27;2018-04-16 00:00:00&#x27;, 2, 43.30, &#x27;Mehrheimerstr. 369&#x27;, &#x27;Köl&#x27;, NULL, &#x27;50739&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (11021, &#x27;QUICK&#x27;, 3, &#x27;2018-04-14 00:00:00&#x27;, &#x27;2018-04-21 00:00:00&#x27;, 1, 297.18, &#x27;Taucherstraße 10&#x27;, &#x27;Cunewalde&#x27;, NULL, &#x27;01307&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (11022, &#x27;HANAR&#x27;, 9, &#x27;2018-04-14 00:00:00&#x27;, &#x27;2018-05-04 00:00:00&#x27;, 2, 6.27, &#x27;Rua do Paço-67&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;05454-876&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (11023, &#x27;BSBEV&#x27;, 1, &#x27;2018-04-14 00:00:00&#x27;, &#x27;2018-04-24 00:00:00&#x27;, 2, 123.83, &#x27;Fauntleroy Circus&#x27;, &#x27;Londo&#x27;, NULL, &#x27;EC2 5NT&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (11024, &#x27;EASTC&#x27;, 4, &#x27;2018-04-15 00:00:00&#x27;, &#x27;2018-04-20 00:00:00&#x27;, 1, 74.36, &#x27;35 King George&#x27;, &#x27;Londo&#x27;, NULL, &#x27;WX3 6FW&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (11025, &#x27;WARTH&#x27;, 6, &#x27;2018-04-15 00:00:00&#x27;, &#x27;2018-04-24 00:00:00&#x27;, 3, 29.17, &#x27;Torikatu 38&#x27;, &#x27;Oulu&#x27;, NULL, &#x27;90110&#x27;, &#x27;Finland&#x27;);INSERT INTO `orders` VALUES (11026, &#x27;FRANS&#x27;, 4, &#x27;2018-04-15 00:00:00&#x27;, &#x27;2018-04-28 00:00:00&#x27;, 1, 47.09, &#x27;Via Monte Bianco 34&#x27;, &#x27;Torino&#x27;, NULL, &#x27;10100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (11027, &#x27;BOTTM&#x27;, 1, &#x27;2018-04-16 00:00:00&#x27;, &#x27;2018-04-20 00:00:00&#x27;, 1, 52.52, &#x27;23 Tsawassen Blvd.&#x27;, &#x27;Tsawasse&#x27;, &#x27;BC&#x27;, &#x27;T2F 8M4&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (11028, &#x27;KOENE&#x27;, 2, &#x27;2018-04-16 00:00:00&#x27;, &#x27;2018-04-22 00:00:00&#x27;, 1, 29.59, &#x27;Maubelstr. 90&#x27;, &#x27;Brandenburg&#x27;, NULL, &#x27;14776&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (11029, &#x27;CHOPS&#x27;, 4, &#x27;2018-04-16 00:00:00&#x27;, &#x27;2018-04-27 00:00:00&#x27;, 1, 47.84, &#x27;Hauptstr. 31&#x27;, &#x27;Ber&#x27;, NULL, &#x27;3012&#x27;, &#x27;Switzerland&#x27;);INSERT INTO `orders` VALUES (11030, &#x27;SAVEA&#x27;, 7, &#x27;2018-04-17 00:00:00&#x27;, &#x27;2018-04-27 00:00:00&#x27;, 2, 830.75, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (11031, &#x27;SAVEA&#x27;, 6, &#x27;2018-04-17 00:00:00&#x27;, &#x27;2018-04-24 00:00:00&#x27;, 2, 227.22, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (11032, &#x27;WHITC&#x27;, 2, &#x27;2018-04-17 00:00:00&#x27;, &#x27;2018-04-23 00:00:00&#x27;, 3, 606.19, &#x27;1029 - 12th Ave. S.&#x27;, &#x27;Seattle&#x27;, &#x27;WA&#x27;, &#x27;98124&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (11033, &#x27;RICSU&#x27;, 7, &#x27;2018-04-17 00:00:00&#x27;, &#x27;2018-04-23 00:00:00&#x27;, 3, 84.74, &#x27;Starenweg 5&#x27;, &#x27;Genève&#x27;, NULL, &#x27;1204&#x27;, &#x27;Switzerland&#x27;);INSERT INTO `orders` VALUES (11034, &#x27;OLDWO&#x27;, 8, &#x27;2018-04-20 00:00:00&#x27;, &#x27;2018-04-27 00:00:00&#x27;, 1, 40.32, &#x27;2743 Bering St.&#x27;, &#x27;Anchorage&#x27;, &#x27;AK&#x27;, &#x27;99508&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (11035, &#x27;SUPRD&#x27;, 2, &#x27;2018-04-20 00:00:00&#x27;, &#x27;2018-04-24 00:00:00&#x27;, 2, 0.17, &#x27;Boulevard Tirou-255&#x27;, &#x27;Charleroi&#x27;, NULL, &#x27;B-6000&#x27;, &#x27;Belgium&#x27;);INSERT INTO `orders` VALUES (11036, &#x27;DRACD&#x27;, 8, &#x27;2018-04-20 00:00:00&#x27;, &#x27;2018-04-22 00:00:00&#x27;, 3, 149.47, &#x27;Walserweg 21&#x27;, &#x27;Aache&#x27;, NULL, &#x27;52066&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (11037, &#x27;GODOS&#x27;, 7, &#x27;2018-04-21 00:00:00&#x27;, &#x27;2018-04-27 00:00:00&#x27;, 1, 3.20, &#x27;C/ Romero-33&#x27;, &#x27;Sevilla&#x27;, NULL, &#x27;41101&#x27;, &#x27;Spain&#x27;);INSERT INTO `orders` VALUES (11038, &#x27;SUPRD&#x27;, 1, &#x27;2018-04-21 00:00:00&#x27;, &#x27;2018-04-30 00:00:00&#x27;, 2, 29.59, &#x27;Boulevard Tirou-255&#x27;, &#x27;Charleroi&#x27;, NULL, &#x27;B-6000&#x27;, &#x27;Belgium&#x27;);INSERT INTO `orders` VALUES (11039, &#x27;LINOD&#x27;, 1, &#x27;2018-04-21 00:00:00&#x27;, NULL, 2, 65.00, &#x27;Ave. 5 de Mayo Porlamar&#x27;, &#x27;I. de Margarita&#x27;, &#x27;Nueva Esparta&#x27;, &#x27;4980&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (11040, &#x27;GREAL&#x27;, 4, &#x27;2018-04-22 00:00:00&#x27;, NULL, 3, 18.84, &#x27;2732 Baker Blvd.&#x27;, &#x27;Eugene&#x27;, &#x27;OR&#x27;, &#x27;97403&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (11041, &#x27;CHOPS&#x27;, 3, &#x27;2018-04-22 00:00:00&#x27;, &#x27;2018-04-28 00:00:00&#x27;, 2, 48.22, &#x27;Hauptstr. 31&#x27;, &#x27;Ber&#x27;, NULL, &#x27;3012&#x27;, &#x27;Switzerland&#x27;);INSERT INTO `orders` VALUES (11042, &#x27;COMMI&#x27;, 2, &#x27;2018-04-22 00:00:00&#x27;, &#x27;2018-05-01 00:00:00&#x27;, 1, 29.99, &#x27;Av. dos Lusíadas-23&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05432-043&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (11043, &#x27;SPECD&#x27;, 5, &#x27;2018-04-22 00:00:00&#x27;, &#x27;2018-04-29 00:00:00&#x27;, 2, 8.80, &#x27;25-rue Lauristo&#x27;, &#x27;Paris&#x27;, NULL, &#x27;75016&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (11044, &#x27;WOLZA&#x27;, 4, &#x27;2018-04-23 00:00:00&#x27;, &#x27;2018-05-01 00:00:00&#x27;, 1, 8.72, &#x27;ul. Filtrowa 68&#x27;, &#x27;Warszawa&#x27;, NULL, &#x27;01-012&#x27;, &#x27;Poland&#x27;);INSERT INTO `orders` VALUES (11045, &#x27;BOTTM&#x27;, 6, &#x27;2018-04-23 00:00:00&#x27;, NULL, 2, 70.58, &#x27;23 Tsawassen Blvd.&#x27;, &#x27;Tsawasse&#x27;, &#x27;BC&#x27;, &#x27;T2F 8M4&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (11046, &#x27;WANDK&#x27;, 8, &#x27;2018-04-23 00:00:00&#x27;, &#x27;2018-04-24 00:00:00&#x27;, 2, 71.64, &#x27;Adenauerallee 900&#x27;, &#x27;Stuttgart&#x27;, NULL, &#x27;70563&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (11047, &#x27;EASTC&#x27;, 7, &#x27;2018-04-24 00:00:00&#x27;, &#x27;2018-05-01 00:00:00&#x27;, 3, 46.62, &#x27;35 King George&#x27;, &#x27;Londo&#x27;, NULL, &#x27;WX3 6FW&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (11048, &#x27;BOTTM&#x27;, 7, &#x27;2018-04-24 00:00:00&#x27;, &#x27;2018-04-30 00:00:00&#x27;, 3, 24.12, &#x27;23 Tsawassen Blvd.&#x27;, &#x27;Tsawasse&#x27;, &#x27;BC&#x27;, &#x27;T2F 8M4&#x27;, &#x27;Canada&#x27;);INSERT INTO `orders` VALUES (11049, &#x27;GOURL&#x27;, 3, &#x27;2018-04-24 00:00:00&#x27;, &#x27;2018-05-04 00:00:00&#x27;, 1, 8.34, &#x27;Av. Brasil-442&#x27;, &#x27;Campinas&#x27;, &#x27;SP&#x27;, &#x27;04876-786&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (11050, &#x27;FOLKO&#x27;, 8, &#x27;2018-04-27 00:00:00&#x27;, &#x27;2018-05-05 00:00:00&#x27;, 2, 59.41, &#x27;Åkergatan 24&#x27;, &#x27;Bräcke&#x27;, NULL, &#x27;S-844 67&#x27;, &#x27;Sweden&#x27;);INSERT INTO `orders` VALUES (11051, &#x27;LAMAI&#x27;, 7, &#x27;2018-04-27 00:00:00&#x27;, NULL, 3, 2.79, &#x27;1 rue Alsace-Lorraine&#x27;, &#x27;Toulouse&#x27;, NULL, &#x27;31000&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (11052, &#x27;HANAR&#x27;, 3, &#x27;2018-04-27 00:00:00&#x27;, &#x27;2018-05-01 00:00:00&#x27;, 1, 67.26, &#x27;Rua do Paço-67&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;05454-876&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (11053, &#x27;PICCO&#x27;, 2, &#x27;2018-04-27 00:00:00&#x27;, &#x27;2018-04-29 00:00:00&#x27;, 2, 53.05, &#x27;Geislweg 14&#x27;, &#x27;Salzburg&#x27;, NULL, &#x27;5020&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (11054, &#x27;CACTU&#x27;, 8, &#x27;2018-04-28 00:00:00&#x27;, NULL, 1, 0.33, &#x27;Cerrito 333&#x27;, &#x27;Buenos Aires&#x27;, NULL, &#x27;1010&#x27;, &#x27;Argentina&#x27;);INSERT INTO `orders` VALUES (11055, &#x27;HILAA&#x27;, 7, &#x27;2018-04-28 00:00:00&#x27;, &#x27;2018-05-05 00:00:00&#x27;, 2, 120.92, &#x27;Carrera 22 con Ave. Carlos Soublette #8-35&#x27;, &#x27;San Cristóbal&#x27;, &#x27;Táchira&#x27;, &#x27;5022&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (11056, &#x27;EASTC&#x27;, 8, &#x27;2018-04-28 00:00:00&#x27;, &#x27;2018-05-01 00:00:00&#x27;, 2, 278.96, &#x27;35 King George&#x27;, &#x27;Londo&#x27;, NULL, &#x27;WX3 6FW&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (11057, &#x27;NORTS&#x27;, 3, &#x27;2018-04-29 00:00:00&#x27;, &#x27;2018-05-01 00:00:00&#x27;, 3, 4.13, &#x27;South House 300 Queensbridge&#x27;, &#x27;Londo&#x27;, NULL, &#x27;SW7 1RZ&#x27;, &#x27;UK&#x27;);INSERT INTO `orders` VALUES (11058, &#x27;BLAUS&#x27;, 9, &#x27;2018-04-29 00:00:00&#x27;, NULL, 3, 31.14, &#x27;Forsterstr. 57&#x27;, &#x27;Mannheim&#x27;, NULL, &#x27;68306&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (11059, &#x27;RICAR&#x27;, 2, &#x27;2018-04-29 00:00:00&#x27;, NULL, 2, 85.80, &#x27;Av. Copacabana-267&#x27;, &#x27;Rio de Janeiro&#x27;, &#x27;RJ&#x27;, &#x27;02389-890&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (11060, &#x27;FRANS&#x27;, 2, &#x27;2018-04-30 00:00:00&#x27;, &#x27;2018-05-04 00:00:00&#x27;, 2, 10.98, &#x27;Via Monte Bianco 34&#x27;, &#x27;Torino&#x27;, NULL, &#x27;10100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (11061, &#x27;GREAL&#x27;, 4, &#x27;2018-04-30 00:00:00&#x27;, NULL, 3, 14.01, &#x27;2732 Baker Blvd.&#x27;, &#x27;Eugene&#x27;, &#x27;OR&#x27;, &#x27;97403&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (11062, &#x27;REGGC&#x27;, 4, &#x27;2018-04-30 00:00:00&#x27;, NULL, 2, 29.93, &#x27;Strada Provinciale 124&#x27;, &#x27;Reggio Emilia&#x27;, NULL, &#x27;42100&#x27;, &#x27;Italy&#x27;);INSERT INTO `orders` VALUES (11063, &#x27;HUNGO&#x27;, 3, &#x27;2018-04-30 00:00:00&#x27;, &#x27;2018-05-06 00:00:00&#x27;, 2, 81.73, &#x27;8 Johnstown Road&#x27;, &#x27;Cork&#x27;, &#x27;Co. Cork&#x27;, NULL, &#x27;Ireland&#x27;);INSERT INTO `orders` VALUES (11064, &#x27;SAVEA&#x27;, 1, &#x27;2018-05-01 00:00:00&#x27;, &#x27;2018-05-04 00:00:00&#x27;, 1, 30.09, &#x27;187 Suffolk Ln.&#x27;, &#x27;Boise&#x27;, &#x27;ID&#x27;, &#x27;83720&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (11065, &#x27;LILAS&#x27;, 8, &#x27;2018-05-01 00:00:00&#x27;, NULL, 1, 12.91, &#x27;Carrera 52 con Ave. Bolívar #65-98 Llano Largo&#x27;, &#x27;Barquisimeto&#x27;, &#x27;Lara&#x27;, &#x27;3508&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (11066, &#x27;WHITC&#x27;, 7, &#x27;2018-05-01 00:00:00&#x27;, &#x27;2018-05-04 00:00:00&#x27;, 2, 44.72, &#x27;1029 - 12th Ave. S.&#x27;, &#x27;Seattle&#x27;, &#x27;WA&#x27;, &#x27;98124&#x27;, &#x27;USA&#x27;);INSERT INTO `orders` VALUES (11067, &#x27;DRACD&#x27;, 1, &#x27;2018-05-04 00:00:00&#x27;, &#x27;2018-05-06 00:00:00&#x27;, 2, 7.98, &#x27;Walserweg 21&#x27;, &#x27;Aache&#x27;, NULL, &#x27;52066&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (11068, &#x27;QUEE&#x27;, 8, &#x27;2018-05-04 00:00:00&#x27;, NULL, 2, 81.75, &#x27;Alameda dos Canàrios-891&#x27;, &#x27;Sao Paulo&#x27;, &#x27;SP&#x27;, &#x27;05487-020&#x27;, &#x27;Brazil&#x27;);INSERT INTO `orders` VALUES (11069, &#x27;TORTU&#x27;, 1, &#x27;2018-05-04 00:00:00&#x27;, &#x27;2018-05-06 00:00:00&#x27;, 2, 15.67, &#x27;Avda. Azteca 123&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05033&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (11070, &#x27;LEHMS&#x27;, 2, &#x27;2018-05-05 00:00:00&#x27;, NULL, 1, 136.00, &#x27;Magazinweg 7&#x27;, &#x27;Frankfurt a.M.&#x27;, NULL, &#x27;60528&#x27;, &#x27;Germany&#x27;);INSERT INTO `orders` VALUES (11071, &#x27;LILAS&#x27;, 1, &#x27;2018-05-05 00:00:00&#x27;, NULL, 1, 0.93, &#x27;Carrera 52 con Ave. Bolívar #65-98 Llano Largo&#x27;, &#x27;Barquisimeto&#x27;, &#x27;Lara&#x27;, &#x27;3508&#x27;, &#x27;Venezuela&#x27;);INSERT INTO `orders` VALUES (11072, &#x27;ERNSH&#x27;, 4, &#x27;2018-05-05 00:00:00&#x27;, NULL, 2, 258.64, &#x27;Kirchgasse 6&#x27;, &#x27;Graz&#x27;, NULL, &#x27;8010&#x27;, &#x27;Austria&#x27;);INSERT INTO `orders` VALUES (11073, &#x27;PERIC&#x27;, 2, &#x27;2018-05-05 00:00:00&#x27;, NULL, 2, 24.95, &#x27;Calle Dr. Jorge Cash 321&#x27;, &#x27;México D.F.&#x27;, NULL, &#x27;05033&#x27;, &#x27;Mexico&#x27;);INSERT INTO `orders` VALUES (11074, &#x27;SIMOB&#x27;, 7, &#x27;2018-05-06 00:00:00&#x27;, NULL, 2, 18.44, &#x27;Vinbæltet 34&#x27;, &#x27;Kobenhav&#x27;, NULL, &#x27;1734&#x27;, &#x27;Denmark&#x27;);INSERT INTO `orders` VALUES (11075, &#x27;RICSU&#x27;, 8, &#x27;2018-05-06 00:00:00&#x27;, NULL, 2, 6.19, &#x27;Starenweg 5&#x27;, &#x27;Genève&#x27;, NULL, &#x27;1204&#x27;, &#x27;Switzerland&#x27;);INSERT INTO `orders` VALUES (11076, &#x27;BONAP&#x27;, 4, &#x27;2018-05-06 00:00:00&#x27;, NULL, 2, 38.28, &#x27;12-rue des Bouchers&#x27;, &#x27;Marseille&#x27;, NULL, &#x27;13008&#x27;, &#x27;France&#x27;);INSERT INTO `orders` VALUES (11077, &#x27;RATTC&#x27;, 1, &#x27;2018-05-06 00:00:00&#x27;, NULL, 2, 8.53, &#x27;2817 Milton Dr.&#x27;, &#x27;Albuquerque&#x27;, &#x27;NM&#x27;, &#x27;87110&#x27;, &#x27;USA&#x27;);COMMIT;-- ------------------------------ Table structure for products-- ----------------------------DROP TABLE IF EXISTS `products`;CREATE TABLE `products` (  `product_id` int NOT NULL,  `product_name` varchar(40) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `supplier_id` int DEFAULT NULL,  `category_id` int DEFAULT NULL,  `quantity_per_unit` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `unit_price` decimal(10,2) DEFAULT NULL,  `units_in_stock` smallint DEFAULT NULL,  `units_on_order` smallint DEFAULT NULL,  `discontinued` bit(1) DEFAULT NULL,  PRIMARY KEY (`product_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;-- ------------------------------ Records of products-- ----------------------------BEGIN;INSERT INTO `products` VALUES (1, &#x27;Chai&#x27;, 1, 1, &#x27;10 boxes x 20 bags&#x27;, 18.00, 39, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (2, &#x27;Chang&#x27;, 1, 1, &#x27;24 - 12 oz bottles&#x27;, 19.00, 17, 40, b&#x27;0&#x27;);INSERT INTO `products` VALUES (3, &#x27;Aniseed Syrup&#x27;, 1, 2, &#x27;12 - 550 ml bottles&#x27;, 10.00, 13, 70, b&#x27;0&#x27;);INSERT INTO `products` VALUES (4, &#x27;Chef Anton\\&#x27;s Cajun Seasoning&#x27;, 2, 2, &#x27;48 - 6 oz jars&#x27;, 22.00, 53, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (5, &#x27;Chef Anton\\&#x27;s Gumbo Mix&#x27;, 2, 2, &#x27;36 boxes&#x27;, 21.35, 0, 0, b&#x27;1&#x27;);INSERT INTO `products` VALUES (6, &#x27;Grandma\\&#x27;s Boysenberry Spread&#x27;, 3, 2, &#x27;12 - 8 oz jars&#x27;, 25.00, 120, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (7, &#x27;Uncle Bob\\&#x27;s Organic Dried Pears&#x27;, 3, 7, &#x27;12 - 1 lb pkgs.&#x27;, 30.00, 15, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (8, &#x27;Northwoods Cranberry Sauce&#x27;, 3, 2, &#x27;12 - 12 oz jars&#x27;, 40.00, 6, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (9, &#x27;Mishi Kobe Niku&#x27;, 4, 6, &#x27;18 - 500 g pkgs.&#x27;, 97.00, 29, 0, b&#x27;1&#x27;);INSERT INTO `products` VALUES (10, &#x27;Ikura&#x27;, 4, 8, &#x27;12 - 200 ml jars&#x27;, 31.00, 31, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (11, &#x27;Queso Cabrales&#x27;, 5, 4, &#x27;1 kg pkg.&#x27;, 21.00, 22, 30, b&#x27;0&#x27;);INSERT INTO `products` VALUES (12, &#x27;Queso Manchego La Pastora&#x27;, 5, 4, &#x27;10 - 500 g pkgs.&#x27;, 38.00, 86, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (13, &#x27;Konbu&#x27;, 6, 8, &#x27;2 kg box&#x27;, 6.00, 24, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (14, &#x27;Tofu&#x27;, 6, 7, &#x27;40 - 100 g pkgs.&#x27;, 23.25, 35, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (15, &#x27;Genen Shouyu&#x27;, 6, 2, &#x27;24 - 250 ml bottles&#x27;, 15.50, 39, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (16, &#x27;Pavlova&#x27;, 7, 3, &#x27;32 - 500 g boxes&#x27;, 17.45, 29, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (17, &#x27;Alice Mutton&#x27;, 7, 6, &#x27;20 - 1 kg tins&#x27;, 39.00, 0, 0, b&#x27;1&#x27;);INSERT INTO `products` VALUES (18, &#x27;Carnarvon Tigers&#x27;, 7, 8, &#x27;16 kg pkg.&#x27;, 62.50, 42, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (19, &#x27;Teatime Chocolate Biscuits&#x27;, 8, 3, &#x27;10 boxes x 12 pieces&#x27;, 9.20, 25, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (20, &#x27;Sir Rodney\\&#x27;s Marmalade&#x27;, 8, 3, &#x27;30 gift boxes&#x27;, 81.00, 40, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (21, &#x27;Sir Rodney\\&#x27;s Scones&#x27;, 8, 3, &#x27;24 pkgs. x 4 pieces&#x27;, 10.00, 3, 40, b&#x27;0&#x27;);INSERT INTO `products` VALUES (22, &#x27;Gustaf\\&#x27;s Knäckebröd&#x27;, 9, 5, &#x27;24 - 500 g pkgs.&#x27;, 21.00, 104, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (23, &#x27;Tunnbröd&#x27;, 9, 5, &#x27;12 - 250 g pkgs.&#x27;, 9.00, 61, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (24, &#x27;Guaraná Fantástica&#x27;, 10, 1, &#x27;12 - 355 ml cans&#x27;, 4.50, 20, 0, b&#x27;1&#x27;);INSERT INTO `products` VALUES (25, &#x27;NuNuCa Nuß-Nougat-Creme&#x27;, 11, 3, &#x27;20 - 450 g glasses&#x27;, 14.00, 76, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (26, &#x27;Gumbär Gummibärchen&#x27;, 11, 3, &#x27;100 - 250 g bags&#x27;, 31.23, 15, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (27, &#x27;Schoggi Schokolade&#x27;, 11, 3, &#x27;100 - 100 g pieces&#x27;, 43.90, 49, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (28, &#x27;Rössle Sauerkraut&#x27;, 12, 7, &#x27;25 - 825 g cans&#x27;, 45.60, 26, 0, b&#x27;1&#x27;);INSERT INTO `products` VALUES (29, &#x27;Thüringer Rostbratwurst&#x27;, 12, 6, &#x27;50 bags x 30 sausgs.&#x27;, 123.79, 0, 0, b&#x27;1&#x27;);INSERT INTO `products` VALUES (30, &#x27;Nord-Ost Matjeshering&#x27;, 13, 8, &#x27;10 - 200 g glasses&#x27;, 25.89, 10, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (31, &#x27;Gorgonzola Telino&#x27;, 14, 4, &#x27;12 - 100 g pkgs&#x27;, 12.50, 0, 70, b&#x27;0&#x27;);INSERT INTO `products` VALUES (32, &#x27;Mascarpone Fabioli&#x27;, 14, 4, &#x27;24 - 200 g pkgs.&#x27;, 32.00, 9, 40, b&#x27;0&#x27;);INSERT INTO `products` VALUES (33, &#x27;Geitost&#x27;, 16, 4, &#x27;500 g&#x27;, 2.50, 112, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (34, &#x27;Sasquatch Ale&#x27;, 16, 1, &#x27;24 - 12 oz bottles&#x27;, 14.00, 111, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (35, &#x27;Steeleye Stout&#x27;, 16, 1, &#x27;24 - 12 oz bottles&#x27;, 18.00, 20, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (36, &#x27;Inlagd Sill&#x27;, 17, 8, &#x27;24 - 250 g jars&#x27;, 19.00, 112, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (37, &#x27;Gravad lax&#x27;, 17, 8, &#x27;12 - 500 g pkgs.&#x27;, 26.00, 11, 50, b&#x27;0&#x27;);INSERT INTO `products` VALUES (38, &#x27;Côte de Blaye&#x27;, 18, 1, &#x27;12 - 75 cl bottles&#x27;, 263.50, 17, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (39, &#x27;Chartreuse verte&#x27;, 18, 1, &#x27;750 cc per bottle&#x27;, 18.00, 69, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (40, &#x27;Boston Crab Meat&#x27;, 19, 8, &#x27;24 - 4 oz tins&#x27;, 18.40, 123, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (41, &#x27;Jack\\&#x27;s New England Clam Chowder&#x27;, 19, 8, &#x27;12 - 12 oz cans&#x27;, 9.65, 85, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (42, &#x27;Singaporean Hokkien Fried Mee&#x27;, 20, 5, &#x27;32 - 1 kg pkgs.&#x27;, 14.00, 26, 0, b&#x27;1&#x27;);INSERT INTO `products` VALUES (43, &#x27;Ipoh Coffee&#x27;, 20, 1, &#x27;16 - 500 g tins&#x27;, 46.00, 17, 10, b&#x27;0&#x27;);INSERT INTO `products` VALUES (44, &#x27;Gula Malacca&#x27;, 20, 2, &#x27;20 - 2 kg bags&#x27;, 19.45, 27, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (45, &#x27;Rogede sild&#x27;, 21, 8, &#x27;1k pkg.&#x27;, 9.50, 5, 70, b&#x27;0&#x27;);INSERT INTO `products` VALUES (46, &#x27;Spegesild&#x27;, 21, 8, &#x27;4 - 450 g glasses&#x27;, 12.00, 95, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (47, &#x27;Zaanse koeken&#x27;, 22, 3, &#x27;10 - 4 oz boxes&#x27;, 9.50, 36, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (48, &#x27;Chocolade&#x27;, 22, 3, &#x27;10 pkgs.&#x27;, 12.75, 15, 70, b&#x27;0&#x27;);INSERT INTO `products` VALUES (49, &#x27;Maxilaku&#x27;, 23, 3, &#x27;24 - 50 g pkgs.&#x27;, 20.00, 10, 60, b&#x27;0&#x27;);INSERT INTO `products` VALUES (50, &#x27;Valkoinen suklaa&#x27;, 23, 3, &#x27;12 - 100 g bars&#x27;, 16.25, 65, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (51, &#x27;Manjimup Dried Apples&#x27;, 24, 7, &#x27;50 - 300 g pkgs.&#x27;, 53.00, 20, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (52, &#x27;Filo Mix&#x27;, 24, 5, &#x27;16 - 2 kg boxes&#x27;, 7.00, 38, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (53, &#x27;Perth Pasties&#x27;, 24, 6, &#x27;48 pieces&#x27;, 32.80, 0, 0, b&#x27;1&#x27;);INSERT INTO `products` VALUES (54, &#x27;Tourtière&#x27;, 25, 6, &#x27;16 pies&#x27;, 7.45, 21, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (55, &#x27;Pâté chinois&#x27;, 25, 6, &#x27;24 boxes x 2 pies&#x27;, 24.00, 115, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (56, &#x27;Gnocchi di nonna Alice&#x27;, 26, 5, &#x27;24 - 250 g pkgs.&#x27;, 38.00, 21, 10, b&#x27;0&#x27;);INSERT INTO `products` VALUES (57, &#x27;Ravioli Angelo&#x27;, 26, 5, &#x27;24 - 250 g pkgs.&#x27;, 19.50, 36, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (58, &#x27;Escargots de Bourgogne&#x27;, 27, 8, &#x27;24 pieces&#x27;, 13.25, 62, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (59, &#x27;Raclette Courdavault&#x27;, 28, 4, &#x27;5 kg pkg.&#x27;, 55.00, 79, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (60, &#x27;Camembert Pierrot&#x27;, 28, 4, &#x27;15 - 300 g rounds&#x27;, 34.00, 19, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (61, &#x27;Sirop d\\&#x27;érable&#x27;, 29, 2, &#x27;24 - 500 ml bottles&#x27;, 28.50, 113, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (62, &#x27;Tarte au sucre&#x27;, 29, 3, &#x27;48 pies&#x27;, 49.30, 17, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (63, &#x27;Vegie-spread&#x27;, 7, 2, &#x27;15 - 625 g jars&#x27;, 43.90, 24, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (64, &#x27;Wimmers gute Semmelknödel&#x27;, 12, 5, &#x27;20 bags x 4 pieces&#x27;, 33.25, 22, 80, b&#x27;0&#x27;);INSERT INTO `products` VALUES (65, &#x27;Louisiana Fiery Hot Pepper Sauce&#x27;, 2, 2, &#x27;32 - 8 oz bottles&#x27;, 21.05, 76, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (66, &#x27;Louisiana Hot Spiced Okra&#x27;, 2, 2, &#x27;24 - 8 oz jars&#x27;, 17.00, 4, 100, b&#x27;0&#x27;);INSERT INTO `products` VALUES (67, &#x27;Laughing Lumberjack Lager&#x27;, 16, 1, &#x27;24 - 12 oz bottles&#x27;, 14.00, 52, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (68, &#x27;Scottish Longbreads&#x27;, 8, 3, &#x27;10 boxes x 8 pieces&#x27;, 12.50, 6, 10, b&#x27;0&#x27;);INSERT INTO `products` VALUES (69, &#x27;Gudbrandsdalsost&#x27;, 16, 4, &#x27;10 kg pkg.&#x27;, 36.00, 26, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (70, &#x27;Outback Lager&#x27;, 7, 1, &#x27;24 - 355 ml bottles&#x27;, 15.00, 15, 10, b&#x27;0&#x27;);INSERT INTO `products` VALUES (71, &#x27;Flotemysost&#x27;, 16, 4, &#x27;10 - 500 g pkgs.&#x27;, 21.50, 26, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (72, &#x27;Mozzarella di Giovanni&#x27;, 14, 4, &#x27;24 - 200 g pkgs.&#x27;, 34.80, 14, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (73, &#x27;Röd Kaviar&#x27;, 17, 8, &#x27;24 - 150 g jars&#x27;, 15.00, 101, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (74, &#x27;Longlife Tofu&#x27;, 4, 7, &#x27;5 kg pkg.&#x27;, 10.00, 4, 20, b&#x27;0&#x27;);INSERT INTO `products` VALUES (75, &#x27;Rhönbräu Klosterbier&#x27;, 12, 1, &#x27;24 - 0.5 l bottles&#x27;, 7.75, 125, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (76, &#x27;Lakkalikööri&#x27;, 23, 1, &#x27;500 ml&#x27;, 18.00, 57, 0, b&#x27;0&#x27;);INSERT INTO `products` VALUES (77, &#x27;Original Frankfurter grüne Soße&#x27;, 12, 2, &#x27;12 boxes&#x27;, 13.00, 32, 0, b&#x27;0&#x27;);COMMIT;-- ------------------------------ Table structure for suppliers-- ----------------------------DROP TABLE IF EXISTS `suppliers`;CREATE TABLE `suppliers` (  `supplier_id` int NOT NULL,  `company_name` varchar(40) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `address` varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `city` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `region` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `postal_code` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  `country` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,  PRIMARY KEY (`supplier_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;-- ------------------------------ Records of suppliers-- ----------------------------BEGIN;INSERT INTO `suppliers` VALUES (1, &#x27;Exotic Liquids&#x27;, &#x27;49 Gilbert St.&#x27;, &#x27;London&#x27;, NULL, &#x27;EC1 4SD&#x27;, &#x27;UK&#x27;);INSERT INTO `suppliers` VALUES (2, &#x27;New Orleans Cajun Delights&#x27;, &#x27;P.O. Box 78934&#x27;, &#x27;New Orleans&#x27;, &#x27;LA&#x27;, &#x27;70117&#x27;, &#x27;USA&#x27;);INSERT INTO `suppliers` VALUES (3, &#x27;Grandma Kelly\\&#x27;s Homestead&#x27;, &#x27;707 Oxford Rd.&#x27;, &#x27;Ann Arbor&#x27;, &#x27;MI&#x27;, &#x27;48104&#x27;, &#x27;USA&#x27;);INSERT INTO `suppliers` VALUES (4, &#x27;Tokyo Traders&#x27;, &#x27;9-8 Sekimai Musashino-shi&#x27;, &#x27;Tokyo&#x27;, NULL, &#x27;100&#x27;, &#x27;Japan&#x27;);INSERT INTO `suppliers` VALUES (5, &#x27;Cooperativa de Quesos \\&#x27;Las Cabras\\&#x27;&#x27;, &#x27;Calle del Rosal 4&#x27;, &#x27;Oviedo&#x27;, &#x27;Asturias&#x27;, &#x27;33007&#x27;, &#x27;Spain&#x27;);INSERT INTO `suppliers` VALUES (6, &#x27;Mayumi\\&#x27;s&#x27;, &#x27;92 Setsuko Chuo-ku&#x27;, &#x27;Osaka&#x27;, NULL, &#x27;545&#x27;, &#x27;Japan&#x27;);INSERT INTO `suppliers` VALUES (7, &#x27;Pavlova, Ltd.&#x27;, &#x27;74 Rose St. Moonie Ponds&#x27;, &#x27;Melbourne&#x27;, &#x27;Victoria&#x27;, &#x27;3058&#x27;, &#x27;Australia&#x27;);INSERT INTO `suppliers` VALUES (8, &#x27;Specialty Biscuits, Ltd.&#x27;, &#x27;29 King\\&#x27;s Way&#x27;, &#x27;Manchester&#x27;, NULL, &#x27;M14 GSD&#x27;, &#x27;UK&#x27;);INSERT INTO `suppliers` VALUES (9, &#x27;PB Knäckebröd AB&#x27;, &#x27;Kaloadagatan 13&#x27;, &#x27;Göteborg&#x27;, NULL, &#x27;S-345 67&#x27;, &#x27;Sweden&#x27;);INSERT INTO `suppliers` VALUES (10, &#x27;Refrescos Americanas LTDA&#x27;, &#x27;Av. das Americanas 12.890&#x27;, &#x27;Sao Paulo&#x27;, NULL, &#x27;5442&#x27;, &#x27;Brazil&#x27;);INSERT INTO `suppliers` VALUES (11, &#x27;Heli Süßwaren GmbH &amp; Co. KG&#x27;, &#x27;Tiergartenstraße 5&#x27;, &#x27;Berlin&#x27;, NULL, &#x27;10785&#x27;, &#x27;Germany&#x27;);INSERT INTO `suppliers` VALUES (12, &#x27;Plutzer Lebensmittelgroßmärkte AG&#x27;, &#x27;Bogenallee 51&#x27;, &#x27;Frankfurt&#x27;, NULL, &#x27;60439&#x27;, &#x27;Germany&#x27;);INSERT INTO `suppliers` VALUES (13, &#x27;Nord-Ost-Fisch Handelsgesellschaft mbH&#x27;, &#x27;Frahmredder 112a&#x27;, &#x27;Cuxhaven&#x27;, NULL, &#x27;27478&#x27;, &#x27;Germany&#x27;);INSERT INTO `suppliers` VALUES (14, &#x27;Formaggi Fortini s.r.l.&#x27;, &#x27;Viale Dante, 75&#x27;, &#x27;Ravenna&#x27;, NULL, &#x27;48100&#x27;, &#x27;Italy&#x27;);INSERT INTO `suppliers` VALUES (15, &#x27;Norske Meierier&#x27;, &#x27;Hatlevegen 5&#x27;, &#x27;Sandvika&#x27;, NULL, &#x27;1320&#x27;, &#x27;Norway&#x27;);INSERT INTO `suppliers` VALUES (16, &#x27;Bigfoot Breweries&#x27;, &#x27;3400 - 8th Avenue Suite 210&#x27;, &#x27;Bend&#x27;, &#x27;OR&#x27;, &#x27;97101&#x27;, &#x27;USA&#x27;);INSERT INTO `suppliers` VALUES (17, &#x27;Svensk Sjöföda AB&#x27;, &#x27;Brovallavägen 231&#x27;, &#x27;Stockholm&#x27;, NULL, &#x27;S-123 45&#x27;, &#x27;Sweden&#x27;);INSERT INTO `suppliers` VALUES (18, &#x27;Aux joyeux ecclésiastiques&#x27;, &#x27;203, Rue des Francs-Bourgeois&#x27;, &#x27;Paris&#x27;, NULL, &#x27;75004&#x27;, &#x27;France&#x27;);INSERT INTO `suppliers` VALUES (19, &#x27;New England Seafood Cannery&#x27;, &#x27;Order Processing Dept. 2100 Paul Revere Blvd.&#x27;, &#x27;Boston&#x27;, &#x27;MA&#x27;, &#x27;2134&#x27;, &#x27;USA&#x27;);INSERT INTO `suppliers` VALUES (20, &#x27;Leka Trading&#x27;, &#x27;471 Serangoon Loop, Suite #402&#x27;, &#x27;Singapore&#x27;, NULL, &#x27;512&#x27;, &#x27;Singapore&#x27;);INSERT INTO `suppliers` VALUES (21, &#x27;Lyngbysild&#x27;, &#x27;Lyngbysild Fiskebakken 10&#x27;, &#x27;Lyngby&#x27;, NULL, &#x27;2800&#x27;, &#x27;Denmark&#x27;);INSERT INTO `suppliers` VALUES (22, &#x27;Zaanse Snoepfabriek&#x27;, &#x27;Verkoop Rijnweg 22&#x27;, &#x27;Zaandam&#x27;, NULL, &#x27;9999 ZZ&#x27;, &#x27;Netherlands&#x27;);INSERT INTO `suppliers` VALUES (23, &#x27;Karkki Oy&#x27;, &#x27;Valtakatu 12&#x27;, &#x27;Lappeenranta&#x27;, NULL, &#x27;53120&#x27;, &#x27;Finland&#x27;);INSERT INTO `suppliers` VALUES (24, &#x27;G\\&#x27;day, Mate&#x27;, &#x27;170 Prince Edward Parade Hunter\\&#x27;s Hill&#x27;, &#x27;Sydney&#x27;, &#x27;NSW&#x27;, &#x27;2042&#x27;, &#x27;Australia&#x27;);INSERT INTO `suppliers` VALUES (25, &#x27;Ma Maison&#x27;, &#x27;2960 Rue St. Laurent&#x27;, &#x27;Montréal&#x27;, &#x27;Québec&#x27;, &#x27;H1J 1C3&#x27;, &#x27;Canada&#x27;);INSERT INTO `suppliers` VALUES (26, &#x27;Pasta Buttini s.r.l.&#x27;, &#x27;Via dei Gelsomini, 153&#x27;, &#x27;Salerno&#x27;, NULL, &#x27;84100&#x27;, &#x27;Italy&#x27;);INSERT INTO `suppliers` VALUES (27, &#x27;Escargots Nouveaux&#x27;, &#x27;22, rue H. Voiron&#x27;, &#x27;Montceau&#x27;, NULL, &#x27;71300&#x27;, &#x27;France&#x27;);INSERT INTO `suppliers` VALUES (28, &#x27;Gai pâturage&#x27;, &#x27;Bat. B 3, rue des Alpes&#x27;, &#x27;Annecy&#x27;, NULL, &#x27;74000&#x27;, &#x27;France&#x27;);INSERT INTO `suppliers` VALUES (29, &#x27;Forêts d\\&#x27;érables&#x27;, &#x27;148 rue Chasseur&#x27;, &#x27;Ste-Hyacinthe&#x27;, &#x27;Québec&#x27;, &#x27;J2S 7S8&#x27;, &#x27;Canada&#x27;);COMMIT;SET FOREIGN_KEY_CHECKS = 1;\n十三、总结\n\n\n","categories":["大数据"],"tags":["数据操作","SQL","数据库"]},{"title":"以太网和IP","url":"/post/ab626e9a.html","content":"摘要：局域网技术的概述，IP基本原理以及IP子网划分\n\n本期内容较为杂乱且基础，故列出以下大致目录\n\n早期以太网技术\n全双工与半双工\nMDI与MDIX\nCSMA/CD\n以太网流量控制\n现代以太网技术\nWLAN技术\nCSMA/CA\n广域网基本原理\n常见接口\nIP基本原理\n\n\n\n早期以太网技术\n\n\n\n名称\n速率\n介质类型\n最大线缆长度\n\n\n\n\n10BASE5\n10 Mbps\n粗同轴电缆\n500m\n\n\n10BASE2\n10 Mbps\n细同轴电缆\n200m\n\n\n10BASE-T\n10 Mbps\n双绞线\n100m\n\n\n\n以10BASE5为例，10表示传输速率最高为10Mbps，5表示最大线缆长度为500m，仍可使用中继器将其延长，但最大长度不超过2000m。10BASE-T为常见的网线\n\n集线器和中继器的工作方式都为半双工\n光纤的工作方式为全双工\n半双工指在同一时间两端只能发送或接受信号，全双工则能同时收发信号并且不会产生冲突。\nMDI和MDIX\n\n\n\n\n主机网卡(MDI)\n路由器以太口(MDI)\n交换机/集线器接入口(MDIX)\n交换机/集线器级连口（MDI）\n\n\n\n\n主机网卡(MDI)\n交叉线\n交叉线\n直连线\nN/A\n\n\n路由器以太口(MDI)\n交叉线\n交叉线\n直连线\nN/A\n\n\n交换机/集线器接入口(MDIX)\n直连线\n直连线\n交叉线\n直连线\n\n\n交换机/集线器级连口(MDI)\nN/A\nN/A\n直连线\n交叉线\n\n\n同类接口互连用交叉线，异类接口互连用直连线\n\n\n\n\n\n\n\nCSMA/CD\n目的：解决总线型拓扑结构中半双工的收发冲突\n工作机制：载波侦听-&gt;空闲-&gt;抢占-&gt;检测冲突-&gt;随即退避-&gt;退避期满，继续发送\n缺点：延迟高\n\n数据的发送方式：单播，组播，广播\n数据链路层的以太网流量控制（防止传输速率太快导致数据丢失）方式：在半双工线路上采用背压式流控，接收方反向发送电压信号制造冲突，使发送方停止发送：在全双工线路上采用802.3 PAUSE流控接收方向保留组播地址01-80-C2-00-00-01发送PAUSE帧，通知发送方停止发送\n\n现代以太网技术\n现代以太网采用交换机取代了中继器和集线器进行以太网拓扑，隔离冲突域，避免冲突域过大，进一步扩大物理连接范围，提高以太网带宽利用率，增加吞吐量，适应不同的速率和不同的双工状况。\nWLAN技术\n无线覆盖原则：蜂窝式覆盖。任意相邻区域使用无频率交叉的频道，如1、6、11频道；适当调整发射功率，避免跨区域同频干扰；蜂窝式无线覆盖实现无交叉频率重复使用\n\nCSMA/CA（载波侦听多点接入／避让机制）\n\n无线网络典型部署：热点覆盖、办公地点无线互联\n\n广域网基本原理\n目的：局域网主要完成工作站、终端、服务器等在较小物理范围内的互联，只能解决局部的资源共享；广域网可以使相距遥远的局域网互相连接起来，远距离传输数据、语音、视频等，实现大范围的资源共享\n\n广域网连接方式：专线方式、电路交换方式、分组交换方式\n接口线缆\nV.24和V.35均为串行接口\nG口（以太网口）默认数据链路层协议802.3，S口（串口）默认数据链路层协议PPP。根据不同物理层介质，数据链路层选择不同的协议。\n以下接口线缆非仅广域网中使用\n\n\n\n\n\n\nIP基本原理\nIP相关协议（网络层）：ICMP、IGMP、ARP、RARP\nIP的作用：标识节点和链路 ①用唯一的IP地址标识每一个节点②用唯一的IP网络号标识每一个链路；\n寻址和转发①确定节点所在网络的位置，进而确定节点所在的位置②IP路由器选择适当的路径将IP包转发到目的节点；\n适应各种数据链路 ①根据链路的MTU对IP包进行分片和重组 ②为了通过实际的数据链路传递信息，须建立IP地 址到数据链路层地址的映射\n\nIP网络由多个网段构成，每个网段对应一个链路 ，路由器负责将网段连接起来，适配链路层 协议，在网络之间转发数据包\n\n网络号用于区分不同的IP网络、主机号用于标识该网络内的一个IP节点\n\n版本（Version）：用于标识封装是IPv4/IPv6\n头长度（Internet Header Length,IHL）：描述数据包头的内容长度\n总长度（Total Length）：数据包总长度，字段长16Bit，数据包最长为65535B\n标识（Identification）：标识某个分片来自于哪个数据包\n标志（Flags）：标识数据包是否允许分片\nFragment Offset：分片偏移，用于描述分片在数据包中的位置\n生存时间（Time to Live,TTL）：该数据包允许经过的最多路由器数量（每经过一个路由器值-1，0时丢弃）\n协议（Protocol）：标识上层协议TCP,6/UDP,17（协议号）\n头校验和（Header Checksum）：用于检查包头完整性\n源地址Source Address和目的地址Destination Address：标识数据包的源节点和目的节点IP地址\n\nA类IP地址：1.0.0.0~126.255.255.255（127为回环测试，127.0.0.1通常表示本机，0.0.0.0通常用于路由器指定默认路由），每个A类网络有2^24个A类IP地址，2^24-2个可用主机数\nB类IP地址：128.0.0.0~191.255.255.255，每个B类网络有2^16个B类IP地址，2^16-2个可用主机数\nC类IP地址：192.0.0.0~223.255.255.255，每个C类网络有2^8个C类IP地址，2^8-2个可用主机数\nD类IP地址：第一个八位段1110开头，取值224~239，通常为组播地址\nE类IP地址：11110开头，保留用于研究\n网段（网络地址）：主机号全为0；网段广播（广播地址）：主机号全为1\nARP：将IP解析为MAC，RARP为反向ARP解析\n\n若目的地址所处网络号与本机所处网络司号相同，则目的处于直连网段；\n①处于同一网段，主机可以与其直接通信，此时主机首先解析目的主机IP地址所对应的硬件地址，随即将IP包以此硬件地址为目的地址封装成帧，由直接连结此网段的接口发送给目的主机\n②如果属于不同网段，则主机需要将IP包交给网关去处理，此时主机根据网关的IP地址解析其物理地址，随即将IP包以此硬件地址为目的地址封装成帧，由直连此网段的接口发送给网关\n\n路由器收到IP包首先检查IP包的目的地址是不是自己，是的话就接收此包并将其解封装所得数据交给上层协议处理，如果目的IP不是自己\n①处于同一个直连网段，可以与其直接通信，此时路由器首先解析目的IP地址所对应的硬件地址，随即将IP包以此硬件地址为目的地址封装成帧，由此直接连接此网段的接口发给目的主机\n②如果处于不同网段，则需要交给下一跳路由器处理，此时根据路由器上面的路由表查出下一跳的IP地址，解析出一下跳的硬件地址，随即将IP包以此硬件地址为目的地址封装成帧，由此直接连接此网段的接口发给下一跳的路由器\n\n\nIP子网划分\n子网划分方法：在主机号中划分出子网号，达到在自然分类中再次划分主机的目的\n\n得到一个IP地址首先判断在自然分类中他的网络号的位数，再通过给出的位数相减得到子网号位数；得到一个16进制子网掩码首先将其转换为二进制，再判断子网号位数，用自然分类得出网络地址和广播地址的方式就能得出子网划分后的地址的网络地址/广播地址。\n\n可用主机数：2^（主机位数）-2  //此时的主机位数同自然分类中的主机位数-子网号位数（在告知主机数和IP时，用2^（主机位数）-2&gt;=主机数，来算出主机位数和子网位数即可得出子网掩码）\n\n\n可用子网数：2^（子网位数）（在告知子网数和IP时，用2^（子网位数）&gt;=子网数，来算出子网位数即可得出子网掩码）\n可用主机范围：网络地址+1~广播地址-1\nVLSM和CIDR\n子网划分的局限性 ：无法实现把网络划分为不同大小的子网，常常会浪费许多主机地址 ，使用VLSM(Variable Length Subnet Mask，可变长子网掩码）可以允许使用多个子网掩码划分子网，使组织的IP地址空间得到更有效的利用\nCIDR(Classless Inter-Domain Routing, 无类域间路由） 消除了自然分类地址和子网划分的界限、将网络前缀相同的连续IP地址组成CIDR地址块、支持强化地址汇聚\n题目示例\n基于CIDR划分子网\n\n请根据10.0.0.0/8划分4个子网，并给出每个子网的网络地址、广播地址、可用IP地址范围和子网掩码。\n2^M&gt;=4,M&gt;=2\n8+2=10位，255.192.0.0\n10.0.0.0  10.63.255.255   10.0.0.1~10.63.255.254\n10.64.0.0  10.127.255.255   10.64.0.1~10.127.255.254\n10.128.0.0  10.191.255.255   10.128.0.1~10.191.255.254\n10.192.0.0  10.255.255.255   10.192.0.1~10.255.255.254\n\n请根据172.16.96.0/19划分4个子网，并给出每个子网的网络地址、广播地址、可用IP地址范围和子网掩码。\n2^M&gt;=4,M&gt;=2\n子网掩码：19+2=21；255.255.248.0\n172.16.96.0  172.16.103.255  172.16.96.1~172.16.103.254\n172.16.104.0  172.16.111.255  172.16.104.1~172.16.111.254\n172.16.112.0  172.16.119.255   172.16.112.1~172.16.119.254\n172.16.120.0  172.16.127.255   172.16.120.1~172.16.127.254\n\n请根据IP地址为100.100.100.100/11，计算该IP地址所属网段的网络地址、广播地址、可用IP地址范围和子网掩码。\n100.011 00000.0.0=100.96.0.0\n100.011 11111.255.255=100.127.255.255\n可用IP地址范围：100.96.0.1~100.127.255.254\n255.224.0.0\n\n请根据IP地址为200.200.200.200/27，计算该IP地址所属网段的网络地址、广播地址、可用IP地址范围和子网掩码。\n200.200.200.110 11111\n200.200.200.192  200.200.200.223\n200.200.200.193~200.200.200.222\n255.255.255.224\n\n\n\n\n基于VLSM划分子网\n\n某公司有A、B、C、D四个部门，计算机数量分别是100台、55台、29台、20台。该公司拟通过192.168.1.0/24划分子网，请给出每个子网的网络地址、广播地址、可用IP地址范围和子网掩码。\nA：2^n-2&gt;=100,n&gt;=7,32-7=25\n192.168.1.0 0000000:\n192.168.1.0  192.168.1.127   192.168.1.1~192.168.1.126\nB；2^n-2&gt;=55,n&gt;=6;32-6=26\n192.168.1.1 0 000000:\n192.168.1.128  192.168.1.191  192.168.1.129~192.168.1.190\nC:2^n-2&gt;=29,n&gt;=5;32-5=27\n192.168.1.110 00000:\n192.168.1.192 192.168.1.223  192.168.1.193~192.168.1.222\nD:2^n-2&gt;=20,n&gt;=5;32-5=27\n192.168.1.111 00000:\n192.168.1.224  192.168.1.255  192.168.1.225~192.168.1.254\n\n某公司向运营商（ISP）申请到200.200.200.160/27的网络地址，数据中心有10台服务器，5个公网IP用作NAT（网络地址转换），其他IP用作网络设备之间提供点对点服务。请划分子网，并给出每个子网的网络地址、广播地址、可用IP地址范围和子网掩码。\n\n\n地址聚合\n\n某企业分配给产品部的IP地址块为192.168.31.192/26，分配给市场部的IP地址块为192.168.31.160/27，分配给财务部的IP地址块为192.168.31.128/27，那么这三个地址块经过聚合后的地址为（C  ）\nA、192.168.31.0/25                B、192.168.31.0/26\nC、192.168.31.128/25              D、192.168.31.128/26\n比较，相同的部分均为192.168.31，总共24位相同，最后一组换成二进制再比较：\n192.168.31.11000000\n192.168.31.10100000\n192.168.31.10000000\n比较得出，总共25位相同，那么，聚合后的IP（网络前缀）就为192.168.31.10000000，将10000000转为十进制为128，聚合后的IP就是192.168.31.128。可直接写成192.168.31.128/25。\n因为有25位相同，也以，子网掩码网络号就是25位，主机号剩下7位，网络号全为1，主机号全为0，即11111111.11111111.11111111.10000000，转换为十进制，255.255.255.128。\n\n有４条路由：172.18.129.0/24, 172.18.130.0/24, 172.18.132.0/24, 172.18.133.0/24,如果进行路由会聚，能覆盖这４条路由的地址是（A ）。\nA．172.18.128.0/21                B. 172.18.128.0/22\nC.172.18.130.0/22                 D. 172.18.132.0/23\n首先从左到右开始，把不同的那个ip数字换算成二进制，\n即 129 二进制 1000 0001 130 二进制 1000 0010 132 二进制 1000 0100 133 二进制 1000 0101\n这四个数的前五位相同都是10000，所以加上前面的172.18这两部分相同的位数，网络号就是8+8+5=21。把共同的保留下来，其他全部为0，就是路由汇聚的地址。10000000转换回十进制就是128。所以，路由汇聚的ip地址就是172.18.128.0，最终就是172.18.128.0/21。\n\n为缩小路由表，请根据192.168.20.0/24、192.168.21.0/24、192.168.22.0/24、192.168.23.0/24等4个子网进行地址聚合，求出超网地址。（不同的号位为0）\n192.168.20.0/24 192.168.00010100.0\n192.168.21.0/24 192.168.00010101.0\n192.168.22.0/24 192.168.00010110.0\n192.168.23.0/24 192.168.00010111.0\n故可得超网地址为：192.168.20.0/22\n\n","categories":["旧日"],"tags":["通信","IP","路由"]},{"title":"小记数字图像处理","url":"/post/fbbe638c.html","content":"数字图像处理第3章图像增强\n若数学公式加载失败，请移步主站\nγ校正\n非线性部件的输人-输出特性，都是一个能够反映各自特性的幂函数，即如果输人的光信号强度为L,输出的电信号强度为I,则输入、输出之间的关系满足\nI=c⋅LγI = c · L^γI=c⋅Lγ\nc为放大倍数（常数），γ为幂函数的指数，用于衡量非线性部件的转换特性，称为幂律转换特性，又称γ特性，对非线性关系的校正称为γ校正\n\n对比度计算公式\nC=∑δδ(i,j)2Pδ(i,j)C=\\sum_{\\delta}\\delta(i,j)^2P_\\delta(i,j)C=∑δ​δ(i,j)2Pδ​(i,j)\n计算方式有四近邻或八近邻，略\n线性对比度展宽\n线性对比度展宽处理，实际上是图像灰度值的线性映射。假设处理后图像与处理前图像的量化级数相同，即处理前后图像的灰度分布范围均为[0,255],则如果需要进行对比度展宽,从原理上说，只能通过抑制非重要信息的对比度来腾出空间给重要信息进行对比度的展宽。\n设原图像的灰度为 f(i,j),处理后图像的灰度为g(i, j),设原图重要景物灰度在[fa，fb]范围内，处理后灰度分布在[ga，gb]内，α&lt;1,γ&lt;1,表示对非重要景物的抑制，β&gt;1表示重要景物的对比度展宽增强。\n对比度线性展宽计算公式\ng(i,j)={αf(i,j),0≤f(i,j)&lt;faβ(f(i,j)−fa)+ga,fa≤f(i,j)&lt;fbγ(f(i,j)−fb)+gb,fb≤f(i,j)&lt;255g(i,j) =\n\\begin{cases}\n\\alpha f(i,j),  &amp; 0\\le f(i,j)\\lt f_a \\\\[2ex]\n\\beta(f(i,j)-f_a)+g_a, &amp; f_a\\le f(i,j)\\lt f_b \\\\[2ex]\n\\gamma(f(i,j)-f_b)+g_b, &amp;f_b\\le f(i,j)\\lt 255\n\\end{cases}\ng(i,j)=⎩⎨⎧​αf(i,j),β(f(i,j)−fa​)+ga​,γ(f(i,j)−fb​)+gb​,​0≤f(i,j)&lt;fa​fa​≤f(i,j)&lt;fb​fb​≤f(i,j)&lt;255​\n(i=1,2,…,m;j=1,2,…,n)\n其中，α=gafa,β=gb−gafb−fa,γ=255−gb255−gb\\alpha =\\frac{g_a}{f_a},\\beta =\\frac{g_b-g_a}{f_b-f_a},\\gamma =\\frac{255-g_b}{255-g_b}α=fa​ga​​,β=fb​−fa​gb​−ga​​,γ=255−gb​255−gb​​，图像的大小为m*n\n当得到一张矩阵形式的灰度图像时，若要进行线性对比度展宽，需先画出灰度直方图，确认原图重要景物的灰度分布范围fa，fb，根据需要确认处理后的灰度范围ga，gb，代入公式进行计算\n灰级窗与灰级窗切片\n灰级窗是将灰度值在一定范围内的目标进行对比度增强，使范围内像素映射到另一范围，使其达到分离图像区域（切片）以及高亮（映射）的效果，灰级窗映射计算公式\ng(i,j)={0,0≤f(i,j)&lt;faβ(f(i,j)−fa),fb≤f(i,j)&lt;fa0,fb≤f(i,j)&lt;255g(i,j) =\n\\begin{cases}\n0,  &amp; 0\\le f(i,j)\\lt f_a \\\\[2ex]\n\\beta(f(i,j)-f_a), &amp; f_b\\le f(i,j)\\lt f_a \\\\[2ex]\n0, &amp;f_b\\le f(i,j)\\lt 255\n\\end{cases}\ng(i,j)=⎩⎨⎧​0,β(f(i,j)−fa​),0,​0≤f(i,j)&lt;fa​fb​≤f(i,j)&lt;fa​fb​≤f(i,j)&lt;255​\n(i=1,2,…,m;j=1,2,…,n)\n其中，β=255fb−fa\\beta =\\frac{255}{f_b-f_a}β=fb​−fa​255​，图像的大小为m*n\n灰级窗切片计算公式\ng(i,j)={0,0≤f(i,j)&lt;fa255,fa≤f(i,j)&lt;fb0,fb≤f(i,j)&lt;255g(i,j) =\n\\begin{cases}\n0,  &amp; 0\\le f(i,j)\\lt f_a \\\\[2ex]\n255, &amp; f_a\\le f(i,j)\\lt f_b \\\\[2ex]\n0, &amp;f_b\\le f(i,j)\\lt 255\n\\end{cases}\ng(i,j)=⎩⎨⎧​0,255,0,​0≤f(i,j)&lt;fa​fa​≤f(i,j)&lt;fb​fb​≤f(i,j)&lt;255​\n(i=1,2,…,m;j=1,2,…,n)，图像的大小为m*n\n动态范围调整\n线性动态范围调整\n线性动态范围是先进行亮暗限幅，即将图像中黑的像素值调大,由0调整到a，白的像素值调小，由255调整到b。然后将区域[a,b]进行线性映射到[0,255]范围内。使一部分较暗的像素点以及较亮的像素点进入饱和，中间部分的像素值因为可以进行对比度扩展，而使得其细节部分看的更加清楚，结果是目标区域的像素得到增强，两边区域的细节丢失。线性动态范围调整公式\ng(i,j)={0,f(i,j)&lt;fa255b−a[f(i,j)−a],fa≤f(i,j)&lt;fb255,f(i,j)&gt;fbg(i,j) =\n\\begin{cases}\n0,  &amp; f(i,j)\\lt f_a \\\\[2ex]\n\\frac{255}{b-a}[f(i,j)-a], &amp; f_a\\le f(i,j)\\lt f_b \\\\[2ex]\n255, &amp;f(i,j)\\gt f_b\n\\end{cases}\ng(i,j)=⎩⎨⎧​0,b−a255​[f(i,j)−a],255,​f(i,j)&lt;fa​fa​≤f(i,j)&lt;fb​f(i,j)&gt;fb​​\n(i=1,2,…,m;j=1,2,…,n)，图像的大小为m*n,[a,b]为灰度变化范围\n非线性动态范围调整\n非线性动态范围调整的作用是抑制高亮度区域，扩展低亮度区域，一定程度解决了景物中高亮度区的信号掩盖暗区信号问题。\n非线性动态范围调整的计算公式\ng(i,j)=c · lg(1+f(i,j)) (i=1,2,…,m;j=1,2,…,n)\n首先计算灰度变化范围lg(灰度变化范围+1)\\frac{灰度变化范围}{lg(灰度变化范围+1)}lg(灰度变化范围+1)灰度变化范围​，再计算g(i,j)\n直方图均衡化\n对图像中像素个数多的灰度值进行展宽，对像素个数多的灰度值进行进行归并，设f(i,j),g(i,j)(i=1,2,…,M;j=1,2,…,N)分别为原图像和处理后图像图像的灰度变化范围为[0，255]，方法如下\n①求原图[f(i,j)]M∗N[f(i,j)]_{M*N}[f(i,j)]M∗N​的灰度直方图，设用256维的向量hfh_fhf​表示\n②由hfh_fhf​求原图的灰度分布概率，记作pfp_fpf​,则\npf(i)=1Nf⋅hf(i),i=0,1,2,…,255p_f(i)=\\frac{1}{N_f} · h_f(i), i=0,1,2,…,255\npf​(i)=Nf​1​⋅hf​(i),i=0,1,2,…,255\nNfN_fNf​=M*N,为图像的总像素个数\n③计算图像各个灰度值的累计分布概率，记作pap_apa​，则\npa(i)=∑k=0ipf(k),i=0,1,2,…,255pa(0)=0p_a(i)=\\sum_{k=0}^i p_f(k), i=0,1,2,…,255\np_a(0)=0\npa​(i)=k=0∑i​pf​(k),i=0,1,2,…,255pa​(0)=0\n④进行直方图均衡化计算处理后像素值g(i,j)=255 · pap_apa​(k)\n同态滤波\nf(x,y)=i(x,y) · r(x,y)\n两边取对数得lnf(x,y)=lni(x,y)+lnr(x,y)\n两边进行傅里叶变换得F(u,v)=I(u,v)+R(u,v)\n用频域滤波函数H(u,v)进行滤波得H(u,v)F(u,v)=H(u,v)I(u,v)+H(u,v)R(u,v)，Hf(u,v)=Hi(u,v)+Hr(u,v)H_f(u,v)=H_i(u,v)+H_r(u,v)Hf​(u,v)=Hi​(u,v)+Hr​(u,v)\n反变换到空域得hf(x,y)=hi(x,y)+hr(x,y)h_f(x,y)=h_i(x,y)+h_r(x,y)hf​(x,y)=hi​(x,y)+hr​(x,y)\n取指数得同态滤波图像\ng(x,y)=exp|hf(x,y)h_f(x,y)hf​(x,y)|=exp|hi(x,y)h_i(x,y)hi​(x,y)|=exp|hr(x,y)h_r(x,y)hr​(x,y)|\n伪彩色\n以上为数字图像处理（科学出版社）第3章给出的图像增强方法，附习题\n\n","categories":["旧日"],"tags":["电子","图像处理"]},{"title":"大数据套件安装","url":"/post/datainstall.html","content":"大数据套件安装\n本文记录了jdk，FineBI，kettle的安装过程。\njdk安装\n把jdk1.8.0_301.zip文件解压缩，放在某个目录中，本教程中是D:\\program files\\\n\n\n\n确认jdk安装成功，在cmd中输入 java -version\n\nFineBI安装使用\nBI：business intelligence\nFineBI介绍\n1：数据可以帮助我们做什么 ？\n​\t1-1  历史数据分析：分析已有的数据，对之前发生的事情做分析，找到原因\n​\t1-2  实时数据分析：对当下发生的数据进行处理，及时展示数据信息。让企业关注实时发展动态\n​\t1-3  未来数据：对未来即将发生的事情进行预测，帮助企业调整方向\n2：FineBI有哪些优势\n​\t1：个人用户完全免费，企业用户收费较低\n​\t2：自动式BI工具，企业或者个人自己搭建服务器，就可以访问BI版块\n​\t3：兼容多种数据源\n​\t4：零编码设计，让数据可视化工具通过拖拉拽就可以完成日常的需求\n​\t5：有超强的数据录入能力，在数据源加载以后依然可以修改、删除补录数据\n3：FineBI的使用场景\n​\tFineBI在大数据的场景中，使用一般是将我们抽取的数据源加载完毕后，满足数据分析要求的数据或者指标的数据在进行BI开发。\nFineBI的安装\n第一步：找到软件，右键安装\n第二步：配置安装路径\n第三步：修改jvm内存（默认-本机内存的二分之一）\n第四步：安装后运行之激活码的获取\n第五步：启动界面分析\n\n第六步：密码设置\n第七步：数据库的选择\n第八步：页面介绍\n\n网页开发优点\n如果企业中，我们将FineBI部署在一个服务器中，所有人都可以访问浏览器访问这个服务器进行BI开发\n1、此时所有的人的使用开发环境是相同\n2、方便数据源的使用，绑定或者提取一次数据源所有的开发者都可以使用\n3、开发结果所有的人都可以通过浏览器的方式查看\n4、可以快速分析数据报表（表格和图形）给非专业人事看\n开发前的数据准备\n1、大数据开发，既不产生数据，也不消费数据\n​     业务部门各个数据源提供生产数据（抽）\n​    BI开发、数据分析师、运营部门、产品经理\n因为BI开发都是大数据的下游部门，所以开发之前必须有数据！！！\n操作：把我们提供给大家的sql脚本，导入到数据库中\n1：启动datagrip ，选择一个数据库连接，找到结构，右键 run sql Script\n\n2：找到要执行sql脚本文件\n\n3：导入数据结果\n\n数据准备\n1：创建数据库连接\n\n2：创建分组&amp;业务包\n\n3：给业务包添加数据\n\n4：最重要的一步\n\n仪表版内容\n\n1：新建仪表板\n\n2：选择仪表板样式\n\n3：选择数据源\n\n4：页面编辑界面介绍\n\n5：点击分区柱形图\n6：拖拽字段\n\n7：通过自定义图标将下面的展示改为线\n8：修改图表颜色\n第九步：取消图例\n\n不同地区访问人数表\n1：加载数据源\n\n第二步：选择分析数据表\n\n第三步：更新业务数据包\n\n第四步：进入仪表盘\n\n第五步：选择要分析的数据表\n\n第六步：选择 地图\n\n第七步：构建地图（添加横轴、纵轴）\n\n总结：大屏展示的步骤\n1：连接内部（外部的数据库）-找到要展示bi库\n2：数据准备、 创建分组，根据数据连接创建业务包【注意！！一定要记得点更新】\n3：进入仪表板\n​\t3-1：创建组件\n​\t3-2：加载数据源\n​\t3-3：配置\n拓展：\n​\t遇到问题！！！记载页面数据发现有点卡\n1：进入安装目录下的bin文件夹， 找到 finebi.vmoptions\n集团数据分析_数据准备\n1：找到数据需要数据\n\n2：分析数据之前的关系\n\n3：自主选取数据，选择字段\n\n4：数据自助选取结果\n\n5：添加新增了-毛利额\n\n6：创建集团分析源表\n\n7：查看源数据集是否创建成功\n\n8：创建仪表盘\n\n集团数据分析_月销售额\n1：使用sql分析\n\n2：创建图表\n\n3：解决时间的问题&amp;毛利额问题\n\n同比&amp;环比【拓展】\n1：同比是本期与同期做对比   eg： 2020-1    2019-1\n​\t\t–本期指一定时期如月、季度、年\n​\t\t同期\n2：环比：表示连续2个统计周期内的量的变化比  eg：2020-1   2020-2\n\n\n4：修改组件颜色\n\nKettle安装使用\nkettle是一个etl工具，etl是进行数据抽取 转换 加载\nkettle用java开发的，所以要安装jdk（java development kit），\n\nwindows下使用 kettle打开Spoon.bat\n\n\nmac 下打开 kettle 使用终端 cd  切换到 你解压的kettle的目录下，  ==sh ./spoon.sh==\n\ntxt数据转换Excel数据\n\n新建转换\n\n\n\n创建文本输入组件\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n获取好字段之后，点击确定保存即可。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n当看到流程上面有绿色的对勾 表示转换成功了\n\n\nExcel数据转换Mysql数据\n\n\n找到要转换为excel文件\n\n\n打开DG或者是使用命令行进入到mysql数据库，创建一个数据库\nCREATE DATABASE kettle_db CHARSET =utf8;\n\n\n配置kettle和mysql连接，\n\n\n\n\nkettle_demo/type=javax.sql.DataSource  kettle_demo/driver=com.mysql.cj.jdbc.Driverkettle_demo/url=jdbc:mysql://192.168.88.100:3306/kettle_demo?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=GMTkettle_demo/user=rootkettle_demo/password=123456\n\n\n先去新建输入和输出组件\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nctrl+s 将流程进行保存，保存之后，点击执行即可。\n\n\n错误问题\n\n\n找到自己的mysql的配置文件 my.ini\n\ndefault_authentication_plugin 这个选项后面的值 改为\ndefault_authentication_plugin=mysql_native_password\n保存这个文件， 打开 win+R， 输入services.msc，重启此服务\nMysql表间转换\n设置数据库连接的共享\n\n\n\n\n\n\n保存并执行即可\n\n插入-更新组件\n\n清空 new_user 表中的数据（右键Database Tools Truncate）\n先将 t_user 表中的张三 改为 20岁，重新的去执行 刚才的 table_to_table 这个脚本，将t_user表中的数据 ，添加到 new_user 表。\n\n\n\n\n保存并执行\n\nswitch-case组件\n1， \n\n\n\n\nexcel输出男和女的时候，配置基本一样，女的配置参照男的截图（3-4）\n保存这个流程 并执行。\n\nSQL脚本组件\n\n设置转换参数\n\n\n\n\n接下来就可以保存去执行了\njob开发\n\n新建job\n先将job保存完毕之后，再去设置转换\n\n\n==Kettle中文网 – Kettle安装、Kettle使用、Kettle中文==\n","categories":["大数据"],"tags":["大数据"]},{"title":"集成学习RF-Adaboost-GBDT","url":"/post/Ensemble-Learning.html","content":"集成学习\n1. 集成学习 (Ensemble Learning)\n集成学习（Ensemble Learning）是一种机器学习范式，其核心思想是 组合多个学习器 (Individual Learners) 来完成学习任务。与单个学习器相比，集成学习通常能够获得比单一最优学习器更好的泛化性能。\n\n核心思想: 通过将多个弱学习器（Weak Learners）组合起来，可以形成一个强学习器（Strong Learner）。\n为什么有效: 集成学习能够从不同角度学习数据，通过结合多个模型的预测结果来降低整体误差。具体来说：\n\n统计: 当学习任务的真实模型复杂，单个模型可能因样本不足而陷入局部最优。集成学习在搜索空间中可能找到更接近全局最优的解。\n计算: 某些学习算法可能因计算限制而无法获得最优解。集成学习通过组合多个次优解来逼近最优。\n表示: 真实任务可能非常复杂，无法通过一个简单的模型来准确描述。集成学习可以通过组合多个模型来表达更复杂的函数关系。\n\n\n关键点: 集成学习要求个体学习器好而不同。\n\n“好”: 个体学习器自身的性能不能太差，至少不能低于随机猜测的水平。\n“不同”: 个体学习器之间应该具有差异性，即预测结果不应高度相关。差异性越大，集成后效果越好。\n\n\n\n1.1 集成学习的类型\n根据个体学习器的生成方式，目前的集成学习方法大致可以分为两大类：\n\n并行集成方法 (Parallel Ensemble Methods):\n\n个体学习器之间不存在强依赖关系，可以同时生成。\n代表：Bagging (Bootstrap Aggregating) 及其变种 随机森林 (Random Forest)。\n主要用于降低方差 (Variance)，提高模型稳定性。\n\n\n串行集成方法 (Sequential Ensemble Methods):\n\n个体学习器之间存在强依赖关系，必须串行生成。后一个学习器需要根据前一个学习器的表现进行调整（通常是关注前一个学习器预测错误的样本或难以预测的区域）。\n代表：Boosting 及其变种 AdaBoost (Adaptive Boosting)、Gradient Boosting (梯度提升) (GBDT, XGBoost, LightGBM 等)。\n主要用于降低偏差 (Bias)，提高模型精度。\n\n\n\n1.2 结合策略 (Combining Strategy)\n在生成个体学习器后，如何将它们的预测结果进行组合以获得最终的集成结果？常用的结合策略包括：\n\n\n平均法 (Averaging):\n\n\n对于回归任务，简单平均 (Simple Averaging):\nH(x)=1T∑i=1Thi(x)H(x) = \\frac{1}{T} \\sum_{i=1}^{T} h_i(x)\nH(x)=T1​i=1∑T​hi​(x)\n\n\n加权平均 (Weighted Averaging):\nH(x)=∑i=1Twihi(x)s.t.∑i=1Twi=1,wi≥0H(x) = \\sum_{i=1}^{T} w_i h_i(x) \\quad \\text{s.t.} \\quad \\sum_{i=1}^{T} w_i = 1, w_i \\ge 0\nH(x)=i=1∑T​wi​hi​(x)s.t.i=1∑T​wi​=1,wi​≥0\n通常个体学习器性能越好，权重越大。\n\n\n\n\n投票法 (Voting):\n\n\n对于分类任务。\n\n\n绝对多数投票 (Majority Voting): 投某一类票数超过总票数一半，预测为该类；否则拒绝预测（或交给其他方法）。\nH(x)={cjif ∑i=1TI(hi(x)=cj)&gt;0.5∑k=1N1rejectotherwiseH(x) = \\begin{cases} c_j &amp; \\text{if } \\sum_{i=1}^{T} \\mathbb{I}(h_i(x) = c_j) &gt; 0.5 \\sum_{k=1}^{N} 1 \\\\ \\text{reject} &amp; \\text{otherwise} \\end{cases}\nH(x)={cj​reject​if ∑i=1T​I(hi​(x)=cj​)&gt;0.5∑k=1N​1otherwise​\n其中 I(⋅)\\mathbb{I}(\\cdot)I(⋅) 是指示函数。\n\n\n相对多数投票 (Plurality Voting): 预测为得票最多的类。\nH(x)=arg⁡max⁡cj∑i=1TI(hi(x)=cj)H(x) = \\arg \\max_{c_j} \\sum_{i=1}^{T} \\mathbb{I}(h_i(x) = c_j)\nH(x)=argcj​max​i=1∑T​I(hi​(x)=cj​)\n\n\n加权投票 (Weighted Voting):\nH(x)=arg⁡max⁡cj∑i=1TwiI(hi(x)=cj)s.t.∑i=1Twi=1,wi≥0H(x) = \\arg \\max_{c_j} \\sum_{i=1}^{T} w_i \\mathbb{I}(h_i(x) = c_j) \\quad \\text{s.t.} \\quad \\sum_{i=1}^{T} w_i = 1, w_i \\ge 0\nH(x)=argcj​max​i=1∑T​wi​I(hi​(x)=cj​)s.t.i=1∑T​wi​=1,wi​≥0\n\n\n\n\n学习法 (Learning):\n\n通过一个独立的学习器（称为元学习器 (Meta-learner) 或 堆叠器 (Stacker)）来结合个体学习器的预测结果。\n代表：Stacking。先训练个体学习器，然后将个体学习器的输出作为新的特征，用于训练元学习器。\n\n\n\n2. 基于树模型的集成方法 (Tree-based Ensemble Methods)\n决策树是集成学习中最常用的个体学习器之一，因为它非线性、可以处理多种数据类型且易于实现。\n2.1 Bagging 与随机森林 (Random Forest)\n2.1.1 Bagging (Bootstrap Aggregating)\n\n原理: 通过 自助采样 (Bootstrap Sampling) 生成不同的数据集，并在每个数据集上独立训练一个决策树（或其他学习器）。\n自助采样: 从原始包含 m 个样本的数据集 D 中，有放回地随机抽取 m 个样本，构成新的数据集 D’。重复此过程 T 次，得到 T 个不同的训练集 D₁, D₂, …, Dₜ。\n个体学习器训练: 在每个数据集 Dᵢ 上独立训练一个决策树模型 hᵢ。这些树之间是并行的。个体决策树通常不进行剪枝或只进行少量预剪枝，因为Bagging的目标是通过组合降低方差，即使个体树的方差较高。\n预测:\n\n分类: 对新样本进行预测时，所有树独立给出预测结果，最后通过投票法（如相对多数投票）决定最终类别。\n回归: 对新样本进行预测时，所有树独立给出预测结果，最后通过简单平均法求平均值作为最终预测结果。\n\n\n优点:\n\n有效地降低方差，对噪声数据不那么敏感。\n个体学习器之间无依赖，可并行计算。\n自助采样会产生一部分未被采样的样本，称为 包外样本 (Out-of-Bag, OOB) 样本，可以用于模型的无偏估计，无需额外的验证集。平均约有 36.8% (1−1/m)m≈e−1≈0.368(1 - 1/m)^m \\approx e^{-1} \\approx 0.368(1−1/m)m≈e−1≈0.368 的原始样本不会出现在某个自助采样集中。\n\n\n缺点:\n\n不能降低个体学习器的偏差。\n模型的可解释性变差。\n\n\n\n2.1.2 随机森林 (Random Forest, RF)\n\n原理: 是 Bagging 的一个扩展。它在 Bagging 的基础上，在训练每个决策树时，在每个节点进行分裂时引入了特征随机性。\n特征随机性: 对于节点上的数据集，不再考虑所有的特征来选择最优分裂属性，而是从当前节点的特征集合中随机抽取一个包含 k 个特征的子集，再从这个子集中选择最优特征进行分裂。\n参数 k: 通常推荐 k = sqrt(d) (d为特征总数) 用于分类任务，k = d 或 k = d/3 用于回归任务。Scikit-learn 中 max_features 参数控制 k。\n为何引入特征随机性? Bagging 中，如果数据中存在一个或几个非常强的特征，那么几乎所有生成的树在根节点都会使用这些强特征进行分裂，导致生成的树之间高度相关，限制了方差的进一步降低。特征随机性强制每棵树使用不同的特征子集，增加了树之间的差异性，从而进一步降低了方差。\n随机森林的步骤:\n\n从原始数据集 D 中通过自助采样生成 T 个训练集 D₁, …, Dₜ\n对于每个训练集 Dᵢ，训练一棵决策树 hᵢ。在训练过程中，对于树的每个节点，从所有特征中随机选择 max_features 个特征子集，并仅基于这些子集选择最优分裂点。树的生长通常是完全分裂的（不进行剪枝），或者只进行少量预剪枝。\n集成 T 棵树的预测结果（分类投票，回归平均）。\n\n\n\n\n\n优点:\n\n相比 Bagging，由于引入特征随机性，进一步降低了模型方差，泛化能力更强。\n不容易过拟合（个体树的随机性使得它们不过于依赖训练数据的特定模式，且整体通过集成降低方差）。\n能够处理高维数据。\n可以自然地计算特征重要性 (Feature Importance)：通过某个特征在所有树中作为分裂特征时，平均带来的不纯度减少总量来衡量。\nOOB 样本可以用于内部评估，提供了一个无需额外验证集的性能估计。\n\n\n缺点:\n\n模型可解释性差。\n训练时间和预测时间随树的数量增加而增加。\n在某些数据集上，尤其是 Boosting 方法能够捕捉复杂相互作用的情况下，表现可能不如 Boosting 方法。\n\n\n\n特征重要性计算 (Feature Importance Calculation)\n随机森林能够计算特征重要性，这通常基于某个特征在森林中所有树中作为分裂特征时带来的平均不纯度减少（如使用 Gini 作为 criterion 时的 Gini 不纯度减少）。我们将变量重要性评分表示为 VIMVIMVIM，对于基于 Gini 指数的，记为 VIM(Gini)VIM^{(Gini)}VIM(Gini)。\n假设数据集有 ccc 个特征 X1,X2,X3,...,XcX_1, X_2, X_3, ..., X_cX1​,X2​,X3​,...,Xc​。现在要计算每个特征 XjX_jXj​ 的 GiniGiniGini 指数评分 VIMj(Gini)VIM_j^{(Gini)}VIMj(Gini)​，即特征 XjX_jXj​ 在随机森林所有决策树中节点分裂不纯度的平均改变量。\n如果在决策树 iii 中，特征 XjX_jXj​ 出现的节点集合是 MMM，那么 XjX_jXj​ 在第 iii 棵树中的重要性为：\nVIMij(Gini)=∑m∈MVIMjm(Gini)VIM_{ij}^{(Gini)} = \\sum_{m \\in M} VIM_{jm}^{(Gini)}\nVIMij(Gini)​=m∈M∑​VIMjm(Gini)​\n其中，VIMjm(Gini)VIM_{jm}^{(Gini)}VIMjm(Gini)​ 是特征 XjX_jXj​ 在树 iii 的节点 mmm 处分裂时带来的 Gini 不纯度减少量。\n假设随机森林 RFRFRF 中共有 nnn 棵树，那么特征 XjX_jXj​ 在整个随机森林中的原始总重要性为：\nVIMj(Gini)=∑i=1nVIMij(Gini)VIM_j^{(Gini)} = \\sum_{i=1}^{n} VIM_{ij}^{(Gini)}\nVIMj(Gini)​=i=1∑n​VIMij(Gini)​\n(注意：Scikit-learn 实现中通常是计算平均不纯度减少，可能是在累加前或累加后除以树的数量 nnn)。\n最后，把所有特征求得的原始重要性评分做一个归一化处理，得到最终的特征重要性得分：\nVIMj=VIMj(Gini)∑k=1cVIMk(Gini)VIM_j = \\frac{VIM_j^{(Gini)}}{\\sum_{k=1}^{c} VIM_k^{(Gini)}}\nVIMj​=∑k=1c​VIMk(Gini)​VIMj(Gini)​​\nScikit-learn 中的 random_state.feature_importances_ 属性提供了这个归一化后的得分数组。这个得分越高，表示该特征在模型预测中起到的作用越大。\nsklearn中的参数\n\n\n\n参数/属性\n描述\n默认值\n类型/选项\n重要性级别\n\n\n\n\nn_estimators\n森林中树的数量。 数量越多通常模型越稳健，但也增加计算开销。\n100\ninteger, optional\n高\n\n\ncriterion\n衡量分裂质量的函数。 常用的有 “gini” (基尼不纯度) 和 “entropy” (信息增益)。\n“gini”\nstring, optional (“gini”, “entropy”)\n中\n\n\nmax_depth\n树的最大深度。 限制深度有助于防止过拟合。None 表示树会完全生长直到叶子纯净或达到 min_samples_split 的限制。RF通常不限制深度以降低偏差，但可能会引入一些方差，通过集成解决。\nNone\ninteger or None, optional\n中/低\n\n\nmin_samples_split\n分裂内部节点所需的最小样本数。 数量太小可能导致过拟合。\n2\nint or float, optional\n中\n\n\nmin_samples_leaf\n叶子节点所需的最小样本数。 数量太小可能导致过拟合，数量太大有平滑模型作用。特别影响回归任务。\n1\nint or float, optional\n中\n\n\nmax_features\n寻找最佳分裂时考虑的特征数量。 控制特征随机性。auto 或 sqrt 通常指 sqrt(n_features)，log2 指 log2(n_features)，None 指 n_features。 这是 RF 区别于 Bagging 的关键参数。\n“auto”\nint, float, string or None, optional\n高\n\n\nbootstrap\n建树时是否采用有放回抽样 (bootstrap)。 True 开启随机性（Bagging的核心），False 使用整个数据集。RF 通常使用 True。\nTrue\nboolean, optional\n高\n\n\noob_score\n是否使用外包样本 (OOB) 评估模型的泛化准确性。 需要 bootstrap=True 才能计算。提供无需额外验证集的性能评估。\nFalse\nboolean, optional\n中\n\n\nn_jobs\n并行计算使用的CPU数量。 -1 表示使用所有可用的处理器。\nNone\nint or None, optional\n实用\n\n\nrandom_state\n随机状态/种子。 设置后可确保自助采样、特征随机性等的可复现性。\nNone\nint, RandomState instance or None, optional\n实用\n\n\nfeature_importances_\n[属性] 特征重要性系数。 拟合后可用此属性查看每个特征的重要性得分。基于特征在树中分裂节点时平均带来的不纯度减少计算并归一化。\nN/A\narray of shape = [n_features_]\nN/A\n\n\noob_score_\n[属性] 外包样本评估分数。 在 oob_score=True 且 bootstrap=True 时可用，存储计算出的 OOB 分数。\nN/A\nfloat\nN/A\n\n\nclasses_\n[属性] 模型知道的类别标签。 对于分类问题，这个属性存储了训练集中出现的唯一类别。\nN/A\narray of shape = [n_classes_] or list of arrays\nN/A\n\n\nn_features_\n[属性] 训练时使用的特征数量。\nN/A\nint\nN/A\n\n\nn_classes_\n[属性] 类别数量。 对于多分类，指类别的总数。\nN/A\nint or list\nN/A\n\n\n\n2.2 Boosting\n\n原理: 是一种迭代的集成方法，个体学习器之间是串行的。每次迭代都会根据前一次迭代的预测结果来调整样本权重（如 AdaBoost）或学习前一轮模型的残差或负梯度（如 GBDT），使得新的学习器更关注之前被错误预测的样本或难以预测的区域。\n核心思想: 每一棵树都尝试去弥补前面所有树的不足。\n常用个体学习器: 弱学习器，尤其是决策树桩 (Decision Stump)（深度为1的决策树）或非常浅的决策树。这是因为 Boosting 主要目的是降低偏差，而弱学习器本身偏差高方差低，通过Boosting组合后，偏差可以降低，同时保持较低的方差。使用浅树也能显著提高模型的泛化能力和训练速度。\n\n2.2.1 AdaBoost (Adaptive Boosting)\n\n\n原理: 通过不断修改样本的权重来训练一系列弱分类器。它会给错误分类的样本更高的权重，使得后续的弱分类器更关注这些样本。\n\n\n过程:\n\n\n初始化所有样本的权重相等，设为 1/m1/m1/m，其中 m 是样本总数。\n\n\n迭代 T 次，训练 T 个弱分类器 h₁, …, hₜ：\na.  使用当前样本权重分布 DtD_tDt​ 训练弱分类器 ht(x)h_t(x)ht​(x)。\nb.  计算当前弱分类器 hth_tht​ 在加权训练数据集上的分类误差率 ϵt\\epsilon_tϵt​：\nϵt=P(ht(xi)≠yi)=∑i=1mwi(t)I(ht(xi)≠yi)\\epsilon_t = P(h_t(x_i) \\neq y_i) = \\sum_{i=1}^{m} w_i^{(t)} \\mathbb{I}(h_t(x_i) \\neq y_i)\nϵt​=P(ht​(xi​)=yi​)=i=1∑m​wi(t)​I(ht​(xi​)=yi​)\nc.  计算当前弱分类器 hth_tht​ 的权重 αt\\alpha_tαt​（该分类器在最终集成结果中的重要性）：\nαt=12ln⁡(1−ϵtϵt)    \\alpha_t = \\frac{1}{2} \\ln \\left( \\frac{1 - \\epsilon_t}{\\epsilon_t} \\right)\nαt​=21​ln(ϵt​1−ϵt​​)\n\n这里的 ϵt\\epsilon_tϵt​ 必须小于 0.5（弱分类器性能必须好于随机猜测），否则算法停止。 ϵt\\epsilon_tϵt​ 越小，αt\\alpha_tαt​ 越大。\n\nd.  更新样本权重: 增加被 hth_tht​ 错误分类的样本的权重，减少被正确分类的样本的权重。\nwi(t+1)=wi(t)exp⁡(−αtyiht(xi))w_i^{(t+1)} = w_i^{(t)} \\exp(-\\alpha_t y_i h_t(x_i))\nwi(t+1)​=wi(t)​exp(−αt​yi​ht​(xi​))\n\n其中 yiy_iyi​ 是真实标签（对于二分类通常取 +1 或 -1），ht(xi)h_t(x_i)ht​(xi​) 是预测结果。如果预测正确， yiht(xi)&gt;0y_i h_t(x_i) &gt; 0yi​ht​(xi​)&gt;0，权重减小；如果预测错误，yiht(xi)&lt;0y_i h_t(x_i) &lt; 0yi​ht​(xi​)&lt;0，权重增加。\n\ne.  归一化样本权重: 将 w(t+1)w^{(t+1)}w(t+1) 归一化，使其总和为 1，得到新的样本权重分布 Dt+1D_{t+1}Dt+1​。\n\n\n最终的强分类器由所有弱分类器加权组合而成：\nH(x)=sign(∑t=1Tαtht(x))H(x) = \\text{sign} \\left( \\sum_{t=1}^{T} \\alpha_t h_t(x) \\right)\nH(x)=sign(t=1∑T​αt​ht​(x))\n（对于分类任务，通常是加权投票；对于回归任务，AdaBoost.R2 等有不同策略）\n\n\n\n\n优点:\n\n算法简单，易于实现。\n分类精度高，可以提高弱分类器的性能。\n无需预知弱学习器性能，只需保证性能优于随机猜测。\n\n\n\n缺点:\n\n对异常值和噪声数据比较敏感（因为会给误分类样本过高的权重）。\n训练是串行的，难以并行处理。\n主要用于二分类问题，扩展到多分类需要一些修改。\n\n\n\n2.2.2 梯度提升 (Gradient Boosting Machines, GBM)\n\n\n原理: 通过构建一系列决策树来最小化某个损失函数的负梯度。每一棵树不是直接预测目标变量或残差，而是预测当前模型在训练数据上的负梯度，然后将新树的预测结果（乘以学习率）叠加到现有模型上，沿着损失函数梯度的反方向进行优化。\n\n\n过程 (以回归为例，使用均方误差损失 L(y,F)=12(y−F)2L(y, F) = \\frac{1}{2}(y-F)^2L(y,F)=21​(y−F)2):\n\n\n初始化一个简单的模型，通常是预测使损失函数最小的常数（例如，对于 MSE 是所有样本的平均目标值） f0(x)f_0(x)f0​(x)。\n\n\n迭代 T 次：\na.  对于每个样本 iii，计算当前模型 ft−1(xi)f_{t-1}(x_i)ft−1​(xi​) 在该样本上的损失函数的负梯度。这被称为伪残差 (Pseudo-residuals)。\nrit=−[∂L(yi,F(xi))∂F(xi)]F(x)=ft−1(x)r_{it} = - \\left[ \\frac{\\partial L(y_i, F(x_i))}{\\partial F(x_i)} \\right]_{F(x)=f_{t-1}(x)}\nrit​=−[∂F(xi​)∂L(yi​,F(xi​))​]F(x)=ft−1​(x)​\n对于 MSE 损失 L(y,F)=12(y−F)2L(y, F) = \\frac{1}{2}(y-F)^2L(y,F)=21​(y−F)2，负梯度就是 yi−ft−1(xi)y_i - f_{t-1}(x_i)yi​−ft−1​(xi​)，这恰好是残差。对于其他损失函数，负梯度是残差的一种推广。\nb.  训练一棵新的决策树 ht(x)h_t(x)ht​(x) 来拟合这些伪残差 ritr_{it}rit​。\nc.  找到最佳步长 γt\\gamma_tγt​ 来更新模型（在 GBDT 中通常简化为学习率 η\\etaη）：\nft(x)=ft−1(x)+ηht(x)f_t(x) = f_{t-1}(x) + \\eta h_t(x)\nft​(x)=ft−1​(x)+ηht​(x)\n这里的 η\\etaη 就是学习率 (Learning Rate)。\n\n\n最终模型是所有树的加权求和 (这里权重是学习率)：\nF(x)=f0(x)+∑t=1Tηht(x)F(x) = f_0(x) + \\sum_{t=1}^{T} \\eta h_t(x)\nF(x)=f0​(x)+t=1∑T​ηht​(x)\n\n\n\n\n损失函数 (Loss Function): Gradient Boosting 可以使用各种可微的损失函数，例如回归中的均方误差 (MSE)、平均绝对误差 (MAE)，分类中的对数损失 (Log Loss, 即 scikit-learn 中的 ‘deviance’)。选择合适的损失函数对模型性能至关重要。\n\n\n学习率 (Learning Rate, η\\etaη): 是一个重要的超参数，介于 0 和 1 之间。它缩放了每棵树的贡献。较小的学习率意味着每棵树的贡献较小，需要更多棵树才能达到相同的效果，但这通常能带来更好的泛化能力和鲁棒性。这是一种收缩 (Shrinkage) 技术。学习率和 n_estimators 之间存在一个重要的权衡：较小的学习率通常需要更大的 n_estimators 来弥补。\n\n\n个体学习器: 通常使用回归树，即使是分类问题（因为它们拟合的是伪残差或负梯度，这些是数值）。树的深度通常也比较浅 (e.g., max_depth=3-6)，以保证个体学习器是弱学习器，从而通过 Boosting 降低偏差。\n\n\n随机梯度提升 (Stochastic Gradient Boosting): 通过设置 subsample 参数小于 1.0，在训练每棵树时随机抽取一部分样本（不放回抽样），可以进一步引入随机性，减少方差，提高模型的鲁棒性。这借鉴了 Bagging 的思想。\n\n\n早期停止 (Early Stopping): 由于 Boosting 容易在迭代次数过多时过拟合，通常会使用一个验证集并在验证集性能不再提升时提前停止训练。这通过 validation_fraction, n_iter_no_change, tol 等参数来控制。\n\n\n常见变体:\n\nGBDT (Gradient Boosting Decision Tree): 指使用决策树作为个体学习器的 Gradient Boosting。\nXGBoost (Extreme Gradient Boosting): GBDT 的优化版本，加入了正则化项（树结构和叶子节点权重）、并行处理（在特征和数据级别）、缺失值处理、剪枝策略等改进，速度和性能通常更好。\nLightGBM (Light Gradient Boosting Machine): 微软开发的 GBDT 变体，使用基于梯度的单边采样 (GOSS) 和互斥特征捆绑 (EFB) 等技术，速度非常快，适合处理大规模数据。\nCatBoost: Yandex 开发的 GBDT 变体，对类别特征有特殊处理，并采用有序提升以减少过拟合。\n\n\n\n优点:\n\n预测精度非常高，在许多比赛中表现优异。\n可以灵活选择损失函数。\n通过引入 subsample 和浅树可以增加鲁棒性。\n早期停止是一种有效的正则化手段。\n\n\n\n缺点:\n\n训练过程是串行的，难以完全并行化（树之间有依赖）。\n对超参数比较敏感，需要仔细调参。\n容易过拟合（尤其是树的数量过多、学习率过大或树深度过深时）， Early Stopping 是必要的。\n\n\n\nsklearn.ensemble.GradientBoostingClassifier 参数解释\n\n\n\n参数/属性\n描述\n默认值\n类型/选项\n重要性级别\n\n\n\n\nloss\n需要优化的损失函数。对于分类任务，‘deviance’ (即对数损失 logloss) 更常用，‘exponential’ 对应 AdaBoost 算法。\n‘deviance’\n{‘deviance’, ‘exponential’}, optional\n高\n\n\nlearning_rate\n学习率 (shrinkage)。控制每个弱学习器的贡献大小。较小的值需要更多 n_estimators。在 learning_rate 和 n_estimators 之间存在权衡。\n0.1\nfloat, optional\n高\n\n\nn_estimators\nBoosting 迭代次数，即弱学习器（树）的数量。 Gradient Boosting 通常对过拟合有鲁棒性，但数量过多仍可能过拟合。一个较大的数通常意味着更好的性能，但也增加计算开销。需要配合 learning_rate 和早期停止进行调优。\n100\nint, optional\n高\n\n\nsubsample\n用于训练基学习器的样本采样比例。 小于 1.0 则等同于随机梯度提升 (Stochastic Gradient Boosting)。如果小于 1 则会减少方差，增加偏差，提高鲁棒性。\n1.0\nfloat, optional\n中\n\n\ncriterion\n衡量分裂质量的函数。 这是与基学习器决策树相关的参数。'friedman_mse' 是一个常用的选项，它在均方误差基础上考虑了分裂点的改进。\n‘friedman_mse’\nstring, optional\n中\n\n\nmin_samples_split\n分裂内部节点所需的最小样本数。 可以是整数（绝对数量）或浮点数（比例）。\n2\nint or float, optional\n中\n\n\nmin_samples_leaf\n叶子节点所需的最小样本数。 可以是整数（绝对数量）或浮点数（比例）。有平滑模型的作用，特别是回归任务。\n1\nint or float, optional\n中\n\n\nmin_weight_fraction_leaf\n叶子节点所需的样本总权重的最小分数。\n0.0\nfloat, optional\n低\n\n\nmax_depth\n单个回归树的最大深度。 需要进行调参来获得更好的性能。通常设置一个较小的值（例如 3-6）来构建弱学习器。\n3\ninteger, optional\n高\n\n\nmin_impurity_decrease\n节点分裂的最小不纯度减少量。 如果节点分裂带来的不纯度减少大于或等于该值，节点才会分裂。\n0.0\nfloat, optional\n中\n\n\nmin_impurity_split\n建树过程中早起停止的阈值。 如果节点的不纯度大于该值会继续分裂，否则停止，成为叶子节点。已废弃，后续版本将被 min_impurity_decrease 参数代替。\n1e-7\nfloat, optional (deprecated since 0.19)\nN/A\n\n\ninit\n用来模型初始化的学习器对象或 ‘zero’。 可以提供已 fit 或 predict 的对象。如果是 ‘zero’ 则初始预测为 0。\nNone\nestimator or ‘zero’, optional\n低\n\n\nrandom_state\n随机状态/种子。 控制自助采样 (bootstrap) 和特征选择的随机性，用于结果的可复现性。\nNone\nint, RandomState instance or None, optional\n实用\n\n\nmax_features\n寻找最佳分裂时考虑的特征数量。 控制特征子集的随机性。可以是整数、浮点数、字符串 (‘auto’, ‘sqrt’, ‘log2’) 或 None。‘auto’ 和 ‘sqrt’ 都表示 sqrt(n_features)，‘log2’ 表示 log2(n_features)，None 表示 n_features。\n‘auto’\nint, float, string or None, optional\n中\n\n\nverbose\n控制训练过程的输出详细程度。 0 表示无输出，1-3 表示不同详细程度的输出。\n0\nint, optional\n实用\n\n\nmax_leaf_nodes\n以最优的方式构建树，限制叶子节点的数量。 如果是 None 则对叶子节点的数量没有限制。可以替代 max_depth。\nNone\nint or None, optional\n中\n\n\nwarm_start\n布尔值。 如果设置为 True，将重用上一次调用的解来学习并加入更多的学习器到集成算法中，可以用于增加已训练模型的树数量，无需从头训练。\nFalse\nbool, optional\n实用\n\n\npresort\n在寻找最佳分裂时是否预排序数据。 自动模式对稠密数据进行预排序，稀疏数据不排序。 (已废弃)\n‘auto’\nbool or ‘auto’, optional (deprecated since 0.22)\nN/A\n\n\nvalidation_fraction\n用于早期停止的验证集比例。 如果设置了，模型会在每次迭代后在一个随机划分的验证集上评估性能。\n0.1\nfloat, optional\n高 (用于Early Stopping)\n\n\nn_iter_no_change\n在验证分数不再提高时采用 early stopping 的迭代次数。 如果设置为整数，当连续 n_iter_no_change 次迭代验证分数（在 validation_fraction 定义的验证集上）没有超过 tol 定义的阈值时，则停止训练。默认 None 不考虑 early stopping。\nNone\nint or None, optional\n高 (用于Early Stopping)\n\n\ntol\nearly stopping 的容差 (tolerance)。 在 early stopping 启用时，经过 n_iter_no_change 步迭代的提升都没有超过 tol 时，则停止训练。\n1e-4\nfloat, optional\n高 (用于Early Stopping)\n\n\nfeature_importances_\n[属性] 特征重要性系数。 拟合后可用此属性查看每个特征的重要性得分。基于特征在树中分裂节点时平均带来的不纯度减少计算并归一化。\nN/A\narray of shape = [n_features_]\nN/A\n\n\n\n补充说明：Early Stopping (早期停止)\n在 GBDT 中，n_estimators 是一个非常关键的参数，迭代次数越多，模型复杂度越高，越容易过拟合。为了平衡性能和过拟合，并避免手动尝试大量 n_estimators 值，常常使用早期停止技术。\n启用早期停止需要：\n\n设置 n_iter_no_change 为一个整数。\n可选地设置 validation_fraction 来指定用于评估的验证集比例（如果不设置，会从训练集中自动划分）。\n可选地设置 tol 来指定判断性能是否提高的最小阈值。\n\n当在验证集上的性能连续 n_iter_no_change 次迭代没有提升超过 tol 时，训练会自动停止，而不是跑到 n_estimators 设定的最大值。这是一种有效的正则化手段，也能节省训练时间。\n2.3 Bagging vs. Boosting 总结比较\n\n\n\n特征\nBagging (e.g., Random Forest)\nBoosting (e.g., AdaBoost, GBDT)\n\n\n\n\n个体学习器关系\n并行，无依赖，独立生成\n串行，有依赖，顺序生成\n\n\n主要目标\n降低方差 (Variance)，提高稳定性\n降低偏差 (Bias)，提高精度\n\n\n如何实现\n重新采样数据 (Bootstrap)，组合多个独立模型\n调整样本权重/拟合残差/负梯度，迭代训练关注错误样本/区域的模型\n\n\n个体学习器\n通常使用强学习器（如剪枝较少的深树），但在RF中通过特征随机性增加差异\n通常使用弱学习器（如决策树桩或浅层树）\n\n\n训练速度\n可并行，训练速度快\n串行，训练速度慢（相较于 Bagging）\n\n\n对噪声/异常值\n鲁棒性较好\n敏感 (尤其是 AdaBoost，GBDT 通过 Subsample 可改善)\n\n\n解释性\n较差\n更差\n\n\n典型算法\nBagging Classifier/Regressor, Random Forest\nAdaBoost, Gradient Boosting, XGBoost, LightGBM, CatBoost\n\n\n\n2.4 Scikit-learn 实现示例 (集成学习)\n继续使用 Iris 数据集。\n# 导入所需的集成模型from sklearn.ensemble import BaggingClassifier, RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifierfrom sklearn.model_selection import train_test_split # 如果之前没有导入和分割数据，需要运行这几行from sklearn.metrics import accuracy_score, classification_reportfrom sklearn.datasets import load_iris# 加载数据集 (如果之前没有加载)iris = load_iris()X, y = iris.data, iris.targetfeature_names = iris.feature_namestarget_names = iris.target_names# 分割数据集 (如果之前没有分割)X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)print(&quot;\\n--- 集成学习模型示例 ---&quot;)# --- 8.4.1 Bagging Classifier ---print(&quot;\\nBagging Classifier:&quot;)# BaggingClassifier 默认使用 DecisionTreeClassifier 作为基学习器# n_estimators: 基学习器的数量bagging_clf = BaggingClassifier(n_estimators=100, random_state=42, n_jobs=-1) # n_jobs=-1 使用所有CPU核心并行训练bagging_clf.fit(X_train, y_train)y_pred_bagging = bagging_clf.predict(X_test)accuracy_bagging = accuracy_score(y_test, y_pred_bagging)print(f&quot;准确率: &#123;accuracy_bagging:.4f&#125;&quot;)# print(&quot;分类报告:\\n&quot;, classification_report(y_test, y_pred_bagging, target_names=target_names))# --- 8.4.2 Random Forest Classifier ---print(&quot;\\nRandom Forest Classifier:&quot;)# random_state 用于控制bootstrap采样和特征随机性# n_estimators: 树的数量# max_features: 控制特征随机性 (&#x27;sqrt&#x27;, &#x27;log2&#x27;, int, float)rf_clf = RandomForestClassifier(n_estimators=100, random_state=42, n_jobs=-1)rf_clf.fit(X_train, y_train)y_pred_rf = rf_clf.predict(X_test)accuracy_rf = accuracy_score(y_test, y_pred_rf)print(f&quot;准确率: &#123;accuracy_rf:.4f&#125;&quot;)print(&quot;特征重要性 (Random Forest):&quot;)# 使用 zip 将特征名和重要性分数对应起来打印for name, importance in zip(feature_names, rf_clf.feature_importances_):    print(f&quot;  &#123;name&#125;: &#123;importance:.4f&#125;&quot;)# print(&quot;分类报告:\\n&quot;, classification_report(y_test, y_pred_rf, target_names=target_names))# --- 8.4.3 AdaBoost Classifier ---print(&quot;\\nAdaBoost Classifier:&quot;)# base_estimator: 基学习器 (默认是决策树桩 DecisionTreeClassifier(max_depth=1))# n_estimators: 弱学习器的数量# learning_rate: 控制每个弱学习器的贡献adaboost_clf = AdaBoostClassifier(n_estimators=50, learning_rate=1.0, random_state=42)adaboost_clf.fit(X_train, y_train)y_pred_adaboost = adaboost_clf.predict(X_test)accuracy_adaboost = accuracy_score(y_test, y_pred_adaboost)print(f&quot;准确率: &#123;accuracy_adaboost:.4f&#125;&quot;)# print(&quot;分类报告:\\n&quot;, classification_report(y_test, y_pred_adaboost, target_names=target_names))# --- 8.4.4 Gradient Boosting Classifier ---print(&quot;\\nGradient Boosting Classifier:&quot;)# n_estimators: 提升阶段的数量 (树的数量)# learning_rate: 控制收缩# max_depth: 个体回归树的深度 (通常较浅)# Early Stopping 参数示例：validation_fraction, n_iter_no_change, tolgb_clf = GradientBoostingClassifier(n_estimators=200, # 初始设置多一些树                                    learning_rate=0.1,                                    max_depth=3,                                    random_state=42,                                    subsample=0.8, # 启用随机梯度提升                                    validation_fraction=0.1, # 留出10%用于验证                                    n_iter_no_change=10, # 连续10次迭代验证分数没有提升就停止                                    tol=0.0001,                                    verbose=1 # 打印训练过程信息                                    )gb_clf.fit(X_train, y_train)y_pred_gb = gb_clf.predict(X_test)accuracy_gb = accuracy_score(y_test, y_pred_gb)print(f&quot;准确率: &#123;accuracy_gb:.4f&#125;&quot;)# 训练停止时的实际树数量可以通过 gb_clf.n_estimators_ 属性查看print(f&quot;实际训练的树数量: &#123;gb_clf.n_estimators_&#125;&quot;)print(&quot;特征重要性 (Gradient Boosting):&quot;)# GradientBoostingClassifier 也有 feature_importances_ 属性for name, importance in zip(feature_names, gb_clf.feature_importances_):     print(f&quot;  &#123;name&#125;: &#123;importance:.4f&#125;&quot;)# print(&quot;分类报告:\\n&quot;, classification_report(y_test, y_pred_gb, target_names=target_names))\n2.5 集成方法的调参\n集成方法的性能很大程度上依赖于超参数的选择。一些关键参数包括：\n\nn_estimators: 集成中个体学习器的数量。数量越多通常性能越好，但计算成本也越高，并且可能导致过拟合（特别是 Boosting）。在 Boosting 中常与 learning_rate 和早期停止配合使用。\nlearning_rate (仅 Boosting): 控制每一步的贡献大小（收缩）。较小的学习率需要更多的 n_estimators，但通常能提高模型鲁棒性和泛化能力。\nmax_depth (个体树深度): 控制个体学习器的复杂度。在 Boosting 中通常设置为较小的值 (e.g., 3-6) 来构建弱学习器。在 RF 中通常设置较大或不限制，依赖特征随机性来降低相关性。\nmax_features: 在 RF 或设置 max_features 的 GBDT 中控制特征随机性。\nsubsample (仅 Bagging/RF/GBDT): 控制样本采样比例。小于 1.0 引入样本随机性，减少方差。\n从基学习器继承的参数，如 min_samples_split, min_samples_leaf, min_impurity_decrease 等。\n早期停止相关的参数 (仅 GBDT): n_iter_no_change, validation_fraction, tol。\n\n调参常用技术：网格搜索 (Grid Search)、随机搜索 (Random Search)、贝叶斯优化等，并结合交叉验证 (Cross-Validation) 来评估参数组合的性能。\n3. 小结\n决策树作为一种直观且强大的模型，是集成学习中最常用的基学习器之一。通过 Bagging 和 Boosting 这两大主流集成策略，可以有效地提升决策树模型的性能，降低过拟合（Bagging）或提高精度（Boosting）。随机森林是 Bagging 的杰出代表，通过特征随机性进一步增强了性能。Gradient Boosting (及其变体 XGBoost, LightGBM 等) 是 Boosting 方法的代表，在许多复杂任务中取得了最佳效果，通过拟合负梯度进行迭代优化，并可以通过学习率、Early Stopping 和 Subsample 等技术进一步提升性能和鲁棒性。理解这些方法的原理和它们如何结合决策树，对于解决实际问题至关重要。\n","categories":["机器学习"],"tags":["python","决策树"]}]